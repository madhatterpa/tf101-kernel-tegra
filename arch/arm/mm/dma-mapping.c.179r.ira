
;; Function dma_supported (dma_supported)[0:1293]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 31(l0): point = 0
   Insn 25(l0): point = 2
   Insn 19(l0): point = 5
   Insn 13(l0): point = 8
   Insn 12(l0): point = 10
   Insn 9(l0): point = 13
   Insn 7(l0): point = 15
   Insn 41(l0): point = 17
   Insn 8(l0): point = 19
 a0(r136): [8..15] [3..5]
 a1(r137): [11..17]
Compressing live ranges: from 22 to 6 - 27%
Ranges after the compression:
 a0(r136): [2..4] [0..1]
 a1(r137): [3..5]
+++Allocating 16 bytes for conflict table (uncompressed size 16)
;; a0(r136,l0) conflicts: a1(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r137,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=6, points=6
    allocnos=2, copies=0, conflicts=2, ranges=3

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r136 1r137
    modified regnos: 136 137
    border:
    Pressure: GENERAL_REGS=3
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
      Pushing a1(r137,l0)
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 0
      Popping a1(r137,l0)  -- assign reg 2
Disposition:
    0:r136 l0     0    1:r137 l0     2
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=8, live_throughout: 2, 13, 14, dead_or_set: 3
insn=41, live_throughout: 13, 14, 24, dead_or_set: 2, 137
insn=7, live_throughout: 13, 14, 24, 137, dead_or_set: 136
insn=9, live_throughout: 13, 14, 136, 137, dead_or_set: 
insn=12, live_throughout: 13, 14, 136, dead_or_set: 137
insn=13, live_throughout: 13, 14, 136, dead_or_set: 
insn=18, live_throughout: 13, 14, dead_or_set: 
insn=19, live_throughout: 13, 14, dead_or_set: 136
insn=20, live_throughout: 13, 14, 136, dead_or_set: 
insn=25, live_throughout: 13, 14, dead_or_set: 0, 136
insn=31, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 19
changing reg in insn 7
changing reg in insn 25
changing reg in insn 41
changing reg in insn 12
deleting insn with uid = 41.
deleting insn with uid = 25.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 7 count 10 (  1.7)


dma_supported

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,2u} r1={1d} r2={1d,1u} r3={1d,1u} r12={1d} r13={1d,5u} r14={1d,1u} r24={2d,2u} 
;;    total ref usage 23{11d,12u,0e} in 7{7 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 42 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 42 5 4 2 NOTE_INSN_DELETED)

(note 4 42 8 2 NOTE_INSN_FUNCTION_BEG)

(insn 8 4 7 2 arch/arm/mm/dma-mapping.c:682 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ mask+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 7 8 9 2 arch/arm/mm/dma-mapping.c:682 (set (reg:SI 0 r0 [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 9 7 34 2 arch/arm/mm/dma-mapping.c:682 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 34 9 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 34 13 3 arch/arm/mm/dma-mapping.c:682 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:137 mask ] [137])
            (const_int -2 [0xfffffffffffffffe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 13 12 18 3 arch/arm/mm/dma-mapping.c:682 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%]  (fallthru)
(code_label 18 13 37 4 3 "" [1 uses])

(note 37 18 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 19 37 20 4 arch/arm/mm/dma-mapping.c:682 (set (reg:SI 0 r0 [136])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [50.0%] 
(code_label 20 19 38 5 2 "" [1 uses])

(note 38 20 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 31 38 61 5 arch/arm/mm/dma-mapping.c:682 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 61 31 62 NOTE_INSN_DELETED)

(note 62 61 0 NOTE_INSN_DELETED)


;; Function dma_set_mask (dma_set_mask)[0:1294]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a3 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 56(l0): point = 0
   Insn 54(l0): point = 2
   Insn 32(l0): point = 4
   Insn 55(l0): point = 6
   Insn 43(l0): point = 9
   Insn 37(l0): point = 11
   Insn 24(l0): point = 14
   Insn 16(l0): point = 17
   Insn 15(l0): point = 19
   Insn 12(l0): point = 22
   Insn 11(l0): point = 24
   Insn 9(l0): point = 27
   Insn 8(l0): point = 29
   Insn 53(l0): point = 31
   Insn 52(l0): point = 33
   Insn 7(l0): point = 35
 a0(r134): [17..35] [3..8]
 a1(r139): [17..33] [3..8]
 a2(r133): [12..14] [0..4]
 a3(r140): [17..31] [7..8]
Compressing live ranges: from 38 to 11 - 28%
Ranges after the compression:
 a0(r134): [7..10] [1..4]
 a1(r139): [7..9] [1..4]
 a2(r133): [5..6] [0..2]
 a3(r140): [7..8] [3..4]
+++Allocating 32 bytes for conflict table (uncompressed size 32)
;; a0(r134,l0) conflicts: a2(r133,l0) a1(r139,l0) a3(r140,l0)
;;     total conflict hard regs: 2 3 14
;;     conflict hard regs: 2 3 14
;; a1(r139,l0) conflicts: a2(r133,l0) a0(r134,l0) a3(r140,l0)
;;     total conflict hard regs: 3 14
;;     conflict hard regs: 3 14
;; a2(r133,l0) conflicts: a1(r139,l0) a0(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r140,l0) conflicts: a1(r139,l0) a0(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=8, points=11
    allocnos=4, copies=0, conflicts=0, ranges=8

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r134 1r139 2r133 3r140
    modified regnos: 133 134 139 140
    border:
    Pressure: GENERAL_REGS=4
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 2 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
      Pushing a3(r140,l0)
      Pushing a2(r133,l0)
      Pushing a1(r139,l0)
      Pushing a0(r134,l0)
      Popping a0(r134,l0)  -- assign reg 1
      Popping a1(r139,l0)  -- assign reg 2
      Popping a2(r133,l0)  -- assign reg 0
      Popping a3(r140,l0)  -- assign reg 3
Disposition:
    2:r133 l0     0    0:r134 l0     1    1:r139 l0     2    3:r140 l0     3
New iteration of spill/restore move
+++Costs: overall -12000, reg -12000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 2, 3, 13, 14, dead_or_set: 0, 134
insn=52, live_throughout: 3, 13, 14, 134, dead_or_set: 2, 139
insn=53, live_throughout: 13, 14, 134, 139, dead_or_set: 3, 140
insn=8, live_throughout: 13, 14, 134, 139, 140, dead_or_set: 
insn=9, live_throughout: 13, 14, 134, 139, 140, dead_or_set: 
insn=11, live_throughout: 13, 14, 134, 139, 140, dead_or_set: 
insn=12, live_throughout: 13, 14, 134, 139, 140, dead_or_set: 
insn=15, live_throughout: 13, 14, 134, 139, 140, dead_or_set: 
insn=16, live_throughout: 13, 14, 134, 139, 140, dead_or_set: 
insn=22, live_throughout: 13, 14, dead_or_set: 
insn=24, live_throughout: 13, 14, dead_or_set: 133
insn=33, live_throughout: 13, 14, 133, dead_or_set: 
insn=37, live_throughout: 13, 14, dead_or_set: 0, 133
insn=43, live_throughout: 0, 13, 14, dead_or_set: 
insn=29, live_throughout: 13, 14, 134, 139, 140, dead_or_set: 
insn=55, live_throughout: 13, 14, 134, 139, dead_or_set: 140
insn=32, live_throughout: 13, 14, 134, 139, dead_or_set: 133
insn=54, live_throughout: 13, 14, 133, dead_or_set: 134, 139
insn=56, live_throughout: 13, 14, 133, dead_or_set: 
changing reg in insn 32
changing reg in insn 24
changing reg in insn 37
changing reg in insn 7
changing reg in insn 55
changing reg in insn 54
changing reg in insn 8
changing reg in insn 52
changing reg in insn 54
changing reg in insn 15
changing reg in insn 53
changing reg in insn 55
changing reg in insn 11
Spilling for insn 55.
Spilling for insn 54.

Reloads for insn # 55
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 1 r1 [orig:134 D.24963 ] [134])
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 1 r1 [orig:134 D.24963 ] [134])
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 54
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 1 r1 [orig:134 D.24963 ] [134]) [0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 1 r1 [orig:134 D.24963 ] [134]) [0 S4 A64])
deleting insn with uid = 52.
deleting insn with uid = 53.
deleting insn with uid = 37.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)


dma_set_mask

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,3u} r1={2d,3u} r2={1d,2u} r3={1d,2u} r12={1d} r13={1d,7u} r14={1d,1u} r24={3d,3u} 
;;    total ref usage 34{13d,21u,0e} in 13{13 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 8 2 arch/arm/mm/dma-mapping.c:687 (set (reg/f:SI 1 r1 [orig:134 D.24963 ] [134])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ dev ])
                (const_int 276 [0x114])) [0 <variable>.dma_mask+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 8 7 9 2 arch/arm/mm/dma-mapping.c:687 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 1 r1 [orig:134 D.24963 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 9 8 10 2 arch/arm/mm/dma-mapping.c:687 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8090 [0x1f9a])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [80.9%] 
;; Succ edge  3 [19.1%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [19.1%]  (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 3 arch/arm/mm/dma-mapping.c:679 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 12 11 46 3 arch/arm/mm/dma-mapping.c:679 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 7 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 46 12 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 46 16 4 arch/arm/mm/dma-mapping.c:679 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:139 dma_mask ] [139])
            (const_int -2 [0xfffffffffffffffe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 22 4 arch/arm/mm/dma-mapping.c:679 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 7 5)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
;; Pred edge  2 [80.9%] 
(code_label 22 16 23 5 7 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 33 5 arch/arm/mm/dma-mapping.c:688 (set (reg:SI 0 r0 [orig:133 D.24966 ] [133])
        (const_int -5 [0xfffffffffffffffb])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -5 [0xfffffffffffffffb])
        (nil)))
;; End of basic block 5 -> ( 6)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 33 24 25 6 10 "" [1 uses])

(note 25 33 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 43 25 29 6 arch/arm/mm/dma-mapping.c:695 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [50.0%] 
(code_label 29 43 30 7 8 "" [2 uses])

(note 30 29 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 55 30 32 7 arch/arm/mm/dma-mapping.c:691 (set (mem:SI (plus:SI (reg/f:SI 1 r1 [orig:134 D.24963 ] [134])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 32 55 54 7 arch/arm/mm/dma-mapping.c:694 (set (reg:SI 0 r0 [orig:133 D.24966 ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 54 32 56 7 arch/arm/mm/dma-mapping.c:691 (set (mem:SI (reg/f:SI 1 r1 [orig:134 D.24963 ] [134]) [0 S4 A64])
        (reg:SI 2 r2 [orig:139 dma_mask ] [139])) 167 {*arm_movsi_insn} (nil))

(jump_insn 56 54 57 7 arch/arm/mm/dma-mapping.c:694 (set (pc)
        (label_ref 33)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 6)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%] 

(barrier 57 56 58)

(note 58 57 0 NOTE_INSN_DELETED)


;; Function dma_debug_do_init (dma_debug_do_init)[0:1295] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 15(l0): point = 0
   Insn 9(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=2
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=9, live_throughout: 13, 14, dead_or_set: 0
insn=15, live_throughout: 0, 13, 14, dead_or_set: 


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


dma_debug_do_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 13{8d,5u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(note 5 2 9 2 NOTE_INSN_DELETED)

(insn 9 5 15 2 arch/arm/mm/dma-mapping.c:704 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 15 9 19 2 arch/arm/mm/dma-mapping.c:704 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 19 15 20 NOTE_INSN_DELETED)

(note 20 19 0 NOTE_INSN_DELETED)


;; Function consistent_init (consistent_init)[0:1274] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 26 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 36 (  2.6)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a8 (r198,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r195,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r188,l1) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r186,l1) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r184,l1) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r183,l1) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r182,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r180,l1) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r177,l1) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r175,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r170,l1) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r168,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r167,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r166,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a7(r195,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r198,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r168,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r186,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r188,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r183,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a13(r184,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r177,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a15(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a16(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r182,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r180,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r198: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS

  a0(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a7(r195,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r198,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r168,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r186,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r188,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r183,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a13(r184,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r177,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a15(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a16(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r182,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r180,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 126(l0): point = 0
   Insn 120(l0): point = 2
   Insn 113(l0): point = 5
   Insn 139(l0): point = 8
   Insn 100(l0): point = 10
   Insn 99(l0): point = 12
   Insn 98(l0): point = 14
   Insn 97(l0): point = 16
   Insn 137(l0): point = 19
   Insn 54(l0): point = 21
   Insn 53(l0): point = 23
   Insn 52(l0): point = 25
   Insn 51(l0): point = 27
   Insn 39(l0): point = 30
   Insn 105(l0): point = 32
   Insn 38(l0): point = 34
   Insn 41(l0): point = 36
   Insn 111(l1): point = 39
   Insn 108(l1): point = 41
   Insn 106(l1): point = 43
   Insn 110(l1): point = 45
   Insn 92(l1): point = 48
   Insn 91(l1): point = 50
   Insn 85(l1): point = 52
   Insn 142(l1): point = 54
   Insn 141(l1): point = 56
   Insn 107(l1): point = 58
   Insn 88(l1): point = 60
   Insn 82(l1): point = 62
   Insn 79(l1): point = 65
   Insn 78(l1): point = 67
   Insn 76(l1): point = 69
   Insn 75(l1): point = 71
   Insn 74(l1): point = 73
   Insn 72(l1): point = 76
   Insn 71(l1): point = 78
   Insn 70(l1): point = 80
   Insn 67(l1): point = 83
   Insn 135(l1): point = 85
   Insn 134(l1): point = 87
   Insn 62(l1): point = 90
   Insn 61(l1): point = 92
   Insn 60(l1): point = 94
   Insn 47(l1): point = 97
   Insn 46(l1): point = 99
   Insn 42(l1): point = 101
   Insn 44(l1): point = 103
 a0(r171): [19..21] [8..10] [3..5]
 a1(r167): [30..30]
 a2(r198): [30..32]
 a3(r166): [30..34]
 a4(r195): [30..36]
 a5(r166): [39..105]
 a6(r167): [39..105]
 a7(r195): [39..105]
 a8(r198): [39..105]
 a9(r168): [44..50]
 a10(r186): [51..52]
 a11(r188): [51..60]
 a12(r183): [53..56]
 a13(r184): [57..62]
 a14(r177): [63..103]
 a15(r175): [63..101]
 a16(r170): [74..99]
 a17(r182): [79..80]
 a18(r180): [93..94]
 Rebuilding regno allocno list for 188
 Rebuilding regno allocno list for 186
 Rebuilding regno allocno list for 184
 Rebuilding regno allocno list for 183
 Rebuilding regno allocno list for 182
 Rebuilding regno allocno list for 180
 Rebuilding regno allocno list for 177
 Rebuilding regno allocno list for 175
 Rebuilding regno allocno list for 170
 Rebuilding regno allocno list for 168
Compressing live ranges: from 106 to 30 - 28%
Ranges after the compression:
 a0(r171): [4..5] [2..3] [0..1]
 a1(r167): [10..29] [6..6]
 a2(r198): [10..29] [6..7]
 a3(r166): [10..29] [6..8]
 a4(r195): [10..29] [6..9]
 a9(r168): [11..12]
 a10(r186): [13..14]
 a11(r188): [13..18]
 a12(r183): [15..16]
 a13(r184): [17..19]
 a14(r177): [20..28]
 a15(r175): [20..27]
 a16(r170): [21..26]
 a17(r182): [22..23]
 a18(r180): [24..25]
+++Allocating 112 bytes for conflict table (uncompressed size 152)
;; a0(r171,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r167,l0) conflicts: a2(r198,l0) a3(r166,l0) a4(r195,l0) a9(r168,l0) a10(r186,l0) a11(r188,l0) a12(r183,l0) a13(r184,l0) a15(r175,l0) a14(r177,l0) a16(r170,l0) a17(r182,l0) a18(r180,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r198,l0) conflicts: a1(r167,l0) a3(r166,l0) a4(r195,l0) a9(r168,l0) a10(r186,l0) a11(r188,l0) a12(r183,l0) a13(r184,l0) a15(r175,l0) a14(r177,l0) a16(r170,l0) a17(r182,l0) a18(r180,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r166,l0) conflicts: a1(r167,l0) a2(r198,l0) a4(r195,l0) a9(r168,l0) a10(r186,l0) a11(r188,l0) a12(r183,l0) a13(r184,l0) a15(r175,l0) a14(r177,l0) a16(r170,l0) a17(r182,l0) a18(r180,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r195,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a9(r168,l0) a10(r186,l0) a11(r188,l0) a12(r183,l0) a13(r184,l0) a15(r175,l0) a14(r177,l0) a16(r170,l0) a17(r182,l0) a18(r180,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a9(r168,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r186,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0) a11(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r188,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0) a10(r186,l0) a12(r183,l0) a13(r184,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r183,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0) a11(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r184,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0) a11(r188,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r177,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0) a15(r175,l0) a16(r170,l0) a17(r182,l0) a18(r180,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a15(r175,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0) a14(r177,l0) a16(r170,l0) a17(r182,l0) a18(r180,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a16(r170,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0) a15(r175,l0) a14(r177,l0) a17(r182,l0) a18(r180,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a17(r182,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0) a15(r175,l0) a14(r177,l0) a16(r170,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r180,l0) conflicts: a1(r167,l0) a2(r198,l0) a3(r166,l0) a4(r195,l0) a15(r175,l0) a14(r177,l0) a16(r170,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a12(r183)<->a13(r184)@125:shuffle
  cp1:a10(r186)<->a12(r183)@125:shuffle
  cp2:a9(r168)<->a10(r186)@125:shuffle
  cp3:a9(r168)<->a11(r188)@125:shuffle
  regions=2, blocks=14, points=30
    allocnos=19, copies=4, conflicts=0, ranges=21

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 13 12 10 4 11 9 8 7 6 5 3 2
    all: 0r171 1r167 2r198 3r166 4r195 9r168 10r186 11r188 12r183 13r184 14r177 15r175 16r170 17r182 18r180
    modified regnos: 166 167 168 170 171 175 177 180 182 183 184 186 188 195 198
    border:
    Pressure: GENERAL_REGS=10
    Reg 171 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 3 regs less
    Reg 198 of GENERAL_REGS has 3 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 195 of GENERAL_REGS has 3 regs less
    Reg 168 of GENERAL_REGS has 1 regs less
    Reg 186 of GENERAL_REGS has 1 regs less
    Reg 188 of GENERAL_REGS has 1 regs less
    Reg 183 of GENERAL_REGS has 1 regs less
    Reg 184 of GENERAL_REGS has 1 regs less
    Reg 177 of GENERAL_REGS has 3 regs less
    Reg 175 of GENERAL_REGS has 3 regs less
    Reg 170 of GENERAL_REGS has 3 regs less
    Reg 182 of GENERAL_REGS has 1 regs less
    Reg 180 of GENERAL_REGS has 1 regs less
      Pushing a18(r180,l0)
      Pushing a17(r182,l0)
      Pushing a13(r184,l0)
      Pushing a9(r168,l0)
      Pushing a11(r188,l0)
      Pushing a10(r186,l0)
      Pushing a12(r183,l0)
      Pushing a0(r171,l0)
      Pushing a16(r170,l0)
      Pushing a4(r195,l0)
      Pushing a2(r198,l0)
      Pushing a3(r166,l0)
      Pushing a15(r175,l0)
      Pushing a14(r177,l0)
      Pushing a1(r167,l0)
      Popping a1(r167,l0)  -- assign reg 4
      Popping a14(r177,l0)  -- assign reg 5
      Popping a15(r175,l0)  -- assign reg 6
      Popping a3(r166,l0)  -- assign reg 7
      Popping a2(r198,l0)  -- assign reg 8
      Popping a4(r195,l0)  -- assign reg 10
      Popping a16(r170,l0)  -- assign reg 9
      Popping a0(r171,l0)  -- assign reg 0
      Popping a12(r183,l0)  -- assign reg 3
      Popping a10(r186,l0)  -- assign reg 3
      Popping a11(r188,l0)  -- assign reg 2
      Popping a9(r168,l0)  -- assign reg 3
      Popping a13(r184,l0)  -- assign reg 3
      Popping a17(r182,l0)  -- assign reg 3
      Popping a18(r180,l0)  -- assign reg 3
Disposition:
    3:r166 l0     7    1:r167 l0     4    9:r168 l0     3   16:r170 l0     9
    0:r171 l0     0   15:r175 l0     6   14:r177 l0     5   18:r180 l0     3
   17:r182 l0     3   12:r183 l0     3   13:r184 l0     3   10:r186 l0     3
   11:r188 l0     2    4:r195 l0    10    2:r198 l0     8
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=41, live_throughout: 13, 14, dead_or_set: 195
insn=38, live_throughout: 13, 14, 195, dead_or_set: 166
insn=105, live_throughout: 13, 14, 166, 195, dead_or_set: 198
insn=39, live_throughout: 13, 14, 166, 195, 198, dead_or_set: 167
insn=109, live_throughout: 13, 14, 166, 167, 195, 198, dead_or_set: 
insn=44, live_throughout: 13, 14, 166, 167, 195, 198, dead_or_set: 177
insn=42, live_throughout: 13, 14, 166, 167, 177, 195, 198, dead_or_set: 175
insn=46, live_throughout: 13, 14, 166, 167, 175, 177, 195, 198, dead_or_set: 170
insn=47, live_throughout: 13, 14, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 
insn=51, live_throughout: 13, dead_or_set: 0
insn=52, live_throughout: 0, 13, dead_or_set: 1
insn=53, live_throughout: 13, dead_or_set: 0, 1, 14
insn=54, live_throughout: 13, 14, dead_or_set: 171
insn=137, live_throughout: 13, 14, 171, dead_or_set: 
insn=57, live_throughout: 13, 14, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 
insn=60, live_throughout: 13, 14, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 180
insn=61, live_throughout: 13, 14, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 180
insn=62, live_throughout: 13, 14, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 
insn=134, live_throughout: 13, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 0
insn=135, live_throughout: 0, 13, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 1
insn=67, live_throughout: 13, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 0, 1, 14
insn=68, live_throughout: 13, 14, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 
insn=70, live_throughout: 13, 14, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 182
insn=71, live_throughout: 13, 14, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 182
insn=72, live_throughout: 13, 14, 166, 167, 170, 175, 177, 195, 198, dead_or_set: 
insn=74, live_throughout: 13, 166, 167, 175, 177, 195, 198, dead_or_set: 0, 170
insn=75, live_throughout: 0, 13, 166, 167, 175, 177, 195, 198, dead_or_set: 1
insn=76, live_throughout: 13, 166, 167, 175, 177, 195, 198, dead_or_set: 0, 1, 14
insn=78, live_throughout: 13, 14, 166, 167, 175, 177, 195, 198, dead_or_set: 0
insn=79, live_throughout: 13, 14, 166, 167, 175, 177, 195, 198, dead_or_set: 
insn=80, live_throughout: 13, 14, 166, 167, 175, 177, 195, 198, dead_or_set: 
insn=82, live_throughout: 13, 14, 166, 167, 195, 198, dead_or_set: 175, 177, 184
insn=88, live_throughout: 13, 14, 166, 167, 184, 195, 198, dead_or_set: 188
insn=107, live_throughout: 13, 14, 166, 184, 188, 195, 198, dead_or_set: 167
insn=141, live_throughout: 13, 14, 166, 167, 188, 195, 198, dead_or_set: 183, 184
insn=142, live_throughout: 13, 14, 166, 167, 188, 195, 198, dead_or_set: 183
insn=85, live_throughout: 13, 14, 166, 167, 188, 195, 198, dead_or_set: 183, 186
insn=91, live_throughout: 13, 14, 166, 167, 195, 198, dead_or_set: 168, 186, 188
insn=92, live_throughout: 13, 14, 166, 167, 168, 195, 198, dead_or_set: 
insn=93, live_throughout: 13, dead_or_set: 
insn=97, live_throughout: 13, dead_or_set: 0
insn=98, live_throughout: 0, 13, dead_or_set: 1
insn=99, live_throughout: 13, dead_or_set: 0, 1, 14
insn=100, live_throughout: 13, 14, dead_or_set: 171
insn=139, live_throughout: 13, 14, 171, dead_or_set: 
insn=103, live_throughout: 13, 14, 166, 167, 168, 195, 198, dead_or_set: 
insn=110, live_throughout: 13, 14, 166, 167, 168, 195, 198, dead_or_set: 
insn=106, live_throughout: 13, 14, 24, 166, 167, 195, 198, dead_or_set: 168
insn=108, live_throughout: 13, 14, 24, 167, 195, 198, dead_or_set: 166
insn=111, live_throughout: 13, 14, 166, 167, 195, 198, dead_or_set: 
insn=113, live_throughout: 13, 14, dead_or_set: 171
insn=114, live_throughout: 13, 14, 171, dead_or_set: 
insn=120, live_throughout: 13, 14, dead_or_set: 0, 171
insn=126, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 180: (insn_list:REG_DEP_TRUE 60 (nil))
init_insns for 182: (insn_list:REG_DEP_TRUE 70 (nil))
init_insns for 195: (insn_list:REG_DEP_TRUE 41 (nil))
init_insns for 198: (insn_list:REG_DEP_TRUE 105 (nil))
changing reg in insn 108
changing reg in insn 38
changing reg in insn 106
changing reg in insn 108
changing reg in insn 107
changing reg in insn 39
changing reg in insn 88
changing reg in insn 110
changing reg in insn 107
changing reg in insn 75
changing reg in insn 42
changing reg in insn 91
changing reg in insn 106
changing reg in insn 46
changing reg in insn 74
changing reg in insn 113
changing reg in insn 100
changing reg in insn 54
changing reg in insn 120
changing reg in insn 42
changing reg in insn 46
changing reg in insn 46
changing reg in insn 82
changing reg in insn 70
changing reg in insn 60
changing reg in insn 70
changing reg in insn 60
changing reg in insn 44
changing reg in insn 46
changing reg in insn 46
changing reg in insn 82
changing reg in insn 70
changing reg in insn 60
changing reg in insn 70
changing reg in insn 60
changing reg in insn 60
changing reg in insn 61
changing reg in insn 70
changing reg in insn 71
changing reg in insn 142
changing reg in insn 141
changing reg in insn 142
changing reg in insn 85
changing reg in insn 82
changing reg in insn 141
changing reg in insn 85
changing reg in insn 91
changing reg in insn 91
changing reg in insn 88
changing reg in insn 91
changing reg in insn 91
changing reg in insn 41
changing reg in insn 44
changing reg in insn 105
changing reg in insn 106
Spilling for insn 106.

Reloads for insn # 106
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/f:SI 8 r8 [198])
                                                        (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])) [0 consistent_pte S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/f:SI 8 r8 [198])
                                                        (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])) [0 consistent_pte S4 A32])
deleting insn with uid = 120.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 67.
verify found no changes in insn with uid = 76.
verify found no changes in insn with uid = 99.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 26 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 36 (  2.6)


consistent_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={12d,7u} r1={9d,4u} r2={6d,2u} r3={12d,8u} r4={2d,5u} r5={1d,5u,2d} r6={1d,5u,2d} r7={2d,2u} r8={1d,1u} r9={1d,1u} r10={1d,1u} r12={5d} r13={1d,17u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={10d,6u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 578{509d,65u,4e} in 46{42 regular + 4 call} insns.
(note 34 0 36 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 4 [r4] 7 [r7] 8 [r8] 10 [sl]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 7 [r7] 8 [r8] 10 [sl]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 36 34 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 35 36 41 2 NOTE_INSN_FUNCTION_BEG)

(insn 41 35 38 2 arch/arm/mm/dma-mapping.c:161 (set (reg/f:SI 10 sl [195])
        (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x113e8c00 init_mm>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x113e8c00 init_mm>)
        (nil)))

(insn 38 41 105 2 arch/arm/mm/dma-mapping.c:151 (set (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 105 38 39 2 arch/arm/mm/dma-mapping.c:185 (set (reg/f:SI 8 r8 [198])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 39 105 109 2 arch/arm/mm/dma-mapping.c:158 (set (reg/v:SI 4 r4 [orig:167 base ] [167])
        (const_int -16777216 [0xffffffffff000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -16777216 [0xffffffffff000000])
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 11) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 9 [r9] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 6 [r6] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  11 [85.7%]  (dfs_back)
(code_label 109 39 40 3 21 "" [1 uses])

(note 40 109 43 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 43 40 45 3 NOTE_INSN_DELETED)

(note 45 43 44 3 NOTE_INSN_DELETED)

(insn 44 45 42 3 arch/arm/mm/dma-mapping.c:161 (set (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [195])
                (const_int 36 [0x24])) [0 init_mm.pgd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x113e8c00 init_mm>)
                    (const_int 36 [0x24]))) [0 init_mm.pgd+0 S4 A32])
        (nil)))

(insn 42 44 46 3 arch/arm/mm/dma-mapping.c:161 (set (reg:SI 6 r6 [175])
        (lshiftrt:SI (reg/v:SI 4 r4 [orig:167 base ] [167])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn 46 42 47 3 arch/arm/mm/dma-mapping.c:164 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (mult:SI (reg:SI 6 r6 [175])
                            (const_int 8 [0x8]))
                        (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177]))
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
                (plus:SI (mult:SI (reg:SI 6 r6 [175])
                        (const_int 8 [0x8]))
                    (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])))
        ]) 271 {*arith_shiftsi_compare0} (nil))

(jump_insn 47 46 48 3 arch/arm/mm/dma-mapping.c:164 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 57)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  4 [0.0%]  (fallthru,loop_exit)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru,loop_exit)
(note 48 47 51 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 51 48 52 4 arch/arm/mm/dma-mapping.c:165 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114c1c90>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114c1c90>)
        (nil)))

(insn 52 51 53 4 arch/arm/mm/dma-mapping.c:165 (set (reg:SI 1 r1)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 53 52 54 4 arch/arm/mm/dma-mapping.c:165 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 54 53 137 4 arch/arm/mm/dma-mapping.c:166 (set (reg/v:SI 0 r0 [orig:171 ret ] [171])
        (const_int -12 [0xfffffffffffffff4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -12 [0xfffffffffffffff4])
        (nil)))

(jump_insn 137 54 138 4 arch/arm/mm/dma-mapping.c:167 (set (pc)
        (label_ref 114)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 13)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 138 137 57)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 57 138 58 5 15 "" [1 uses])

(note 58 57 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 60 58 61 5 arch/arm/mm/dma-mapping.c:176 (set (reg:SI 3 r3 [180])
        (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])
        (nil)))

(insn 61 60 62 5 arch/arm/mm/dma-mapping.c:176 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [180])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 62 61 63 5 arch/arm/mm/dma-mapping.c:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 63 62 134 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 134 63 135 6 arch/arm/mm/dma-mapping.c:176 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (nil))

(insn 135 134 67 6 arch/arm/mm/dma-mapping.c:176 discrim 1 (set (reg:SI 1 r1)
        (const_int 176 [0xb0])) 167 {*arm_movsi_insn} (nil))

(call_insn 67 135 68 6 arch/arm/mm/dma-mapping.c:176 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a67280 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 68 67 69 7 17 "" [1 uses])

(note 69 68 70 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 71 7 arch/arm/mm/dma-mapping.c:178 (set (reg:SI 3 r3 [182])
        (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])
        (nil)))

(insn 71 70 72 7 arch/arm/mm/dma-mapping.c:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [182])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 72 71 73 7 arch/arm/mm/dma-mapping.c:178 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 
;; Succ edge  8 [0.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [0.0%]  (fallthru)
(note 73 72 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 77 73 74 8 NOTE_INSN_DELETED)

(insn 74 77 75 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])) 167 {*arm_movsi_insn} (nil))

(insn 75 74 76 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:167 base ] [167])) 167 {*arm_movsi_insn} (nil))

(call_insn 76 75 78 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__pte_alloc_kernel") [flags 0x41] <function_decl 0x10f97d80 __pte_alloc_kernel>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 78 76 79 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 79 78 80 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%]  (loop_exit)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%] 
;; Pred edge  8 [50.0%]  (fallthru)
(code_label 80 79 81 9 18 "" [1 uses])

(note 81 80 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 83 81 86 9 NOTE_INSN_DELETED)

(note 86 83 87 9 NOTE_INSN_DELETED)

(note 87 86 89 9 NOTE_INSN_DELETED)

(note 89 87 90 9 NOTE_INSN_DELETED)

(note 90 89 82 9 NOTE_INSN_DELETED)

(insn 82 90 88 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 3 r3 [184])
        (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 88 82 107 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 2 r2 [188])
        (zero_extract:SI (reg/v:SI 4 r4 [orig:167 base ] [167])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (nil))

(insn 107 88 141 9 arch/arm/mm/dma-mapping.c:186 (set (reg/v:SI 4 r4 [orig:167 base ] [167])
        (plus:SI (reg/v:SI 4 r4 [orig:167 base ] [167])
            (const_int 2097152 [0x200000]))) 4 {*arm_addsi3} (nil))

(insn 141 107 142 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 3 r3 [183])
        (and:SI (reg:SI 3 r3 [184])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 142 141 85 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 3 r3 [183])
        (and:SI (reg:SI 3 r3 [183])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 85 142 91 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 3 r3 [186])
        (plus:SI (reg:SI 3 r3 [183])
            (const_int -1073741824 [0xffffffffc0000000]))) 4 {*arm_addsi3} (nil))

(insn 91 85 92 9 arch/arm/mm/dma-mapping.c:179 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (mult:SI (reg:SI 2 r2 [188])
                            (const_int 4 [0x4]))
                        (reg:SI 3 r3 [186]))
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 3 r3 [orig:168 pte ] [168])
                (plus:SI (mult:SI (reg:SI 2 r2 [188])
                        (const_int 4 [0x4]))
                    (reg:SI 3 r3 [186])))
        ]) 271 {*arith_shiftsi_compare0} (nil))

(jump_insn 92 91 93 9 arch/arm/mm/dma-mapping.c:179 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9998 [0x270e])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  10 [0.0%]  (fallthru,loop_exit)
;; Succ edge  11 [100.0%] 

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%]  (fallthru,loop_exit)
;; Pred edge  8 [50.0%]  (loop_exit)
(code_label 93 92 94 10 19 "" [1 uses])

(note 94 93 97 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 97 94 98 10 arch/arm/mm/dma-mapping.c:180 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1152dba0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1152dba0>)
        (nil)))

(insn 98 97 99 10 arch/arm/mm/dma-mapping.c:180 (set (reg:SI 1 r1)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 99 98 100 10 arch/arm/mm/dma-mapping.c:180 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 100 99 139 10 arch/arm/mm/dma-mapping.c:181 (set (reg/v:SI 0 r0 [orig:171 ret ] [171])
        (const_int -12 [0xfffffffffffffff4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -12 [0xfffffffffffffff4])
        (nil)))

(jump_insn 139 100 140 10 arch/arm/mm/dma-mapping.c:182 (set (pc)
        (label_ref 114)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 13)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 140 139 103)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%] 
(code_label 103 140 104 11 20 "" [1 uses])

(note 104 103 110 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 110 104 106 11 arch/arm/mm/dma-mapping.c:187 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:167 base ] [167])
            (const_int -2097152 [0xffffffffffe00000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 106 110 108 11 arch/arm/mm/dma-mapping.c:185 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 8 r8 [198])
                (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])) [0 consistent_pte S4 A32])
        (reg/v/f:SI 3 r3 [orig:168 pte ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 108 106 111 11 arch/arm/mm/dma-mapping.c:186 (set (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])
        (plus:SI (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 111 108 112 11 arch/arm/mm/dma-mapping.c:187 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8571 [0x217b])
        (nil)))
;; End of basic block 11 -> ( 3 12)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  3 [85.7%]  (dfs_back)
;; Succ edge  12 [14.3%]  (fallthru,loop_exit)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  11 [14.3%]  (fallthru,loop_exit)
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 113 112 114 12 arch/arm/mm/dma-mapping.c:152 (set (reg/v:SI 0 r0 [orig:171 ret ] [171])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 4 12 10) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 114 113 115 13 16 "" [2 uses])

(note 115 114 126 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 126 115 143 13 arch/arm/mm/dma-mapping.c:190 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 13 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 143 126 144 NOTE_INSN_DELETED)

(note 144 143 0 NOTE_INSN_DELETED)


;; Function ___dma_single_dev_to_cpu (___dma_single_dev_to_cpu)[0:1285]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a4 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r148: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a1(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 85(l0): point = 0
   Insn 65(l0): point = 3
   Insn 64(l0): point = 5
   Insn 82(l0): point = 8
   Insn 56(l0): point = 11
   Insn 55(l0): point = 13
   Insn 54(l0): point = 15
   Insn 53(l0): point = 17
   Insn 48(l0): point = 20
   Insn 43(l0): point = 22
   Insn 47(l0): point = 24
   Insn 46(l0): point = 26
   Insn 45(l0): point = 28
   Insn 40(l0): point = 31
   Insn 39(l0): point = 33
   Insn 38(l0): point = 35
   Insn 36(l0): point = 37
   Insn 34(l0): point = 40
   Insn 33(l0): point = 42
   Insn 32(l0): point = 44
   Insn 31(l0): point = 46
   Insn 28(l0): point = 49
   Insn 27(l0): point = 51
   Insn 26(l0): point = 53
   Insn 21(l0): point = 56
   Insn 20(l0): point = 58
   Insn 78(l0): point = 61
   Insn 15(l0): point = 64
   Insn 14(l0): point = 66
   Insn 13(l0): point = 68
   Insn 12(l0): point = 70
   Insn 10(l0): point = 73
   Insn 4(l0): point = 75
   Insn 9(l0): point = 77
   Insn 3(l0): point = 79
   Insn 2(l0): point = 81
 a0(r138): [64..81] [56..60] [29..48] [11..19] [0..7]
 a1(r139): [64..79] [56..60] [27..48] [11..19] [0..7]
 a2(r140): [64..75] [56..60] [25..48] [11..19] [0..7]
 a3(r135): [59..60] [11..15]
 a4(r148): [16..17]
 a5(r136): [64..68] [59..60] [11..19]
 a6(r146): [21..22]
 a7(r133): [32..44]
 a8(r134): [36..37]
 a9(r144): [45..46]
 a10(r141): [69..70]
Compressing live ranges: from 84 to 29 - 34%
Ranges after the compression:
 a0(r138): [22..28] [19..21] [11..18] [2..6] [0..1]
 a1(r139): [22..27] [19..21] [10..18] [2..6] [0..1]
 a2(r140): [22..26] [19..21] [9..18] [2..6] [0..1]
 a3(r135): [20..21] [2..3]
 a4(r148): [4..5]
 a5(r136): [22..23] [20..21] [2..6]
 a6(r146): [7..8]
 a7(r133): [12..15]
 a8(r134): [13..14]
 a9(r144): [16..17]
 a10(r141): [24..25]
+++Allocating 88 bytes for conflict table (uncompressed size 88)
;; a0(r138,l0) conflicts: a2(r140,l0) a1(r139,l0) a3(r135,l0) a5(r136,l0) a4(r148,l0) a7(r133,l0) a8(r134,l0) a9(r144,l0) a10(r141,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r139,l0) conflicts: a2(r140,l0) a0(r138,l0) a3(r135,l0) a5(r136,l0) a4(r148,l0) a7(r133,l0) a8(r134,l0) a9(r144,l0) a10(r141,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r140,l0) conflicts: a1(r139,l0) a0(r138,l0) a3(r135,l0) a5(r136,l0) a4(r148,l0) a7(r133,l0) a8(r134,l0) a9(r144,l0) a10(r141,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r135,l0) conflicts: a2(r140,l0) a1(r139,l0) a0(r138,l0) a5(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a4(r148,l0) conflicts: a2(r140,l0) a1(r139,l0) a0(r138,l0) a5(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r136,l0) conflicts: a2(r140,l0) a1(r139,l0) a0(r138,l0) a3(r135,l0) a4(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r146,l0) conflicts:
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a7(r133,l0) conflicts: a2(r140,l0) a1(r139,l0) a0(r138,l0) a8(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r134,l0) conflicts: a2(r140,l0) a1(r139,l0) a0(r138,l0) a7(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r144,l0) conflicts: a2(r140,l0) a1(r139,l0) a0(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r141,l0) conflicts: a2(r140,l0) a1(r139,l0) a0(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a3(r135)<->a4(r148)@125:shuffle
  regions=1, blocks=14, points=29
    allocnos=11, copies=1, conflicts=0, ranges=26

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r138 1r139 2r140 3r135 4r148 5r136 6r146 7r133 8r134 9r144 10r141
    modified regnos: 133 134 135 136 138 139 140 141 144 146 148
    border:
    Pressure: GENERAL_REGS=7
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 3 regs less
      Pushing a10(r141,l0)
      Pushing a9(r144,l0)
      Pushing a8(r134,l0)
      Pushing a4(r148,l0)
      Pushing a5(r136,l0)
      Pushing a3(r135,l0)
      Pushing a7(r133,l0)
      Pushing a2(r140,l0)
      Pushing a6(r146,l0)
      Pushing a1(r139,l0)
      Pushing a0(r138,l0)
      Popping a0(r138,l0)  -- assign reg 4
      Popping a1(r139,l0)  -- assign reg 5
      Popping a6(r146,l0)  -- assign reg 3
      Popping a2(r140,l0)  -- assign reg 6
      Popping a7(r133,l0)  -- assign reg 3
      Popping a3(r135,l0)  -- assign reg 3
      Popping a5(r136,l0)  -- assign reg 2
      Popping a4(r148,l0)  -- assign reg 3
      Popping a8(r134,l0)  -- assign reg 0
      Popping a9(r144,l0)  -- assign reg 3
      Popping a10(r141,l0)  -- assign reg 3
Disposition:
    7:r133 l0     3    8:r134 l0     0    3:r135 l0     3    5:r136 l0     2
    0:r138 l0     4    1:r139 l0     5    2:r140 l0     6   10:r141 l0     3
    9:r144 l0     3    6:r146 l0     3    4:r148 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 13, dead_or_set: 0, 138
insn=3, live_throughout: 2, 13, 138, dead_or_set: 1, 139
insn=9, live_throughout: 2, 13, 138, 139, dead_or_set: 
insn=4, live_throughout: 13, 24, 138, 139, dead_or_set: 2, 140
insn=10, live_throughout: 13, 138, 139, 140, dead_or_set: 
insn=12, live_throughout: 13, 138, 139, 140, dead_or_set: 141
insn=13, live_throughout: 13, 138, 139, 140, dead_or_set: 136, 141
insn=14, live_throughout: 13, 136, 138, 139, 140, dead_or_set: 
insn=15, live_throughout: 13, 136, 138, 139, 140, dead_or_set: 
insn=78, live_throughout: 13, dead_or_set: 
insn=80, live_throughout: 13, 135, 136, 138, 139, 140, dead_or_set: 
insn=20, live_throughout: 13, 138, 139, 140, dead_or_set: 135, 136
insn=21, live_throughout: 13, 138, 139, 140, dead_or_set: 
insn=22, live_throughout: 13, dead_or_set: 
insn=26, live_throughout: 13, dead_or_set: 0
insn=27, live_throughout: 0, 13, dead_or_set: 1
insn=28, live_throughout: 13, dead_or_set: 0, 1, 14
insn=63, live_throughout: 13, 138, 139, 140, dead_or_set: 
insn=31, live_throughout: 13, 138, 139, 140, dead_or_set: 144
insn=32, live_throughout: 13, 138, 139, 140, dead_or_set: 133, 144
insn=33, live_throughout: 13, 133, 138, 139, 140, dead_or_set: 
insn=34, live_throughout: 13, 133, 138, 139, 140, dead_or_set: 
insn=36, live_throughout: 13, 133, 138, 139, 140, dead_or_set: 134
insn=38, live_throughout: 13, 133, 138, 139, 140, dead_or_set: 0, 134
insn=39, live_throughout: 0, 13, 133, 138, 139, 140, dead_or_set: 1
insn=40, live_throughout: 13, 138, 139, 140, dead_or_set: 0, 1, 14, 133
insn=41, live_throughout: 13, 138, 139, 140, dead_or_set: 
insn=45, live_throughout: 13, 139, 140, dead_or_set: 0, 138
insn=46, live_throughout: 0, 13, 140, dead_or_set: 1, 139
insn=47, live_throughout: 0, 1, 13, dead_or_set: 2, 140
insn=43, live_throughout: 0, 1, 2, 13, dead_or_set: 146
insn=48, live_throughout: 13, dead_or_set: 0, 1, 2, 14, 146
insn=76, live_throughout: 13, 136, 138, 139, 140, dead_or_set: 
insn=53, live_throughout: 13, 136, 138, 139, 140, dead_or_set: 148
insn=54, live_throughout: 13, 136, 138, 139, 140, dead_or_set: 135, 148
insn=55, live_throughout: 13, 135, 136, 138, 139, 140, dead_or_set: 
insn=56, live_throughout: 13, 135, 136, 138, 139, 140, dead_or_set: 
insn=82, live_throughout: 13, dead_or_set: 
insn=61, live_throughout: 13, 138, 139, 140, dead_or_set: 
insn=64, live_throughout: 13, 138, 139, 140, dead_or_set: 
insn=65, live_throughout: 13, 138, 139, 140, dead_or_set: 
insn=85, live_throughout: 13, 138, 139, 140, dead_or_set: 
init_insns for 141: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 144: (insn_list:REG_DEP_TRUE 31 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 43 (nil))
changing reg in insn 32
changing reg in insn 40
changing reg in insn 33
changing reg in insn 36
changing reg in insn 38
changing reg in insn 54
changing reg in insn 55
changing reg in insn 20
changing reg in insn 13
changing reg in insn 14
changing reg in insn 20
changing reg in insn 2
changing reg in insn 36
changing reg in insn 14
changing reg in insn 9
changing reg in insn 54
changing reg in insn 45
changing reg in insn 3
changing reg in insn 39
changing reg in insn 53
changing reg in insn 46
changing reg in insn 4
changing reg in insn 64
changing reg in insn 47
changing reg in insn 12
changing reg in insn 13
changing reg in insn 31
changing reg in insn 32
changing reg in insn 43
changing reg in insn 48
changing reg in insn 53
changing reg in insn 54
deleting insn with uid = 38.


try_optimize_cfg iteration 1

Forwarding edge 3->4 to 6 failed.
Forwarding edge 10->11 to 6 failed.
Forwarding edge 12->13 to 9 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.
rescanning insn with uid = 40.
deleting insn with uid = 40.
rescanning insn with uid = 48.
deleting insn with uid = 48.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 18 count 20 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 18 count 26 (  1.9)


___dma_single_dev_to_cpu

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,5u} r1={7d,4u} r2={6d,4u} r3={10d,8u} r4={1d,5u} r5={1d,3u} r6={1d,2u} r12={4d} r13={1d,16u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={9d,6u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 435{381d,54u,0e} in 35{32 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 5 3 2 arch/arm/mm/dma-mapping.c:461 (set (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
        (reg:SI 0 r0 [ kaddr ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 9 2 arch/arm/mm/dma-mapping.c:461 (set (reg/v:SI 5 r5 [orig:139 size ] [139])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 9 3 4 2 arch/arm/mm/dma-mapping.c:462 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn 4 9 10 2 arch/arm/mm/dma-mapping.c:461 (set (reg/v:SI 6 r6 [orig:140 dir ] [140])
        (reg:SI 2 r2 [ dir ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 10 4 11 2 arch/arm/mm/dma-mapping.c:462 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (reg/f:SI 3 r3 [141])
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)
        (nil)))

(insn 13 12 14 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (reg:SI 2 r2 [orig:136 high_memory.383 ] [136])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [141]) [0 high_memory+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>) [0 high_memory+0 S4 A32])
        (nil)))

(insn 14 13 15 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
            (reg:SI 2 r2 [orig:136 high_memory.383 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 77 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  10 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [0.0%]  (fallthru)
(note 77 15 78 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 78 77 79 4 (set (pc)
        (label_ref 22)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 79 78 80)

;; Start of basic block ( 10) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%] 
(code_label 80 79 19 5 36 "" [1 uses])

(note 19 80 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 5 arch/arm/mm/dma-mapping.c:462 discrim 8 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:135 D.24740 ] [135])
            (reg:SI 2 r2 [orig:136 high_memory.383 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 5 arch/arm/mm/dma-mapping.c:462 discrim 8 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

;; Start of basic block ( 2 4 5 11) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [0.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 22 21 23 6 28 "" [3 uses])

(note 23 22 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 23 27 6 arch/arm/mm/dma-mapping.c:462 discrim 5 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 27 26 28 6 arch/arm/mm/dma-mapping.c:462 discrim 5 (set (reg:SI 1 r1)
        (const_int 462 [0x1ce])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 462 [0x1ce])
        (nil)))

(call_insn 28 27 29 6 arch/arm/mm/dma-mapping.c:462 discrim 5 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 29 28 63)

;; Start of basic block ( 12) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  12 [80.1%] 
(code_label 63 29 30 7 33 "" [1 uses])

(note 30 63 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 32 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(insn 32 31 33 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [orig:133 D.25042 ] [133])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [144]) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
        (nil)))

(insn 33 32 34 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 D.25042 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 34 33 35 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2165 [0x875])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [78.3%]  (fallthru)
;; Succ edge  9 [21.6%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  7 [78.3%]  (fallthru)
(note 35 34 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 37 35 36 8 NOTE_INSN_DELETED)

(insn 36 37 39 8 arch/arm/mm/dma-mapping.c:467 (set (reg/v:SI 0 r0 [orig:134 paddr ] [134])
        (plus:SI (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 39 36 40 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 5 r5 [orig:139 size ] [139]))) 4 {*arm_addsi3} (nil))

(call_insn 40 39 41 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:133 D.25042 ] [133]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 7 13) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  7 [21.6%] 
;; Pred edge  13 [100.0%] 
(code_label 41 40 42 9 31 "" [2 uses])

(note 42 41 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 44 42 45 9 NOTE_INSN_DELETED)

(insn 45 44 46 9 arch/arm/mm/dma-mapping.c:471 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 46 45 47 9 arch/arm/mm/dma-mapping.c:471 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:139 size ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 47 46 43 9 arch/arm/mm/dma-mapping.c:471 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:140 dir ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 43 47 48 9 arch/arm/mm/dma-mapping.c:471 (set (reg/f:SI 3 r3 [146])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(call_insn 48 43 76 9 arch/arm/mm/dma-mapping.c:471 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [146])
                            (const_int 32 [0x20])) [0 cpu_cache.dma_unmap_area+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 9 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 76 48 52 10 35 "" [1 uses])

(note 52 76 53 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (reg:SI 3 r3 [148])
        (plus:SI (reg/v:SI 5 r5 [orig:139 size ] [139])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 54 53 55 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (reg:SI 3 r3 [orig:135 D.24740 ] [135])
        (plus:SI (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
            (reg:SI 3 r3 [148]))) 4 {*arm_addsi3} (nil))

(insn 55 54 56 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:135 D.24740 ] [135])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 56 55 81 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 10 -> ( 11 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  10 [0.0%]  (fallthru)
(note 81 56 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(jump_insn 82 81 83 11 (set (pc)
        (label_ref 22)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 6)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 83 82 61)

;; Start of basic block ( 5) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
(code_label 61 83 62 12 30 "" [1 uses])

(note 62 61 64 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 64 62 65 12 arch/arm/mm/dma-mapping.c:466 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:140 dir ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 65 64 84 12 arch/arm/mm/dma-mapping.c:466 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
        (nil)))
;; End of basic block 12 -> ( 7 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [80.1%] 
;; Succ edge  13 [19.9%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  12 [19.9%]  (fallthru)
(note 84 65 85 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(jump_insn 85 84 86 13 (set (pc)
        (label_ref 41)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 86 85 88)

(note 88 86 0 NOTE_INSN_DELETED)


;; Function ___dma_single_cpu_to_dev (___dma_single_cpu_to_dev)[0:1284]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a2 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 106(l0): point = 1
   Insn 77(l0): point = 4
   Insn 90(l0): point = 6
   Insn 74(l0): point = 8
   Insn 76(l0): point = 10
   Insn 73(l0): point = 12
   Insn 68(l0): point = 14
   Insn 102(l0): point = 17
   Insn 61(l0): point = 20
   Insn 60(l0): point = 22
   Insn 59(l0): point = 24
   Insn 58(l0): point = 26
   Insn 98(l0): point = 29
   Insn 51(l0): point = 31
   Insn 50(l0): point = 33
   Insn 49(l0): point = 35
   Insn 46(l0): point = 38
   Insn 45(l0): point = 40
   Insn 44(l0): point = 42
   Insn 96(l0): point = 45
   Insn 39(l0): point = 47
   Insn 38(l0): point = 49
   Insn 37(l0): point = 51
   Insn 34(l0): point = 54
   Insn 33(l0): point = 56
   Insn 32(l0): point = 58
   Insn 28(l0): point = 61
   Insn 27(l0): point = 63
   Insn 26(l0): point = 65
   Insn 21(l0): point = 68
   Insn 20(l0): point = 70
   Insn 94(l0): point = 73
   Insn 15(l0): point = 76
   Insn 14(l0): point = 78
   Insn 13(l0): point = 80
   Insn 12(l0): point = 82
   Insn 10(l0): point = 85
   Insn 4(l0): point = 87
   Insn 9(l0): point = 89
   Insn 3(l0): point = 91
   Insn 2(l0): point = 93
 a0(r135): [52..60] [36..44] [1..8]
 a1(r140): [76..91] [68..72] [50..60] [34..44] [20..28] [1..16]
 a2(r152): [59..60] [43..44] [1..6]
 a3(r139): [76..93] [68..72] [20..28] [9..16]
 a4(r141): [76..87] [68..72] [20..28] [11..16]
 a5(r150): [13..14]
 a6(r136): [71..72] [20..24]
 a7(r149): [25..26]
 a8(r137): [76..80] [71..72] [20..28]
 a9(r133): [32..42]
 a10(r134): [48..58]
 a11(r142): [81..82]
Compressing live ranges: from 96 to 35 - 36%
Ranges after the compression:
 a0(r135): [21..24] [15..18] [0..2]
 a1(r140): [28..33] [25..27] [20..24] [14..18] [8..12] [0..7]
 a2(r152): [23..24] [17..18] [0..1]
 a3(r139): [28..34] [25..27] [8..12] [3..7]
 a4(r141): [28..32] [25..27] [8..12] [4..7]
 a5(r150): [5..6]
 a6(r136): [26..27] [8..9]
 a7(r149): [10..11]
 a8(r137): [28..29] [26..27] [8..12]
 a9(r133): [13..16]
 a10(r134): [19..22]
 a11(r142): [30..31]
+++Allocating 96 bytes for conflict table (uncompressed size 96)
;; a0(r135,l0) conflicts: a2(r152,l0) a1(r140,l0) a9(r133,l0) a10(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r140,l0) conflicts: a0(r135,l0) a2(r152,l0) a3(r139,l0) a4(r141,l0) a5(r150,l0) a6(r136,l0) a8(r137,l0) a7(r149,l0) a9(r133,l0) a10(r134,l0) a11(r142,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r152,l0) conflicts: a0(r135,l0) a1(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r139,l0) conflicts: a1(r140,l0) a4(r141,l0) a5(r150,l0) a6(r136,l0) a8(r137,l0) a7(r149,l0) a11(r142,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r141,l0) conflicts: a1(r140,l0) a3(r139,l0) a5(r150,l0) a6(r136,l0) a8(r137,l0) a7(r149,l0) a11(r142,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r150,l0) conflicts: a1(r140,l0) a3(r139,l0) a4(r141,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a6(r136,l0) conflicts: a1(r140,l0) a3(r139,l0) a4(r141,l0) a8(r137,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a7(r149,l0) conflicts: a1(r140,l0) a3(r139,l0) a4(r141,l0) a8(r137,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a8(r137,l0) conflicts: a1(r140,l0) a3(r139,l0) a4(r141,l0) a6(r136,l0) a7(r149,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a9(r133,l0) conflicts: a0(r135,l0) a1(r140,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a10(r134,l0) conflicts: a0(r135,l0) a1(r140,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a11(r142,l0) conflicts: a1(r140,l0) a3(r139,l0) a4(r141,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

  cp0:a0(r135)<->a3(r139)@125:shuffle
  cp1:a6(r136)<->a7(r149)@125:shuffle
  regions=1, blocks=16, points=35
    allocnos=12, copies=2, conflicts=0, ranges=30

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r135 1r140 2r152 3r139 4r141 5r150 6r136 7r149 8r137 9r133 10r134 11r142
    modified regnos: 133 134 135 136 137 139 140 141 142 149 150 152
    border:
    Pressure: GENERAL_REGS=8
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 150 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
      Pushing a2(r152,l0)
      Pushing a0(r135,l0)
      Pushing a11(r142,l0)
      Pushing a7(r149,l0)
      Pushing a10(r134,l0)
      Pushing a9(r133,l0)
      Pushing a8(r137,l0)
      Pushing a6(r136,l0)
      Pushing a5(r150,l0)
      Pushing a4(r141,l0)
      Pushing a1(r140,l0)
      Pushing a3(r139,l0)
      Popping a3(r139,l0)  -- assign reg 4
      Popping a1(r140,l0)  -- assign reg 5
      Popping a4(r141,l0)  -- assign reg 6
      Popping a5(r150,l0)  -- assign reg 3
      Popping a6(r136,l0)  -- assign reg 3
      Popping a8(r137,l0)  -- assign reg 12
      Popping a9(r133,l0)  -- assign reg 3
      Popping a10(r134,l0)  -- assign reg 3
      Popping a7(r149,l0)  -- assign reg 3
      Popping a11(r142,l0)  -- assign reg 3
      Popping a0(r135,l0)  -- assign reg 0
      Popping a2(r152,l0)  -- assign reg 3
Disposition:
    9:r133 l0     3   10:r134 l0     3    0:r135 l0     0    6:r136 l0     3
    8:r137 l0    12    3:r139 l0     4    1:r140 l0     5    4:r141 l0     6
   11:r142 l0     3    7:r149 l0     3    5:r150 l0     3    2:r152 l0     3
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 0, 1, 2, 13, dead_or_set: 139
insn=3, live_throughout: 0, 1, 2, 13, 139, dead_or_set: 140
insn=9, live_throughout: 0, 1, 2, 13, 139, 140, dead_or_set: 
insn=4, live_throughout: 0, 1, 2, 13, 24, 139, 140, dead_or_set: 141
insn=10, live_throughout: 0, 1, 2, 13, 139, 140, 141, dead_or_set: 
insn=12, live_throughout: 0, 1, 2, 13, 139, 140, 141, dead_or_set: 142
insn=13, live_throughout: 0, 1, 2, 13, 139, 140, 141, dead_or_set: 137, 142
insn=14, live_throughout: 0, 1, 2, 13, 137, 139, 140, 141, dead_or_set: 
insn=15, live_throughout: 0, 1, 2, 13, 137, 139, 140, 141, dead_or_set: 
insn=94, live_throughout: 13, dead_or_set: 
insn=100, live_throughout: 0, 1, 2, 13, 136, 137, 139, 140, 141, dead_or_set: 
insn=20, live_throughout: 0, 1, 2, 13, 139, 140, 141, dead_or_set: 136, 137
insn=21, live_throughout: 0, 1, 2, 13, 139, 140, 141, dead_or_set: 
insn=22, live_throughout: 13, dead_or_set: 
insn=26, live_throughout: 13, dead_or_set: 0
insn=27, live_throughout: 0, 13, dead_or_set: 1
insn=28, live_throughout: 13, dead_or_set: 0, 1, 14
insn=75, live_throughout: 13, 14, 135, 140, 152, dead_or_set: 
insn=32, live_throughout: 13, 14, 135, 140, dead_or_set: 134, 152
insn=33, live_throughout: 13, 14, 134, 135, 140, dead_or_set: 
insn=34, live_throughout: 13, 14, 134, 135, 140, dead_or_set: 
insn=37, live_throughout: 13, 134, 140, dead_or_set: 0, 135
insn=38, live_throughout: 0, 13, 134, dead_or_set: 1, 140
insn=39, live_throughout: 13, dead_or_set: 0, 1, 14, 134
insn=96, live_throughout: 13, 14, dead_or_set: 
insn=104, live_throughout: 13, 14, 135, 140, 152, dead_or_set: 
insn=44, live_throughout: 13, 14, 135, 140, dead_or_set: 133, 152
insn=45, live_throughout: 13, 14, 133, 135, 140, dead_or_set: 
insn=46, live_throughout: 13, 14, 133, 135, 140, dead_or_set: 
insn=49, live_throughout: 13, 133, 140, dead_or_set: 0, 135
insn=50, live_throughout: 0, 13, 133, dead_or_set: 1, 140
insn=51, live_throughout: 13, dead_or_set: 0, 1, 14, 133
insn=98, live_throughout: 13, 14, dead_or_set: 
insn=92, live_throughout: 0, 1, 2, 13, 137, 139, 140, 141, dead_or_set: 
insn=58, live_throughout: 0, 1, 2, 13, 137, 139, 140, 141, dead_or_set: 149
insn=59, live_throughout: 0, 1, 2, 13, 137, 139, 140, 141, dead_or_set: 136, 149
insn=60, live_throughout: 0, 1, 2, 13, 136, 137, 139, 140, 141, dead_or_set: 
insn=61, live_throughout: 0, 1, 2, 13, 136, 137, 139, 140, 141, dead_or_set: 
insn=102, live_throughout: 13, dead_or_set: 
insn=66, live_throughout: 0, 1, 2, 13, 139, 140, 141, dead_or_set: 
insn=68, live_throughout: 0, 1, 2, 13, 139, 140, 141, dead_or_set: 150
insn=73, live_throughout: 13, 139, 140, 141, dead_or_set: 0, 1, 2, 14, 150
insn=76, live_throughout: 13, 14, 139, 140, dead_or_set: 141
insn=74, live_throughout: 13, 14, 24, 140, dead_or_set: 135, 139
insn=90, live_throughout: 13, 14, 24, 135, 140, dead_or_set: 152
insn=77, live_throughout: 13, 14, 135, 140, 152, dead_or_set: 
insn=106, live_throughout: 13, 14, 135, 140, 152, dead_or_set: 
insn=85, live_throughout: 13, 14, dead_or_set: 
init_insns for 142: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 68 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 90 (nil))
changing reg in insn 44
changing reg in insn 51
changing reg in insn 45
changing reg in insn 32
changing reg in insn 39
changing reg in insn 33
changing reg in insn 74
changing reg in insn 49
changing reg in insn 37
changing reg in insn 59
changing reg in insn 60
changing reg in insn 20
changing reg in insn 13
changing reg in insn 14
changing reg in insn 20
changing reg in insn 2
changing reg in insn 74
changing reg in insn 14
changing reg in insn 9
changing reg in insn 59
changing reg in insn 3
changing reg in insn 50
changing reg in insn 38
changing reg in insn 58
changing reg in insn 4
changing reg in insn 76
changing reg in insn 12
changing reg in insn 13
changing reg in insn 58
changing reg in insn 59
changing reg in insn 68
changing reg in insn 73
changing reg in insn 90
changing reg in insn 44
changing reg in insn 32
deleting insn with uid = 37.
deleting insn with uid = 49.


try_optimize_cfg iteration 1

Forwarding edge 3->4 to 6 failed.
Forwarding edge 11->12 to 6 failed.
Forwarding edge 13->14 to 7 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 28.
rescanning insn with uid = 39.
deleting insn with uid = 39.
rescanning insn with uid = 51.
deleting insn with uid = 51.
rescanning insn with uid = 73.
deleting insn with uid = 73.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 26 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 30 (  1.9)


___dma_single_cpu_to_dev

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,7u} r1={8d,5u} r2={5d,2u} r3={12d,11u} r4={1d,4u} r5={1d,3u} r6={1d,1u} r12={6d,2u} r13={1d,19u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={11d,7u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 560{498d,62u,0e} in 39{35 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 5 3 2 arch/arm/mm/dma-mapping.c:442 (set (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
        (reg:SI 0 r0 [ kaddr ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 9 2 arch/arm/mm/dma-mapping.c:442 (set (reg/v:SI 5 r5 [orig:140 size ] [140])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 9 3 4 2 arch/arm/mm/dma-mapping.c:445 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn 4 9 10 2 arch/arm/mm/dma-mapping.c:442 (set (reg/v:SI 6 r6 [orig:141 dir ] [141])
        (reg:SI 2 r2 [ dir ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 10 4 11 2 arch/arm/mm/dma-mapping.c:445 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)
        (nil)))

(insn 13 12 14 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (reg:SI 12 ip [orig:137 high_memory.377 ] [137])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [142]) [0 high_memory+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>) [0 high_memory+0 S4 A32])
        (nil)))

(insn 14 13 15 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
            (reg:SI 12 ip [orig:137 high_memory.377 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 93 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 11)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  11 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [0.0%]  (fallthru)
(note 93 15 94 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 94 93 95 4 (set (pc)
        (label_ref 22)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 95 94 100)

;; Start of basic block ( 11) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [100.0%] 
(code_label 100 95 19 5 49 "" [1 uses])

(note 19 100 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 5 arch/arm/mm/dma-mapping.c:445 discrim 8 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:136 D.24698 ] [136])
            (reg:SI 12 ip [orig:137 high_memory.377 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 5 arch/arm/mm/dma-mapping.c:445 discrim 8 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 13)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  13 [100.0%] 

;; Start of basic block ( 2 4 5 12) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [0.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 22 21 23 6 40 "" [3 uses])

(note 23 22 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 23 27 6 arch/arm/mm/dma-mapping.c:445 discrim 5 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 27 26 28 6 arch/arm/mm/dma-mapping.c:445 discrim 5 (set (reg:SI 1 r1)
        (const_int 445 [0x1bd])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 445 [0x1bd])
        (nil)))

(call_insn 28 27 29 6 arch/arm/mm/dma-mapping.c:445 discrim 5 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 29 28 75)

;; Start of basic block ( 14) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%] 
(code_label 75 29 30 7 45 "" [1 uses])

(note 30 75 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 32 30 33 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [orig:134 D.25045 ] [134])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [152]) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
        (nil)))

(insn 33 32 34 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:134 D.25045 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 34 33 35 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 7 -> ( 8 15)
;; lr  out 	 0 [r0] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 5 [r5] 13 [sp]


;; Succ edge  8 [69.8%]  (fallthru)
;; Succ edge  15 [30.2%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  7 [69.8%]  (fallthru)
(note 35 34 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 36 35 38 8 NOTE_INSN_DELETED)

(insn 38 36 39 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 5 r5 [orig:140 size ] [140]))) 4 {*arm_addsi3} (nil))

(call_insn 39 38 96 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:134 D.25045 ] [134]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 96 39 97 8 (set (pc)
        (label_ref 85)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 15)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 97 96 104)

;; Start of basic block ( 13) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  13 [72.0%] 
(code_label 104 97 42 9 50 "" [1 uses])

(note 42 104 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 44 42 45 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg/f:SI 3 r3 [orig:133 D.25048 ] [133])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [152])
                (const_int 4 [0x4])) [0 outer_cache.clean_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
                    (const_int 4 [0x4]))) [0 outer_cache.clean_range+0 S4 A32])
        (nil)))

(insn 45 44 46 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 D.25048 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 46 45 47 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2165 [0x875])
        (nil)))
;; End of basic block 9 -> ( 10 15)
;; lr  out 	 0 [r0] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 5 [r5] 13 [sp]


;; Succ edge  10 [78.3%]  (fallthru)
;; Succ edge  15 [21.6%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [78.3%]  (fallthru)
(note 47 46 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 48 47 50 10 NOTE_INSN_DELETED)

(insn 50 48 51 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 5 r5 [orig:140 size ] [140]))) 4 {*arm_addsi3} (nil))

(call_insn 51 50 98 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:133 D.25048 ] [133]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 98 51 99 10 (set (pc)
        (label_ref 85)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 15)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 99 98 92)

;; Start of basic block ( 3) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 92 99 57 11 48 "" [1 uses])

(note 57 92 58 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 11 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (reg:SI 3 r3 [149])
        (plus:SI (reg/v:SI 5 r5 [orig:140 size ] [140])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 59 58 60 11 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (reg:SI 3 r3 [orig:136 D.24698 ] [136])
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
            (reg:SI 3 r3 [149]))) 4 {*arm_addsi3} (nil))

(insn 60 59 61 11 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:136 D.24698 ] [136])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 61 60 101 11 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 11 -> ( 12 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  12 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [0.0%]  (fallthru)
(note 101 61 102 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(jump_insn 102 101 103 12 (set (pc)
        (label_ref 22)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 6)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 103 102 66)

;; Start of basic block ( 5) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%] 
(code_label 66 103 67 13 42 "" [1 uses])

(note 67 66 69 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 69 67 68 13 NOTE_INSN_DELETED)

(insn 68 69 73 13 arch/arm/mm/dma-mapping.c:447 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(call_insn 73 68 76 13 arch/arm/mm/dma-mapping.c:447 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [150])
                            (const_int 28 [0x1c])) [0 cpu_cache.dma_map_area+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 76 73 74 13 arch/arm/mm/dma-mapping.c:450 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:141 dir ] [141])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(insn 74 76 90 13 arch/arm/mm/dma-mapping.c:449 (set (reg/v:SI 0 r0 [orig:135 paddr ] [135])
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 90 74 77 13 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(jump_insn 77 90 105 13 arch/arm/mm/dma-mapping.c:450 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 104)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 13 -> ( 14 9)
;; lr  out 	 0 [r0] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 5 [r5] 13 [sp]


;; Succ edge  14 [28.0%]  (fallthru)
;; Succ edge  9 [72.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  13 [28.0%]  (fallthru)
(note 105 77 106 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn 106 105 107 14 (set (pc)
        (label_ref 75)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 7)
;; lr  out 	 0 [r0] 3 [r3] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 5 [r5] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 107 106 85)

;; Start of basic block ( 8 7 9 10) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [100.0%] 
;; Pred edge  7 [30.2%] 
;; Pred edge  9 [21.6%] 
;; Pred edge  10 [100.0%] 
(code_label 85 107 88 15 47 "" [4 uses])

(note 88 85 109 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 15 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 109 88 110 NOTE_INSN_DELETED)

(note 110 109 0 NOTE_INSN_DELETED)


;; Function dma_cache_maint_page (dma_cache_maint_page)[0:1286]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a17 (r165,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r164,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r162,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r159,l1) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r155,l1) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r153,l1) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r151,l1) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r150,l1) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r149,l1) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r145,l1) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r142,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r140,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r136,l1) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a9(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a10(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a11(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a12(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a19(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a28(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a9(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a10(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a11(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a12(r142,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a19(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r159,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a28(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 32(l0): point = 1
   Insn 14(l0): point = 3
   Insn 10(l0): point = 5
   Insn 5(l0): point = 7
   Insn 63(l0): point = 9
   Insn 3(l0): point = 11
   Insn 16(l0): point = 13
   Insn 2(l0): point = 15
   Insn 6(l0): point = 17
   Insn 125(l1): point = 20
   Insn 103(l1): point = 22
   Insn 100(l1): point = 24
   Insn 102(l1): point = 26
   Insn 101(l1): point = 28
   Insn 97(l1): point = 30
   Insn 104(l1): point = 32
   Insn 96(l1): point = 34
   Insn 123(l1): point = 37
   Insn 118(l1): point = 39
   Insn 85(l1): point = 41
   Insn 83(l1): point = 44
   Insn 82(l1): point = 46
   Insn 78(l1): point = 49
   Insn 77(l1): point = 51
   Insn 76(l1): point = 53
   Insn 75(l1): point = 55
   Insn 74(l1): point = 57
   Insn 73(l1): point = 59
   Insn 71(l1): point = 61
   Insn 70(l1): point = 63
   Insn 69(l1): point = 65
   Insn 67(l1): point = 68
   Insn 66(l1): point = 70
   Insn 64(l1): point = 72
   Insn 121(l1): point = 75
   Insn 58(l1): point = 77
   Insn 57(l1): point = 79
   Insn 56(l1): point = 81
   Insn 55(l1): point = 83
   Insn 54(l1): point = 85
   Insn 53(l1): point = 87
   Insn 50(l1): point = 90
   Insn 49(l1): point = 92
   Insn 47(l1): point = 94
   Insn 46(l1): point = 96
   Insn 43(l1): point = 99
   Insn 40(l1): point = 102
   Insn 38(l1): point = 104
   Insn 36(l1): point = 106
   Insn 39(l1): point = 108
   Insn 34(l1): point = 111
   Insn 33(l1): point = 113
   Insn 119(l1): point = 116
   Insn 27(l1): point = 118
   Insn 25(l1): point = 121
   Insn 24(l1): point = 123
   Insn 23(l1): point = 125
   Insn 21(l1): point = 128
   Insn 20(l1): point = 130
   Insn 19(l1): point = 132
   Insn 18(l1): point = 134
   Insn 17(l1): point = 136
   Insn 13(l1): point = 138
   Insn 12(l1): point = 140
 a0(r165): [1..1]
 a1(r162): [1..3]
 a2(r137): [1..5]
 a3(r142): [1..7]
 a4(r164): [1..9]
 a5(r140): [1..11]
 a6(r163): [1..13]
 a7(r139): [1..15]
 a8(r143): [1..17]
 a9(r137): [20..142]
 a10(r139): [20..142]
 a11(r140): [107..142] [88..102] [60..74] [25..39]
 a12(r142): [20..142]
 a13(r143): [20..142]
 a14(r162): [20..142]
 a15(r163): [20..142]
 a16(r164): [20..142]
 a17(r165): [20..142]
 a18(r136): [116..118] [47..99] [20..32]
 a19(r133): [52..61]
 a20(r159): [71..72]
 a21(r135): [88..92]
 a22(r155): [103..108]
 a23(r153): [105..106]
 a24(r151): [124..125]
 a25(r149): [131..132]
 a26(r150): [133..134]
 a27(r134): [133..136]
 a28(r144): [137..138]
 a29(r145): [139..140]
 Rebuilding regno allocno list for 159
 Rebuilding regno allocno list for 155
 Rebuilding regno allocno list for 153
 Rebuilding regno allocno list for 151
 Rebuilding regno allocno list for 150
 Rebuilding regno allocno list for 149
 Rebuilding regno allocno list for 145
 Rebuilding regno allocno list for 144
 Rebuilding regno allocno list for 136
 Rebuilding regno allocno list for 135
 Rebuilding regno allocno list for 134
 Rebuilding regno allocno list for 133
Compressing live ranges: from 143 to 43 - 30%
Ranges after the compression:
 a0(r165): [9..42] [0..0]
 a1(r162): [9..42] [0..1]
 a2(r137): [9..42] [0..2]
 a3(r142): [9..42] [0..3]
 a4(r164): [9..42] [0..4]
 a5(r140): [27..42] [20..23] [15..19] [10..12] [0..5]
 a6(r163): [9..42] [0..6]
 a7(r139): [9..42] [0..7]
 a8(r143): [9..42] [0..8]
 a18(r136): [29..30] [13..22] [9..11]
 a19(r133): [14..16]
 a20(r159): [17..18]
 a21(r135): [20..21]
 a22(r155): [24..28]
 a23(r153): [25..26]
 a24(r151): [31..32]
 a25(r149): [33..34]
 a26(r150): [35..36]
 a27(r134): [35..37]
 a28(r144): [38..39]
 a29(r145): [40..41]
+++Allocating 168 bytes for conflict table (uncompressed size 240)
;; a0(r165,l0) conflicts: a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0) a22(r155,l0) a23(r153,l0) a24(r151,l0) a25(r149,l0) a26(r150,l0) a27(r134,l0) a28(r144,l0) a29(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r162,l0) conflicts: a0(r165,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0) a22(r155,l0) a23(r153,l0) a24(r151,l0) a25(r149,l0) a26(r150,l0) a27(r134,l0) a28(r144,l0) a29(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r137,l0) conflicts: a0(r165,l0) a1(r162,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0) a22(r155,l0) a23(r153,l0) a24(r151,l0) a25(r149,l0) a26(r150,l0) a27(r134,l0) a28(r144,l0) a29(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r142,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0) a22(r155,l0) a23(r153,l0) a24(r151,l0) a25(r149,l0) a26(r150,l0) a27(r134,l0) a28(r144,l0) a29(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r164,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0) a22(r155,l0) a23(r153,l0) a24(r151,l0) a25(r149,l0) a26(r150,l0) a27(r134,l0) a28(r144,l0) a29(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r140,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0) a22(r155,l0) a24(r151,l0) a25(r149,l0) a26(r150,l0) a27(r134,l0) a28(r144,l0) a29(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r163,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0) a22(r155,l0) a23(r153,l0) a24(r151,l0) a25(r149,l0) a26(r150,l0) a27(r134,l0) a28(r144,l0) a29(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r139,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a8(r143,l0) a18(r136,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0) a22(r155,l0) a23(r153,l0) a24(r151,l0) a25(r149,l0) a26(r150,l0) a27(r134,l0) a28(r144,l0) a29(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r143,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a18(r136,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0) a22(r155,l0) a23(r153,l0) a24(r151,l0) a25(r149,l0) a26(r150,l0) a27(r134,l0) a28(r144,l0) a29(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a18(r136,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a19(r133,l0) a20(r159,l0) a21(r135,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a19(r133,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a20(r159,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r135,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a18(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r155,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a23(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r153,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a22(r155,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r151,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r149,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r150,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a27(r134,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r134,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0) a26(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r144,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r145,l0) conflicts: a0(r165,l0) a1(r162,l0) a2(r137,l0) a3(r142,l0) a4(r164,l0) a5(r140,l0) a6(r163,l0) a7(r139,l0) a8(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a5(r140)<->a23(r153)@125:shuffle
  cp1:a28(r144)<->a29(r145)@125:shuffle
  cp2:a27(r134)<->a28(r144)@125:shuffle
  cp3:a25(r149)<->a27(r134)@125:shuffle
  cp4:a25(r149)<->a26(r150)@125:shuffle
  regions=2, blocks=17, points=43
    allocnos=30, copies=5, conflicts=0, ranges=35

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r165 1r162 2r137 3r142 4r164 5r140 6r163 7r139 8r143 18r136 19r133 20r159 21r135 22r155 23r153 24r151 25r149 26r150 27r134 28r144 29r145
    modified regnos: 133 134 135 136 137 139 140 142 143 144 145 149 150 151 153 155 159 162 163 164 165
    border:
    Pressure: GENERAL_REGS=14
    Reg 165 of GENERAL_REGS has 4 regs less
    Reg 162 of GENERAL_REGS has 4 regs less
    Reg 137 of GENERAL_REGS has 4 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 164 of GENERAL_REGS has 5 regs less
    Reg 140 of GENERAL_REGS has 5 regs less
    Reg 163 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 143 of GENERAL_REGS has 5 regs less
    Reg 136 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
      Pushing a29(r145,l0)
      Pushing a28(r144,l0)
      Pushing a26(r150,l0)
      Pushing a25(r149,l0)
      Pushing a24(r151,l0)
      Pushing a23(r153,l0)
      Pushing a22(r155,l0)
      Pushing a27(r134,l0)
      Pushing a21(r135,l0)
      Pushing a20(r159,l0)
      Pushing a6(r163,l0)(potential spill: pri=1250, cost=20000)
      Pushing a0(r165,l0)(potential spill: pri=1428, cost=20000)
      Pushing a1(r162,l0)(potential spill: pri=1538, cost=20000)
      Pushing a4(r164,l0)(potential spill: pri=2307, cost=30000)
      Pushing a8(r143,l0)(potential spill: pri=2500, cost=30000)
      Pushing a19(r133,l0)
      Pushing a3(r142,l0)
      Pushing a18(r136,l0)
      Pushing a2(r137,l0)
      Pushing a7(r139,l0)
      Pushing a5(r140,l0)
      Popping a5(r140,l0)  -- assign reg 4
      Popping a7(r139,l0)  -- assign reg 5
      Popping a2(r137,l0)  -- assign reg 6
      Popping a18(r136,l0)  -- assign reg 7
      Popping a3(r142,l0)  -- assign reg 8
      Popping a19(r133,l0)  -- assign reg 10
      Popping a8(r143,l0)  -- assign reg 9
      Popping a4(r164,l0)  -- assign reg 11
      Popping a1(r162,l0)  -- (memory is more profitable 20000 vs 80000) spill
      Popping a0(r165,l0)  -- (memory is more profitable 20000 vs 80000) spill
      Popping a6(r163,l0)  -- (memory is more profitable 20000 vs 80000) spill
      Popping a20(r159,l0)  -- assign reg 3
      Popping a21(r135,l0)  -- assign reg 0
      Popping a27(r134,l0)  -- assign reg 3
      Popping a22(r155,l0)  -- assign reg 3
      Popping a23(r153,l0)  -- assign reg 4
      Popping a24(r151,l0)  -- assign reg 3
      Popping a25(r149,l0)  -- assign reg 3
      Popping a26(r150,l0)  -- assign reg 2
      Popping a28(r144,l0)  -- assign reg 3
      Popping a29(r145,l0)  -- assign reg 3
Disposition:
   19:r133 l0    10   27:r134 l0     3   21:r135 l0     0   18:r136 l0     7
    2:r137 l0     6    7:r139 l0     5    5:r140 l0     4    3:r142 l0     8
    8:r143 l0     9   28:r144 l0     3   29:r145 l0     3   25:r149 l0     3
   26:r150 l0     2   24:r151 l0     3   23:r153 l0     4   22:r155 l0     3
   20:r159 l0     3    1:r162 l0   mem    6:r163 l0   mem    4:r164 l0    11
    0:r165 l0   mem
New iteration of spill/restore move
+++Costs: overall 59500, reg -500, mem 60000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 143
insn=2, live_throughout: 1, 2, 3, 13, 143, dead_or_set: 0, 139
insn=16, live_throughout: 1, 2, 3, 13, 139, 143, dead_or_set: 163
insn=3, live_throughout: 2, 3, 13, 139, 143, 163, dead_or_set: 1, 140
insn=63, live_throughout: 2, 3, 13, 139, 140, 143, 163, dead_or_set: 164
insn=5, live_throughout: 2, 13, 139, 140, 143, 163, 164, dead_or_set: 3, 142
insn=10, live_throughout: 13, 139, 140, 142, 143, 163, 164, dead_or_set: 2, 137
insn=14, live_throughout: 13, 137, 139, 140, 142, 143, 163, 164, dead_or_set: 162
insn=32, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, dead_or_set: 165
insn=87, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=12, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 145
insn=13, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 144, 145
insn=17, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 134, 144
insn=18, live_throughout: 13, 134, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 150
insn=19, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 134, 149, 150
insn=20, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 149
insn=21, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=23, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 151
insn=24, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 151
insn=25, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=27, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 136
insn=119, live_throughout: 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=30, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=33, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=34, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=39, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 155
insn=36, live_throughout: 13, 137, 139, 142, 143, 155, 162, 163, 164, 165, dead_or_set: 140, 153
insn=38, live_throughout: 13, 137, 142, 143, 155, 162, 163, 164, 165, dead_or_set: 139, 153
insn=40, live_throughout: 13, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 140, 155
insn=41, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=43, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 136
insn=44, live_throughout: 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=46, live_throughout: 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 0
insn=47, live_throughout: 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 14
insn=49, live_throughout: 13, 14, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 135
insn=50, live_throughout: 13, 14, 135, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=53, live_throughout: 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 135, 140
insn=54, live_throughout: 0, 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 1
insn=55, live_throughout: 0, 1, 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 2
insn=56, live_throughout: 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 1, 2, 14
insn=57, live_throughout: 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0
insn=58, live_throughout: 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 14
insn=121, live_throughout: 13, 14, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=61, live_throughout: 13, 14, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=64, live_throughout: 13, 14, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 159
insn=66, live_throughout: 13, 14, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 159
insn=67, live_throughout: 13, 14, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=69, live_throughout: 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 0
insn=70, live_throughout: 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 14
insn=71, live_throughout: 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 133
insn=73, live_throughout: 13, 133, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 140
insn=74, live_throughout: 0, 13, 133, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 1
insn=75, live_throughout: 0, 1, 13, 133, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 2
insn=76, live_throughout: 13, 133, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 1, 2, 14
insn=77, live_throughout: 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 133
insn=78, live_throughout: 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 14
insn=79, live_throughout: 13, 14, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=82, live_throughout: 13, 14, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 136, 137
insn=83, live_throughout: 13, 14, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=85, live_throughout: 13, 137, 142, 143, 162, 163, 164, 165, dead_or_set: 139
insn=118, live_throughout: 13, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 140
insn=123, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=94, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=96, live_throughout: 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 0
insn=104, live_throughout: 0, 13, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 136
insn=97, live_throughout: 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 14
insn=101, live_throughout: 0, 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 1
insn=102, live_throughout: 0, 1, 13, 136, 137, 139, 140, 142, 143, 162, 163, 164, 165, dead_or_set: 2
insn=100, live_throughout: 1, 2, 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 140
insn=103, live_throughout: 13, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 0, 1, 2, 14
insn=125, live_throughout: 13, 14, 136, 137, 139, 142, 143, 162, 163, 164, 165, dead_or_set: 
insn=110, live_throughout: 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 145: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 18 (nil))
init_insns for 159: (insn_list:REG_DEP_TRUE 64 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 14 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 16 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 63 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 32 (nil))
changing reg in insn 71
changing reg in insn 73
changing reg in insn 77
changing reg in insn 17
changing reg in insn 19
changing reg in insn 18
changing reg in insn 18
changing reg in insn 49
changing reg in insn 53
changing reg in insn 104
changing reg in insn 43
changing reg in insn 27
changing reg in insn 82
changing reg in insn 82
changing reg in insn 74
changing reg in insn 54
changing reg in insn 82
changing reg in insn 10
changing reg in insn 82
changing reg in insn 82
changing reg in insn 104
changing reg in insn 101
changing reg in insn 27
changing reg in insn 23
changing reg in insn 38
changing reg in insn 85
changing reg in insn 2
changing reg in insn 38
changing reg in insn 96
changing reg in insn 85
changing reg in insn 69
changing reg in insn 57
changing reg in insn 46
changing reg in insn 12
changing reg in insn 12
changing reg in insn 118
changing reg in insn 40
changing reg in insn 3
changing reg in insn 100
changing reg in insn 73
changing reg in insn 53
changing reg in insn 33
changing reg in insn 43
changing reg in insn 39
changing reg in insn 36
changing reg in insn 23
changing reg in insn 40
changing reg in insn 33
changing reg in insn 5
changing reg in insn 102
changing reg in insn 75
changing reg in insn 55
changing reg in insn 6
changing reg in insn 103
changing reg in insn 76
changing reg in insn 56
changing reg in insn 13
changing reg in insn 17
changing reg in insn 12
changing reg in insn 13
changing reg in insn 19
changing reg in insn 20
changing reg in insn 18
changing reg in insn 19
changing reg in insn 23
changing reg in insn 24
changing reg in insn 36
changing reg in insn 38
changing reg in insn 39
changing reg in insn 40
changing reg in insn 64
changing reg in insn 66
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
Spilling for insn 17.
Using reg 2 for reload 0
Using reg 1 for reload 1
Spilling for insn 33.
Using reg 3 for reload 0
deleting insn with uid = 14.
deleting insn with uid = 16.
deleting insn with uid = 32.

Reloads for insn # 17
Reload 0: reload_in (SI) = (const_int 768 [0x300])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg:SI 162)
	reload_reg_rtx: (reg:SI 1 r1)
Reload 1: reload_in (SI) = (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 3), can't combine
	reload_in_reg: (reg/f:SI 163)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 33
Reload 0: reload_in (SI) = (const_int 4095 [0xfff])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg:SI 165)
	reload_reg_rtx: (reg:SI 3 r3)


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 47.
rescanning insn with uid = 56.
deleting insn with uid = 56.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 70.
rescanning insn with uid = 76.
deleting insn with uid = 76.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 97.
rescanning insn with uid = 103.
deleting insn with uid = 103.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 22 count 38 (  2.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 17 n_edges 22 count 33 (  1.9)


dma_cache_maint_page

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={18d,14u} r1={13d,5u} r2={14d,6u} r3={17d,10u,1d} r4={4d,9u,2d} r5={3d,7u,1d} r6={2d,6u} r7={3d,4u} r8={1d,3u} r9={1d,3u} r10={1d,2u} r11={1d,1u,1d} r12={9d} r13={1d,25u,1d} r14={9d,1u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={14d,6u} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} 
;;    total ref usage 1099{991d,102u,6e} in 64{56 regular + 8 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 8 7 2 NOTE_INSN_DELETED)

(note 7 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 7 2 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v/f:SI 9 r9 [orig:143 op ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 op+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 op+0 S4 A32])
        (nil)))

(insn 2 6 16 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v/f:SI 5 r5 [orig:139 page ] [139])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (nil))

(note 16 2 3 2 NOTE_INSN_DELETED)

(insn 3 16 63 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v:SI 4 r4 [orig:140 offset ] [140])
        (reg:SI 1 r1 [ offset ])) 167 {*arm_movsi_insn} (nil))

(insn 63 3 5 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg/f:SI 11 fp [164])
        (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x11249780 cacheid>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x11249780 cacheid>)
        (nil)))

(insn 5 63 10 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v:SI 8 r8 [orig:142 dir ] [142])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 10 5 14 2 arch/arm/mm/dma-mapping.c:485 (set (reg/v:SI 6 r6 [orig:137 left ] [137])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (nil))

(note 14 10 32 2 NOTE_INSN_DELETED)

(note 32 14 87 2 NOTE_INSN_DELETED)
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 14) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%]  (dfs_back)
(code_label 87 32 11 3 66 "" [1 uses])

(note 11 87 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 15 11 12 3 NOTE_INSN_DELETED)

(insn 12 15 13 3 include/linux/mm.h:692 (set (reg:SI 3 r3 [orig:145 <variable>.flags ] [145])
        (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:139 page ] [139]) [0 <variable>.flags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:139 page ] [139]) [0 <variable>.flags+0 S4 A32])
        (nil)))

(insn 13 12 130 3 include/linux/mm.h:692 (set (reg:SI 3 r3 [144])
        (lshiftrt:SI (reg:SI 3 r3 [orig:145 <variable>.flags ] [145])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 130 13 131 3 include/linux/mm.h:692 (set (reg:SI 1 r1)
        (const_int 768 [0x300])) 167 {*arm_movsi_insn} (nil))

(insn 131 130 17 3 include/linux/mm.h:692 (set (reg:SI 2 r2)
        (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)) 167 {*arm_movsi_insn} (nil))

(insn 17 131 18 3 include/linux/mm.h:692 (set (reg/f:SI 3 r3 [orig:134 D.25051 ] [134])
        (plus:SI (mult:SI (reg:SI 1 r1)
                (reg:SI 3 r3 [144]))
            (reg:SI 2 r2))) 40 {*mulsi3addsi_v6} (nil))

(insn 18 17 19 3 include/linux/mmzone.h:741 (set (reg/f:SI 2 r2 [orig:150 <variable>.zone_pgdat ] [150])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:134 D.25051 ] [134])
                (const_int 748 [0x2ec])) [0 <variable>.zone_pgdat+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:134 D.25051 ] [134])
                (const_int 748 [0x2ec])) [0 <variable>.zone_pgdat+0 S4 A32])
        (nil)))

(insn 19 18 20 3 include/linux/mmzone.h:741 (set (reg:SI 3 r3 [149])
        (minus:SI (reg/f:SI 3 r3 [orig:134 D.25051 ] [134])
            (reg/f:SI 2 r2 [orig:150 <variable>.zone_pgdat ] [150]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 19 21 3 include/linux/mmzone.h:741 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [149])
            (const_int 768 [0x300]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 3 include/linux/mmzone.h:741 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 3 -> ( 4 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  4 [28.0%]  (fallthru)
;; Succ edge  15 [72.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [28.0%]  (fallthru)
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 4 arch/arm/mm/dma-mapping.c:491 (set (reg:SI 3 r3 [151])
        (plus:SI (reg/v:SI 6 r6 [orig:137 left ] [137])
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 4 {*arm_addsi3} (nil))

(insn 24 23 25 4 arch/arm/mm/dma-mapping.c:491 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [151])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 25 24 26 4 arch/arm/mm/dma-mapping.c:491 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  6 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 119 5 arch/arm/mm/dma-mapping.c:487 (set (reg/v:SI 7 r7 [orig:136 len ] [136])
        (reg/v:SI 6 r6 [orig:137 left ] [137])) 167 {*arm_movsi_insn} (nil))

(jump_insn 119 27 120 5 (set (pc)
        (label_ref 44)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 120 119 30)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%] 
(code_label 30 120 31 6 60 "" [1 uses])

(note 31 30 132 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 132 31 33 6 arch/arm/mm/dma-mapping.c:492 (set (reg:SI 3 r3)
        (const_int 4095 [0xfff])) 167 {*arm_movsi_insn} (nil))

(insn 33 132 34 6 arch/arm/mm/dma-mapping.c:492 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 offset ] [140])
            (reg:SI 3 r3))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 4 r4 [orig:140 offset ] [140])
            (const_int 4095 [0xfff]))
        (nil)))

(jump_insn 34 33 35 6 arch/arm/mm/dma-mapping.c:492 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 35 34 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 37 35 39 7 NOTE_INSN_DELETED)

(insn 39 37 36 7 arch/arm/mm/dma-mapping.c:494 (set (reg:SI 3 r3 [155])
        (ashift:SI (reg/v:SI 4 r4 [orig:140 offset ] [140])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 36 39 38 7 arch/arm/mm/dma-mapping.c:493 (set (reg:SI 4 r4 [153])
        (lshiftrt:SI (reg/v:SI 4 r4 [orig:140 offset ] [140])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 38 36 40 7 arch/arm/mm/dma-mapping.c:493 (set (reg/v/f:SI 5 r5 [orig:139 page ] [139])
        (plus:SI (mult:SI (reg:SI 4 r4 [153])
                (const_int 32 [0x20]))
            (reg/v/f:SI 5 r5 [orig:139 page ] [139]))) 270 {*arith_shiftsi} (nil))

(insn 40 38 41 7 arch/arm/mm/dma-mapping.c:494 (set (reg/v:SI 4 r4 [orig:140 offset ] [140])
        (lshiftrt:SI (reg:SI 3 r3 [155])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (and:SI (reg/v:SI 4 r4 [orig:140 offset ] [140])
            (const_int 4095 [0xfff]))
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 41 40 42 8 62 "" [1 uses])

(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 8 arch/arm/mm/dma-mapping.c:496 (set (reg/v:SI 7 r7 [orig:136 len ] [136])
        (minus:SI (const_int 4096 [0x1000])
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 28 {*arm_subsi3_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 44 43 45 9 61 "" [1 uses])

(note 45 44 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 48 45 46 9 NOTE_INSN_DELETED)

(insn 46 48 47 9 arch/arm/mm/dma-mapping.c:498 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:139 page ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn 47 46 49 9 arch/arm/mm/dma-mapping.c:498 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmap_high_get") [flags 0x41] <function_decl 0x11268f00 kmap_high_get>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 49 47 50 9 arch/arm/mm/dma-mapping.c:499 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 50 49 51 9 arch/arm/mm/dma-mapping.c:499 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  10 [69.8%]  (fallthru)
;; Succ edge  11 [30.2%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  9 [69.8%]  (fallthru)
(note 51 50 52 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 52 51 53 10 NOTE_INSN_DELETED)

(insn 53 52 54 10 arch/arm/mm/dma-mapping.c:501 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 4 {*arm_addsi3} (nil))

(insn 54 53 55 10 arch/arm/mm/dma-mapping.c:501 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:136 len ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 56 10 arch/arm/mm/dma-mapping.c:501 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:142 dir ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn 56 55 57 10 arch/arm/mm/dma-mapping.c:501 (parallel [
            (call (mem:SI (reg/v/f:SI 9 r9 [orig:143 op ] [143]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 57 56 58 10 arch/arm/mm/dma-mapping.c:502 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:139 page ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn 58 57 121 10 arch/arm/mm/dma-mapping.c:502 (parallel [
            (call (mem:SI (symbol_ref:SI ("kunmap_high") [flags 0x41] <function_decl 0x11268e80 kunmap_high>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 121 58 122 10 (set (pc)
        (label_ref 79)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 13)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 122 121 61)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [30.2%] 
(code_label 61 122 62 11 63 "" [1 uses])

(note 62 61 65 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 65 62 64 11 NOTE_INSN_DELETED)

(insn 64 65 66 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:SI 3 r3 [orig:159 cacheid ] [159])
        (mem/c/i:SI (reg/f:SI 11 fp [164]) [0 cacheid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 11 fp [164]) [0 cacheid+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x11249780 cacheid>) [0 cacheid+0 S4 A32])
            (nil))))

(insn 66 64 67 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:159 cacheid ] [159])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 67 66 68 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  12 [29.0%]  (fallthru)
;; Succ edge  13 [71.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  11 [29.0%]  (fallthru)
(note 68 67 72 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 72 68 69 12 NOTE_INSN_DELETED)

(insn 69 72 70 12 arch/arm/mm/dma-mapping.c:505 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:139 page ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn 70 69 71 12 arch/arm/mm/dma-mapping.c:505 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__kmap_atomic") [flags 0x41] <function_decl 0x11273080 __kmap_atomic>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 71 70 73 12 arch/arm/mm/dma-mapping.c:505 (set (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 73 71 74 12 arch/arm/mm/dma-mapping.c:506 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 4 {*arm_addsi3} (nil))

(insn 74 73 75 12 arch/arm/mm/dma-mapping.c:506 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:136 len ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 75 74 76 12 arch/arm/mm/dma-mapping.c:506 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:142 dir ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn 76 75 77 12 arch/arm/mm/dma-mapping.c:506 (parallel [
            (call (mem:SI (reg/v/f:SI 9 r9 [orig:143 op ] [143]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 77 76 78 12 arch/arm/mm/dma-mapping.c:507 discrim 1 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn 78 77 79 12 arch/arm/mm/dma-mapping.c:507 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__kunmap_atomic") [flags 0x41] <function_decl 0x11273100 __kunmap_atomic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 10 12 15) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  11 [71.0%] 
;; Pred edge  10 [100.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  15 [100.0%] 
(code_label 79 78 80 13 64 "" [3 uses])

(note 80 79 81 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 81 80 82 13 NOTE_INSN_DELETED)

(insn 82 81 83 13 arch/arm/mm/dma-mapping.c:516 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 6 r6 [orig:137 left ] [137])
                        (reg/v:SI 7 r7 [orig:136 len ] [136]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 6 r6 [orig:137 left ] [137])
                (minus:SI (reg/v:SI 6 r6 [orig:137 left ] [137])
                    (reg/v:SI 7 r7 [orig:136 len ] [136])))
        ]) 29 {*subsi3_compare0} (nil))

(jump_insn 83 82 84 13 arch/arm/mm/dma-mapping.c:516 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1400 [0x578])
        (nil)))
;; End of basic block 13 -> ( 14 16)
;; lr  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  14 [86.0%]  (fallthru)
;; Succ edge  16 [14.0%]  (loop_exit)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  13 [86.0%]  (fallthru)
(note 84 83 85 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 118 14 arch/arm/mm/dma-mapping.c:514 (set (reg/v/f:SI 5 r5 [orig:139 page ] [139])
        (plus:SI (reg/v/f:SI 5 r5 [orig:139 page ] [139])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 118 85 123 14 arch/arm/mm/dma-mapping.c:513 (set (reg/v:SI 4 r4 [orig:140 offset ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 123 118 124 14 (set (pc)
        (label_ref 87)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  3 [100.0%]  (dfs_back)

(barrier 124 123 94)

;; Start of basic block ( 3) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  3 [72.0%] 
(code_label 94 124 95 15 59 "" [1 uses])

(note 95 94 98 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 98 95 99 15 NOTE_INSN_DELETED)

(note 99 98 96 15 NOTE_INSN_DELETED)

(insn 96 99 104 15 arch/arm/mm/dma-mapping.c:510 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:139 page ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 104 96 97 15 arch/arm/mm/dma-mapping.c:487 (set (reg/v:SI 7 r7 [orig:136 len ] [136])
        (reg/v:SI 6 r6 [orig:137 left ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn 97 104 101 15 arch/arm/mm/dma-mapping.c:510 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("page_address") [flags 0x41] <function_decl 0x10f7b880 page_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 101 97 102 15 arch/arm/mm/dma-mapping.c:511 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:137 left ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 102 101 100 15 arch/arm/mm/dma-mapping.c:511 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:142 dir ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 100 102 103 15 arch/arm/mm/dma-mapping.c:511 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 4 {*arm_addsi3} (nil))

(call_insn 103 100 125 15 arch/arm/mm/dma-mapping.c:511 (parallel [
            (call (mem:SI (reg/v/f:SI 9 r9 [orig:143 op ] [143]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 125 103 126 15 (set (pc)
        (label_ref 79)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 13)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 126 125 110)

;; Start of basic block ( 13) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  13 [14.0%]  (loop_exit)
(code_label 110 126 113 16 67 "" [1 uses])

(note 113 110 128 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 16 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 128 113 129 NOTE_INSN_DELETED)

(note 129 128 0 NOTE_INSN_DELETED)


;; Function ___dma_page_dev_to_cpu (___dma_page_dev_to_cpu)[0:1288]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 67.
verify found no changes in insn with uid = 67.
deleting insn with uid = 29.
scanning new insn with uid = 68.
verify found no changes in insn with uid = 68.
deleting insn with uid = 9.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 13 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 16 (  1.8)

Pass 0 for finding allocno costs

    a2 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r155: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a2(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a6(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 55(l0): point = 1
   Insn 53(l0): point = 3
   Insn 54(l0): point = 5
   Insn 51(l0): point = 8
   Insn 50(l0): point = 10
   Insn 47(l0): point = 13
   Insn 46(l0): point = 15
   Insn 45(l0): point = 17
   Insn 36(l0): point = 23
   Insn 31(l0): point = 25
   Insn 30(l0): point = 27
   Insn 67(l0): point = 29
   Insn 35(l0): point = 31
   Insn 34(l0): point = 33
   Insn 33(l0): point = 35
   Insn 32(l0): point = 37
   Insn 26(l0): point = 40
   Insn 25(l0): point = 42
   Insn 24(l0): point = 44
   Insn 22(l0): point = 46
   Insn 20(l0): point = 48
   Insn 19(l0): point = 50
   Insn 17(l0): point = 53
   Insn 16(l0): point = 55
   Insn 15(l0): point = 57
   Insn 14(l0): point = 59
   Insn 12(l0): point = 62
   Insn 10(l0): point = 64
   Insn 68(l0): point = 66
   Insn 4(l0): point = 68
   Insn 3(l0): point = 70
   Insn 2(l0): point = 72
   Insn 11(l0): point = 74
   Insn 5(l0): point = 76
 a0(r136): [6..72]
 a1(r138): [11..68]
 a2(r155): [16..20]
 a3(r137): [18..70]
 a4(r139): [21..76] [18..19]
 a5(r148): [26..27]
 a6(r147): [28..29]
 a7(r133): [41..57]
 a8(r134): [45..46]
 a9(r144): [47..48]
 a10(r142): [49..50]
 a11(r135): [51..64]
 a12(r141): [58..59]
 a13(r140): [65..66]
Compressing live ranges: from 79 to 29 - 36%
Ranges after the compression:
 a0(r136): [0..27]
 a1(r138): [1..25]
 a2(r155): [2..5]
 a3(r137): [3..26]
 a4(r139): [6..28] [3..4]
 a5(r148): [7..8]
 a6(r147): [9..10]
 a7(r133): [11..19]
 a8(r134): [12..13]
 a9(r144): [14..15]
 a10(r142): [16..17]
 a11(r135): [18..22]
 a12(r141): [20..21]
 a13(r140): [23..24]
+++Allocating 112 bytes for conflict table (uncompressed size 112)
;; a0(r136,l0) conflicts: a1(r138,l0) a2(r155,l0) a3(r137,l0) a4(r139,l0) a5(r148,l0) a6(r147,l0) a7(r133,l0) a8(r134,l0) a9(r144,l0) a10(r142,l0) a11(r135,l0) a12(r141,l0) a13(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r138,l0) conflicts: a0(r136,l0) a2(r155,l0) a3(r137,l0) a4(r139,l0) a5(r148,l0) a6(r147,l0) a7(r133,l0) a8(r134,l0) a9(r144,l0) a10(r142,l0) a11(r135,l0) a12(r141,l0) a13(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r155,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r137,l0) conflicts: a0(r136,l0) a1(r138,l0) a2(r155,l0) a4(r139,l0) a5(r148,l0) a6(r147,l0) a7(r133,l0) a8(r134,l0) a9(r144,l0) a10(r142,l0) a11(r135,l0) a12(r141,l0) a13(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r139,l0) conflicts: a0(r136,l0) a1(r138,l0) a2(r155,l0) a3(r137,l0) a5(r148,l0) a6(r147,l0) a7(r133,l0) a8(r134,l0) a9(r144,l0) a10(r142,l0) a11(r135,l0) a12(r141,l0) a13(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r148,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a6(r147,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a7(r133,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0) a8(r134,l0) a9(r144,l0) a10(r142,l0) a11(r135,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r134,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0) a7(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r144,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0) a7(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r142,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0) a7(r133,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r135,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0) a7(r133,l0) a12(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r141,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0) a11(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r140,l0) conflicts: a0(r136,l0) a1(r138,l0) a3(r137,l0) a4(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a10(r142)<->a11(r135)@125:shuffle
  cp1:a9(r144)<->a10(r142)@125:shuffle
  cp2:a8(r134)<->a9(r144)@125:shuffle
  regions=1, blocks=9, points=29
    allocnos=14, copies=3, conflicts=0, ranges=15

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 8 7 6 5 4 3 2
    all: 0r136 1r138 2r155 3r137 4r139 5r148 6r147 7r133 8r134 9r144 10r142 11r135 12r141 13r140
    modified regnos: 133 134 135 136 137 138 139 140 141 142 144 147 148 155
    border:
    Pressure: GENERAL_REGS=9
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 133 of GENERAL_REGS has 3 regs less
      Pushing a13(r140,l0)
      Pushing a12(r141,l0)
      Pushing a11(r135,l0)
      Pushing a10(r142,l0)
      Pushing a9(r144,l0)
      Pushing a8(r134,l0)
      Pushing a2(r155,l0)
      Pushing a7(r133,l0)
      Pushing a6(r147,l0)
      Pushing a5(r148,l0)
      Pushing a4(r139,l0)
      Pushing a3(r137,l0)
      Pushing a1(r138,l0)
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 4
      Popping a1(r138,l0)  -- assign reg 5
      Popping a3(r137,l0)  -- assign reg 6
      Popping a4(r139,l0)  -- assign reg 7
      Popping a5(r148,l0)  -- assign reg 12
      Popping a6(r147,l0)  -- assign reg 12
      Popping a7(r133,l0)  -- assign reg 3
      Popping a2(r155,l0)  -- assign reg 3
      Popping a8(r134,l0)  -- assign reg 0
      Popping a9(r144,l0)  -- assign reg 0
      Popping a10(r142,l0)  -- assign reg 0
      Popping a11(r135,l0)  -- assign reg 0
      Popping a12(r141,l0)  -- assign reg 3
      Popping a13(r140,l0)  -- assign reg 3
Disposition:
    7:r133 l0     3    8:r134 l0     0   11:r135 l0     0    0:r136 l0     4
    3:r137 l0     6    1:r138 l0     5    4:r139 l0     7   13:r140 l0     3
   12:r141 l0     3   10:r142 l0     0    9:r144 l0     0    6:r147 l0    12
    5:r148 l0    12    2:r155 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 139
insn=11, live_throughout: 0, 1, 2, 13, 139, dead_or_set: 
insn=2, live_throughout: 1, 2, 13, 24, 139, dead_or_set: 0, 136
insn=3, live_throughout: 2, 13, 24, 136, 139, dead_or_set: 1, 137
insn=4, live_throughout: 13, 24, 136, 137, 139, dead_or_set: 2, 138
insn=68, live_throughout: 13, 24, 136, 137, 138, 139, dead_or_set: 140
insn=10, live_throughout: 13, 24, 136, 137, 138, 139, dead_or_set: 135, 140
insn=12, live_throughout: 13, 135, 136, 137, 138, 139, dead_or_set: 
insn=14, live_throughout: 13, 135, 136, 137, 138, 139, dead_or_set: 141
insn=15, live_throughout: 13, 135, 136, 137, 138, 139, dead_or_set: 133, 141
insn=16, live_throughout: 13, 133, 135, 136, 137, 138, 139, dead_or_set: 
insn=17, live_throughout: 13, 133, 135, 136, 137, 138, 139, dead_or_set: 
insn=19, live_throughout: 13, 133, 136, 137, 138, 139, dead_or_set: 135, 142
insn=20, live_throughout: 13, 133, 136, 137, 138, 139, dead_or_set: 142, 144
insn=22, live_throughout: 13, 133, 136, 137, 138, 139, dead_or_set: 134, 144
insn=24, live_throughout: 13, 133, 136, 137, 138, 139, dead_or_set: 0, 134
insn=25, live_throughout: 0, 13, 133, 136, 137, 138, 139, dead_or_set: 1
insn=26, live_throughout: 13, 136, 137, 138, 139, dead_or_set: 0, 1, 14, 133
insn=27, live_throughout: 13, 136, 137, 138, 139, dead_or_set: 
insn=32, live_throughout: 13, 136, 137, 138, 139, dead_or_set: 0
insn=33, live_throughout: 0, 13, 136, 137, 138, 139, dead_or_set: 1
insn=34, live_throughout: 0, 1, 13, 136, 137, 138, 139, dead_or_set: 2
insn=35, live_throughout: 0, 1, 2, 13, 136, 137, 138, 139, dead_or_set: 3
insn=67, live_throughout: 0, 1, 2, 3, 13, 136, 137, 138, 139, dead_or_set: 147
insn=30, live_throughout: 0, 1, 2, 3, 13, 136, 137, 138, 139, dead_or_set: 147, 148
insn=31, live_throughout: 0, 1, 2, 3, 13, 136, 137, 138, 139, dead_or_set: 148
insn=36, live_throughout: 13, 136, 137, 138, 139, dead_or_set: 0, 1, 2, 3, 14
insn=45, live_throughout: 13, 14, 136, 138, dead_or_set: 137, 139, 155
insn=46, live_throughout: 13, 14, 136, 138, dead_or_set: 155
insn=47, live_throughout: 13, 14, 136, 138, dead_or_set: 
insn=50, live_throughout: 13, 14, 136, dead_or_set: 138
insn=51, live_throughout: 13, 14, 136, dead_or_set: 
insn=54, live_throughout: 13, 14, dead_or_set: 1, 136
insn=53, live_throughout: 1, 13, 14, dead_or_set: 0
insn=55, live_throughout: 13, 14, dead_or_set: 0, 1
insn=62, live_throughout: 13, 14, dead_or_set: 
init_insns for 140: (insn_list:REG_DEP_TRUE 68 (nil))
init_insns for 141: (insn_list:REG_DEP_TRUE 14 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 67 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 31 (nil))
changing reg in insn 15
changing reg in insn 26
changing reg in insn 16
changing reg in insn 22
changing reg in insn 24
changing reg in insn 10
changing reg in insn 19
changing reg in insn 2
changing reg in insn 54
changing reg in insn 32
changing reg in insn 19
changing reg in insn 3
changing reg in insn 45
changing reg in insn 22
changing reg in insn 33
changing reg in insn 4
changing reg in insn 25
changing reg in insn 50
changing reg in insn 34
changing reg in insn 5
changing reg in insn 45
changing reg in insn 35
changing reg in insn 11
changing reg in insn 68
changing reg in insn 10
changing reg in insn 14
changing reg in insn 15
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 67
changing reg in insn 30
changing reg in insn 30
changing reg in insn 31
changing reg in insn 45
changing reg in insn 46
Spilling for insn 31.

Reloads for insn # 31
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
deleting insn with uid = 24.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 26.
deleting insn with uid = 26.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 55.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 13 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 16 (  1.8)


___dma_page_dev_to_cpu

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,8u,1d} r1={7d,4u} r2={5d,2u} r3={9d,7u} r4={1d,3u} r5={1d,3u} r6={1d,3u} r7={1d,3u} r12={6d,2u} r13={1d,12u,1d} r14={3d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={8d,4u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 437{383d,52u,2e} in 33{30 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 6 11 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v:SI 7 r7 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 11 5 2 2 arch/arm/mm/dma-mapping.c:543 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:139 dir ] [139])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn 2 11 3 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v/f:SI 4 r4 [orig:136 page ] [136])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 4 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v:SI 6 r6 [orig:137 off ] [137])
        (reg:SI 1 r1 [ off ])) 167 {*arm_movsi_insn} (nil))

(insn 4 3 68 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v:SI 5 r5 [orig:138 size ] [138])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 68 4 10 2 arch/arm/mm/dma-mapping.c:539 (set (reg/f:SI 3 r3 [140])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn 10 68 12 2 arch/arm/mm/dma-mapping.c:539 (set (reg/f:SI 0 r0 [orig:135 mem_map.393 ] [135])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [140]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(jump_insn 12 10 13 2 arch/arm/mm/dma-mapping.c:543 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [72.0%]  (fallthru)
;; Succ edge  5 [28.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%]  (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [141])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(insn 15 14 16 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [orig:133 D.25071 ] [133])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [141]) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
        (nil)))

(insn 16 15 17 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 D.25071 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [69.8%]  (fallthru)
;; Succ edge  5 [30.2%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [69.8%]  (fallthru)
(note 18 17 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 21 18 23 4 NOTE_INSN_DELETED)

(note 23 21 19 4 NOTE_INSN_DELETED)

(insn 19 23 20 4 arch/arm/mm/dma-mapping.c:539 (set (reg:SI 0 r0 [142])
        (minus:SI (reg/v/f:SI 4 r4 [orig:136 page ] [136])
            (reg/f:SI 0 r0 [orig:135 mem_map.393 ] [135]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 19 22 4 arch/arm/mm/dma-mapping.c:539 (set (reg:SI 0 r0 [144])
        (ashiftrt:SI (reg:SI 0 r0 [142])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 0 r0 [142])
            (const_int 32 [0x20]))
        (nil)))

(insn 22 20 25 4 arch/arm/mm/dma-mapping.c:539 (set (reg/v:SI 0 r0 [orig:134 paddr ] [134])
        (plus:SI (mult:SI (reg:SI 0 r0 [144])
                (const_int 4096 [0x1000]))
            (reg/v:SI 6 r6 [orig:137 off ] [137]))) 270 {*arith_shiftsi} (nil))

(insn 25 22 26 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 5 r5 [orig:138 size ] [138]))) 4 {*arm_addsi3} (nil))

(call_insn 26 25 27 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:133 D.25071 ] [133]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 2 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [28.0%] 
;; Pred edge  3 [30.2%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 27 26 28 5 71 "" [2 uses])

(note 28 27 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 37 28 38 5 NOTE_INSN_DELETED)

(note 38 37 40 5 NOTE_INSN_DELETED)

(note 40 38 41 5 NOTE_INSN_DELETED)

(note 41 40 43 5 NOTE_INSN_DELETED)

(note 43 41 44 5 NOTE_INSN_DELETED)

(note 44 43 32 5 NOTE_INSN_DELETED)

(insn 32 44 33 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:136 page ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 33 32 34 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:137 off ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 34 33 35 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:138 size ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 35 34 67 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 3 r3)
        (reg/v:SI 7 r7 [orig:139 dir ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 67 35 30 5 arch/arm/mm/dma-mapping.c:546 (set (reg/f:SI 12 ip [147])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(insn 30 67 31 5 arch/arm/mm/dma-mapping.c:546 (set (reg/f:SI 12 ip [orig:148 cpu_cache.dma_unmap_area ] [148])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 12 ip [147])
                (const_int 32 [0x20])) [0 cpu_cache.dma_unmap_area+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
                        (const_int 32 [0x20]))) [0 cpu_cache.dma_unmap_area+0 S4 A32])
            (nil))))

(insn 31 30 36 5 arch/arm/mm/dma-mapping.c:546 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [orig:148 cpu_cache.dma_unmap_area ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn 36 31 45 5 arch/arm/mm/dma-mapping.c:546 (parallel [
            (call (mem:SI (symbol_ref:SI ("dma_cache_maint_page") [flags 0x3] <function_decl 0x1145ee00 dma_cache_maint_page>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 45 36 46 5 arch/arm/mm/dma-mapping.c:551 (parallel [
            (set (reg:SI 3 r3 [155])
                (and:SI (ne:SI (reg/v:SI 7 r7 [orig:139 dir ] [139])
                        (const_int 1 [0x1]))
                    (eq:SI (reg/v:SI 6 r6 [orig:137 off ] [137])
                        (const_int 0 [0x0]))))
            (clobber (reg:CC 24 cc))
        ]) 290 {*and_scc_scc_nodom} (nil))

(insn 46 45 47 5 arch/arm/mm/dma-mapping.c:551 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [155])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 47 46 48 5 arch/arm/mm/dma-mapping.c:551 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  6 [61.0%]  (fallthru)
;; Succ edge  8 [39.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [61.0%]  (fallthru)
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 49 48 50 6 NOTE_INSN_DELETED)

(insn 50 49 51 6 arch/arm/mm/dma-mapping.c:551 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:138 size ] [138])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 51 50 52 6 arch/arm/mm/dma-mapping.c:551 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 52 51 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 54 52 53 7 arch/arm/mm/dma-mapping.c:552 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:136 page ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 53 54 55 7 arch/arm/mm/dma-mapping.c:552 (set (reg:SI 0 r0)
        (const_int 9 [0x9])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 55 53 56 7 arch/arm/mm/dma-mapping.c:552 (parallel [
            (call (mem:SI (symbol_ref:SI ("_set_bit") [flags 0x41] <function_decl 0x109c0500 _set_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 56 55 62)

;; Start of basic block ( 6 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [61.0%] 
;; Pred edge  5 [39.0%] 
(code_label 62 56 65 8 73 "" [2 uses])

(note 65 62 66 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 66 65 69 NOTE_INSN_DELETED)

(note 69 66 0 NOTE_INSN_DELETED)


;; Function dma_sync_sg_for_cpu (dma_sync_sg_for_cpu)[0:1291]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a9 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a7(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r146: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a7(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 34(l0): point = 1
   Insn 33(l0): point = 3
   Insn 32(l0): point = 5
   Insn 22(l0): point = 8
   Insn 21(l0): point = 10
   Insn 20(l0): point = 12
   Insn 62(l0): point = 15
   Insn 14(l0): point = 17
   Insn 10(l0): point = 19
   Insn 9(l0): point = 21
   Insn 5(l0): point = 23
   Insn 4(l0): point = 25
   Insn 52(l1): point = 28
   Insn 51(l1): point = 30
   Insn 47(l1): point = 33
   Insn 46(l1): point = 35
   Insn 44(l1): point = 37
   Insn 45(l1): point = 39
   Insn 43(l1): point = 41
   Insn 42(l1): point = 43
   Insn 41(l1): point = 45
   Insn 40(l1): point = 47
   Insn 39(l1): point = 49
   Insn 29(l1): point = 52
   Insn 28(l1): point = 54
   Insn 26(l1): point = 56
   Insn 17(l1): point = 59
   Insn 16(l1): point = 61
   Insn 15(l1): point = 63
 a0(r146): [15..17]
 a1(r134): [15..19]
 a2(r135): [15..21]
 a3(r139): [15..23]
 a4(r138): [15..25]
 a5(r134): [28..65]
 a6(r135): [40..65] [28..33]
 a7(r138): [28..65]
 a8(r139): [28..65]
 a9(r146): [28..65]
 a10(r133): [50..56]
 a11(r141): [62..63]
 Rebuilding regno allocno list for 141
 Rebuilding regno allocno list for 133
Compressing live ranges: from 66 to 14 - 21%
Ranges after the compression:
 a0(r146): [6..13] [0..1]
 a1(r134): [6..13] [0..2]
 a2(r135): [8..13] [6..7] [0..3]
 a3(r139): [6..13] [0..4]
 a4(r138): [6..13] [0..5]
 a10(r133): [9..10]
 a11(r141): [11..12]
+++Allocating 56 bytes for conflict table (uncompressed size 96)
;; a0(r146,l0) conflicts: a1(r134,l0) a2(r135,l0) a3(r139,l0) a4(r138,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r134,l0) conflicts: a0(r146,l0) a2(r135,l0) a3(r139,l0) a4(r138,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r135,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r139,l0) a4(r138,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r139,l0) conflicts: a0(r146,l0) a1(r134,l0) a2(r135,l0) a4(r138,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r138,l0) conflicts: a0(r146,l0) a1(r134,l0) a2(r135,l0) a3(r139,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a10(r133,l0) conflicts: a0(r146,l0) a1(r134,l0) a2(r135,l0) a3(r139,l0) a4(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r141,l0) conflicts: a0(r146,l0) a1(r134,l0) a2(r135,l0) a3(r139,l0) a4(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=2, blocks=10, points=14
    allocnos=12, copies=0, conflicts=0, ranges=13

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 9 6 4 8 7 5 3 2
    all: 0r146 1r134 2r135 3r139 4r138 10r133 11r141
    modified regnos: 133 134 135 138 139 141 146
    border:
    Pressure: GENERAL_REGS=10
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 134 of GENERAL_REGS has 5 regs less
    Reg 135 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
      Pushing a11(r141,l0)
      Pushing a10(r133,l0)
      Pushing a0(r146,l0)(potential spill: pri=2000, cost=20000)
      Pushing a4(r138,l0)
      Pushing a3(r139,l0)
      Pushing a1(r134,l0)
      Pushing a2(r135,l0)
      Popping a2(r135,l0)  -- assign reg 4
      Popping a1(r134,l0)  -- assign reg 5
      Popping a3(r139,l0)  -- assign reg 6
      Popping a4(r138,l0)  -- assign reg 7
      Popping a0(r146,l0)  -- assign reg 8
      Popping a10(r133,l0)  -- assign reg 0
      Popping a11(r141,l0)  -- assign reg 3
Disposition:
   10:r133 l0     0    1:r134 l0     5    2:r135 l0     4    4:r138 l0     7
    3:r139 l0     6   11:r141 l0     3    0:r146 l0     8
New iteration of spill/restore move
+++Costs: overall -250, reg -250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=4, live_throughout: 1, 3, 13, 14, dead_or_set: 2, 138
insn=5, live_throughout: 1, 13, 14, 138, dead_or_set: 3, 139
insn=9, live_throughout: 13, 14, 138, 139, dead_or_set: 1, 135
insn=10, live_throughout: 13, 14, 135, 138, 139, dead_or_set: 134
insn=14, live_throughout: 13, 14, 134, 135, 138, 139, dead_or_set: 146
insn=62, live_throughout: 13, 14, 134, 135, 138, 139, 146, dead_or_set: 
insn=50, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 
insn=15, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 141
insn=16, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 141
insn=17, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 
insn=20, live_throughout: 13, dead_or_set: 0
insn=21, live_throughout: 0, 13, dead_or_set: 1
insn=22, live_throughout: 13, dead_or_set: 0, 1, 14
insn=24, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 
insn=26, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 133
insn=28, live_throughout: 13, 133, 134, 135, 138, 139, 146, dead_or_set: 
insn=29, live_throughout: 13, 133, 134, 135, 138, 139, 146, dead_or_set: 
insn=32, live_throughout: 13, dead_or_set: 0
insn=33, live_throughout: 0, 13, dead_or_set: 1
insn=34, live_throughout: 13, dead_or_set: 0, 1, 14
insn=36, live_throughout: 13, 133, 134, 135, 138, 139, 146, dead_or_set: 
insn=39, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 0, 133
insn=40, live_throughout: 0, 13, 134, 135, 138, 139, 146, dead_or_set: 1
insn=41, live_throughout: 0, 1, 13, 134, 135, 138, 139, 146, dead_or_set: 2
insn=42, live_throughout: 0, 1, 2, 13, 134, 135, 138, 139, 146, dead_or_set: 3
insn=43, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 0, 1, 2, 3, 14
insn=45, live_throughout: 13, 134, 138, 139, 146, dead_or_set: 0, 135
insn=44, live_throughout: 0, 13, 138, 139, 146, dead_or_set: 134
insn=46, live_throughout: 13, 134, 138, 139, 146, dead_or_set: 0, 14
insn=47, live_throughout: 13, 14, 134, 138, 139, 146, dead_or_set: 0, 135
insn=48, live_throughout: 13, 14, 134, 135, 138, 139, 146, dead_or_set: 
insn=51, live_throughout: 13, 14, 134, 135, 138, 139, 146, dead_or_set: 
insn=52, live_throughout: 13, 14, 134, 135, 138, 139, 146, dead_or_set: 
init_insns for 141: (insn_list:REG_DEP_TRUE 15 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 14 (nil))
changing reg in insn 26
changing reg in insn 39
changing reg in insn 28
changing reg in insn 44
changing reg in insn 10
changing reg in insn 51
changing reg in insn 44
changing reg in insn 9
changing reg in insn 47
changing reg in insn 45
changing reg in insn 41
changing reg in insn 40
changing reg in insn 26
changing reg in insn 15
changing reg in insn 15
changing reg in insn 4
changing reg in insn 51
changing reg in insn 5
changing reg in insn 42
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 14
changing reg in insn 16


try_optimize_cfg iteration 1

Deleting fallthru block 9.
deleting insn with uid = 60.
deleting block 9


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 9 count 17 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 9 count 17 (  1.9)


dma_sync_sg_for_cpu

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,7u} r1={8d,4u} r2={6d,2u} r3={7d,3u,1d} r4={2d,5u,1d} r5={2d,2u} r6={1d,1u} r7={1d,1u} r8={1d,1u} r12={5d} r13={1d,12u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={7d,3u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 540{496d,42u,2e} in 29{25 regular + 4 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 4 2 NOTE_INSN_FUNCTION_BEG)

(insn 4 6 5 2 arch/arm/mm/dma-mapping.c:628 (set (reg/v:SI 7 r7 [orig:138 nents ] [138])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 9 2 arch/arm/mm/dma-mapping.c:628 (set (reg/v:SI 6 r6 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 9 5 10 2 arch/arm/mm/dma-mapping.c:632 (set (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 14 2 arch/arm/mm/dma-mapping.c:632 (set (reg/v:SI 5 r5 [orig:134 i ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 14 10 62 2 include/linux/scatterlist.h:96 (set (reg:SI 8 r8 [146])
        (const_int -2023406815 [0xffffffff87654321])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -2023406815 [0xffffffff87654321])
        (nil)))

(jump_insn 62 14 63 2 arch/arm/mm/dma-mapping.c:632 (set (pc)
        (label_ref 48)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%] 

(barrier 63 62 50)

;; Start of basic block ( 8) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [97.0%] 
(code_label 50 63 13 3 80 "" [1 uses])

(note 13 50 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 13 16 3 include/linux/scatterlist.h:96 (set (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
        (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135]) [0 <variable>.sg_magic+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135]) [0 <variable>.sg_magic+0 S4 A32])
        (nil)))

(insn 16 15 17 3 include/linux/scatterlist.h:96 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
            (reg:SI 8 r8 [146]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
            (const_int -2023406815 [0xffffffff87654321]))
        (nil)))

(jump_insn 17 16 18 3 include/linux/scatterlist.h:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru,loop_exit)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru,loop_exit)
(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 18 21 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 21 20 22 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 1 r1)
        (const_int 96 [0x60])) 167 {*arm_movsi_insn} (nil))

(call_insn 22 21 23 4 include/linux/scatterlist.h:96 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 23 22 24)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 24 23 25 5 78 "" [1 uses])

(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 27 25 26 5 NOTE_INSN_DELETED)

(insn 26 27 28 5 include/linux/scatterlist.h:97 (set (reg:SI 0 r0 [orig:133 D.25085 ] [133])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 4 [0x4])) [0 <variable>.page_link+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 28 26 29 5 include/linux/scatterlist.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 0 r0 [orig:133 D.25085 ] [133])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 29 28 30 5 include/linux/scatterlist.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru,loop_exit)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru,loop_exit)
(note 30 29 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 30 33 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 33 32 34 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 1 r1)
        (const_int 97 [0x61])) 167 {*arm_movsi_insn} (nil))

(call_insn 34 33 35 6 include/linux/scatterlist.h:97 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 35 34 36)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%] 
(code_label 36 35 37 7 79 "" [1 uses])

(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 38 37 39 7 NOTE_INSN_DELETED)

(insn 39 38 40 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 0 r0)
        (and:SI (reg:SI 0 r0 [orig:133 D.25085 ] [133])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 40 39 41 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 8 [0x8])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 41 40 42 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 41 43 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 3 r3)
        (reg/v:SI 6 r6 [orig:139 dir ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn 43 42 45 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_dev_to_cpu") [flags 0x3] <function_decl 0x11060f80 ___dma_page_dev_to_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 45 43 44 7 arch/arm/mm/dma-mapping.c:632 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 s ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 44 45 46 7 arch/arm/mm/dma-mapping.c:632 (set (reg/v:SI 5 r5 [orig:134 i ] [134])
        (plus:SI (reg/v:SI 5 r5 [orig:134 i ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(call_insn 46 44 47 7 arch/arm/mm/dma-mapping.c:632 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 47 46 48 7 arch/arm/mm/dma-mapping.c:632 (set (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 7 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 48 47 49 8 77 "" [1 uses])

(note 49 48 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 51 49 52 8 arch/arm/mm/dma-mapping.c:632 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:134 i ] [134])
            (reg/v:SI 7 r7 [orig:138 nents ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 52 51 65 8 arch/arm/mm/dma-mapping.c:632 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9700 [0x25e4])
        (nil)))
;; End of basic block 8 -> ( 3 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  3 [97.0%] 
;; Succ edge  EXIT [3.0%]  (fallthru,loop_exit)

(note 65 52 66 NOTE_INSN_DELETED)

(note 66 65 0 NOTE_INSN_DELETED)


;; Function dma_unmap_sg (dma_unmap_sg)[0:1290]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 11 (  1.8)
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a9 (r147,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a12(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 45(l0): point = 1
   Insn 15(l0): point = 3
   Insn 10(l0): point = 5
   Insn 9(l0): point = 7
   Insn 5(l0): point = 9
   Insn 4(l0): point = 11
   Insn 35(l1): point = 14
   Insn 27(l1): point = 16
   Insn 34(l1): point = 18
   Insn 25(l1): point = 20
   Insn 30(l1): point = 23
   Insn 29(l1): point = 25
   Insn 28(l1): point = 27
   Insn 26(l1): point = 29
   Insn 23(l1): point = 31
   Insn 22(l1): point = 33
   Insn 16(l1): point = 35
   Insn 20(l1): point = 37
   Insn 24(l1): point = 39
   Insn 18(l1): point = 41
   Insn 14(l1): point = 43
 a0(r147): [1..3]
 a1(r133): [1..5]
 a2(r134): [1..7]
 a3(r139): [1..9]
 a4(r138): [1..11]
 a5(r133): [14..45]
 a6(r134): [28..45] [14..23]
 a7(r138): [14..45]
 a8(r139): [14..45]
 a9(r147): [14..45]
 a10(r146): [32..37]
 a11(r144): [34..41]
 a12(r141): [34..35]
 a13(r135): [36..43]
 Rebuilding regno allocno list for 146
 Rebuilding regno allocno list for 144
 Rebuilding regno allocno list for 141
 Rebuilding regno allocno list for 135
Compressing live ranges: from 46 to 17 - 36%
Ranges after the compression:
 a0(r147): [6..16] [0..1]
 a1(r133): [6..16] [0..2]
 a2(r134): [8..16] [6..7] [0..3]
 a3(r139): [6..16] [0..4]
 a4(r138): [6..16] [0..5]
 a10(r146): [9..13]
 a11(r144): [10..14]
 a12(r141): [10..11]
 a13(r135): [12..15]
+++Allocating 72 bytes for conflict table (uncompressed size 112)
;; a0(r147,l0) conflicts: a1(r133,l0) a2(r134,l0) a3(r139,l0) a4(r138,l0) a10(r146,l0) a12(r141,l0) a11(r144,l0) a13(r135,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r133,l0) conflicts: a0(r147,l0) a2(r134,l0) a3(r139,l0) a4(r138,l0) a10(r146,l0) a12(r141,l0) a11(r144,l0) a13(r135,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r134,l0) conflicts: a0(r147,l0) a1(r133,l0) a3(r139,l0) a4(r138,l0) a10(r146,l0) a12(r141,l0) a11(r144,l0) a13(r135,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r139,l0) conflicts: a0(r147,l0) a1(r133,l0) a2(r134,l0) a4(r138,l0) a10(r146,l0) a12(r141,l0) a11(r144,l0) a13(r135,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r138,l0) conflicts: a0(r147,l0) a1(r133,l0) a2(r134,l0) a3(r139,l0) a10(r146,l0) a12(r141,l0) a11(r144,l0) a13(r135,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a10(r146,l0) conflicts: a0(r147,l0) a1(r133,l0) a2(r134,l0) a3(r139,l0) a4(r138,l0) a12(r141,l0) a11(r144,l0) a13(r135,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a11(r144,l0) conflicts: a0(r147,l0) a1(r133,l0) a2(r134,l0) a3(r139,l0) a4(r138,l0) a10(r146,l0) a12(r141,l0) a13(r135,l0)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a12(r141,l0) conflicts: a0(r147,l0) a1(r133,l0) a2(r134,l0) a3(r139,l0) a4(r138,l0) a10(r146,l0) a11(r144,l0)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a13(r135,l0) conflicts: a0(r147,l0) a1(r133,l0) a2(r134,l0) a3(r139,l0) a4(r138,l0) a10(r146,l0) a11(r144,l0)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3

  cp0:a12(r141)<->a13(r135)@125:shuffle
  regions=2, blocks=6, points=17
    allocnos=14, copies=1, conflicts=0, ranges=15

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r147 1r133 2r134 3r139 4r138 10r146 11r144 12r141 13r135
    modified regnos: 133 134 135 138 139 141 144 146 147
    border:
    Pressure: GENERAL_REGS=10
    Reg 147 of GENERAL_REGS has 5 regs less
    Reg 133 of GENERAL_REGS has 5 regs less
    Reg 134 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 2 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
      Pushing a12(r141,l0)
      Pushing a11(r144,l0)
      Pushing a13(r135,l0)
      Pushing a10(r146,l0)
      Pushing a3(r139,l0)(potential spill: pri=2000, cost=20000)
      Pushing a4(r138,l0)
      Pushing a0(r147,l0)
      Pushing a1(r133,l0)
      Pushing a2(r134,l0)
      Popping a2(r134,l0)  -- assign reg 4
      Popping a1(r133,l0)  -- assign reg 5
      Popping a0(r147,l0)  -- assign reg 6
      Popping a4(r138,l0)  -- assign reg 7
      Popping a3(r139,l0)  -- assign reg 8
      Popping a10(r146,l0)  -- assign reg 1
      Popping a13(r135,l0)  -- assign reg 12
      Popping a11(r144,l0)  -- assign reg 0
      Popping a12(r141,l0)  -- assign reg 12
Disposition:
    1:r133 l0     5    2:r134 l0     4   13:r135 l0    12    4:r138 l0     7
    3:r139 l0     8   12:r141 l0    12   11:r144 l0     0   10:r146 l0     1
    0:r147 l0     6
New iteration of spill/restore move
+++Costs: overall -500, reg -500, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=4, live_throughout: 1, 3, 13, 14, dead_or_set: 2, 138
insn=5, live_throughout: 1, 13, 14, 138, dead_or_set: 3, 139
insn=9, live_throughout: 13, 14, 138, 139, dead_or_set: 1, 134
insn=10, live_throughout: 13, 14, 134, 138, 139, dead_or_set: 133
insn=15, live_throughout: 13, 14, 133, 134, 138, 139, dead_or_set: 147
insn=45, live_throughout: 13, 14, 133, 134, 138, 139, 147, dead_or_set: 
insn=33, live_throughout: 3, 13, 133, 134, 138, 139, 147, dead_or_set: 
insn=14, live_throughout: 3, 13, 133, 134, 138, 139, 147, dead_or_set: 135
insn=18, live_throughout: 3, 13, 133, 134, 135, 138, 139, 147, dead_or_set: 144
insn=24, live_throughout: 3, 13, 133, 134, 135, 138, 139, 144, 147, dead_or_set: 2
insn=20, live_throughout: 2, 3, 13, 133, 134, 135, 138, 139, 144, 147, dead_or_set: 146
insn=16, live_throughout: 2, 3, 13, 133, 134, 138, 139, 144, 146, 147, dead_or_set: 135, 141
insn=22, live_throughout: 2, 3, 13, 133, 134, 138, 139, 146, 147, dead_or_set: 0, 141, 144
insn=23, live_throughout: 0, 2, 3, 13, 133, 134, 138, 139, 147, dead_or_set: 1, 146
insn=26, live_throughout: 13, 133, 134, 138, 139, 147, dead_or_set: 0, 1, 2, 3, 14
insn=28, live_throughout: 13, 133, 138, 139, 147, dead_or_set: 0, 134
insn=29, live_throughout: 13, 133, 138, 139, 147, dead_or_set: 0, 14
insn=30, live_throughout: 13, 14, 133, 138, 139, 147, dead_or_set: 0, 134
insn=31, live_throughout: 13, 14, 133, 134, 138, 139, 147, dead_or_set: 
insn=25, live_throughout: 13, 14, 133, 134, 138, 139, 147, dead_or_set: 3
insn=34, live_throughout: 3, 13, 14, 133, 134, 138, 139, 147, dead_or_set: 
insn=27, live_throughout: 3, 13, 14, 24, 134, 138, 139, 147, dead_or_set: 133
insn=35, live_throughout: 3, 13, 14, 133, 134, 138, 139, 147, dead_or_set: 
init_insns for 135: (insn_list:REG_DEP_TRUE 14 (nil))
init_insns for 144: (insn_list:REG_DEP_TRUE 18 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 15 (nil))
changing reg in insn 27
changing reg in insn 10
changing reg in insn 34
changing reg in insn 27
changing reg in insn 9
changing reg in insn 30
changing reg in insn 28
changing reg in insn 24
changing reg in insn 14
changing reg in insn 14
changing reg in insn 14
changing reg in insn 20
changing reg in insn 16
changing reg in insn 4
changing reg in insn 34
changing reg in insn 5
changing reg in insn 25
changing reg in insn 16
changing reg in insn 22
changing reg in insn 18
changing reg in insn 22
changing reg in insn 20
changing reg in insn 23
changing reg in insn 15
changing reg in insn 18
changing reg in insn 18


try_optimize_cfg iteration 1

Deleting fallthru block 5.
deleting insn with uid = 43.
deleting block 5


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 26.
verify found no changes in insn with uid = 29.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 9 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 9 (  1.8)


dma_unmap_sg

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,4u} r1={5d,3u} r2={4d,2u} r3={4d,2u} r4={2d,3u,1d} r5={2d,2u} r6={1d,1u,1d} r7={1d,1u} r8={1d,1u} r12={5d,3u} r13={1d,6u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 290{258d,30u,2e} in 21{19 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 4 2 NOTE_INSN_FUNCTION_BEG)

(insn 4 6 5 2 arch/arm/mm/dma-mapping.c:608 (set (reg/v:SI 7 r7 [orig:138 nents ] [138])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 9 2 arch/arm/mm/dma-mapping.c:608 (set (reg/v:SI 8 r8 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 9 5 10 2 arch/arm/mm/dma-mapping.c:614 (set (reg/v/f:SI 4 r4 [orig:134 s ] [134])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 15 2 arch/arm/mm/dma-mapping.c:614 (set (reg/v:SI 5 r5 [orig:133 i ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 15 10 45 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 6 r6 [147])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(jump_insn 45 15 46 2 arch/arm/mm/dma-mapping.c:614 (set (pc)
        (label_ref 31)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 46 45 33)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  4 [91.0%] 
(code_label 33 46 13 3 87 "" [1 uses])

(note 13 33 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 13 19 3 NOTE_INSN_DELETED)

(note 19 17 21 3 NOTE_INSN_DELETED)

(note 21 19 14 3 NOTE_INSN_DELETED)

(insn 14 21 18 3 arch/arm/mm/dma-mapping.c:615 (set (reg:SI 12 ip [orig:135 D.24893 ] [135])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 s ] [134])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 s ] [134])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])
        (nil)))

(insn 18 14 24 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 0 r0 [orig:144 mem_map ] [144])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 24 18 20 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 s ] [134])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 20 24 16 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1 [146])
        (ashift:SI (reg:SI 12 ip [orig:135 D.24893 ] [135])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 16 20 22 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 12 ip [141])
        (lshiftrt:SI (reg:SI 12 ip [orig:135 D.24893 ] [135])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 22 16 23 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 0 r0)
        (plus:SI (mult:SI (reg:SI 12 ip [141])
                (const_int 32 [0x20]))
            (reg/f:SI 0 r0 [orig:144 mem_map ] [144]))) 270 {*arith_shiftsi} (nil))

(insn 23 22 26 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg:SI 1 r1 [146])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(call_insn 26 23 28 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_dev_to_cpu") [flags 0x3] <function_decl 0x11060f80 ___dma_page_dev_to_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 28 26 29 3 arch/arm/mm/dma-mapping.c:614 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:134 s ] [134])) 167 {*arm_movsi_insn} (nil))

(call_insn 29 28 30 3 arch/arm/mm/dma-mapping.c:614 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 30 29 31 3 arch/arm/mm/dma-mapping.c:614 discrim 2 (set (reg/v/f:SI 4 r4 [orig:134 s ] [134])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 31 30 32 4 86 "" [1 uses])

(note 32 31 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 32 34 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 3 r3)
        (reg/v:SI 8 r8 [orig:139 dir ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 34 25 27 4 arch/arm/mm/dma-mapping.c:614 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:133 i ] [133])
            (reg/v:SI 7 r7 [orig:138 nents ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(insn 27 34 35 4 arch/arm/mm/dma-mapping.c:614 discrim 2 (set (reg/v:SI 5 r5 [orig:133 i ] [133])
        (plus:SI (reg/v:SI 5 r5 [orig:133 i ] [133])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 35 27 47 4 arch/arm/mm/dma-mapping.c:614 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 4 -> ( 3 1)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  EXIT [9.0%]  (fallthru,loop_exit)

(note 47 35 48 NOTE_INSN_DELETED)

(note 48 47 0 NOTE_INSN_DELETED)


;; Function ___dma_page_cpu_to_dev (___dma_page_cpu_to_dev)[0:1287]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 63.
verify found no changes in insn with uid = 63.
deleting insn with uid = 17.
scanning new insn with uid = 64.
verify found no changes in insn with uid = 64.
deleting insn with uid = 9.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 13 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)

Pass 0 for finding allocno costs

    a3 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r152: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 47(l0): point = 1
   Insn 46(l0): point = 3
   Insn 45(l0): point = 5
   Insn 42(l0): point = 8
   Insn 41(l0): point = 10
   Insn 40(l0): point = 12
   Insn 60(l0): point = 15
   Insn 34(l0): point = 17
   Insn 33(l0): point = 19
   Insn 32(l0): point = 21
   Insn 29(l0): point = 24
   Insn 28(l0): point = 26
   Insn 27(l0): point = 28
   Insn 24(l0): point = 31
   Insn 22(l0): point = 33
   Insn 20(l0): point = 35
   Insn 19(l0): point = 37
   Insn 18(l0): point = 39
   Insn 63(l0): point = 41
   Insn 58(l0): point = 43
   Insn 23(l0): point = 45
   Insn 16(l0): point = 47
   Insn 11(l0): point = 49
   Insn 10(l0): point = 51
   Insn 64(l0): point = 53
   Insn 4(l0): point = 55
   Insn 5(l0): point = 57
   Insn 3(l0): point = 59
   Insn 2(l0): point = 61
 a0(r133): [2..12]
 a1(r138): [20..55] [4..14]
 a2(r135): [22..33] [6..14]
 a3(r152): [29..43] [13..14]
 a4(r134): [18..28]
 a5(r137): [34..59]
 a6(r146): [34..35]
 a7(r143): [36..37]
 a8(r144): [38..39]
 a9(r136): [38..61]
 a10(r142): [40..41]
 a11(r139): [46..57]
 a12(r141): [50..51]
 a13(r140): [52..53]
Compressing live ranges: from 64 to 30 - 46%
Ranges after the compression:
 a0(r133): [0..3]
 a1(r138): [7..26] [1..5]
 a2(r135): [8..11] [2..5]
 a3(r152): [10..20] [4..5]
 a4(r134): [6..9]
 a5(r137): [12..28]
 a6(r146): [12..13]
 a7(r143): [14..15]
 a8(r144): [16..17]
 a9(r136): [16..29]
 a10(r142): [18..19]
 a11(r139): [21..27]
 a12(r141): [22..23]
 a13(r140): [24..25]
+++Allocating 112 bytes for conflict table (uncompressed size 112)
;; a0(r133,l0) conflicts: a1(r138,l0) a2(r135,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r138,l0) conflicts: a0(r133,l0) a2(r135,l0) a3(r152,l0) a4(r134,l0) a6(r146,l0) a5(r137,l0) a7(r143,l0) a8(r144,l0) a9(r136,l0) a10(r142,l0) a11(r139,l0) a12(r141,l0) a13(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r135,l0) conflicts: a0(r133,l0) a1(r138,l0) a3(r152,l0) a4(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r152,l0) conflicts: a1(r138,l0) a2(r135,l0) a6(r146,l0) a5(r137,l0) a7(r143,l0) a8(r144,l0) a9(r136,l0) a10(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r134,l0) conflicts: a1(r138,l0) a2(r135,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r137,l0) conflicts: a1(r138,l0) a3(r152,l0) a6(r146,l0) a7(r143,l0) a8(r144,l0) a9(r136,l0) a10(r142,l0) a11(r139,l0) a12(r141,l0) a13(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r146,l0) conflicts: a1(r138,l0) a3(r152,l0) a5(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r143,l0) conflicts: a1(r138,l0) a3(r152,l0) a5(r137,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r144,l0) conflicts: a1(r138,l0) a3(r152,l0) a5(r137,l0) a9(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r136,l0) conflicts: a1(r138,l0) a3(r152,l0) a5(r137,l0) a8(r144,l0) a10(r142,l0) a11(r139,l0) a12(r141,l0) a13(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a10(r142,l0) conflicts: a1(r138,l0) a3(r152,l0) a5(r137,l0) a9(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r139,l0) conflicts: a1(r138,l0) a5(r137,l0) a9(r136,l0) a12(r141,l0) a13(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a12(r141,l0) conflicts: a1(r138,l0) a5(r137,l0) a9(r136,l0) a11(r139,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a13(r140,l0) conflicts: a1(r138,l0) a5(r137,l0) a9(r136,l0) a11(r139,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3

  cp0:a7(r143)<->a9(r136)@125:shuffle
  cp1:a7(r143)<->a8(r144)@125:shuffle
  cp2:a6(r146)<->a7(r143)@125:shuffle
  cp3:a2(r135)<->a5(r137)@125:shuffle
  cp4:a2(r135)<->a6(r146)@125:shuffle
  regions=1, blocks=8, points=30
    allocnos=14, copies=5, conflicts=0, ranges=17

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r133 1r138 2r135 3r152 4r134 5r137 6r146 7r143 8r144 9r136 10r142 11r139 12r141 13r140
    modified regnos: 133 134 135 136 137 138 139 140 141 142 143 144 146 152
    border:
    Pressure: GENERAL_REGS=9
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
      Pushing a10(r142,l0)
      Pushing a8(r144,l0)
      Pushing a7(r143,l0)
      Pushing a6(r146,l0)
      Pushing a3(r152,l0)
      Pushing a2(r135,l0)
      Pushing a4(r134,l0)
      Pushing a0(r133,l0)
      Pushing a13(r140,l0)
      Pushing a12(r141,l0)
      Pushing a11(r139,l0)
      Pushing a9(r136,l0)
      Pushing a5(r137,l0)
      Pushing a1(r138,l0)
      Popping a1(r138,l0)  -- assign reg 4
      Popping a5(r137,l0)  -- assign reg 5
      Popping a9(r136,l0)  -- assign reg 6
      Popping a11(r139,l0)  -- assign reg 7
      Popping a12(r141,l0)  -- assign reg 12
      Popping a13(r140,l0)  -- assign reg 12
      Popping a0(r133,l0)  -- assign reg 3
      Popping a4(r134,l0)  -- assign reg 3
      Popping a2(r135,l0)  -- assign reg 0
      Popping a3(r152,l0)  -- assign reg 3
      Popping a6(r146,l0)  -- assign reg 0
      Popping a7(r143,l0)  -- assign reg 0
      Popping a8(r144,l0)  -- assign reg 0
      Popping a10(r142,l0)  -- assign reg 2
Disposition:
    0:r133 l0     3    4:r134 l0     3    2:r135 l0     0    9:r136 l0     6
    5:r137 l0     5    1:r138 l0     4   11:r139 l0     7   13:r140 l0    12
   12:r141 l0    12   10:r142 l0     2    7:r143 l0     0    8:r144 l0     0
    6:r146 l0     0    3:r152 l0     3
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 136
insn=3, live_throughout: 0, 1, 2, 3, 13, 136, dead_or_set: 137
insn=5, live_throughout: 0, 1, 2, 3, 13, 136, 137, dead_or_set: 139
insn=4, live_throughout: 0, 1, 2, 3, 13, 136, 137, 139, dead_or_set: 138
insn=64, live_throughout: 0, 1, 2, 3, 13, 136, 137, 138, 139, dead_or_set: 140
insn=10, live_throughout: 0, 1, 2, 3, 13, 136, 137, 138, 139, dead_or_set: 140, 141
insn=11, live_throughout: 0, 1, 2, 3, 13, 136, 137, 138, 139, dead_or_set: 141
insn=16, live_throughout: 13, 136, 137, 138, 139, dead_or_set: 0, 1, 2, 3, 14
insn=23, live_throughout: 13, 14, 136, 137, 138, dead_or_set: 139
insn=58, live_throughout: 13, 14, 24, 136, 137, 138, dead_or_set: 152
insn=63, live_throughout: 13, 14, 24, 136, 137, 138, 152, dead_or_set: 142
insn=18, live_throughout: 13, 14, 24, 136, 137, 138, 152, dead_or_set: 142, 144
insn=19, live_throughout: 13, 14, 24, 137, 138, 152, dead_or_set: 136, 143, 144
insn=20, live_throughout: 13, 14, 24, 137, 138, 152, dead_or_set: 143, 146
insn=22, live_throughout: 13, 14, 24, 138, 152, dead_or_set: 135, 137, 146
insn=24, live_throughout: 13, 14, 135, 138, 152, dead_or_set: 
insn=27, live_throughout: 13, 14, 135, 138, dead_or_set: 134, 152
insn=28, live_throughout: 13, 14, 134, 135, 138, dead_or_set: 
insn=29, live_throughout: 13, 14, 134, 135, 138, dead_or_set: 
insn=32, live_throughout: 13, 134, 138, dead_or_set: 0, 135
insn=33, live_throughout: 0, 13, 134, dead_or_set: 1, 138
insn=34, live_throughout: 13, dead_or_set: 0, 1, 14, 134
insn=60, live_throughout: 13, 14, dead_or_set: 
insn=37, live_throughout: 13, 14, 135, 138, 152, dead_or_set: 
insn=40, live_throughout: 13, 14, 135, 138, dead_or_set: 133, 152
insn=41, live_throughout: 13, 14, 133, 135, 138, dead_or_set: 
insn=42, live_throughout: 13, 14, 133, 135, 138, dead_or_set: 
insn=45, live_throughout: 13, 133, 138, dead_or_set: 0, 135
insn=46, live_throughout: 0, 13, 133, dead_or_set: 1, 138
insn=47, live_throughout: 13, dead_or_set: 0, 1, 14, 133
insn=53, live_throughout: 13, 14, dead_or_set: 
init_insns for 140: (insn_list:REG_DEP_TRUE 64 (nil))
init_insns for 141: (insn_list:REG_DEP_TRUE 11 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 63 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 58 (nil))
changing reg in insn 40
changing reg in insn 47
changing reg in insn 41
changing reg in insn 27
changing reg in insn 34
changing reg in insn 28
changing reg in insn 22
changing reg in insn 45
changing reg in insn 32
changing reg in insn 2
changing reg in insn 19
changing reg in insn 3
changing reg in insn 22
changing reg in insn 4
changing reg in insn 46
changing reg in insn 33
changing reg in insn 5
changing reg in insn 23
changing reg in insn 64
changing reg in insn 10
changing reg in insn 10
changing reg in insn 11
changing reg in insn 63
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 20
changing reg in insn 18
changing reg in insn 19
changing reg in insn 20
changing reg in insn 22
changing reg in insn 58
changing reg in insn 40
changing reg in insn 27
Spilling for insn 11.

Reloads for insn # 11
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
deleting insn with uid = 32.
deleting insn with uid = 45.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
rescanning insn with uid = 34.
deleting insn with uid = 34.
rescanning insn with uid = 47.
deleting insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 13 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)


___dma_page_cpu_to_dev

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,9u,1d} r1={6d,4u} r2={5d,3u} r3={7d,8u} r4={1d,2u} r5={1d,1u} r6={1d,1u} r7={1d,1u} r12={6d,2u} r13={1d,11u,1d} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 425{377d,46u,2e} in 27{24 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 21 2 NOTE_INSN_FUNCTION_BEG)

(note 21 6 2 2 NOTE_INSN_DELETED)

(insn 2 21 3 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v/f:SI 6 r6 [orig:136 page ] [136])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 5 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v:SI 5 r5 [orig:137 off ] [137])
        (reg:SI 1 r1 [ off ])) 167 {*arm_movsi_insn} (nil))

(insn 5 3 4 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v:SI 7 r7 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 4 5 64 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v:SI 4 r4 [orig:138 size ] [138])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 64 4 10 2 arch/arm/mm/dma-mapping.c:524 (set (reg/f:SI 12 ip [140])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(insn 10 64 11 2 arch/arm/mm/dma-mapping.c:524 (set (reg/f:SI 12 ip [orig:141 cpu_cache.dma_map_area ] [141])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 12 ip [140])
                (const_int 28 [0x1c])) [0 cpu_cache.dma_map_area+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
                        (const_int 28 [0x1c]))) [0 cpu_cache.dma_map_area+0 S4 A32])
            (nil))))

(insn 11 10 16 2 arch/arm/mm/dma-mapping.c:524 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [orig:141 cpu_cache.dma_map_area ] [141])) 167 {*arm_movsi_insn} (nil))

(call_insn 16 11 23 2 arch/arm/mm/dma-mapping.c:524 (parallel [
            (call (mem:SI (symbol_ref:SI ("dma_cache_maint_page") [flags 0x3] <function_decl 0x1145ee00 dma_cache_maint_page>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 23 16 58 2 arch/arm/mm/dma-mapping.c:527 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:139 dir ] [139])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(insn 58 23 63 2 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(insn 63 58 18 2 arch/arm/mm/dma-mapping.c:526 (set (reg/f:SI 2 r2 [142])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn 18 63 19 2 arch/arm/mm/dma-mapping.c:526 (set (reg/f:SI 0 r0 [orig:144 mem_map ] [144])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [142]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 19 18 20 2 arch/arm/mm/dma-mapping.c:526 (set (reg:SI 0 r0 [143])
        (minus:SI (reg/v/f:SI 6 r6 [orig:136 page ] [136])
            (reg/f:SI 0 r0 [orig:144 mem_map ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 20 19 22 2 arch/arm/mm/dma-mapping.c:526 (set (reg:SI 0 r0 [146])
        (ashiftrt:SI (reg:SI 0 r0 [143])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 0 r0 [143])
            (const_int 32 [0x20]))
        (nil)))

(insn 22 20 24 2 arch/arm/mm/dma-mapping.c:526 (set (reg/v:SI 0 r0 [orig:135 paddr ] [135])
        (plus:SI (mult:SI (reg:SI 0 r0 [146])
                (const_int 4096 [0x1000]))
            (reg/v:SI 5 r5 [orig:137 off ] [137]))) 270 {*arith_shiftsi} (nil))

(jump_insn 24 22 25 2 arch/arm/mm/dma-mapping.c:527 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  5 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 25 24 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 27 25 28 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [orig:134 D.25126 ] [134])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [152]) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
        (nil)))

(insn 28 27 29 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:134 D.25126 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  4 [69.8%]  (fallthru)
;; Succ edge  7 [30.2%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [69.8%]  (fallthru)
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 31 30 33 4 NOTE_INSN_DELETED)

(insn 33 31 34 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 4 r4 [orig:138 size ] [138]))) 4 {*arm_addsi3} (nil))

(call_insn 34 33 60 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:134 D.25126 ] [134]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 60 34 61 4 (set (pc)
        (label_ref 53)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 61 60 37)

;; Start of basic block ( 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%] 
(code_label 37 61 38 5 92 "" [1 uses])

(note 38 37 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 40 38 41 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg/f:SI 3 r3 [orig:133 D.25129 ] [133])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [152])
                (const_int 4 [0x4])) [0 outer_cache.clean_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
                    (const_int 4 [0x4]))) [0 outer_cache.clean_range+0 S4 A32])
        (nil)))

(insn 41 40 42 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 D.25129 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 42 41 43 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2165 [0x875])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 13 [sp]


;; Succ edge  6 [78.3%]  (fallthru)
;; Succ edge  7 [21.6%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [78.3%]  (fallthru)
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 44 43 46 6 NOTE_INSN_DELETED)

(insn 46 44 47 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 4 r4 [orig:138 size ] [138]))) 4 {*arm_addsi3} (nil))

(call_insn 47 46 53 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:133 D.25129 ] [133]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 3 5 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  3 [30.2%] 
;; Pred edge  5 [21.6%] 
;; Pred edge  4 [100.0%] 
(code_label 53 47 56 7 94 "" [3 uses])

(note 56 53 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 62 56 65 NOTE_INSN_DELETED)

(note 65 62 0 NOTE_INSN_DELETED)


;; Function dma_sync_sg_for_device (dma_sync_sg_for_device)[0:1292]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a9 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r133,l1) best GENERAL_REGS, cover GENERAL_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a7(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r146: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a7(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r133,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a11(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 34(l0): point = 1
   Insn 33(l0): point = 3
   Insn 32(l0): point = 5
   Insn 22(l0): point = 8
   Insn 21(l0): point = 10
   Insn 20(l0): point = 12
   Insn 62(l0): point = 15
   Insn 14(l0): point = 17
   Insn 10(l0): point = 19
   Insn 9(l0): point = 21
   Insn 5(l0): point = 23
   Insn 4(l0): point = 25
   Insn 52(l1): point = 28
   Insn 51(l1): point = 30
   Insn 47(l1): point = 33
   Insn 46(l1): point = 35
   Insn 44(l1): point = 37
   Insn 45(l1): point = 39
   Insn 43(l1): point = 41
   Insn 42(l1): point = 43
   Insn 41(l1): point = 45
   Insn 40(l1): point = 47
   Insn 39(l1): point = 49
   Insn 29(l1): point = 52
   Insn 28(l1): point = 54
   Insn 26(l1): point = 56
   Insn 17(l1): point = 59
   Insn 16(l1): point = 61
   Insn 15(l1): point = 63
 a0(r146): [15..17]
 a1(r134): [15..19]
 a2(r135): [15..21]
 a3(r139): [15..23]
 a4(r138): [15..25]
 a5(r134): [28..65]
 a6(r135): [40..65] [28..33]
 a7(r138): [28..65]
 a8(r139): [28..65]
 a9(r146): [28..65]
 a10(r133): [50..56]
 a11(r141): [62..63]
 Rebuilding regno allocno list for 141
 Rebuilding regno allocno list for 133
Compressing live ranges: from 66 to 14 - 21%
Ranges after the compression:
 a0(r146): [6..13] [0..1]
 a1(r134): [6..13] [0..2]
 a2(r135): [8..13] [6..7] [0..3]
 a3(r139): [6..13] [0..4]
 a4(r138): [6..13] [0..5]
 a10(r133): [9..10]
 a11(r141): [11..12]
+++Allocating 56 bytes for conflict table (uncompressed size 96)
;; a0(r146,l0) conflicts: a1(r134,l0) a2(r135,l0) a3(r139,l0) a4(r138,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r134,l0) conflicts: a0(r146,l0) a2(r135,l0) a3(r139,l0) a4(r138,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r135,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r139,l0) a4(r138,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r139,l0) conflicts: a0(r146,l0) a1(r134,l0) a2(r135,l0) a4(r138,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r138,l0) conflicts: a0(r146,l0) a1(r134,l0) a2(r135,l0) a3(r139,l0) a10(r133,l0) a11(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a10(r133,l0) conflicts: a0(r146,l0) a1(r134,l0) a2(r135,l0) a3(r139,l0) a4(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r141,l0) conflicts: a0(r146,l0) a1(r134,l0) a2(r135,l0) a3(r139,l0) a4(r138,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  regions=2, blocks=10, points=14
    allocnos=12, copies=0, conflicts=0, ranges=13

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 9 6 4 8 7 5 3 2
    all: 0r146 1r134 2r135 3r139 4r138 10r133 11r141
    modified regnos: 133 134 135 138 139 141 146
    border:
    Pressure: GENERAL_REGS=10
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 134 of GENERAL_REGS has 5 regs less
    Reg 135 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
      Pushing a11(r141,l0)
      Pushing a10(r133,l0)
      Pushing a0(r146,l0)(potential spill: pri=2000, cost=20000)
      Pushing a4(r138,l0)
      Pushing a3(r139,l0)
      Pushing a1(r134,l0)
      Pushing a2(r135,l0)
      Popping a2(r135,l0)  -- assign reg 4
      Popping a1(r134,l0)  -- assign reg 5
      Popping a3(r139,l0)  -- assign reg 6
      Popping a4(r138,l0)  -- assign reg 7
      Popping a0(r146,l0)  -- assign reg 8
      Popping a10(r133,l0)  -- assign reg 0
      Popping a11(r141,l0)  -- assign reg 3
Disposition:
   10:r133 l0     0    1:r134 l0     5    2:r135 l0     4    4:r138 l0     7
    3:r139 l0     6   11:r141 l0     3    0:r146 l0     8
New iteration of spill/restore move
+++Costs: overall -250, reg -250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=4, live_throughout: 1, 3, 13, 14, dead_or_set: 2, 138
insn=5, live_throughout: 1, 13, 14, 138, dead_or_set: 3, 139
insn=9, live_throughout: 13, 14, 138, 139, dead_or_set: 1, 135
insn=10, live_throughout: 13, 14, 135, 138, 139, dead_or_set: 134
insn=14, live_throughout: 13, 14, 134, 135, 138, 139, dead_or_set: 146
insn=62, live_throughout: 13, 14, 134, 135, 138, 139, 146, dead_or_set: 
insn=50, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 
insn=15, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 141
insn=16, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 141
insn=17, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 
insn=20, live_throughout: 13, dead_or_set: 0
insn=21, live_throughout: 0, 13, dead_or_set: 1
insn=22, live_throughout: 13, dead_or_set: 0, 1, 14
insn=24, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 
insn=26, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 133
insn=28, live_throughout: 13, 133, 134, 135, 138, 139, 146, dead_or_set: 
insn=29, live_throughout: 13, 133, 134, 135, 138, 139, 146, dead_or_set: 
insn=32, live_throughout: 13, dead_or_set: 0
insn=33, live_throughout: 0, 13, dead_or_set: 1
insn=34, live_throughout: 13, dead_or_set: 0, 1, 14
insn=36, live_throughout: 13, 133, 134, 135, 138, 139, 146, dead_or_set: 
insn=39, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 0, 133
insn=40, live_throughout: 0, 13, 134, 135, 138, 139, 146, dead_or_set: 1
insn=41, live_throughout: 0, 1, 13, 134, 135, 138, 139, 146, dead_or_set: 2
insn=42, live_throughout: 0, 1, 2, 13, 134, 135, 138, 139, 146, dead_or_set: 3
insn=43, live_throughout: 13, 134, 135, 138, 139, 146, dead_or_set: 0, 1, 2, 3, 14
insn=45, live_throughout: 13, 134, 138, 139, 146, dead_or_set: 0, 135
insn=44, live_throughout: 0, 13, 138, 139, 146, dead_or_set: 134
insn=46, live_throughout: 13, 134, 138, 139, 146, dead_or_set: 0, 14
insn=47, live_throughout: 13, 14, 134, 138, 139, 146, dead_or_set: 0, 135
insn=48, live_throughout: 13, 14, 134, 135, 138, 139, 146, dead_or_set: 
insn=51, live_throughout: 13, 14, 134, 135, 138, 139, 146, dead_or_set: 
insn=52, live_throughout: 13, 14, 134, 135, 138, 139, 146, dead_or_set: 
init_insns for 141: (insn_list:REG_DEP_TRUE 15 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 14 (nil))
changing reg in insn 26
changing reg in insn 39
changing reg in insn 28
changing reg in insn 44
changing reg in insn 10
changing reg in insn 51
changing reg in insn 44
changing reg in insn 9
changing reg in insn 47
changing reg in insn 45
changing reg in insn 41
changing reg in insn 40
changing reg in insn 26
changing reg in insn 15
changing reg in insn 15
changing reg in insn 4
changing reg in insn 51
changing reg in insn 5
changing reg in insn 42
changing reg in insn 15
changing reg in insn 16
changing reg in insn 16
changing reg in insn 14
changing reg in insn 16


try_optimize_cfg iteration 1

Deleting fallthru block 9.
deleting insn with uid = 60.
deleting block 9


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 9 count 17 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 9 count 17 (  1.9)


dma_sync_sg_for_device

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,7u} r1={8d,4u} r2={6d,2u} r3={7d,3u,1d} r4={2d,5u,1d} r5={2d,2u} r6={1d,1u} r7={1d,1u} r8={1d,1u} r12={5d} r13={1d,12u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={7d,3u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} 
;;    total ref usage 540{496d,42u,2e} in 29{25 regular + 4 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 4 2 NOTE_INSN_FUNCTION_BEG)

(insn 4 6 5 2 arch/arm/mm/dma-mapping.c:654 (set (reg/v:SI 7 r7 [orig:138 nents ] [138])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 9 2 arch/arm/mm/dma-mapping.c:654 (set (reg/v:SI 6 r6 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 9 5 10 2 arch/arm/mm/dma-mapping.c:658 (set (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (nil))

(insn 10 9 14 2 arch/arm/mm/dma-mapping.c:658 (set (reg/v:SI 5 r5 [orig:134 i ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 14 10 62 2 include/linux/scatterlist.h:96 (set (reg:SI 8 r8 [146])
        (const_int -2023406815 [0xffffffff87654321])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -2023406815 [0xffffffff87654321])
        (nil)))

(jump_insn 62 14 63 2 arch/arm/mm/dma-mapping.c:658 (set (pc)
        (label_ref 48)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%] 

(barrier 63 62 50)

;; Start of basic block ( 8) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [97.0%] 
(code_label 50 63 13 3 104 "" [1 uses])

(note 13 50 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 13 16 3 include/linux/scatterlist.h:96 (set (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
        (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135]) [0 <variable>.sg_magic+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135]) [0 <variable>.sg_magic+0 S4 A32])
        (nil)))

(insn 16 15 17 3 include/linux/scatterlist.h:96 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
            (reg:SI 8 r8 [146]))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
            (const_int -2023406815 [0xffffffff87654321]))
        (nil)))

(jump_insn 17 16 18 3 include/linux/scatterlist.h:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru,loop_exit)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru,loop_exit)
(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 18 21 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 21 20 22 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 1 r1)
        (const_int 96 [0x60])) 167 {*arm_movsi_insn} (nil))

(call_insn 22 21 23 4 include/linux/scatterlist.h:96 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 23 22 24)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 24 23 25 5 102 "" [1 uses])

(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 27 25 26 5 NOTE_INSN_DELETED)

(insn 26 27 28 5 include/linux/scatterlist.h:97 (set (reg:SI 0 r0 [orig:133 D.25143 ] [133])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 4 [0x4])) [0 <variable>.page_link+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 28 26 29 5 include/linux/scatterlist.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 0 r0 [orig:133 D.25143 ] [133])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 29 28 30 5 include/linux/scatterlist.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru,loop_exit)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru,loop_exit)
(note 30 29 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 30 33 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 33 32 34 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 1 r1)
        (const_int 97 [0x61])) 167 {*arm_movsi_insn} (nil))

(call_insn 34 33 35 6 include/linux/scatterlist.h:97 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 35 34 36)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%] 
(code_label 36 35 37 7 103 "" [1 uses])

(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 38 37 39 7 NOTE_INSN_DELETED)

(insn 39 38 40 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 0 r0)
        (and:SI (reg:SI 0 r0 [orig:133 D.25143 ] [133])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 40 39 41 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 8 [0x8])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 41 40 42 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 41 43 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 3 r3)
        (reg/v:SI 6 r6 [orig:139 dir ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn 43 42 45 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_cpu_to_dev") [flags 0x3] <function_decl 0x11060e00 ___dma_page_cpu_to_dev>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 45 43 44 7 arch/arm/mm/dma-mapping.c:658 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 s ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 44 45 46 7 arch/arm/mm/dma-mapping.c:658 (set (reg/v:SI 5 r5 [orig:134 i ] [134])
        (plus:SI (reg/v:SI 5 r5 [orig:134 i ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(call_insn 46 44 47 7 arch/arm/mm/dma-mapping.c:658 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 47 46 48 7 arch/arm/mm/dma-mapping.c:658 (set (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 7 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 48 47 49 8 101 "" [1 uses])

(note 49 48 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 51 49 52 8 arch/arm/mm/dma-mapping.c:658 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:134 i ] [134])
            (reg/v:SI 7 r7 [orig:138 nents ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 52 51 65 8 arch/arm/mm/dma-mapping.c:658 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9700 [0x25e4])
        (nil)))
;; End of basic block 8 -> ( 3 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  3 [97.0%] 
;; Succ edge  EXIT [3.0%]  (fallthru,loop_exit)

(note 65 52 66 NOTE_INSN_DELETED)

(note 66 65 0 NOTE_INSN_DELETED)


;; Function dma_map_sg (dma_map_sg)[0:1289]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a26 (r170,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r169,l1) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r168,l2) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r166,l2) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r164,l2) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r161,l2) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r158,l1) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r156,l1) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r155,l1) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r152,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r150,l1) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r146,l2) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r145,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r140,l2) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r138,l2) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r137,l2) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r136,l1) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r133,l2) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r133,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r168,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r166,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r164,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r161,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r140,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a22(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a23(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r169,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a29(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a34(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a35(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r133,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a12(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a14(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r168,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r166,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r164,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r161,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r140,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a22(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a23(r145,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r169,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a29(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a34(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a35(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 121(l0): point = 0
   Insn 115(l0): point = 2
   Insn 108(l0): point = 5
   Insn 133(l0): point = 8
   Insn 130(l0): point = 11
   Insn 86(l0): point = 13
   Insn 67(l0): point = 15
   Insn 66(l0): point = 17
   Insn 45(l0): point = 20
   Insn 44(l0): point = 22
   Insn 43(l0): point = 24
   Insn 33(l0): point = 27
   Insn 32(l0): point = 29
   Insn 31(l0): point = 31
   Insn 22(l0): point = 34
   Insn 21(l0): point = 36
   Insn 20(l0): point = 38
   Insn 128(l0): point = 41
   Insn 56(l0): point = 43
   Insn 25(l0): point = 45
   Insn 13(l0): point = 47
   Insn 12(l0): point = 49
   Insn 10(l0): point = 52
   Insn 4(l0): point = 54
   Insn 9(l0): point = 56
   Insn 3(l0): point = 58
   Insn 5(l0): point = 60
   Insn 106(l2): point = 63
   Insn 105(l2): point = 65
   Insn 101(l2): point = 68
   Insn 100(l2): point = 70
   Insn 99(l2): point = 72
   Insn 97(l2): point = 74
   Insn 94(l2): point = 76
   Insn 93(l2): point = 78
   Insn 87(l2): point = 80
   Insn 91(l2): point = 82
   Insn 95(l2): point = 84
   Insn 98(l2): point = 86
   Insn 89(l2): point = 88
   Insn 96(l2): point = 90
   Insn 85(l2): point = 92
   Insn 80(l1): point = 95
   Insn 79(l1): point = 97
   Insn 75(l1): point = 100
   Insn 74(l1): point = 102
   Insn 72(l1): point = 104
   Insn 73(l1): point = 106
   Insn 64(l1): point = 109
   Insn 63(l1): point = 111
   Insn 62(l1): point = 113
   Insn 61(l1): point = 115
   Insn 59(l1): point = 117
   Insn 58(l1): point = 119
   Insn 57(l1): point = 121
   Insn 55(l1): point = 123
   Insn 54(l1): point = 125
   Insn 52(l1): point = 127
   Insn 53(l1): point = 129
   Insn 51(l1): point = 131
   Insn 49(l1): point = 133
   Insn 50(l1): point = 135
   Insn 40(l1): point = 138
   Insn 39(l1): point = 140
   Insn 37(l1): point = 142
   Insn 28(l1): point = 145
   Insn 27(l1): point = 147
   Insn 26(l1): point = 149
 a0(r145): [41..54] [8..10] [3..5]
 a1(r168): [11..13]
 a2(r137): [11..15]
 a3(r152): [16..19]
 a4(r133): [11..17]
 a5(r144): [41..58] [18..19]
 a6(r138): [41..47] [11..19]
 a7(r146): [41..60] [11..19]
 a8(r170): [41..43]
 a9(r169): [41..45]
 a10(r139): [41..49]
 a11(r133): [73..94] [63..68]
 a12(r137): [63..94]
 a13(r138): [63..94]
 a14(r146): [63..94]
 a15(r168): [63..94]
 a16(r166): [77..82]
 a17(r164): [79..88]
 a18(r161): [79..80]
 a19(r140): [81..92]
 a20(r138): [95..151]
 a21(r139): [107..151] [95..100]
 a22(r144): [95..151]
 a23(r145): [95..151]
 a24(r146): [95..151]
 a25(r169): [95..151]
 a26(r170): [95..151]
 a27(r152): [109..140]
 a28(r134): [112..115]
 a29(r141): [116..135]
 a30(r158): [116..117]
 a31(r155): [118..119]
 a32(r156): [120..121]
 a33(r136): [120..133]
 a34(r135): [134..142]
 a35(r150): [148..149]
Compressing live ranges: from 152 to 50 - 32%
Ranges after the compression:
 a0(r145): [11..16] [2..3] [0..1]
 a1(r168): [4..5]
 a2(r137): [4..6]
 a3(r152): [7..10]
 a4(r133): [4..8]
 a5(r144): [11..17] [9..10]
 a6(r138): [11..14] [4..10]
 a7(r146): [11..18] [4..10]
 a8(r170): [11..12]
 a9(r169): [11..13]
 a10(r139): [11..15]
 a11(r133): [21..29] [19..20]
 a12(r137): [19..29]
 a13(r138): [19..29]
 a14(r146): [19..29]
 a15(r168): [19..29]
 a16(r166): [22..26]
 a17(r164): [23..27]
 a18(r161): [23..24]
 a19(r140): [25..28]
 a20(r138): [30..49]
 a21(r139): [32..49] [30..31]
 a22(r144): [30..49]
 a23(r145): [30..49]
 a24(r146): [30..49]
 a25(r169): [30..49]
 a26(r170): [30..49]
 a27(r152): [33..45]
 a28(r134): [34..35]
 a29(r141): [36..44]
 a30(r158): [36..37]
 a31(r155): [38..39]
 a32(r156): [40..41]
 a33(r136): [40..42]
 a34(r135): [43..46]
 a35(r150): [47..48]
    Creating cap  a36(r166,l0: a16(r166,l2))
    Creating cap  a37(r164,l0: a17(r164,l2))
    Creating cap  a38(r161,l0: a18(r161,l2))
    Creating cap  a39(r140,l0: a19(r140,l2))
    Creating cap  a40(r134,l0: a28(r134,l1))
    Creating cap  a41(r141,l0: a29(r141,l1))
    Creating cap  a42(r158,l0: a30(r158,l1))
    Creating cap  a43(r155,l0: a31(r155,l1))
    Creating cap  a44(r156,l0: a32(r156,l1))
    Creating cap  a45(r136,l0: a33(r136,l1))
    Creating cap  a46(r135,l0: a34(r135,l1))
    Creating cap  a47(r150,l0: a35(r150,l1))
+++Allocating 384 bytes for conflict table (uncompressed size 384)
;; a0(r145,l0) conflicts: a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a40(r134,l0) a42(r158,l0) a41(r141,l0) a43(r155,l0) a44(r156,l0) a45(r136,l0) a46(r135,l0) a47(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a1(r168,l0) conflicts: a2(r137,l0) a4(r133,l0) a6(r138,l0) a7(r146,l0) a36(r166,l0) a38(r161,l0) a37(r164,l0) a39(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a2(r137,l0) conflicts: a1(r168,l0) a4(r133,l0) a6(r138,l0) a7(r146,l0) a36(r166,l0) a38(r161,l0) a37(r164,l0) a39(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a3(r152,l0) conflicts: a0(r145,l0) a4(r133,l0) a6(r138,l0) a7(r146,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a40(r134,l0) a42(r158,l0) a41(r141,l0) a43(r155,l0) a44(r156,l0) a45(r136,l0) a46(r135,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a4(r133,l0) conflicts: a1(r168,l0) a2(r137,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a36(r166,l0) a38(r161,l0) a37(r164,l0) a39(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a5(r144,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a40(r134,l0) a42(r158,l0) a41(r141,l0) a43(r155,l0) a44(r156,l0) a45(r136,l0) a46(r135,l0) a47(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 2 14
;; a6(r138,l0) conflicts: a0(r145,l0) a1(r168,l0) a2(r137,l0) a4(r133,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a36(r166,l0) a38(r161,l0) a37(r164,l0) a39(r140,l0) a40(r134,l0) a42(r158,l0) a41(r141,l0) a43(r155,l0) a44(r156,l0) a45(r136,l0) a46(r135,l0) a47(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a7(r146,l0) conflicts: a0(r145,l0) a1(r168,l0) a2(r137,l0) a4(r133,l0) a6(r138,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a36(r166,l0) a38(r161,l0) a37(r164,l0) a39(r140,l0) a40(r134,l0) a42(r158,l0) a41(r141,l0) a43(r155,l0) a44(r156,l0) a45(r136,l0) a46(r135,l0) a47(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 1 2 14
;; a8(r170,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a9(r169,l0) a10(r139,l0) a40(r134,l0) a42(r158,l0) a41(r141,l0) a43(r155,l0) a44(r156,l0) a45(r136,l0) a46(r135,l0) a47(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a9(r169,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a10(r139,l0) a40(r134,l0) a42(r158,l0) a41(r141,l0) a43(r155,l0) a44(r156,l0) a45(r136,l0) a46(r135,l0) a47(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a10(r139,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a40(r134,l0) a42(r158,l0) a41(r141,l0) a43(r155,l0) a44(r156,l0) a45(r136,l0) a46(r135,l0) a47(r150,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 14
;; a11(r133,l2) conflicts: a12(r137,l2) a13(r138,l2) a14(r146,l2) a15(r168,l2) a16(r166,l2) a18(r161,l2) a17(r164,l2) a19(r140,l2)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a12(r137,l2) conflicts: a11(r133,l2) a13(r138,l2) a14(r146,l2) a15(r168,l2) a16(r166,l2) a18(r161,l2) a17(r164,l2) a19(r140,l2)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a13(r138,l2) conflicts: a11(r133,l2) a12(r137,l2) a14(r146,l2) a15(r168,l2) a16(r166,l2) a18(r161,l2) a17(r164,l2) a19(r140,l2)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a14(r146,l2) conflicts: a11(r133,l2) a12(r137,l2) a13(r138,l2) a15(r168,l2) a16(r166,l2) a18(r161,l2) a17(r164,l2) a19(r140,l2)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a15(r168,l2) conflicts: a11(r133,l2) a12(r137,l2) a13(r138,l2) a14(r146,l2) a16(r166,l2) a18(r161,l2) a17(r164,l2) a19(r140,l2)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a16(r166,l2) conflicts: a11(r133,l2) a12(r137,l2) a13(r138,l2) a14(r146,l2) a15(r168,l2) a18(r161,l2) a17(r164,l2) a19(r140,l2)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a17(r164,l2) conflicts: a11(r133,l2) a12(r137,l2) a13(r138,l2) a14(r146,l2) a15(r168,l2) a16(r166,l2) a18(r161,l2) a19(r140,l2)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a18(r161,l2) conflicts: a11(r133,l2) a12(r137,l2) a13(r138,l2) a14(r146,l2) a15(r168,l2) a16(r166,l2) a17(r164,l2)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a19(r140,l2) conflicts: a11(r133,l2) a12(r137,l2) a13(r138,l2) a14(r146,l2) a15(r168,l2) a16(r166,l2) a17(r164,l2)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a20(r138,l1) conflicts: a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a28(r134,l1) a30(r158,l1) a29(r141,l1) a31(r155,l1) a32(r156,l1) a33(r136,l1) a34(r135,l1) a35(r150,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a21(r139,l1) conflicts: a20(r138,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a28(r134,l1) a30(r158,l1) a29(r141,l1) a31(r155,l1) a32(r156,l1) a33(r136,l1) a34(r135,l1) a35(r150,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a22(r144,l1) conflicts: a20(r138,l1) a21(r139,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a28(r134,l1) a30(r158,l1) a29(r141,l1) a31(r155,l1) a32(r156,l1) a33(r136,l1) a34(r135,l1) a35(r150,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a23(r145,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a28(r134,l1) a30(r158,l1) a29(r141,l1) a31(r155,l1) a32(r156,l1) a33(r136,l1) a34(r135,l1) a35(r150,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a24(r146,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a28(r134,l1) a30(r158,l1) a29(r141,l1) a31(r155,l1) a32(r156,l1) a33(r136,l1) a34(r135,l1) a35(r150,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a25(r169,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a26(r170,l1) a27(r152,l1) a28(r134,l1) a30(r158,l1) a29(r141,l1) a31(r155,l1) a32(r156,l1) a33(r136,l1) a34(r135,l1) a35(r150,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a26(r170,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a27(r152,l1) a28(r134,l1) a30(r158,l1) a29(r141,l1) a31(r155,l1) a32(r156,l1) a33(r136,l1) a34(r135,l1) a35(r150,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a27(r152,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a28(r134,l1) a30(r158,l1) a29(r141,l1) a31(r155,l1) a32(r156,l1) a33(r136,l1) a34(r135,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a28(r134,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r141,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a30(r158,l1) a31(r155,l1) a32(r156,l1) a33(r136,l1) a34(r135,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a30(r158,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a29(r141,l1)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a31(r155,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a29(r141,l1)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a32(r156,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a29(r141,l1) a33(r136,l1)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r136,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a29(r141,l1) a32(r156,l1)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a34(r135,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1) a27(r152,l1) a29(r141,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r150,l1) conflicts: a20(r138,l1) a21(r139,l1) a22(r144,l1) a23(r145,l1) a24(r146,l1) a25(r169,l1) a26(r170,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r166,l0) conflicts: a1(r168,l0) a2(r137,l0) a4(r133,l0) a6(r138,l0) a7(r146,l0) a38(r161,l0) a37(r164,l0) a39(r140,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a37(r164,l0) conflicts: a1(r168,l0) a2(r137,l0) a4(r133,l0) a6(r138,l0) a7(r146,l0) a36(r166,l0) a38(r161,l0) a39(r140,l0)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a38(r161,l0) conflicts: a1(r168,l0) a2(r137,l0) a4(r133,l0) a6(r138,l0) a7(r146,l0) a36(r166,l0) a37(r164,l0)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a39(r140,l0) conflicts: a1(r168,l0) a2(r137,l0) a4(r133,l0) a6(r138,l0) a7(r146,l0) a36(r166,l0) a37(r164,l0)
;;     total conflict hard regs: 2 3
;;     conflict hard regs: 2 3
;; a40(r134,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a41(r141,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a42(r158,l0) a43(r155,l0) a44(r156,l0) a45(r136,l0) a46(r135,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a42(r158,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a41(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a43(r155,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a41(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a44(r156,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a41(r141,l0) a45(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a45(r136,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a41(r141,l0) a44(r156,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a46(r135,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a3(r152,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0) a41(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a47(r150,l0) conflicts: a0(r145,l0) a6(r138,l0) a7(r146,l0) a5(r144,l0) a8(r170,l0) a9(r169,l0) a10(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a4(r133)<->a5(r144)@1000:move
  cp1:a2(r137)<->a3(r152)@1000:move
  cp2:a18(r161)<->a19(r140)@125:shuffle
  cp3:a33(r136)<->a34(r135)@125:shuffle
  cp4:a31(r155)<->a33(r136)@125:shuffle
  cp5:a31(r155)<->a32(r156)@125:shuffle
  cp6:a30(r158)<->a31(r155)@125:shuffle
  cp7:a28(r134)<->a29(r141)@125:shuffle
  cp8:a28(r134)<->a30(r158)@125:shuffle
  cp9:a38(r161)<->a39(r140)@125:shuffle
  cp10:a45(r136)<->a46(r135)@125:shuffle
  cp11:a43(r155)<->a45(r136)@125:shuffle
  cp12:a43(r155)<->a44(r156)@125:shuffle
  cp13:a42(r158)<->a43(r155)@125:shuffle
  cp14:a40(r134)<->a41(r141)@125:shuffle
  cp15:a40(r134)<->a42(r158)@125:shuffle
  regions=3, blocks=18, points=50
    allocnos=48, copies=16, conflicts=0, ranges=43

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 17 16 13 10(->15:l2) 8 6 4 3(->12:l1) 2
    all: 0r145 1r168 2r137 3r152 4r133 5r144 6r138 7r146 8r170 9r169 10r139 36r166 37r164 38r161 39r140 40r134 41r141 42r158 43r155 44r156 45r136 46r135 47r150
    modified regnos: 133 134 135 136 137 138 139 140 141 144 145 146 150 152 155 156 158 161 164 166 168 169 170
    border:
    Pressure: GENERAL_REGS=15
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 168 of GENERAL_REGS has 5 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 152 of GENERAL_REGS has 5 regs less
    Reg 133 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 170 of GENERAL_REGS has 5 regs less
    Reg 169 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 164 of GENERAL_REGS has 2 regs less
    Reg 161 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
      Pushing a47(r150,l0: a35(r150,l1))
      Pushing a46(r135,l0: a34(r135,l1))
      Pushing a44(r156,l0: a32(r156,l1))
      Pushing a43(r155,l0: a31(r155,l1))
      Pushing a42(r158,l0: a30(r158,l1))
      Pushing a40(r134,l0: a28(r134,l1))
      Pushing a38(r161,l0: a18(r161,l2))
      Pushing a37(r164,l0: a17(r164,l2))
      Pushing a39(r140,l0: a19(r140,l2))
      Pushing a36(r166,l0: a16(r166,l2))
      Pushing a3(r152,l0)(potential spill: pri=1250, cost=20000)
      Pushing a9(r169,l0)(potential spill: pri=1428, cost=20000)
      Pushing a5(r144,l0)(potential spill: pri=2307, cost=30000)
      Pushing a8(r170,l0)(potential spill: pri=2500, cost=30000)
      Pushing a41(r141,l0: a29(r141,l1))(potential spill: pri=2727, cost=30000)
      Pushing a1(r168,l0)(potential spill: pri=3000, cost=30000)
      Pushing a2(r137,l0)
      Pushing a4(r133,l0)
      Pushing a45(r136,l0: a33(r136,l1))(potential spill: pri=3000, cost=30000)
      Pushing a7(r146,l0)
      Pushing a0(r145,l0)
      Pushing a6(r138,l0)
      Pushing a10(r139,l0)
      Popping a10(r139,l0)  -- assign reg 4
      Popping a6(r138,l0)  -- assign reg 5
      Popping a0(r145,l0)  -- assign reg 6
      Popping a7(r146,l0)  -- assign reg 7
      Popping a45(r136,l0: a33(r136,l1))  -- assign reg 8
      Popping a4(r133,l0)  -- assign reg 4
      Popping a2(r137,l0)  -- assign reg 6
      Popping a1(r168,l0)  -- assign reg 8
      Popping a41(r141,l0: a29(r141,l1))  -- assign reg 10
      Popping a8(r170,l0)  -- assign reg 9
      Popping a5(r144,l0)  -- assign reg 11
      Popping a9(r169,l0)  -- (memory is more profitable 20000 vs 40000) spill
      Popping a3(r152,l0)  -- assign reg 12
      Popping a36(r166,l0: a16(r166,l2))  -- assign reg 1
      Popping a39(r140,l0: a19(r140,l2))  -- assign reg 12
      Popping a37(r164,l0: a17(r164,l2))  -- assign reg 0
      Popping a38(r161,l0: a18(r161,l2))  -- assign reg 12
      Popping a40(r134,l0: a28(r134,l1))  -- assign reg 10
      Popping a42(r158,l0: a30(r158,l1))  -- assign reg 8
      Popping a43(r155,l0: a31(r155,l1))  -- assign reg 8
      Popping a44(r156,l0: a32(r156,l1))  -- assign reg 3
      Popping a46(r135,l0: a34(r135,l1))  -- assign reg 8
      Popping a47(r150,l0: a35(r150,l1))  -- assign reg 3

  Loop 2 (parent 0, header bb15, depth 1)
    bbs: 15(->16:l0) 14
    all: 11r133 12r137 13r138 14r146 15r168 16r166 17r164 18r161 19r140
    modified regnos: 133 137 140 161 164 166
    border: 11r133 12r137 13r138 14r146 15r168
    Pressure: GENERAL_REGS=10
    Reg 133 of GENERAL_REGS has 5 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 164 of GENERAL_REGS has 2 regs less
    Reg 161 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
      Pushing a18(r161,l2)
      Pushing a17(r164,l2)
      Pushing a19(r140,l2)
      Pushing a16(r166,l2)
      Pushing a13(r138,l2)(potential spill: pri=5000, cost=50000)
      Pushing a14(r146,l2)
      Pushing a12(r137,l2)
      Pushing a11(r133,l2)
      Popping a11(r133,l2)  -- assign reg 4
      Popping a12(r137,l2)  -- assign reg 6
      Popping a14(r146,l2)  -- assign reg 7
      Popping a13(r138,l2)  -- assign reg 5
      Popping a16(r166,l2)  -- assign reg 1
      Popping a19(r140,l2)  -- assign reg 12
      Popping a17(r164,l2)  -- assign reg 0
      Popping a18(r161,l2)  -- assign reg 12

  Loop 1 (parent 0, header bb12, depth 1)
    bbs: 12(->13:l0) 11 9(->10:l0) 7(->8:l0) 5(->6:l0)
    all: 20r138 21r139 22r144 23r145 24r146 25r169 26r170 27r152 28r134 29r141 30r158 31r155 32r156 33r136 34r135 35r150
    modified regnos: 134 135 136 138 139 141 150 152 155 156 158
    border: 20r138 21r139 22r144 23r145 24r146 25r169 26r170 27r152
    Pressure: GENERAL_REGS=15
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 5 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 152 of GENERAL_REGS has 5 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
      Pushing a35(r150,l1)
      Pushing a34(r135,l1)
      Pushing a32(r156,l1)
      Pushing a31(r155,l1)
      Pushing a30(r158,l1)
      Pushing a28(r134,l1)
      Pushing a29(r141,l1)(potential spill: pri=2142, cost=30000)
      Pushing a33(r136,l1)(potential spill: pri=2307, cost=30000)
      Pushing a22(r144,l1)(potential spill: pri=3333, cost=40000)
      Pushing a27(r152,l1)(potential spill: pri=4181, cost=46000)
      Pushing a23(r145,l1)(potential spill: pri=5000, cost=50000)
      Pushing a24(r146,l1)
      Pushing a20(r138,l1)
      Pushing a21(r139,l1)
      Popping a21(r139,l1)  -- assign reg 4
      Popping a20(r138,l1)  -- assign reg 5
      Popping a24(r146,l1)  -- assign reg 7
      Popping a23(r145,l1)  -- assign reg 6
      Popping a27(r152,l1)  -- assign reg 8
      Popping a22(r144,l1)  -- assign reg 11
      Popping a33(r136,l1)  -- assign reg 10
      Popping a29(r141,l1)  -- assign reg 12
      Popping a28(r134,l1)  -- assign reg 12
      Popping a30(r158,l1)  -- assign reg 10
      Popping a31(r155,l1)  -- assign reg 10
      Popping a32(r156,l1)  -- assign reg 3
      Popping a34(r135,l1)  -- assign reg 10
      Popping a35(r150,l1)  -- assign reg 3
Disposition:
   11:r133 l2     4    4:r133 l0     4   28:r134 l1    12   34:r135 l1    10
   33:r136 l1    10   12:r137 l2     6    2:r137 l0     6   20:r138 l1     5
   13:r138 l2     5    6:r138 l0     5   21:r139 l1     4   10:r139 l0     4
   19:r140 l2    12   29:r141 l1    12   22:r144 l1    11    5:r144 l0    11
   23:r145 l1     6    0:r145 l0     6   24:r146 l1     7   14:r146 l2     7
    7:r146 l0     7   35:r150 l1     3   27:r152 l1     8    3:r152 l0    12
   31:r155 l1    10   32:r156 l1     3   30:r158 l1    10   18:r161 l2    12
   17:r164 l2     0   16:r166 l2     1   15:r168 l2     8    1:r168 l0     8
   25:r169 l1   mem    9:r169 l0   mem   26:r170 l1     9    8:r170 l0     9
New iteration of spill/restore move
      Changing RTL for loop 2 (header bb15)
  4 vs parent 4:      Creating newreg=171 from oldreg=133
  6 vs parent 6:      Creating newreg=172 from oldreg=137
  5 vs parent 5:      Creating newreg=173 from oldreg=138
  7 vs parent 7:      Creating newreg=174 from oldreg=146
rescanning insn with uid = 105.
deleting insn with uid = 105.
rescanning insn with uid = 85.
deleting insn with uid = 85.
rescanning insn with uid = 96.
deleting insn with uid = 96.
rescanning insn with uid = 98.
deleting insn with uid = 98.
rescanning insn with uid = 95.
deleting insn with uid = 95.
rescanning insn with uid = 99.
deleting insn with uid = 99.
rescanning insn with uid = 101.
deleting insn with uid = 101.
      Changing RTL for loop 1 (header bb12)
  5 vs parent 5:      Creating newreg=175 from oldreg=138
  4 vs parent 4:      Creating newreg=176 from oldreg=139
  11 vs parent 11:      Creating newreg=177 from oldreg=144
  6 vs parent 6:      Creating newreg=178 from oldreg=145
  7 vs parent 7:      Creating newreg=179 from oldreg=146
  8 vs parent 12:      Creating newreg=180 from oldreg=152
rescanning insn with uid = 79.
deleting insn with uid = 79.
rescanning insn with uid = 73.
deleting insn with uid = 73.
rescanning insn with uid = 72.
deleting insn with uid = 72.
rescanning insn with uid = 75.
deleting insn with uid = 75.
rescanning insn with uid = 50.
deleting insn with uid = 50.
rescanning insn with uid = 53.
deleting insn with uid = 53.
rescanning insn with uid = 54.
deleting insn with uid = 54.
rescanning insn with uid = 62.
deleting insn with uid = 62.
rescanning insn with uid = 37.
deleting insn with uid = 37.
rescanning insn with uid = 39.
deleting insn with uid = 39.
rescanning insn with uid = 26.
deleting insn with uid = 26.
scanning new insn with uid = 143.
scanning new insn with uid = 144.
scanning new insn with uid = 145.
scanning new insn with uid = 146.
scanning new insn with uid = 151.
    Adding cp16:a6r138-a20r175
    Adding range [51..51] to allocno a6r138
    Adding cp17:a10r139-a21r176
    Adding range [51..53] to allocno a10r139
    Adding cp18:a5r144-a22r177
    Adding range [51..55] to allocno a5r144
    Adding cp19:a0r145-a23r178
    Adding range [51..57] to allocno a0r145
    Adding cp20:a7r146-a24r179
    Adding range [51..59] to allocno a7r146
    Adding range [52..60] to allocno a20r175
    Adding range [54..60] to allocno a21r176
    Adding range [56..60] to allocno a22r177
    Adding range [58..60] to allocno a23r178
    Adding range [60..60] to allocno a24r179
    Adding range [51..60] to live through  allocno a9r169
    Adding range [51..60] to live through  allocno a8r170
    Adding cp21:a6r138-a20r175
    Adding range [62..62] to allocno a20r175
    Adding cp22:a5r144-a22r177
    Adding range [62..64] to allocno a22r177
    Adding cp23:a7r146-a24r179
    Adding range [62..66] to allocno a24r179
    Adding cp24:a3r152-a27r180
    Adding range [62..68] to allocno a27r180
    Adding range [63..69] to allocno a6r138
    Adding range [65..69] to allocno a5r144
    Adding range [67..69] to allocno a7r146
    Adding range [69..69] to allocno a3r152
    Adding cp25:a4r133-a11r171
    Adding range [71..71] to allocno a4r133
    Adding cp26:a2r137-a12r172
    Adding range [71..73] to allocno a2r137
    Adding cp27:a6r138-a13r173
    Adding range [71..75] to allocno a6r138
    Adding cp28:a7r146-a14r174
    Adding range [71..77] to allocno a7r146
    Adding range [72..78] to allocno a11r171
    Adding range [74..78] to allocno a12r172
    Adding range [76..78] to allocno a13r173
    Adding range [78..78] to allocno a14r174
    Adding range [71..78] to live through  allocno a1r168
    Adding cp29:a0r145-a23r178
    Adding range [80..80] to allocno a23r178
    Adding range [81..81] to allocno a0r145
scanning new insn with uid = 138.
scanning new insn with uid = 139.
scanning new insn with uid = 140.
scanning new insn with uid = 141.
scanning new insn with uid = 142.
scanning new insn with uid = 147.
scanning new insn with uid = 148.
scanning new insn with uid = 149.
scanning new insn with uid = 150.
    New r171: setting preferred GENERAL_REGS, alternative NO_REGS
    New r172: setting preferred GENERAL_REGS, alternative NO_REGS
    New r173: setting preferred GENERAL_REGS, alternative NO_REGS
    New r174: setting preferred GENERAL_REGS, alternative NO_REGS
    New r175: setting preferred GENERAL_REGS, alternative NO_REGS
    New r176: setting preferred GENERAL_REGS, alternative NO_REGS
    New r177: setting preferred GENERAL_REGS, alternative NO_REGS
    New r178: setting preferred GENERAL_REGS, alternative NO_REGS
    New r179: setting preferred GENERAL_REGS, alternative NO_REGS
    New r180: setting preferred GENERAL_REGS, alternative NO_REGS
Flattening IR
      Moving ranges of a26r170 to a8r170:  [30..49]
      Moving ranges of a25r169 to a9r169:  [30..49]
      Moving ranges of a15r168 to a1r168:  [19..29]
      Remove cp9:c38r161-c39r140
      Remove cp10:c45r136-c46r135
      Remove cp11:c43r155-c45r136
      Remove cp12:c43r155-c44r156
      Remove cp13:c42r158-c43r155
      Remove cp14:c40r134-c41r141
      Remove cp15:c40r134-c42r158
      Remove a15r168
      Remove a25r169
      Remove a26r170
      Remove a36r166
      Remove a37r164
      Remove a38r161
      Remove a39r140
      Remove a40r134
      Remove a41r141
      Remove a42r158
      Remove a43r155
      Remove a44r156
      Remove a45r136
      Remove a46r135
      Remove a47r150
Compressing live ranges: from 82 to 78 - 95%
Ranges after the compression:
 a0(r145): [77..77] [50..56] [11..16] [2..3] [0..1]
 a1(r168): [68..75] [19..29] [4..5]
 a2(r137): [68..70] [4..6]
 a3(r152): [67..67] [7..10]
 a4(r133): [68..68] [4..8]
 a5(r144): [63..67] [50..54] [11..17] [9..10]
 a6(r138): [68..72] [61..67] [50..50] [11..14] [4..10]
 a7(r146): [68..74] [65..67] [50..58] [11..18] [4..10]
 a8(r170): [50..59] [30..49] [11..12]
 a9(r169): [50..59] [30..49] [11..13]
 a10(r139): [50..52] [11..15]
 a11(r171): [69..75] [21..29] [19..20]
 a12(r172): [71..75] [19..29]
 a13(r173): [73..75] [19..29]
 a14(r174): [75..75] [19..29]
 a16(r166): [22..26]
 a17(r164): [23..27]
 a18(r161): [23..24]
 a19(r140): [25..28]
 a20(r175): [60..60] [51..59] [30..49]
 a21(r176): [53..59] [32..49] [30..31]
 a22(r177): [60..62] [55..59] [30..49]
 a23(r178): [76..76] [57..59] [30..49]
 a24(r179): [60..64] [59..59] [30..49]
 a27(r180): [60..66] [33..45]
 a28(r134): [34..35]
 a29(r141): [36..44]
 a30(r158): [36..37]
 a31(r155): [38..39]
 a32(r156): [40..41]
 a33(r136): [40..42]
 a34(r135): [43..46]
 a35(r150): [47..48]
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 20 count 34 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 20 count 36 (    2)
+++Costs: overall 39500, reg 19500, mem 20000, ld 0, st 0, move 28000
+++       move loops 0, new jumps 2
insn=5, live_throughout: 1, 2, 13, 14, dead_or_set: 3, 146
insn=3, live_throughout: 2, 13, 14, 146, dead_or_set: 1, 144
insn=9, live_throughout: 2, 13, 14, 144, 146, dead_or_set: 
insn=4, live_throughout: 13, 14, 24, 144, 146, dead_or_set: 2, 145
insn=10, live_throughout: 13, 14, 144, 145, 146, dead_or_set: 
insn=12, live_throughout: 13, 14, 144, 145, 146, dead_or_set: 139
insn=13, live_throughout: 13, 14, 139, 144, 145, 146, dead_or_set: 138
insn=25, live_throughout: 13, 14, 138, 139, 144, 145, 146, dead_or_set: 169
insn=56, live_throughout: 13, 14, 138, 139, 144, 145, 146, 169, dead_or_set: 170
insn=138, live_throughout: 13, 14, 139, 144, 145, 146, 169, 170, dead_or_set: 138, 175
insn=139, live_throughout: 13, 14, 144, 145, 146, 169, 170, 175, dead_or_set: 139, 176
insn=140, live_throughout: 13, 14, 145, 146, 169, 170, 175, 176, dead_or_set: 144, 177
insn=141, live_throughout: 13, 14, 146, 169, 170, 175, 176, 177, dead_or_set: 145, 178
insn=142, live_throughout: 13, 14, 169, 170, 175, 176, 177, 178, dead_or_set: 146, 179
insn=128, live_throughout: 13, 14, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 
insn=16, live_throughout: 13, dead_or_set: 
insn=20, live_throughout: 13, dead_or_set: 0
insn=21, live_throughout: 0, 13, dead_or_set: 1
insn=22, live_throughout: 13, dead_or_set: 0, 1, 14
insn=78, live_throughout: 13, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 
insn=26, live_throughout: 13, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 150
insn=27, live_throughout: 13, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 150
insn=28, live_throughout: 13, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 
insn=31, live_throughout: 13, dead_or_set: 0
insn=32, live_throughout: 0, 13, dead_or_set: 1
insn=33, live_throughout: 13, dead_or_set: 0, 1, 14
insn=35, live_throughout: 13, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 
insn=37, live_throughout: 13, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 135
insn=39, live_throughout: 13, 135, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 180
insn=40, live_throughout: 13, 135, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 
insn=43, live_throughout: 13, dead_or_set: 0
insn=44, live_throughout: 0, 13, dead_or_set: 1
insn=45, live_throughout: 13, dead_or_set: 0, 1, 14
insn=47, live_throughout: 13, 135, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 
insn=50, live_throughout: 13, 135, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 141
insn=49, live_throughout: 13, 141, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 135, 136
insn=51, live_throughout: 13, 136, 141, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 0
insn=53, live_throughout: 0, 13, 136, 141, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 2
insn=52, live_throughout: 0, 2, 13, 136, 141, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 1
insn=54, live_throughout: 0, 1, 2, 13, 136, 141, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 3
insn=55, live_throughout: 13, 136, 141, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 0, 1, 2, 3, 14
insn=57, live_throughout: 13, 14, 136, 141, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 156
insn=58, live_throughout: 13, 14, 141, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 136, 155, 156
insn=59, live_throughout: 13, 14, 141, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 155, 158
insn=61, live_throughout: 13, 14, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 134, 141, 158
insn=62, live_throughout: 13, 14, 134, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 
insn=63, live_throughout: 13, 14, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 134
insn=64, live_throughout: 13, 14, 169, 170, 175, 176, 177, 178, 179, 180, dead_or_set: 
insn=143, live_throughout: 13, 14, 177, 179, 180, dead_or_set: 138, 175
insn=144, live_throughout: 13, 14, 138, 179, 180, dead_or_set: 144, 177
insn=145, live_throughout: 13, 14, 138, 144, 180, dead_or_set: 146, 179
insn=146, live_throughout: 13, 14, 138, 144, 146, dead_or_set: 152, 180
insn=66, live_throughout: 13, 14, 138, 146, 152, dead_or_set: 133, 144
insn=67, live_throughout: 13, 14, 133, 138, 146, dead_or_set: 137, 152
insn=86, live_throughout: 13, 14, 133, 137, 138, 146, dead_or_set: 168
insn=147, live_throughout: 13, 14, 137, 138, 146, 168, dead_or_set: 133, 171
insn=148, live_throughout: 13, 14, 138, 146, 168, 171, dead_or_set: 137, 172
insn=149, live_throughout: 13, 14, 146, 168, 171, 172, dead_or_set: 138, 173
insn=150, live_throughout: 13, 14, 168, 171, 172, 173, dead_or_set: 146, 174
insn=130, live_throughout: 13, 14, 168, 171, 172, 173, 174, dead_or_set: 
insn=70, live_throughout: 13, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 
insn=73, live_throughout: 13, 169, 170, 175, 177, 178, 179, dead_or_set: 0, 176
insn=72, live_throughout: 0, 13, 169, 170, 177, 178, 179, dead_or_set: 175
insn=74, live_throughout: 13, 169, 170, 175, 177, 178, 179, dead_or_set: 0, 14
insn=75, live_throughout: 13, 14, 169, 170, 175, 177, 178, 179, dead_or_set: 0, 176
insn=76, live_throughout: 13, 14, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 
insn=79, live_throughout: 13, 14, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 
insn=80, live_throughout: 13, 14, 169, 170, 175, 176, 177, 178, 179, dead_or_set: 
insn=151, live_throughout: 13, 14, dead_or_set: 145, 178
insn=133, live_throughout: 13, 14, 145, dead_or_set: 
insn=104, live_throughout: 13, 168, 171, 172, 173, 174, dead_or_set: 
insn=85, live_throughout: 13, 168, 171, 172, 173, 174, dead_or_set: 140
insn=96, live_throughout: 13, 140, 168, 171, 172, 173, 174, dead_or_set: 3
insn=89, live_throughout: 3, 13, 140, 168, 171, 172, 173, 174, dead_or_set: 164
insn=98, live_throughout: 3, 13, 140, 164, 168, 171, 173, 174, dead_or_set: 172
insn=95, live_throughout: 3, 13, 140, 164, 168, 171, 172, 173, 174, dead_or_set: 2
insn=91, live_throughout: 2, 3, 13, 140, 164, 168, 171, 172, 173, 174, dead_or_set: 166
insn=87, live_throughout: 2, 3, 13, 164, 166, 168, 171, 172, 173, 174, dead_or_set: 140, 161
insn=93, live_throughout: 2, 3, 13, 166, 168, 171, 172, 173, 174, dead_or_set: 0, 161, 164
insn=94, live_throughout: 0, 2, 3, 13, 168, 171, 172, 173, 174, dead_or_set: 1, 166
insn=97, live_throughout: 13, 168, 171, 172, 173, 174, dead_or_set: 0, 1, 2, 3, 14
insn=99, live_throughout: 13, 168, 172, 173, 174, dead_or_set: 0, 171
insn=100, live_throughout: 13, 168, 172, 173, 174, dead_or_set: 0, 14
insn=101, live_throughout: 13, 14, 168, 172, 173, 174, dead_or_set: 0, 171
insn=102, live_throughout: 13, 14, 168, 171, 172, 173, 174, dead_or_set: 
insn=105, live_throughout: 13, 14, 168, 171, 172, 173, 174, dead_or_set: 
insn=106, live_throughout: 13, 14, 168, 171, 172, 173, 174, dead_or_set: 
insn=108, live_throughout: 13, 14, dead_or_set: 145
insn=109, live_throughout: 13, 14, 145, dead_or_set: 
insn=115, live_throughout: 13, 14, dead_or_set: 0, 145
insn=121, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 140: (insn_list:REG_DEP_TRUE 85 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 26 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 57 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 89 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 86 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 25 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 56 (nil))
changing reg in insn 66
changing reg in insn 147
changing reg in insn 61
changing reg in insn 62
changing reg in insn 63
changing reg in insn 37
changing reg in insn 39
changing reg in insn 39
changing reg in insn 49
changing reg in insn 49
changing reg in insn 58
changing reg in insn 51
changing reg in insn 67
changing reg in insn 148
changing reg in insn 143
changing reg in insn 13
changing reg in insn 149
changing reg in insn 138
changing reg in insn 12
changing reg in insn 139
changing reg in insn 85
changing reg in insn 91
changing reg in insn 87
changing reg in insn 50
changing reg in insn 61
changing reg in insn 52
changing reg in insn 144
changing reg in insn 3
changing reg in insn 140
changing reg in insn 66
changing reg in insn 12
changing reg in insn 151
changing reg in insn 108
changing reg in insn 4
changing reg in insn 141
changing reg in insn 115
changing reg in insn 145
changing reg in insn 5
changing reg in insn 150
changing reg in insn 142
changing reg in insn 9
changing reg in insn 26
changing reg in insn 27
changing reg in insn 27
changing reg in insn 146
changing reg in insn 67
changing reg in insn 58
changing reg in insn 59
changing reg in insn 59
changing reg in insn 57
changing reg in insn 58
changing reg in insn 59
changing reg in insn 61
changing reg in insn 87
changing reg in insn 93
changing reg in insn 89
changing reg in insn 93
changing reg in insn 91
changing reg in insn 94
changing reg in insn 86
changing reg in insn 89
changing reg in insn 89
changing reg in insn 56
changing reg in insn 57
changing reg in insn 57
changing reg in insn 147
changing reg in insn 101
changing reg in insn 99
changing reg in insn 95
changing reg in insn 85
changing reg in insn 85
changing reg in insn 148
changing reg in insn 98
changing reg in insn 98
changing reg in insn 105
changing reg in insn 149
changing reg in insn 105
changing reg in insn 150
changing reg in insn 96
changing reg in insn 138
changing reg in insn 72
changing reg in insn 143
changing reg in insn 72
changing reg in insn 79
changing reg in insn 139
changing reg in insn 75
changing reg in insn 26
changing reg in insn 37
changing reg in insn 62
changing reg in insn 53
changing reg in insn 50
changing reg in insn 73
changing reg in insn 26
changing reg in insn 140
changing reg in insn 144
changing reg in insn 141
changing reg in insn 151
changing reg in insn 79
changing reg in insn 142
changing reg in insn 145
changing reg in insn 54
changing reg in insn 39
changing reg in insn 146
12 uses a new slot
12 uses a slot from prev iteration
12 uses a slot from prev iteration
Spilling for insn 27.
Using reg 2 for reload 0
Spilling for insn 153.
Spilling for insn 62.
deleting insn with uid = 25.

Reloads for insn # 27
Reload 0: reload_in (SI) = (const_int -2023406815 [0xffffffff87654321])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg:SI 169)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 153
Reload 0: reload_out (SI) = (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 62
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                                                        (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                                                        (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])
deleting insn with uid = 138.
deleting insn with uid = 139.
deleting insn with uid = 140.
deleting insn with uid = 141.
deleting insn with uid = 142.
deleting insn with uid = 143.
deleting insn with uid = 144.
deleting insn with uid = 145.
deleting insn with uid = 147.
deleting insn with uid = 148.
deleting insn with uid = 149.
deleting insn with uid = 150.
deleting insn with uid = 151.


try_optimize_cfg iteration 1

Forwarding edge 12->13 to 17 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 22.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 45.
verify found no changes in insn with uid = 55.
verify found no changes in insn with uid = 74.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 100.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 20 count 32 (  1.8)
df_worklist_dataflow_doublequeue:n_basic_blocks 18 n_edges 20 count 36 (    2)


dma_map_sg

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={17d,12u} r1={14d,7u} r2={11d,4u} r3={12d,5u,1d} r4={4d,9u,2d} r5={2d,3u} r6={4d,4u} r7={1d,3u} r8={2d,2u,1d} r9={1d,1u,1d} r10={4d,7u,1d} r11={1d,2u} r12={14d,9u} r13={1d,26u} r14={8d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={13d,6u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 986{879d,101u,6e} in 71{64 regular + 7 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7] 11 [fp] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7] 11 [fp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 6 3 2 arch/arm/mm/dma-mapping.c:574 (set (reg/v:SI 7 r7 [orig:146 dir ] [146])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 3 5 9 2 arch/arm/mm/dma-mapping.c:574 (set (reg/v/f:SI 11 fp [orig:144 sg ] [144])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (nil))

(insn 9 3 4 2 arch/arm/mm/dma-mapping.c:578 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:146 dir ] [146])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(insn 4 9 10 2 arch/arm/mm/dma-mapping.c:574 (set (reg/v:SI 6 r6 [orig:145 nents ] [145])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 10 4 11 2 arch/arm/mm/dma-mapping.c:578 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 16)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  4 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 9 [r9]
;; live  in  	 6 [r6] 7 [r7] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 9 [r9]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 arch/arm/mm/dma-mapping.c:578 (set (reg/v/f:SI 4 r4 [orig:139 s ] [139])
        (reg/v/f:SI 11 fp [orig:144 sg ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 13 12 25 3 arch/arm/mm/dma-mapping.c:578 (set (reg/v:SI 5 r5 [orig:138 i ] [138])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 25 13 56 3 NOTE_INSN_DELETED)

(insn 56 25 128 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg/f:SI 9 r9 [170])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(jump_insn 128 56 129 3 (set (pc)
        (label_ref 76)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%] 

(barrier 129 128 16)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
(code_label 16 129 17 4 110 "" [1 uses])

(note 17 16 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 17 21 4 arch/arm/mm/dma-mapping.c:578 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 21 20 22 4 arch/arm/mm/dma-mapping.c:578 discrim 1 (set (reg:SI 1 r1)
        (const_int 578 [0x242])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 578 [0x242])
        (nil)))

(call_insn 22 21 23 4 arch/arm/mm/dma-mapping.c:578 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 23 22 78)

;; Start of basic block ( 12) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  12 [97.8%] 
(code_label 78 23 24 5 116 "" [1 uses])

(note 24 78 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 26 24 155 5 include/linux/scatterlist.h:96 (set (reg:SI 3 r3 [orig:150 <variable>.sg_magic ] [150])
        (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139]) [0 <variable>.sg_magic+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139]) [0 <variable>.sg_magic+0 S4 A32])
        (nil)))

(insn 155 26 27 5 include/linux/scatterlist.h:96 (set (reg:SI 2 r2)
        (const_int -2023406815 [0xffffffff87654321])) 167 {*arm_movsi_insn} (nil))

(insn 27 155 28 5 include/linux/scatterlist.h:96 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:150 <variable>.sg_magic ] [150])
            (reg:SI 2 r2))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [orig:150 <variable>.sg_magic ] [150])
            (const_int -2023406815 [0xffffffff87654321]))
        (nil)))

(jump_insn 28 27 29 5 include/linux/scatterlist.h:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru,loop_exit)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru,loop_exit)
(note 29 28 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 31 29 32 6 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 32 31 33 6 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 1 r1)
        (const_int 96 [0x60])) 167 {*arm_movsi_insn} (nil))

(call_insn 33 32 34 6 include/linux/scatterlist.h:96 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 34 33 35)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 8 [r8] 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 8 [r8] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
(code_label 35 34 36 7 112 "" [1 uses])

(note 36 35 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 38 36 37 7 NOTE_INSN_DELETED)

(insn 37 38 39 7 include/linux/scatterlist.h:97 (set (reg:SI 10 sl [orig:135 D.25174 ] [135])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                (const_int 4 [0x4])) [0 <variable>.page_link+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 39 37 40 7 include/linux/scatterlist.h:97 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 10 sl [orig:135 D.25174 ] [135])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg:SI 8 r8 [152])
                (and:SI (reg:SI 10 sl [orig:135 D.25174 ] [135])
                    (const_int 1 [0x1])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 40 39 41 7 include/linux/scatterlist.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [0.0%]  (fallthru,loop_exit)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  7 [0.0%]  (fallthru,loop_exit)
(note 41 40 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 43 41 44 8 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 44 43 45 8 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 1 r1)
        (const_int 97 [0x61])) 167 {*arm_movsi_insn} (nil))

(call_insn 45 44 46 8 include/linux/scatterlist.h:97 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 8 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 46 45 47)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [100.0%] 
(code_label 47 46 48 9 113 "" [1 uses])

(note 48 47 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 60 48 50 9 NOTE_INSN_DELETED)

(insn 50 60 49 9 arch/arm/mm/dma-mapping.c:581 (set (reg:SI 12 ip [orig:141 D.24869 ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                (const_int 8 [0x8])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 49 50 51 9 include/linux/scatterlist.h:99 (set (reg/f:SI 10 sl [orig:136 D.25168 ] [136])
        (and:SI (reg:SI 10 sl [orig:135 D.25174 ] [135])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 51 49 53 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 0 r0)
        (reg/f:SI 10 sl [orig:136 D.25168 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 53 51 52 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 52 53 54 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 1 r1)
        (reg:SI 12 ip [orig:141 D.24869 ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 54 52 153 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 3 r3)
        (reg/v:SI 7 r7 [orig:146 dir ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 153 54 55 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (nil))

(call_insn 55 153 57 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_cpu_to_dev") [flags 0x3] <function_decl 0x11060e00 ___dma_page_cpu_to_dev>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 57 55 58 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg/f:SI 3 r3 [orig:156 mem_map ] [156])
        (mem/f/c/i:SI (reg/f:SI 9 r9 [170]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 9 r9 [170]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 58 57 59 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 10 sl [155])
        (minus:SI (reg/f:SI 10 sl [orig:136 D.25168 ] [136])
            (reg/f:SI 3 r3 [orig:156 mem_map ] [156]))) 28 {*arm_subsi3_insn} (nil))

(insn 59 58 154 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 10 sl [158])
        (ashiftrt:SI (reg:SI 10 sl [155])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 10 sl [155])
            (const_int 32 [0x20]))
        (nil)))

(insn 154 59 61 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 61 154 62 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 12 ip [orig:134 D.25188 ] [134])
        (plus:SI (mult:SI (reg:SI 10 sl [158])
                (const_int 4096 [0x1000]))
            (reg:SI 12 ip [orig:141 D.24869 ] [141]))) 270 {*arith_shiftsi} (nil))

(insn 62 61 63 9 arch/arm/mm/dma-mapping.c:581 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])
        (reg:SI 12 ip [orig:134 D.25188 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 63 62 64 9 arch/arm/mm/dma-mapping.c:583 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:134 D.25188 ] [134])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 64 63 65 9 arch/arm/mm/dma-mapping.c:583 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 70)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  10 [2.2%]  (fallthru,loop_exit)
;; Succ edge  11 [97.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 7 [r7] 8 [r8] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 11 [fp] 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 8 [r8] 12 [ip]
;; live  in  	 5 [r5] 7 [r7] 8 [r8] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 8 [r8] 12 [ip]
;; live  kill	

;; Pred edge  9 [2.2%]  (fallthru,loop_exit)
(note 65 64 146 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 146 65 66 10 (set (reg:SI 12 ip [152])
        (reg:SI 8 r8 [152])) 167 {*arm_movsi_insn} (nil))

(insn 66 146 67 10 arch/arm/mm/dma-mapping.c:583 (set (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
        (reg/v/f:SI 11 fp [orig:144 sg ] [144])) 167 {*arm_movsi_insn} (nil))

(insn 67 66 86 10 arch/arm/mm/dma-mapping.c:583 (set (reg/v:SI 6 r6 [orig:137 j ] [137])
        (reg:SI 12 ip [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 86 67 130 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 8 r8 [168])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(jump_insn 130 86 131 10 (set (pc)
        (label_ref 102)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 131 130 70)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  9 [97.8%] 
(code_label 70 131 71 11 114 "" [1 uses])

(note 71 70 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 73 71 72 11 arch/arm/mm/dma-mapping.c:580 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 s ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 72 73 74 11 arch/arm/mm/dma-mapping.c:580 (set (reg/v:SI 5 r5 [orig:138 i ] [138])
        (plus:SI (reg/v:SI 5 r5 [orig:138 i ] [138])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(call_insn 74 72 75 11 arch/arm/mm/dma-mapping.c:580 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 75 74 76 11 arch/arm/mm/dma-mapping.c:580 (set (reg/v/f:SI 4 r4 [orig:139 s ] [139])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 11 3) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 76 75 77 12 111 "" [1 uses])

(note 77 76 79 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 79 77 80 12 arch/arm/mm/dma-mapping.c:580 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:138 i ] [138])
            (reg/v:SI 6 r6 [orig:145 nents ] [145]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 80 79 132 12 arch/arm/mm/dma-mapping.c:580 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
        (nil)))
;; End of basic block 12 -> ( 5 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  5 [97.8%] 
;; Succ edge  13 [2.2%]  (fallthru,loop_exit)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  12 [2.2%]  (fallthru,loop_exit)
(note 132 80 133 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(jump_insn 133 132 134 13 (set (pc)
        (label_ref 109)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 17)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp] 14 [lr]


;; Succ edge  17 [100.0%] 

(barrier 134 133 104)

;; Start of basic block ( 15) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  15 [91.0%] 
(code_label 104 134 84 14 118 "" [1 uses])

(note 84 104 88 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 88 84 90 14 NOTE_INSN_DELETED)

(note 90 88 92 14 NOTE_INSN_DELETED)

(note 92 90 85 14 NOTE_INSN_DELETED)

(insn 85 92 96 14 arch/arm/mm/dma-mapping.c:591 (set (reg:SI 12 ip [orig:140 D.24872 ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])
        (nil)))

(insn 96 85 89 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 3 r3)
        (reg/v:SI 7 r7 [orig:146 dir ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 89 96 98 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 0 r0 [orig:164 mem_map ] [164])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [168]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [168]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 98 89 95 14 arch/arm/mm/dma-mapping.c:590 discrim 2 (set (reg/v:SI 6 r6 [orig:137 j ] [137])
        (plus:SI (reg/v:SI 6 r6 [orig:137 j ] [137])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 95 98 91 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 91 95 87 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1 [166])
        (ashift:SI (reg:SI 12 ip [orig:140 D.24872 ] [140])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 87 91 93 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 12 ip [161])
        (lshiftrt:SI (reg:SI 12 ip [orig:140 D.24872 ] [140])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 93 87 94 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 0 r0)
        (plus:SI (mult:SI (reg:SI 12 ip [161])
                (const_int 32 [0x20]))
            (reg/f:SI 0 r0 [orig:164 mem_map ] [164]))) 270 {*arith_shiftsi} (nil))

(insn 94 93 97 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg:SI 1 r1 [166])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(call_insn 97 94 99 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_dev_to_cpu") [flags 0x3] <function_decl 0x11060f80 ___dma_page_dev_to_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 99 97 100 14 arch/arm/mm/dma-mapping.c:590 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn 100 99 101 14 arch/arm/mm/dma-mapping.c:590 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 101 100 102 14 arch/arm/mm/dma-mapping.c:590 discrim 2 (set (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 14 10) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru,dfs_back)
;; Pred edge  10 [100.0%] 
(code_label 102 101 103 15 115 "" [1 uses])

(note 103 102 105 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 105 103 106 15 arch/arm/mm/dma-mapping.c:590 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:137 j ] [137])
            (reg/v:SI 5 r5 [orig:138 i ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 106 105 107 15 arch/arm/mm/dma-mapping.c:590 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 104)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 15 -> ( 14 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  14 [91.0%] 
;; Succ edge  16 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  15 [9.0%]  (fallthru,loop_exit)
(note 107 106 108 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 108 107 109 16 arch/arm/mm/dma-mapping.c:592 (set (reg/v:SI 6 r6 [orig:145 nents ] [145])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 6 [r6] 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 13) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  13 [100.0%] 
(code_label 109 108 110 17 117 "" [1 uses])

(note 110 109 115 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 115 110 121 17 arch/arm/mm/dma-mapping.c:593 (set (reg/i:SI 0 r0)
        (reg/v:SI 6 r6 [orig:145 nents ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 121 115 137 17 arch/arm/mm/dma-mapping.c:593 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 17 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 137 121 152 NOTE_INSN_DELETED)

(note 152 137 0 NOTE_INSN_DELETED)


;; Function dma_free_coherent (dma_free_coherent)[0:1283]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 34 count 53 (  2.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 34 count 49 (    2)
scanning new insn with uid = 200.
verify found no changes in insn with uid = 200.
deleting insn with uid = 150.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 34 count 53 (  2.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 34 count 49 (    2)

Pass 0 for finding allocno costs

    a40 (r191,l2) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r154,l1) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r154,l2) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r153,l1) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r152,l1) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r151,l1) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r147,l1) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r145,l2) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r144,l2) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r143,l2) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r142,l2) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r141,l2) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r138,l3) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r137,l3) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r136,l2) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r135,l2) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a3(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:140000
  a8(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a23(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r137,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r138,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a33(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a35(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a36(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a37(r143,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a38(r144,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a39(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a40(r191,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a41(r145,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a42(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a45(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a46(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a47(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0


Pass 1 for finding allocno costs

    r191: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a3(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:140000
  a8(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a23(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r137,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r138,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a33(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a35(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a36(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a37(r143,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a38(r144,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a39(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a40(r191,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a41(r145,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a42(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a45(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a46(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a47(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0

   Insn 195(l0): point = 1
   Insn 157(l0): point = 3
   Insn 154(l0): point = 5
   Insn 153(l0): point = 7
   Insn 200(l0): point = 9
   Insn 151(l0): point = 11
   Insn 147(l0): point = 14
   Insn 145(l0): point = 16
   Insn 146(l0): point = 18
   Insn 143(l0): point = 20
   Insn 142(l0): point = 22
   Insn 141(l0): point = 24
   Insn 98(l0): point = 27
   Insn 97(l0): point = 29
   Insn 91(l0): point = 31
   Insn 115(l0): point = 33
   Insn 94(l0): point = 35
   Insn 90(l0): point = 37
   Insn 95(l0): point = 39
   Insn 89(l0): point = 41
   Insn 86(l0): point = 44
   Insn 85(l0): point = 46
   Insn 84(l0): point = 48
   Insn 83(l0): point = 50
   Insn 82(l0): point = 52
   Insn 78(l0): point = 54
   Insn 81(l0): point = 56
   Insn 79(l0): point = 58
   Insn 80(l0): point = 60
   Insn 191(l0): point = 63
   Insn 70(l0): point = 65
   Insn 68(l0): point = 68
   Insn 67(l0): point = 70
   Insn 66(l0): point = 72
   Insn 65(l0): point = 74
   Insn 64(l0): point = 76
   Insn 189(l0): point = 79
   Insn 59(l0): point = 81
   Insn 58(l0): point = 83
   Insn 55(l0): point = 85
   Insn 56(l0): point = 87
   Insn 57(l0): point = 89
   Insn 50(l0): point = 92
   Insn 49(l0): point = 94
   Insn 198(l0): point = 96
   Insn 47(l0): point = 98
   Insn 197(l0): point = 100
   Insn 46(l0): point = 102
   Insn 41(l0): point = 104
   Insn 45(l0): point = 106
   Insn 40(l0): point = 108
   Insn 38(l0): point = 111
   Insn 37(l0): point = 113
   Insn 35(l0): point = 115
   Insn 34(l0): point = 117
   Insn 33(l0): point = 119
   Insn 32(l0): point = 121
   Insn 23(l0): point = 124
   Insn 24(l0): point = 126
   Insn 22(l0): point = 128
   Insn 19(l0): point = 131
   Insn 18(l0): point = 133
   Insn 17(l0): point = 135
   Insn 14(l0): point = 138
   Insn 13(l0): point = 140
   Insn 11(l0): point = 142
   Insn 7(l0): point = 144
   Insn 6(l0): point = 146
   Insn 5(l0): point = 148
   Insn 4(l0): point = 150
   Insn 169(l3): point = 153
   Insn 164(l3): point = 155
   Insn 168(l3): point = 157
   Insn 183(l3): point = 159
   Insn 161(l3): point = 161
   Insn 163(l3): point = 164
   Insn 139(l2): point = 167
   Insn 138(l2): point = 169
   Insn 133(l2): point = 172
   Insn 188(l2): point = 174
   Insn 187(l2): point = 176
   Insn 125(l2): point = 179
   Insn 124(l2): point = 181
   Insn 121(l2): point = 184
   Insn 120(l2): point = 186
   Insn 116(l2): point = 189
   Insn 186(l2): point = 191
   Insn 114(l2): point = 193
   Insn 193(l2): point = 196
   Insn 107(l2): point = 199
   Insn 109(l2): point = 201
   Insn 106(l2): point = 203
   Insn 104(l2): point = 205
   Insn 100(l2): point = 207
   Insn 103(l2): point = 209
   Insn 101(l2): point = 211
   Insn 105(l2): point = 213
   Insn 184(l2): point = 215
   Insn 30(l1): point = 218
   Insn 27(l1): point = 220
   Insn 29(l1): point = 222
 a0(r137): [1..3]
 a1(r138): [1..5]
 a2(r136): [4..100]
 a3(r186): [6..7]
 a4(r184): [6..11]
 a5(r183): [8..9]
 a6(r154): [12..144]
 a7(r141): [92..94] [19..78]
 a8(r142): [27..27]
 a9(r176): [28..29]
 a10(r144): [27..35]
 a11(r174): [30..39]
 a12(r143): [27..31]
 a13(r140): [32..37]
 a14(r191): [27..33]
 a15(r171): [38..41]
 a16(r135): [63..65] [27..44]
 a17(r170): [45..46]
 a18(r169): [45..48]
 a19(r139): [68..72] [61..62]
 a20(r165): [73..74]
 a21(r164): [73..76]
 a22(r153): [90..146]
 a23(r149): [101..104]
 a24(r158): [105..108]
 a25(r152): [109..148]
 a26(r146): [120..126]
 a27(r151): [122..150]
 a28(r147): [124..124]
 a29(r157): [125..128]
 a30(r148): [141..142]
 a31(r137): [153..166]
 a32(r138): [153..166]
 a33(r135): [167..217]
 a34(r136): [167..217]
 a35(r141): [167..217]
 a36(r142): [196..217] [167..189]
 a37(r143): [167..217]
 a38(r144): [196..217] [167..191]
 a39(r154): [167..217]
 a40(r191): [167..217]
 a41(r145): [182..207]
 a42(r146): [218..224]
 a43(r147): [218..224]
 a44(r151): [218..224]
 a45(r152): [218..224]
 a46(r153): [218..224]
 a47(r154): [218..224]
 Rebuilding regno allocno list for 145
Compressing live ranges: from 225 to 69 - 30%
Ranges after the compression:
 a0(r137): [58..59] [0..1]
 a1(r138): [58..59] [0..3]
 a2(r136): [60..66] [2..40]
 a3(r186): [4..5]
 a4(r184): [4..8]
 a5(r183): [6..7]
 a6(r154): [60..68] [9..54]
 a7(r141): [60..66] [38..39] [10..36]
 a8(r142): [64..66] [60..62] [11..11]
 a9(r176): [12..13]
 a10(r144): [64..66] [60..63] [11..18]
 a11(r174): [14..21]
 a12(r143): [60..66] [11..15]
 a13(r140): [16..19]
 a14(r191): [60..66] [11..17]
 a15(r171): [20..22]
 a16(r135): [60..66] [29..30] [11..23]
 a17(r170): [24..25]
 a18(r169): [24..26]
 a19(r139): [31..32] [27..28]
 a20(r165): [33..34]
 a21(r164): [33..35]
 a22(r153): [67..68] [37..55]
 a23(r149): [41..42]
 a24(r158): [43..44]
 a25(r152): [67..68] [45..56]
 a26(r146): [67..68] [46..50]
 a27(r151): [67..68] [47..57]
 a28(r147): [67..68] [48..48]
 a29(r157): [49..51]
 a30(r148): [52..53]
 a41(r145): [61..65]
+++Allocating 256 bytes for conflict table (uncompressed size 384)
;; a0(r137,l0) conflicts: a1(r138,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r138,l0) conflicts: a0(r137,l0) a2(r136,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r136,l0) conflicts: a1(r138,l0) a3(r186,l0) a4(r184,l0) a5(r183,l0) a6(r154,l0) a7(r141,l0) a8(r142,l0) a10(r144,l0) a12(r143,l0) a14(r191,l0) a16(r135,l0) a9(r176,l0) a11(r174,l0) a13(r140,l0) a15(r171,l0) a17(r170,l0) a18(r169,l0) a19(r139,l0) a20(r165,l0) a21(r164,l0) a22(r153,l0) a41(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r186,l0) conflicts: a2(r136,l0) a4(r184,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r184,l0) conflicts: a2(r136,l0) a3(r186,l0) a5(r183,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r183,l0) conflicts: a2(r136,l0) a4(r184,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r154,l0) conflicts: a2(r136,l0) a7(r141,l0) a8(r142,l0) a10(r144,l0) a12(r143,l0) a14(r191,l0) a16(r135,l0) a9(r176,l0) a11(r174,l0) a13(r140,l0) a15(r171,l0) a17(r170,l0) a18(r169,l0) a19(r139,l0) a20(r165,l0) a21(r164,l0) a22(r153,l0) a23(r149,l0) a24(r158,l0) a25(r152,l0) a26(r146,l0) a27(r151,l0) a28(r147,l0) a29(r157,l0) a30(r148,l0) a41(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r141,l0) conflicts: a2(r136,l0) a6(r154,l0) a8(r142,l0) a10(r144,l0) a12(r143,l0) a14(r191,l0) a16(r135,l0) a9(r176,l0) a11(r174,l0) a13(r140,l0) a15(r171,l0) a17(r170,l0) a18(r169,l0) a19(r139,l0) a20(r165,l0) a21(r164,l0) a22(r153,l0) a41(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r142,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a10(r144,l0) a12(r143,l0) a14(r191,l0) a16(r135,l0) a41(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a9(r176,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a10(r144,l0) a12(r143,l0) a14(r191,l0) a16(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r144,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a8(r142,l0) a12(r143,l0) a14(r191,l0) a16(r135,l0) a9(r176,l0) a11(r174,l0) a13(r140,l0) a41(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a11(r174,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a10(r144,l0) a12(r143,l0) a14(r191,l0) a16(r135,l0) a13(r140,l0) a15(r171,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r143,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a8(r142,l0) a10(r144,l0) a14(r191,l0) a16(r135,l0) a9(r176,l0) a11(r174,l0) a41(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a13(r140,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a10(r144,l0) a14(r191,l0) a16(r135,l0) a11(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a14(r191,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a8(r142,l0) a10(r144,l0) a12(r143,l0) a16(r135,l0) a9(r176,l0) a11(r174,l0) a13(r140,l0) a41(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a15(r171,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a16(r135,l0) a11(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r135,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a8(r142,l0) a10(r144,l0) a12(r143,l0) a14(r191,l0) a9(r176,l0) a11(r174,l0) a13(r140,l0) a15(r171,l0) a41(r145,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a17(r170,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a18(r169,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r169,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a17(r170,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a19(r139,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a20(r165,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a21(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r164,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a20(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r153,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a23(r149,l0) a24(r158,l0) a25(r152,l0) a26(r146,l0) a27(r151,l0) a28(r147,l0) a29(r157,l0) a30(r148,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a23(r149,l0) conflicts: a6(r154,l0) a22(r153,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a24(r158,l0) conflicts: a6(r154,l0) a22(r153,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a25(r152,l0) conflicts: a6(r154,l0) a22(r153,l0) a26(r146,l0) a27(r151,l0) a28(r147,l0) a29(r157,l0) a30(r148,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a26(r146,l0) conflicts: a6(r154,l0) a22(r153,l0) a25(r152,l0) a27(r151,l0) a28(r147,l0) a29(r157,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a27(r151,l0) conflicts: a6(r154,l0) a22(r153,l0) a25(r152,l0) a26(r146,l0) a28(r147,l0) a29(r157,l0) a30(r148,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a28(r147,l0) conflicts: a6(r154,l0) a22(r153,l0) a25(r152,l0) a26(r146,l0) a27(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r157,l0) conflicts: a6(r154,l0) a22(r153,l0) a25(r152,l0) a26(r146,l0) a27(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r148,l0) conflicts: a6(r154,l0) a22(r153,l0) a25(r152,l0) a27(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r145,l0) conflicts: a2(r136,l0) a6(r154,l0) a7(r141,l0) a8(r142,l0) a10(r144,l0) a12(r143,l0) a14(r191,l0) a16(r135,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14

  cp0:a4(r184)<->a6(r154)@125:shuffle
  cp1:a1(r138)<->a3(r186)@125:shuffle
  cp2:a1(r138)<->a4(r184)@125:shuffle
  cp3:a0(r137)<->a2(r136)@125:shuffle
  cp4:a13(r140)<->a15(r171)@125:shuffle
  cp5:a12(r143)<->a13(r140)@125:shuffle
  cp6:a8(r142)<->a9(r176)@125:shuffle
  cp7:a16(r135)<->a18(r169)@125:shuffle
  cp8:a16(r135)<->a17(r170)@125:shuffle
  cp9:a19(r139)<->a21(r164)@125:shuffle
  cp10:a19(r139)<->a20(r165)@125:shuffle
  cp11:a24(r158)<->a25(r152)@125:shuffle
  cp12:a23(r149)<->a24(r158)@125:shuffle
  cp13:a2(r136)<->a23(r149)@125:shuffle
  cp14:a28(r147)<->a29(r157)@125:shuffle
  regions=4, blocks=25, points=69
    allocnos=48, copies=15, conflicts=1, ranges=52

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r137 1r138 2r136 3r186 4r184 5r183 6r154 7r141 8r142 9r176 10r144 11r174 12r143 13r140 14r191 15r171 16r135 17r170 18r169 19r139 20r165 21r164 22r153 23r149 24r158 25r152 26r146 27r151 28r147 29r157 30r148 41r145
    modified regnos: 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 151 152 153 154 157 158 164 165 169 170 171 174 176 183 184 186 191
    border:
    Pressure: GENERAL_REGS=13
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 186 of GENERAL_REGS has 1 regs less
    Reg 184 of GENERAL_REGS has 1 regs less
    Reg 183 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 4 regs less
    Reg 191 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 4 regs less
    Reg 153 of GENERAL_REGS has 5 regs less
    Reg 149 of GENERAL_REGS has 2 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 5 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 5 regs less
    Reg 145 of GENERAL_REGS has 4 regs less
      Pushing a30(r148,l0)
      Pushing a29(r157,l0)
      Pushing a21(r164,l0)
      Pushing a20(r165,l0)
      Pushing a18(r169,l0)
      Pushing a17(r170,l0)
      Pushing a15(r171,l0)
      Pushing a9(r176,l0)
      Pushing a19(r139,l0)
      Pushing a13(r140,l0)
      Pushing a11(r174,l0)
      Pushing a28(r147,l0)
      Pushing a24(r158,l0)
      Pushing a5(r183,l0)
      Pushing a4(r184,l0)
      Pushing a3(r186,l0)
      Pushing a26(r146,l0)
      Pushing a23(r149,l0)
      Pushing a0(r137,l0)
      Pushing a1(r138,l0)
      Pushing a27(r151,l0)
      Pushing a25(r152,l0)
      Pushing a22(r153,l0)
      Pushing a6(r154,l0)(potential spill: pri=1428, cost=20000)
      Pushing a14(r191,l0)(potential spill: pri=1666, cost=20000)
      Pushing a41(r145,l0)(potential spill: pri=2727, cost=30000)
      Pushing a16(r135,l0)
      Pushing a12(r143,l0)
      Pushing a10(r144,l0)
      Pushing a8(r142,l0)
      Pushing a2(r136,l0)
      Pushing a7(r141,l0)
      Popping a7(r141,l0)  -- assign reg 4
      Popping a2(r136,l0)  -- assign reg 5
      Popping a8(r142,l0)  -- assign reg 6
      Popping a10(r144,l0)  -- assign reg 7
      Popping a12(r143,l0)  -- assign reg 8
      Popping a16(r135,l0)  -- assign reg 10
      Popping a41(r145,l0)  -- assign reg 9
      Popping a14(r191,l0)  -- assign reg 11
      Popping a6(r154,l0)  -- (memory is more profitable 20000 vs 160000) spill
      Popping a22(r153,l0)  -- assign reg 6
      Popping a25(r152,l0)  -- assign reg 5
      Popping a27(r151,l0)  -- assign reg 4
      Popping a1(r138,l0)  -- assign reg 4
      Popping a0(r137,l0)  -- assign reg 5
      Popping a23(r149,l0)  -- assign reg 5
      Popping a26(r146,l0)  -- assign reg 1
      Popping a3(r186,l0)  -- assign reg 3
      Popping a4(r184,l0)  -- assign reg 4
      Popping a5(r183,l0)  -- assign reg 3
      Popping a24(r158,l0)  -- assign reg 5
      Popping a28(r147,l0)  -- assign reg 3
      Popping a11(r174,l0)  -- assign reg 3
      Popping a13(r140,l0)  -- assign reg 8
      Popping a19(r139,l0)  -- assign reg 2
      Popping a9(r176,l0)  -- assign reg 6
      Popping a15(r171,l0)  -- assign reg 8
      Popping a17(r170,l0)  -- assign reg 3
      Popping a18(r169,l0)  -- assign reg 10
      Popping a20(r165,l0)  -- assign reg 3
      Popping a21(r164,l0)  -- assign reg 2
      Popping a29(r157,l0)  -- assign reg 3
      Popping a30(r148,l0)  -- assign reg 3
Disposition:
   16:r135 l0    10    2:r136 l0     5    0:r137 l0     5    1:r138 l0     4
   19:r139 l0     2   13:r140 l0     8    7:r141 l0     4    8:r142 l0     6
   12:r143 l0     8   10:r144 l0     7   41:r145 l0     9   26:r146 l0     1
   28:r147 l0     3   30:r148 l0     3   23:r149 l0     5   27:r151 l0     4
   25:r152 l0     5   22:r153 l0     6    6:r154 l0   mem   29:r157 l0     3
   24:r158 l0     5   21:r164 l0     2   20:r165 l0     3   18:r169 l0    10
   17:r170 l0     3   15:r171 l0     8   11:r174 l0     3    9:r176 l0     6
    5:r183 l0     3    4:r184 l0     4    3:r186 l0     3   14:r191 l0    11
New iteration of spill/restore move
+++Costs: overall 12000, reg -8000, mem 20000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=4, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 151
insn=5, live_throughout: 2, 3, 13, 151, dead_or_set: 1, 152
insn=6, live_throughout: 3, 13, 151, 152, dead_or_set: 2, 153
insn=7, live_throughout: 13, 151, 152, 153, dead_or_set: 3, 154
insn=11, live_throughout: 13, 151, 152, 153, 154, dead_or_set: 148
insn=13, live_throughout: 13, 151, 152, 153, 154, dead_or_set: 148
insn=14, live_throughout: 13, 151, 152, 153, 154, dead_or_set: 
insn=17, live_throughout: 13, 151, 152, 153, 154, dead_or_set: 0
insn=18, live_throughout: 0, 13, 151, 152, 153, 154, dead_or_set: 1
insn=19, live_throughout: 13, 151, 152, 153, 154, dead_or_set: 0, 1, 14
insn=20, live_throughout: 13, 151, 152, 153, 154, dead_or_set: 
insn=22, live_throughout: 13, 151, 152, 153, 154, dead_or_set: 157
insn=24, live_throughout: 13, 151, 152, 153, 154, 157, dead_or_set: 146
insn=23, live_throughout: 13, 146, 151, 152, 153, 154, dead_or_set: 147, 157
insn=28, live_throughout: 13, 146, 147, 151, 152, 153, 154, dead_or_set: 
insn=29, live_throughout: 13, 146, 151, 152, 153, 154, dead_or_set: 147
insn=27, live_throughout: 13, 24, 147, 151, 152, 153, 154, dead_or_set: 146
insn=30, live_throughout: 13, 146, 147, 151, 152, 153, 154, dead_or_set: 
insn=32, live_throughout: 13, 146, 152, 153, 154, dead_or_set: 0, 151
insn=33, live_throughout: 0, 13, 152, 153, 154, dead_or_set: 1, 146
insn=34, live_throughout: 0, 1, 13, 152, 153, 154, dead_or_set: 2
insn=35, live_throughout: 13, 152, 153, 154, dead_or_set: 0, 1, 2, 14
insn=37, live_throughout: 13, 14, 152, 153, 154, dead_or_set: 0
insn=38, live_throughout: 13, 14, 152, 153, 154, dead_or_set: 
insn=40, live_throughout: 13, 153, 154, dead_or_set: 152, 158
insn=45, live_throughout: 13, 153, 154, 158, dead_or_set: 0
insn=41, live_throughout: 0, 13, 153, 154, dead_or_set: 149, 158
insn=46, live_throughout: 0, 13, 149, 153, 154, dead_or_set: 1
insn=197, live_throughout: 0, 1, 13, 153, 154, dead_or_set: 136, 149
insn=47, live_throughout: 13, 136, 153, 154, dead_or_set: 0, 1, 14
insn=198, live_throughout: 0, 13, 153, 154, dead_or_set: 136
insn=49, live_throughout: 13, 136, 153, 154, dead_or_set: 0, 141
insn=50, live_throughout: 13, 136, 141, 153, 154, dead_or_set: 
insn=57, live_throughout: 13, 136, 154, dead_or_set: 2, 153
insn=56, live_throughout: 2, 13, 136, 154, dead_or_set: 1
insn=55, live_throughout: 1, 2, 13, 136, 154, dead_or_set: 0
insn=58, live_throughout: 13, 136, 154, dead_or_set: 0, 1, 2, 14
insn=59, live_throughout: 13, 136, 154, dead_or_set: 14
insn=189, live_throughout: 13, 14, 136, 154, dead_or_set: 
insn=62, live_throughout: 13, 136, 141, 154, dead_or_set: 
insn=64, live_throughout: 13, 136, 141, 154, dead_or_set: 164
insn=65, live_throughout: 13, 136, 141, 154, 164, dead_or_set: 165
insn=66, live_throughout: 13, 136, 141, 154, dead_or_set: 139, 164, 165
insn=67, live_throughout: 13, 136, 139, 141, 154, dead_or_set: 
insn=68, live_throughout: 13, 136, 139, 141, 154, dead_or_set: 
insn=70, live_throughout: 13, 136, 141, 154, dead_or_set: 135
insn=191, live_throughout: 13, 135, 136, 141, 154, dead_or_set: 
insn=73, live_throughout: 13, 136, 139, 141, 154, dead_or_set: 
insn=80, live_throughout: 13, 136, 141, 154, dead_or_set: 2, 139
insn=79, live_throughout: 2, 13, 136, 141, 154, dead_or_set: 1
insn=81, live_throughout: 1, 2, 13, 136, 141, 154, dead_or_set: 3
insn=78, live_throughout: 1, 2, 3, 13, 136, 141, 154, dead_or_set: 0
insn=82, live_throughout: 13, 136, 141, 154, dead_or_set: 0, 1, 2, 3, 14
insn=83, live_throughout: 13, 136, 141, 154, dead_or_set: 14
insn=84, live_throughout: 13, 136, 141, 154, dead_or_set: 169
insn=85, live_throughout: 13, 136, 141, 154, 169, dead_or_set: 170
insn=86, live_throughout: 13, 136, 141, 154, dead_or_set: 135, 169, 170
insn=87, live_throughout: 13, 135, 136, 141, 154, dead_or_set: 
insn=89, live_throughout: 13, 135, 136, 141, 154, dead_or_set: 171
insn=95, live_throughout: 13, 135, 136, 141, 154, 171, dead_or_set: 174
insn=90, live_throughout: 13, 135, 136, 141, 154, 174, dead_or_set: 140, 171
insn=94, live_throughout: 13, 135, 136, 140, 141, 154, 174, dead_or_set: 144
insn=115, live_throughout: 13, 135, 136, 140, 141, 144, 154, 174, dead_or_set: 191
insn=91, live_throughout: 13, 135, 136, 141, 144, 154, 174, 191, dead_or_set: 140, 143
insn=97, live_throughout: 13, 135, 136, 141, 143, 144, 154, 191, dead_or_set: 174, 176
insn=98, live_throughout: 13, 135, 136, 141, 143, 144, 154, 191, dead_or_set: 142, 176
insn=137, live_throughout: 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 
insn=184, live_throughout: 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 1
insn=105, live_throughout: 1, 13, 135, 136, 141, 142, 143, 154, 191, dead_or_set: 144
insn=101, live_throughout: 1, 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 0
insn=103, live_throughout: 0, 1, 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 2
insn=100, live_throughout: 0, 1, 2, 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 145
insn=104, live_throughout: 13, 135, 136, 141, 142, 143, 144, 145, 154, 191, dead_or_set: 0, 1, 2, 14
insn=106, live_throughout: 13, 135, 136, 141, 142, 143, 144, 145, 154, 191, dead_or_set: 
insn=109, live_throughout: 13, 24, 135, 136, 141, 143, 144, 145, 154, 191, dead_or_set: 142
insn=107, live_throughout: 13, 135, 136, 141, 142, 143, 144, 145, 154, 191, dead_or_set: 
insn=193, live_throughout: 13, 135, 136, 141, 142, 143, 144, 145, 154, 191, dead_or_set: 
insn=112, live_throughout: 13, 135, 136, 141, 143, 145, 154, 191, dead_or_set: 
insn=114, live_throughout: 13, 135, 136, 141, 145, 154, 191, dead_or_set: 143
insn=186, live_throughout: 13, 135, 136, 141, 143, 145, 154, 191, dead_or_set: 144
insn=116, live_throughout: 13, 135, 136, 141, 143, 144, 145, 154, 191, dead_or_set: 142
insn=118, live_throughout: 13, 135, 136, 141, 142, 143, 144, 145, 154, 191, dead_or_set: 
insn=120, live_throughout: 13, 135, 136, 141, 142, 143, 144, 145, 154, 191, dead_or_set: 
insn=121, live_throughout: 13, 135, 136, 141, 142, 143, 144, 145, 154, 191, dead_or_set: 
insn=124, live_throughout: 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 145
insn=125, live_throughout: 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 
insn=126, live_throughout: 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 
insn=187, live_throughout: 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 0
insn=188, live_throughout: 0, 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 1
insn=133, live_throughout: 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 0, 1, 14
insn=134, live_throughout: 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 
insn=138, live_throughout: 13, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 135
insn=139, live_throughout: 13, 135, 136, 141, 142, 143, 144, 154, 191, dead_or_set: 
insn=141, live_throughout: 13, 136, 141, 154, dead_or_set: 0
insn=142, live_throughout: 0, 13, 136, 141, 154, dead_or_set: 1
insn=143, live_throughout: 13, 136, 141, 154, dead_or_set: 0, 1, 14
insn=146, live_throughout: 13, 136, 154, dead_or_set: 1, 141
insn=145, live_throughout: 1, 13, 136, 154, dead_or_set: 0
insn=147, live_throughout: 13, 136, 154, dead_or_set: 0, 1, 14
insn=148, live_throughout: 13, 14, 136, 154, dead_or_set: 
insn=151, live_throughout: 13, 14, 136, dead_or_set: 154, 184
insn=200, live_throughout: 13, 14, 136, 184, dead_or_set: 183
insn=153, live_throughout: 13, 14, 136, 184, dead_or_set: 183, 186
insn=154, live_throughout: 13, 14, 136, dead_or_set: 138, 184, 186
insn=157, live_throughout: 13, 14, 138, dead_or_set: 136, 137
insn=195, live_throughout: 13, 14, 137, 138, dead_or_set: 
insn=167, live_throughout: 0, 1, 13, 137, 138, dead_or_set: 
insn=163, live_throughout: 13, 137, 138, dead_or_set: 0, 1, 14
insn=165, live_throughout: 13, 14, 137, 138, dead_or_set: 
insn=161, live_throughout: 13, 14, 137, 138, dead_or_set: 0
insn=183, live_throughout: 0, 13, 14, 137, 138, dead_or_set: 1
insn=168, live_throughout: 0, 1, 13, 14, 137, 138, dead_or_set: 
insn=164, live_throughout: 0, 1, 13, 14, 24, 137, dead_or_set: 138
insn=169, live_throughout: 0, 1, 13, 14, 137, 138, dead_or_set: 
insn=175, live_throughout: 13, 14, dead_or_set: 
init_insns for 164: (insn_list:REG_DEP_TRUE 64 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 65 (nil))
init_insns for 169: (insn_list:REG_DEP_TRUE 84 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 85 (nil))
init_insns for 171: (insn_list:REG_DEP_TRUE 89 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 95 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 200 (nil))
init_insns for 191: (insn_list:REG_DEP_TRUE 115 (nil))
      Slot 1 (freq,size): a6r154(2000,4)
      Assigning 154(freq=2000) a new slot 0
changing reg in insn 138
changing reg in insn 86
changing reg in insn 70
changing reg in insn 138
changing reg in insn 138
changing reg in insn 198
changing reg in insn 197
changing reg in insn 198
changing reg in insn 157
changing reg in insn 81
changing reg in insn 70
changing reg in insn 67
changing reg in insn 157
changing reg in insn 168
changing reg in insn 154
changing reg in insn 164
changing reg in insn 157
changing reg in insn 168
changing reg in insn 164
changing reg in insn 161
changing reg in insn 66
changing reg in insn 80
changing reg in insn 67
changing reg in insn 90
changing reg in insn 94
changing reg in insn 91
changing reg in insn 49
changing reg in insn 146
changing reg in insn 142
changing reg in insn 141
changing reg in insn 89
changing reg in insn 85
changing reg in insn 84
changing reg in insn 65
changing reg in insn 64
changing reg in insn 89
changing reg in insn 85
changing reg in insn 84
changing reg in insn 65
changing reg in insn 64
changing reg in insn 98
changing reg in insn 116
changing reg in insn 109
changing reg in insn 109
changing reg in insn 101
changing reg in insn 100
changing reg in insn 114
changing reg in insn 91
changing reg in insn 116
changing reg in insn 114
changing reg in insn 97
changing reg in insn 116
changing reg in insn 97
changing reg in insn 94
changing reg in insn 186
changing reg in insn 105
changing reg in insn 98
changing reg in insn 106
changing reg in insn 105
changing reg in insn 100
changing reg in insn 124
changing reg in insn 120
changing reg in insn 27
changing reg in insn 24
changing reg in insn 33
changing reg in insn 27
changing reg in insn 29
changing reg in insn 23
changing reg in insn 29
changing reg in insn 29
changing reg in insn 11
changing reg in insn 13
changing reg in insn 41
changing reg in insn 197
changing reg in insn 4
changing reg in insn 32
changing reg in insn 5
changing reg in insn 40
changing reg in insn 22
changing reg in insn 41
changing reg in insn 6
changing reg in insn 57
changing reg in insn 46
changing reg in insn 34
changing reg in insn 22
changing reg in insn 23
changing reg in insn 40
changing reg in insn 41
changing reg in insn 64
changing reg in insn 66
changing reg in insn 65
changing reg in insn 66
changing reg in insn 84
changing reg in insn 86
changing reg in insn 85
changing reg in insn 86
changing reg in insn 89
changing reg in insn 90
changing reg in insn 95
changing reg in insn 115
changing reg in insn 97
changing reg in insn 97
changing reg in insn 98
changing reg in insn 200
changing reg in insn 153
changing reg in insn 151
changing reg in insn 154
changing reg in insn 153
changing reg in insn 154
changing reg in insn 115
changing reg in insn 116
Spilling for insn 7.
Spilling for insn 151.
Using reg 3 for reload 0

Reloads for insn # 7
Reload 0: reload_out (SI) = (reg/v:SI 154 [ handle ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v:SI 154 [ handle ])

Reloads for insn # 151
Reload 0: reload_in (SI) = (reg/v:SI 154 [ handle ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/v:SI 154 [ handle ])
	reload_reg_rtx: (reg:SI 3 r3)
deleting insn with uid = 33.
deleting insn with uid = 80.


try_optimize_cfg iteration 1

Simplifying condjump 107 around jump 193
deleting insn with uid = 108.
deleting insn with uid = 193.
deleting insn with uid = 194.
deleting block 14
deleting insn with uid = 112.
Deleted label in block 15.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 35.
verify found no changes in insn with uid = 47.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 59.
verify found no changes in insn with uid = 82.
verify found no changes in insn with uid = 83.
verify found no changes in insn with uid = 104.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 143.
verify found no changes in insn with uid = 147.
verify found no changes in insn with uid = 163.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 33 count 50 (  2.1)
df_worklist_dataflow_doublequeue:n_basic_blocks 24 n_edges 33 count 47 (    2)


dma_free_coherent

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={23d,14u} r1={24d,13u} r2={18d,7u} r3={24d,13u} r4={5d,14u,5d} r5={6d,10u,1d} r6={5d,7u} r7={3d,3u} r8={4d,6u,2d} r9={1d,2u} r10={4d,3u} r11={1d,1u} r12={13d} r13={1d,37u} r14={13d,1u} r15={12d} r16={12d} r17={12d} r18={12d} r19={12d} r20={12d} r21={12d} r22={12d} r23={12d} r24={23d,10u} r27={12d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={12d} r38={12d} r39={12d} r40={12d} r41={12d} r42={12d} r43={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} r81={12d} r82={12d} r83={12d} r84={12d} r85={12d} r86={12d} r87={12d} r88={12d} r89={12d} r90={12d} r91={12d} r92={12d} r93={12d} r94={12d} r95={12d} r96={12d} r97={12d} r98={12d} r99={12d} r100={12d} r101={12d} r102={12d} r103={12d} r104={12d} r105={12d} r106={12d} r107={12d} r108={12d} r109={12d} r110={12d} r111={12d} r112={12d} r113={12d} r114={12d} r115={12d} r116={12d} r117={12d} r118={12d} r119={12d} r120={12d} r121={12d} r122={12d} r123={12d} r124={12d} r125={12d} r126={12d} r127={12d} 
;;    total ref usage 1637{1488d,141u,8e} in 99{87 regular + 12 call} insns.
(note 3 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 3 8 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 8 9 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 8 4 2 NOTE_INSN_DELETED)

(insn 4 12 5 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
        (reg:SI 0 r0 [ dev ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 6 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v:SI 5 r5 [orig:152 size ] [152])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 6 5 7 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
        (reg:SI 2 r2 [ cpu_addr ])) 167 {*arm_movsi_insn} (nil))

(insn 7 6 11 2 arch/arm/mm/dma-mapping.c:419 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])
        (reg:SI 3 r3 [ handle ])) 167 {*arm_movsi_insn} (nil))

(insn 11 7 13 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:131 (parallel [
            (set (reg/v:SI 3 r3 [orig:148 _flags ] [148])
                (asm_operands/v:SI ("	mrs	%0, cpsr	@ local_save_flags") ("=r") 0 []
                     [] 1118080))
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 13 11 14 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:148 _flags ] [148])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 14 13 15 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 15 14 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 15 18 3 arch/arm/mm/dma-mapping.c:420 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 18 17 19 3 arch/arm/mm/dma-mapping.c:420 discrim 1 (set (reg:SI 1 r1)
        (const_int 420 [0x1a4])) 167 {*arm_movsi_insn} (nil))

(call_insn 19 18 20 3 arch/arm/mm/dma-mapping.c:420 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a67280 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 20 19 21 4 124 "" [1 uses])

(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 24 4 include/asm-generic/getorder.h:13 (set (reg:SI 3 r3 [157])
        (plus:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 24 22 23 4 include/asm-generic/getorder.h:14 (set (reg/v:SI 1 r1 [orig:146 order ] [146])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 23 24 28 4 include/asm-generic/getorder.h:13 (set (reg/v:SI 3 r3 [orig:147 size ] [147])
        (lshiftrt:SI (reg:SI 3 r3 [157])
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  5 [86.0%]  (dfs_back)
(code_label 28 23 25 5 125 "" [1 uses])

(note 25 28 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 26 25 29 5 NOTE_INSN_DELETED)

(insn 29 26 27 5 include/asm-generic/getorder.h:18 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 size ] [147])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:147 size ] [147])
                (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 size ] [147])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn 27 29 30 5 include/asm-generic/getorder.h:17 (set (reg/v:SI 1 r1 [orig:146 order ] [146])
        (plus:SI (reg/v:SI 1 r1 [orig:146 order ] [146])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 30 27 31 5 include/asm-generic/getorder.h:18 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 28)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 5 -> ( 5 6)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  5 [86.0%]  (dfs_back)
;; Succ edge  6 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [14.0%]  (fallthru,loop_exit)
(note 31 30 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 36 31 32 6 NOTE_INSN_DELETED)

(insn 32 36 34 6 arch/arm/mm/dma-mapping.c:422 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:151 dev ] [151])) 167 {*arm_movsi_insn} (nil))

(insn 34 32 35 6 arch/arm/mm/dma-mapping.c:422 (set (reg:SI 2 r2)
        (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])) 167 {*arm_movsi_insn} (nil))

(call_insn 35 34 37 6 arch/arm/mm/dma-mapping.c:422 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_release_from_coherent") [flags 0x41] <function_decl 0x11060400 dma_release_from_coherent>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 37 35 38 6 arch/arm/mm/dma-mapping.c:422 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 38 37 39 6 arch/arm/mm/dma-mapping.c:422 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 175)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 6 -> ( 24 7)
;; lr  out 	 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  24 [61.0%] 
;; Succ edge  7 [39.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [39.0%]  (fallthru)
(note 39 38 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 42 39 48 7 NOTE_INSN_DELETED)

(note 48 42 40 7 NOTE_INSN_DELETED)

(insn 40 48 45 7 arch/arm/mm/dma-mapping.c:425 (set (reg:SI 5 r5 [158])
        (plus:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 45 40 41 7 arch/arm/mm/dma-mapping.c:259 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 41 45 46 7 arch/arm/mm/dma-mapping.c:425 (set (reg:SI 5 r5 [orig:149 D.24661 ] [149])
        (plus:SI (reg:SI 5 r5 [158])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 46 41 197 7 arch/arm/mm/dma-mapping.c:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])) 167 {*arm_movsi_insn} (nil))

(insn 197 46 47 7 arch/arm/mm/dma-mapping.c:425 (set (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
        (and:SI (reg:SI 5 r5 [orig:149 D.24661 ] [149])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(call_insn 47 197 198 7 arch/arm/mm/dma-mapping.c:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arm_vmregion_find_remove") [flags 0x41] <function_decl 0x11440d00 arm_vmregion_find_remove>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 198 47 49 7 arch/arm/mm/dma-mapping.c:425 (set (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
        (and:SI (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 49 198 50 7 arch/arm/mm/dma-mapping.c:260 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 50 49 51 7 arch/arm/mm/dma-mapping.c:260 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  7 [0.0%]  (fallthru)
(note 51 50 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 57 51 56 8 arch/arm/mm/dma-mapping.c:261 (set (reg:SI 2 r2)
        (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])) 167 {*arm_movsi_insn} (nil))

(insn 56 57 55 8 arch/arm/mm/dma-mapping.c:261 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 55 56 58 8 arch/arm/mm/dma-mapping.c:261 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114ecc80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114ecc80>)
        (nil)))

(call_insn 58 55 59 8 arch/arm/mm/dma-mapping.c:261 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(call_insn 59 58 189 8 arch/arm/mm/dma-mapping.c:263 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 189 59 190 8 (set (pc)
        (label_ref 148)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 21)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 190 189 62)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%] 
(code_label 62 190 63 9 127 "" [1 uses])

(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 64 63 65 9 arch/arm/mm/dma-mapping.c:267 (set (reg:SI 2 r2 [orig:164 <variable>.vm_end ] [164])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])
        (nil)))

(insn 65 64 66 9 arch/arm/mm/dma-mapping.c:267 (set (reg:SI 3 r3 [orig:165 <variable>.vm_start ] [165])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn 66 65 67 9 arch/arm/mm/dma-mapping.c:267 (set (reg:SI 2 r2 [orig:139 D.25252 ] [139])
        (minus:SI (reg:SI 2 r2 [orig:164 <variable>.vm_end ] [164])
            (reg:SI 3 r3 [orig:165 <variable>.vm_start ] [165]))) 28 {*arm_subsi3_insn} (nil))

(insn 67 66 68 9 arch/arm/mm/dma-mapping.c:267 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:139 D.25252 ] [139])
            (reg/v:SI 5 r5 [orig:136 size.823 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 68 67 69 9 arch/arm/mm/dma-mapping.c:267 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  11 [0.0%] 
;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 10 [sl]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 191 10 arch/arm/mm/dma-mapping.c:267 (set (reg/v:SI 10 sl [orig:135 size.827 ] [135])
        (reg/v:SI 5 r5 [orig:136 size.823 ] [136])) 167 {*arm_movsi_insn} (nil))

(jump_insn 191 70 192 10 (set (pc)
        (label_ref 87)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%] 

(barrier 192 191 73)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%] 
(code_label 73 192 74 11 129 "" [1 uses])

(note 74 73 79 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 79 74 81 11 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 81 79 78 11 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 3 r3)
        (reg/v:SI 5 r5 [orig:136 size.823 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 78 81 82 11 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114ecd20>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114ecd20>)
        (nil)))

(call_insn 82 78 83 11 arch/arm/mm/dma-mapping.c:268 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(call_insn 83 82 84 11 arch/arm/mm/dma-mapping.c:270 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 84 83 85 11 arch/arm/mm/dma-mapping.c:271 (set (reg:SI 10 sl [orig:169 <variable>.vm_end ] [169])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])
        (nil)))

(insn 85 84 86 11 arch/arm/mm/dma-mapping.c:271 (set (reg:SI 3 r3 [orig:170 <variable>.vm_start ] [170])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn 86 85 87 11 arch/arm/mm/dma-mapping.c:271 (set (reg/v:SI 10 sl [orig:135 size.827 ] [135])
        (minus:SI (reg:SI 10 sl [orig:169 <variable>.vm_end ] [169])
            (reg:SI 3 r3 [orig:170 <variable>.vm_start ] [170]))) 28 {*arm_subsi3_insn} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 11 [fp]
;; live  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 11 [fp]
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 87 86 88 12 130 "" [1 uses])

(note 88 87 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 92 88 93 12 NOTE_INSN_DELETED)

(note 93 92 96 12 NOTE_INSN_DELETED)

(note 96 93 89 12 NOTE_INSN_DELETED)

(insn 89 96 95 12 arch/arm/mm/dma-mapping.c:274 (set (reg:SI 8 r8 [orig:171 <variable>.vm_start ] [171])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn 95 89 90 12 arch/arm/mm/dma-mapping.c:276 (set (reg/f:SI 3 r3 [174])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 90 95 94 12 arch/arm/mm/dma-mapping.c:274 (set (reg:SI 8 r8 [orig:140 D.25251 ] [140])
        (plus:SI (reg:SI 8 r8 [orig:171 <variable>.vm_start ] [171])
            (const_int 16777216 [0x1000000]))) 4 {*arm_addsi3} (nil))

(insn 94 90 115 12 arch/arm/mm/dma-mapping.c:275 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (zero_extract:SI (reg:SI 8 r8 [orig:140 D.25251 ] [140])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (nil))

(insn 115 94 91 12 arch/arm/mm/dma-mapping.c:286 (set (reg/f:SI 11 fp [191])
        (reg/f:SI 3 r3 [174])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 91 115 97 12 arch/arm/mm/dma-mapping.c:274 (set (reg/v:SI 8 r8 [orig:143 idx ] [143])
        (lshiftrt:SI (reg:SI 8 r8 [orig:140 D.25251 ] [140])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn 97 91 98 12 arch/arm/mm/dma-mapping.c:276 (set (reg/f:SI 6 r6 [176])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [174])) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
        (nil)))

(insn 98 97 137 12 arch/arm/mm/dma-mapping.c:276 (set (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
        (plus:SI (mult:SI (reg/v:SI 7 r7 [orig:144 off ] [144])
                (const_int 4 [0x4]))
            (reg/f:SI 6 r6 [176]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 19) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 6 [r6] 7 [r7] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  19 [86.0%]  (dfs_back)
(code_label 137 98 99 13 135 "" [1 uses])

(note 99 137 184 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 184 99 105 13 include/asm-generic/pgtable.h:77 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 105 184 101 13 arch/arm/mm/dma-mapping.c:283 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (plus:SI (reg/v:SI 7 r7 [orig:144 off ] [144])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 101 105 103 13 include/asm-generic/pgtable.h:77 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 103 101 100 13 include/asm-generic/pgtable.h:77 (set (reg:SI 2 r2)
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 100 103 104 13 include/asm-generic/pgtable.h:76 (set (reg/v:SI 9 r9 [orig:145 pte ] [145])
        (mem:SI (reg/v/f:SI 6 r6 [orig:142 ptep ] [142]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 104 100 106 13 include/asm-generic/pgtable.h:77 (parallel [
            (call (mem:SI (symbol_ref:SI ("cpu_v7_set_pte_ext") [flags 0x41] <function_decl 0x10e63d00 cpu_v7_set_pte_ext>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 106 104 109 13 arch/arm/mm/dma-mapping.c:284 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:144 off ] [144])
            (const_int 512 [0x200]))) 219 {*arm_cmpsi_insn} (nil))

(insn 109 106 107 13 arch/arm/mm/dma-mapping.c:281 (set (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
        (plus:SI (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 107 109 113 13 arch/arm/mm/dma-mapping.c:284 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 118)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 13 -> ( 15 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 8 [r8] 11 [fp] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7] 8 [r8]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6] 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  13 [50.0%]  (fallthru)
(note 113 107 114 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 114 113 186 15 arch/arm/mm/dma-mapping.c:286 (set (reg/v:SI 8 r8 [orig:143 idx ] [143])
        (plus:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 186 114 116 15 arch/arm/mm/dma-mapping.c:285 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 116 186 118 15 arch/arm/mm/dma-mapping.c:286 (set (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 11 fp [191])) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15 13) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  13 [50.0%] 
(code_label 118 116 119 16 132 "" [1 uses])

(note 119 118 120 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 120 119 121 16 arch/arm/mm/dma-mapping.c:289 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 9 r9 [orig:145 pte ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 121 120 122 16 arch/arm/mm/dma-mapping.c:289 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 126)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 16 -> ( 18 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  18 [0.0%] 
;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
(note 122 121 123 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 123 122 124 17 NOTE_INSN_DELETED)

(insn 124 123 125 17 arch/arm/mm/dma-mapping.c:289 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 9 r9 [orig:145 pte ] [145])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 125 124 126 17 arch/arm/mm/dma-mapping.c:289 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 134)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  18 [0.0%]  (fallthru)
;; Succ edge  19 [100.0%] 

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  16 [0.0%] 
;; Pred edge  17 [0.0%]  (fallthru)
(code_label 126 125 127 18 133 "" [1 uses])

(note 127 126 187 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 187 127 188 18 arch/arm/mm/dma-mapping.c:290 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114f1ac0>)) 167 {*arm_movsi_insn} (nil))

(insn 188 187 133 18 arch/arm/mm/dma-mapping.c:290 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (nil))

(call_insn 133 188 134 18 arch/arm/mm/dma-mapping.c:290 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 18 -> ( 19)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 17 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  17 [100.0%] 
;; Pred edge  18 [100.0%]  (fallthru)
(code_label 134 133 135 19 134 "" [1 uses])

(note 135 134 136 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 136 135 138 19 NOTE_INSN_DELETED)

(insn 138 136 139 19 arch/arm/mm/dma-mapping.c:292 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (reg/v:SI 10 sl [orig:135 size.827 ] [135])
                        (const_int -4096 [0xfffffffffffff000]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 10 sl [orig:135 size.827 ] [135])
                (plus:SI (reg/v:SI 10 sl [orig:135 size.827 ] [135])
                    (const_int -4096 [0xfffffffffffff000])))
        ]) 6 {*addsi3_compare0} (nil))

(jump_insn 139 138 140 19 arch/arm/mm/dma-mapping.c:292 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 137)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 19 -> ( 13 20)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [86.0%]  (dfs_back)
;; Succ edge  20 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  19 [14.0%]  (fallthru,loop_exit)
(note 140 139 141 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 141 140 142 20 arch/arm/mm/dma-mapping.c:294 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 142 141 143 20 arch/arm/mm/dma-mapping.c:294 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 143 142 146 20 arch/arm/mm/dma-mapping.c:294 (parallel [
            (call (mem:SI (symbol_ref:SI ("flush_tlb_kernel_range") [flags 0x41] <function_decl 0x11440480 flush_tlb_kernel_range>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 146 143 145 20 arch/arm/mm/dma-mapping.c:296 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:141 c ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 145 146 147 20 arch/arm/mm/dma-mapping.c:296 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(call_insn 147 145 148 20 arch/arm/mm/dma-mapping.c:296 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_vmregion_free") [flags 0x41] <function_decl 0x11440d80 arm_vmregion_free>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 20 -> ( 21)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 20 8) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 148 147 149 21 128 "" [1 uses])

(note 149 148 152 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 152 149 155 21 NOTE_INSN_DELETED)

(note 155 152 156 21 NOTE_INSN_DELETED)

(note 156 155 202 21 NOTE_INSN_DELETED)

(insn 202 156 151 21 arch/arm/mm/dma-mapping.c:430 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 151 202 200 21 arch/arm/mm/dma-mapping.c:430 (set (reg:SI 4 r4 [184])
        (lshiftrt:SI (reg:SI 3 r3)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 200 151 153 21 arch/arm/mm/dma-mapping.c:430 (set (reg/f:SI 3 r3 [183])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn 153 200 154 21 arch/arm/mm/dma-mapping.c:430 (set (reg/f:SI 3 r3 [orig:186 mem_map ] [186])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [183]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 154 153 157 21 arch/arm/mm/dma-mapping.c:430 (set (reg/v/f:SI 4 r4 [orig:138 page ] [138])
        (plus:SI (mult:SI (reg:SI 4 r4 [184])
                (const_int 32 [0x20]))
            (reg/f:SI 3 r3 [orig:186 mem_map ] [186]))) 270 {*arith_shiftsi} (nil))

(insn 157 154 195 21 arch/arm/mm/dma-mapping.c:111 (set (reg/v/f:SI 5 r5 [orig:137 e ] [137])
        (plus:SI (lshiftrt:SI (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
                (const_int 7 [0x7]))
            (reg/v/f:SI 4 r4 [orig:138 page ] [138]))) 270 {*arith_shiftsi} (nil))

(jump_insn 195 157 196 21 (set (pc)
        (label_ref 165)) 242 {*arm_jump} (nil))
;; End of basic block 21 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  23 [100.0%] 

(barrier 196 195 167)

;; Start of basic block ( 23) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  23 [91.0%] 
(code_label 167 196 160 22 137 "" [1 uses])

(note 160 167 163 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(call_insn 163 160 165 22 arch/arm/mm/dma-mapping.c:114 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10cd6800 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 22 -> ( 23)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  23 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 22 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  22 [100.0%]  (fallthru,dfs_back)
;; Pred edge  21 [100.0%] 
(code_label 165 163 166 23 136 "" [1 uses])

(note 166 165 161 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 161 166 183 23 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:138 page ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 183 161 168 23 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 168 183 164 23 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:138 page ] [138])
            (reg/v/f:SI 5 r5 [orig:137 e ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(insn 164 168 169 23 arch/arm/mm/dma-mapping.c:115 (set (reg/v/f:SI 4 r4 [orig:138 page ] [138])
        (plus:SI (reg/v/f:SI 4 r4 [orig:138 page ] [138])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(jump_insn 169 164 175 23 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 23 -> ( 22 24)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  22 [91.0%] 
;; Succ edge  24 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 23 6) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  23 [9.0%]  (fallthru,loop_exit)
;; Pred edge  6 [61.0%] 
(code_label 175 169 178 24 138 "" [1 uses])

(note 178 175 199 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 24 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 199 178 201 NOTE_INSN_DELETED)

(note 201 199 0 NOTE_INSN_DELETED)


;; Function dma_mmap (dma_mmap)[0:1280]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 69.
verify found no changes in insn with uid = 69.
deleting insn with uid = 34.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 10 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 12 (  1.7)

Pass 0 for finding allocno costs

    a2 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a7(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a9(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r160: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a7(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a9(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 64(l0): point = 0
   Insn 58(l0): point = 2
   Insn 47(l0): point = 5
   Insn 45(l0): point = 7
   Insn 44(l0): point = 9
   Insn 42(l0): point = 11
   Insn 37(l0): point = 13
   Insn 36(l0): point = 15
   Insn 69(l0): point = 17
   Insn 41(l0): point = 19
   Insn 46(l0): point = 21
   Insn 35(l0): point = 23
   Insn 43(l0): point = 25
   Insn 32(l0): point = 28
   Insn 31(l0): point = 30
   Insn 29(l0): point = 32
   Insn 30(l0): point = 34
   Insn 28(l0): point = 36
   Insn 26(l0): point = 39
   Insn 25(l0): point = 41
   Insn 24(l0): point = 43
   Insn 23(l0): point = 45
   Insn 20(l0): point = 47
   Insn 22(l0): point = 49
   Insn 21(l0): point = 51
   Insn 18(l0): point = 54
   Insn 17(l0): point = 56
   Insn 15(l0): point = 58
   Insn 11(l0): point = 60
   Insn 10(l0): point = 62
   Insn 13(l0): point = 64
   Insn 14(l0): point = 66
   Insn 3(l0): point = 68
 a0(r133): [8..47]
 a1(r153): [8..13]
 a2(r160): [12..19]
 a3(r155): [14..15]
 a4(r154): [14..23]
 a5(r152): [16..17]
 a6(r142): [20..68]
 a7(r136): [22..32]
 a8(r134): [24..56]
 a9(r151): [31..34]
 a10(r150): [33..36]
 a11(r135): [35..43]
 a12(r138): [37..60]
 a13(r139): [37..62]
 a14(r147): [44..45]
 a15(r149): [46..49]
 a16(r148): [46..51]
Compressing live ranges: from 71 to 30 - 42%
Ranges after the compression:
 a0(r133): [0..23]
 a1(r153): [0..2]
 a2(r160): [1..7]
 a3(r155): [3..4]
 a4(r154): [3..10]
 a5(r152): [5..6]
 a6(r142): [8..29]
 a7(r136): [9..13]
 a8(r134): [11..26]
 a9(r151): [12..15]
 a10(r150): [14..17]
 a11(r135): [16..19]
 a12(r138): [18..27]
 a13(r139): [18..28]
 a14(r147): [20..21]
 a15(r149): [22..24]
 a16(r148): [22..25]
+++Allocating 136 bytes for conflict table (uncompressed size 136)
;; a0(r133,l0) conflicts: a1(r153,l0) a2(r160,l0) a3(r155,l0) a4(r154,l0) a5(r152,l0) a6(r142,l0) a7(r136,l0) a8(r134,l0) a9(r151,l0) a10(r150,l0) a11(r135,l0) a12(r138,l0) a13(r139,l0) a14(r147,l0) a15(r149,l0) a16(r148,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a1(r153,l0) conflicts: a0(r133,l0) a2(r160,l0)
;;     total conflict hard regs: 0 1 3 14
;;     conflict hard regs: 0 1 3 14
;; a2(r160,l0) conflicts: a1(r153,l0) a0(r133,l0) a3(r155,l0) a4(r154,l0) a5(r152,l0)
;;     total conflict hard regs: 0 3 14
;;     conflict hard regs: 0 3 14
;; a3(r155,l0) conflicts: a0(r133,l0) a2(r160,l0) a4(r154,l0)
;;     total conflict hard regs: 0 3 14
;;     conflict hard regs: 0 3 14
;; a4(r154,l0) conflicts: a0(r133,l0) a2(r160,l0) a3(r155,l0) a5(r152,l0) a6(r142,l0) a7(r136,l0)
;;     total conflict hard regs: 0 3 14
;;     conflict hard regs: 0 3 14
;; a5(r152,l0) conflicts: a0(r133,l0) a2(r160,l0) a4(r154,l0)
;;     total conflict hard regs: 0 3 14
;;     conflict hard regs: 0 3 14
;; a6(r142,l0) conflicts: a0(r133,l0) a4(r154,l0) a7(r136,l0) a8(r134,l0) a9(r151,l0) a10(r150,l0) a11(r135,l0) a12(r138,l0) a13(r139,l0) a14(r147,l0) a15(r149,l0) a16(r148,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r136,l0) conflicts: a0(r133,l0) a4(r154,l0) a6(r142,l0) a8(r134,l0) a9(r151,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a8(r134,l0) conflicts: a0(r133,l0) a6(r142,l0) a7(r136,l0) a9(r151,l0) a10(r150,l0) a11(r135,l0) a12(r138,l0) a13(r139,l0) a14(r147,l0) a15(r149,l0) a16(r148,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a9(r151,l0) conflicts: a0(r133,l0) a6(r142,l0) a7(r136,l0) a8(r134,l0) a10(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r150,l0) conflicts: a0(r133,l0) a6(r142,l0) a8(r134,l0) a9(r151,l0) a11(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r135,l0) conflicts: a0(r133,l0) a6(r142,l0) a8(r134,l0) a10(r150,l0) a12(r138,l0) a13(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r138,l0) conflicts: a0(r133,l0) a6(r142,l0) a8(r134,l0) a11(r135,l0) a13(r139,l0) a14(r147,l0) a15(r149,l0) a16(r148,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a13(r139,l0) conflicts: a0(r133,l0) a6(r142,l0) a8(r134,l0) a11(r135,l0) a12(r138,l0) a14(r147,l0) a15(r149,l0) a16(r148,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a14(r147,l0) conflicts: a0(r133,l0) a6(r142,l0) a8(r134,l0) a12(r138,l0) a13(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r149,l0) conflicts: a0(r133,l0) a6(r142,l0) a8(r134,l0) a12(r138,l0) a13(r139,l0) a16(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r148,l0) conflicts: a0(r133,l0) a6(r142,l0) a8(r134,l0) a12(r138,l0) a13(r139,l0) a15(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a1(r153)<->a4(r154)@125:shuffle
  cp1:a1(r153)<->a3(r155)@125:shuffle
  cp2:a10(r150)<->a13(r139)@125:shuffle
  cp3:a10(r150)<->a12(r138)@125:shuffle
  cp4:a9(r151)<->a11(r135)@125:shuffle
  cp5:a7(r136)<->a10(r150)@125:shuffle
  cp6:a14(r147)<->a16(r148)@125:shuffle
  cp7:a14(r147)<->a15(r149)@125:shuffle
  cp8:a11(r135)<->a14(r147)@125:shuffle
  regions=1, blocks=7, points=30
    allocnos=17, copies=9, conflicts=0, ranges=17

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r133 1r153 2r160 3r155 4r154 5r152 6r142 7r136 8r134 9r151 10r150 11r135 12r138 13r139 14r147 15r149 16r148
    modified regnos: 133 134 135 136 138 139 142 147 148 149 150 151 152 153 154 155 160
    border:
    Pressure: GENERAL_REGS=8
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 153 of GENERAL_REGS has 4 regs less
    Reg 160 of GENERAL_REGS has 3 regs less
    Reg 155 of GENERAL_REGS has 3 regs less
    Reg 154 of GENERAL_REGS has 3 regs less
    Reg 152 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 136 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
      Pushing a16(r148,l0)
      Pushing a15(r149,l0)
      Pushing a14(r147,l0)
      Pushing a10(r150,l0)
      Pushing a9(r151,l0)
      Pushing a11(r135,l0)
      Pushing a7(r136,l0)
      Pushing a8(r134,l0)
      Pushing a13(r139,l0)
      Pushing a12(r138,l0)
      Pushing a5(r152,l0)
      Pushing a4(r154,l0)
      Pushing a3(r155,l0)
      Pushing a2(r160,l0)
      Pushing a1(r153,l0)
      Pushing a0(r133,l0)
      Pushing a6(r142,l0)
      Popping a6(r142,l0)  -- assign reg 4
      Popping a0(r133,l0)  -- assign reg 12
      Popping a1(r153,l0)  -- assign reg 2
      Popping a2(r160,l0)  -- assign reg 1
      Popping a3(r155,l0)  -- assign reg 2
      Popping a4(r154,l0)  -- assign reg 5
      Popping a5(r152,l0)  -- assign reg 2
      Popping a12(r138,l0)  -- assign reg 5
      Popping a13(r139,l0)  -- assign reg 6
      Popping a8(r134,l0)  -- assign reg 2
      Popping a7(r136,l0)  -- assign reg 3
      Popping a11(r135,l0)  -- assign reg 1
      Popping a9(r151,l0)  -- assign reg 1
      Popping a10(r150,l0)  -- assign reg 5
      Popping a14(r147,l0)  -- assign reg 1
      Popping a15(r149,l0)  -- assign reg 3
      Popping a16(r148,l0)  -- assign reg 1
Disposition:
    0:r133 l0    12    8:r134 l0     2   11:r135 l0     1    7:r136 l0     3
   12:r138 l0     5   13:r139 l0     6    6:r142 l0     4   14:r147 l0     1
   16:r148 l0     1   15:r149 l0     3   10:r150 l0     5    9:r151 l0     1
    5:r152 l0     2    1:r153 l0     2    4:r154 l0     5    3:r155 l0     2
    2:r160 l0     1
New iteration of spill/restore move
+++Costs: overall -500, reg -500, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 2, 13, dead_or_set: 1, 142
insn=14, live_throughout: 13, 142, dead_or_set: 1, 2
insn=13, live_throughout: 1, 13, 142, dead_or_set: 0
insn=10, live_throughout: 0, 1, 13, 142, dead_or_set: 139
insn=11, live_throughout: 0, 1, 13, 139, 142, dead_or_set: 138
insn=15, live_throughout: 13, 138, 139, 142, dead_or_set: 0, 1, 14
insn=17, live_throughout: 13, 14, 138, 139, 142, dead_or_set: 0, 134
insn=18, live_throughout: 13, 14, 134, 138, 139, 142, dead_or_set: 
insn=21, live_throughout: 13, 14, 134, 138, 139, 142, dead_or_set: 148
insn=22, live_throughout: 13, 14, 134, 138, 139, 142, 148, dead_or_set: 149
insn=20, live_throughout: 13, 14, 134, 138, 139, 142, 148, 149, dead_or_set: 133
insn=23, live_throughout: 13, 14, 133, 134, 138, 139, 142, dead_or_set: 147, 148, 149
insn=24, live_throughout: 13, 14, 133, 134, 138, 139, 142, dead_or_set: 135, 147
insn=25, live_throughout: 13, 14, 133, 134, 135, 138, 139, 142, dead_or_set: 
insn=26, live_throughout: 13, 14, 133, 134, 135, 138, 139, 142, dead_or_set: 
insn=28, live_throughout: 13, 14, 133, 134, 135, 142, dead_or_set: 138, 139, 150
insn=30, live_throughout: 13, 14, 133, 134, 142, 150, dead_or_set: 135, 151
insn=29, live_throughout: 13, 14, 133, 134, 142, 151, dead_or_set: 136, 150
insn=31, live_throughout: 13, 14, 133, 134, 136, 142, dead_or_set: 151
insn=32, live_throughout: 13, 14, 133, 134, 136, 142, dead_or_set: 
insn=43, live_throughout: 13, 14, 133, 134, 136, 142, dead_or_set: 0
insn=35, live_throughout: 0, 13, 14, 133, 136, 142, dead_or_set: 134, 154
insn=46, live_throughout: 0, 13, 14, 133, 142, 154, dead_or_set: 3, 136
insn=41, live_throughout: 0, 3, 13, 14, 133, 154, dead_or_set: 142, 160
insn=69, live_throughout: 0, 3, 13, 14, 133, 154, 160, dead_or_set: 152
insn=36, live_throughout: 0, 3, 13, 14, 133, 154, 160, dead_or_set: 152, 155
insn=37, live_throughout: 0, 3, 13, 14, 133, 160, dead_or_set: 153, 154, 155
insn=42, live_throughout: 0, 3, 13, 14, 133, 153, dead_or_set: 160
insn=44, live_throughout: 0, 3, 13, 14, 133, 153, dead_or_set: 1
insn=45, live_throughout: 0, 1, 3, 13, 14, dead_or_set: 2, 133, 153
insn=47, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3
insn=50, live_throughout: 13, 14, dead_or_set: 
insn=58, live_throughout: 13, 14, dead_or_set: 0
insn=64, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 148: (insn_list:REG_DEP_TRUE 21 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 22 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 69 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 42 (nil))
changing reg in insn 20
changing reg in insn 45
changing reg in insn 30
changing reg in insn 25
changing reg in insn 17
changing reg in insn 35
changing reg in insn 22
changing reg in insn 21
changing reg in insn 22
changing reg in insn 21
changing reg in insn 24
changing reg in insn 30
changing reg in insn 25
changing reg in insn 29
changing reg in insn 46
changing reg in insn 31
changing reg in insn 11
changing reg in insn 28
changing reg in insn 10
changing reg in insn 28
changing reg in insn 3
changing reg in insn 43
changing reg in insn 41
changing reg in insn 20
changing reg in insn 11
changing reg in insn 10
changing reg in insn 23
changing reg in insn 24
changing reg in insn 21
changing reg in insn 23
changing reg in insn 22
changing reg in insn 23
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 31
changing reg in insn 69
changing reg in insn 36
changing reg in insn 37
changing reg in insn 45
changing reg in insn 35
changing reg in insn 37
changing reg in insn 36
changing reg in insn 37
changing reg in insn 41
changing reg in insn 42
Spilling for insn 42.

Reloads for insn # 42
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 10 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 12 (  1.7)


dma_mmap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={10d,9u} r2={8d,8u,2d} r3={6d,4u} r4={1d,5u} r5={3d,3u} r6={1d,1u} r12={4d,3u} r13={1d,9u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,3u} r26={1d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 323{267d,53u,3e} in 33{31 regular + 2 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 8 7 2 NOTE_INSN_DELETED)

(note 7 4 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 7 3 2 NOTE_INSN_DELETED)

(insn 3 16 14 2 arch/arm/mm/dma-mapping.c:371 (set (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
        (reg:SI 1 r1 [ vma ])) 167 {*arm_movsi_insn} (nil))

(insn 14 3 13 2 arch/arm/mm/dma-mapping.c:379 (set (reg:SI 1 r1)
        (reg:SI 2 r2 [ cpu_addr ])) 167 {*arm_movsi_insn} (nil))

(insn 13 14 10 2 arch/arm/mm/dma-mapping.c:379 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 10 13 11 2 arch/arm/mm/dma-mapping.c:377 (set (reg:SI 6 r6 [orig:139 D.24577 ] [139])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
                (const_int 8 [0x8])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 15 2 arch/arm/mm/dma-mapping.c:377 (set (reg:SI 5 r5 [orig:138 D.24578 ] [138])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 15 11 17 2 arch/arm/mm/dma-mapping.c:379 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arm_vmregion_find") [flags 0x41] <function_decl 0x11440c80 arm_vmregion_find>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 17 15 18 2 arch/arm/mm/dma-mapping.c:380 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 18 17 19 2 arch/arm/mm/dma-mapping.c:380 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8090 [0x1f9a])
        (nil)))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  3 [19.1%]  (fallthru)
;; Succ edge  6 [80.9%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  2 [19.1%]  (fallthru)
(note 19 18 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 21 19 22 3 arch/arm/mm/dma-mapping.c:383 (set (reg:SI 1 r1 [orig:148 <variable>.vm_end ] [148])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])
        (nil)))

(insn 22 21 20 3 arch/arm/mm/dma-mapping.c:383 (set (reg:SI 3 r3 [orig:149 <variable>.vm_start ] [149])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn 20 22 23 3 arch/arm/mm/dma-mapping.c:381 (set (reg/v:SI 12 ip [orig:133 off ] [133])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
                (const_int 72 [0x48])) [0 <variable>.vm_pgoff+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 23 20 24 3 arch/arm/mm/dma-mapping.c:383 (set (reg:SI 1 r1 [147])
        (minus:SI (reg:SI 1 r1 [orig:148 <variable>.vm_end ] [148])
            (reg:SI 3 r3 [orig:149 <variable>.vm_start ] [149]))) 28 {*arm_subsi3_insn} (nil))

(insn 24 23 25 3 arch/arm/mm/dma-mapping.c:383 (set (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
        (lshiftrt:SI (reg:SI 1 r1 [147])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 26 3 arch/arm/mm/dma-mapping.c:385 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:133 off ] [133])
            (reg/v:SI 1 r1 [orig:135 kern_size ] [135]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 26 25 27 3 arch/arm/mm/dma-mapping.c:385 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9600 [0x2580])
        (nil)))
;; End of basic block 3 -> ( 4 6)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  4 [4.0%]  (fallthru)
;; Succ edge  6 [96.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  3 [4.0%]  (fallthru)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 30 4 arch/arm/mm/dma-mapping.c:377 (set (reg:SI 5 r5 [150])
        (minus:SI (reg:SI 6 r6 [orig:139 D.24577 ] [139])
            (reg:SI 5 r5 [orig:138 D.24578 ] [138]))) 28 {*arm_subsi3_insn} (nil))

(insn 30 28 29 4 arch/arm/mm/dma-mapping.c:386 (set (reg:SI 1 r1 [151])
        (minus:SI (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
            (reg/v:SI 12 ip [orig:133 off ] [133]))) 28 {*arm_subsi3_insn} (nil))

(insn 29 30 31 4 arch/arm/mm/dma-mapping.c:377 (set (reg/v:SI 3 r3 [orig:136 user_size ] [136])
        (lshiftrt:SI (reg:SI 5 r5 [150])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 31 29 32 4 arch/arm/mm/dma-mapping.c:386 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:136 user_size ] [136])
            (reg:SI 1 r1 [151]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 32 31 33 4 arch/arm/mm/dma-mapping.c:386 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  6 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 33 32 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 38 33 39 5 NOTE_INSN_DELETED)

(note 39 38 40 5 NOTE_INSN_DELETED)

(note 40 39 43 5 NOTE_INSN_DELETED)

(insn 43 40 35 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:142 vma ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 35 43 46 5 arch/arm/mm/dma-mapping.c:387 (set (reg/f:SI 5 r5 [orig:154 <variable>.vm_pages ] [154])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 16 [0x10])) [0 <variable>.vm_pages+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 46 35 41 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 3 r3)
        (ashift:SI (reg/v:SI 3 r3 [orig:136 user_size ] [136])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 41 46 69 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 1 r1 [orig:160 <variable>.vm_page_prot ] [160])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 S4 A32])
        (nil)))

(insn 69 41 36 5 arch/arm/mm/dma-mapping.c:387 (set (reg/f:SI 2 r2 [152])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn 36 69 37 5 arch/arm/mm/dma-mapping.c:387 (set (reg/f:SI 2 r2 [orig:155 mem_map ] [155])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [152]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 37 36 42 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 2 r2 [153])
        (minus:SI (reg/f:SI 5 r5 [orig:154 <variable>.vm_pages ] [154])
            (reg/f:SI 2 r2 [orig:155 mem_map ] [155]))) 28 {*arm_subsi3_insn} (nil))

(insn 42 37 44 5 arch/arm/mm/dma-mapping.c:387 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg:SI 1 r1 [orig:160 <variable>.vm_page_prot ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 44 42 45 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 0 r0)
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 45 44 47 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 2 r2)
        (plus:SI (ashiftrt:SI (reg:SI 2 r2 [153])
                (const_int 5 [0x5]))
            (reg/v:SI 12 ip [orig:133 off ] [133]))) 270 {*arith_shiftsi} (nil))

(call_insn/j 47 45 48 5 arch/arm/mm/dma-mapping.c:387 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("remap_pfn_range") [flags 0x41] <function_decl 0x10fb1200 remap_pfn_range>) [0 S4 A32])
                    (const_int 4 [0x4])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 48 47 50)

;; Start of basic block ( 2 3 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [80.9%] 
;; Pred edge  3 [96.0%] 
;; Pred edge  4 [61.0%] 
(code_label 50 48 51 6 144 "" [3 uses])

(note 51 50 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 58 51 64 6 arch/arm/mm/dma-mapping.c:396 (set (reg/i:SI 0 r0)
        (const_int -6 [0xfffffffffffffffa])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -6 [0xfffffffffffffffa])
        (nil)))

(insn 64 58 68 6 arch/arm/mm/dma-mapping.c:396 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 68 64 70 NOTE_INSN_DELETED)

(note 70 68 0 NOTE_INSN_DELETED)


;; Function dma_mmap_writecombine (dma_mmap_writecombine)[0:1282]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 33.
rescanning insn with uid = 33.
deleting insn with uid = 33.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a1 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 19(l0): point = 0
   Insn 13(l0): point = 2
   Insn 12(l0): point = 4
   Insn 11(l0): point = 6
   Insn 14(l0): point = 8
   Insn 33(l0): point = 10
   Insn 10(l0): point = 12
   Insn 3(l0): point = 14
 a0(r136): [3..14]
 a1(r142): [3..4]
 a2(r140): [5..6]
 a3(r141): [7..12]
 a4(r139): [9..10]
Compressing live ranges: from 17 to 9 - 52%
Ranges after the compression:
 a0(r136): [0..8]
 a1(r142): [0..1]
 a2(r140): [2..3]
 a3(r141): [4..7]
 a4(r139): [5..6]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r136,l0) conflicts: a1(r142,l0) a2(r140,l0) a3(r141,l0) a4(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r142,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r140,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r141,l0) conflicts: a0(r136,l0) a4(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r139,l0) conflicts: a0(r136,l0) a3(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14

  cp0:a2(r140)<->a3(r141)@125:shuffle
  cp1:a1(r142)<->a2(r140)@125:shuffle
  regions=1, blocks=3, points=9
    allocnos=5, copies=2, conflicts=2, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r136 1r142 2r140 3r141 4r139
    modified regnos: 136 139 140 141 142
    border:
    Pressure: GENERAL_REGS=8
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 140 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
      Pushing a4(r139,l0)
      Pushing a3(r141,l0)
      Pushing a2(r140,l0)
      Pushing a1(r142,l0)
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 12
      Popping a1(r142,l0)  -- assign reg 4
      Popping a2(r140,l0)  -- assign reg 4
      Popping a3(r141,l0)  -- assign reg 4
      Popping a4(r139,l0)  -- assign reg 5
Disposition:
    0:r136 l0    12    4:r139 l0     5    2:r140 l0     4    3:r141 l0     4
    1:r142 l0     4
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 1, 2, 3, 13, 14, dead_or_set: 136
insn=10, live_throughout: 0, 1, 2, 3, 13, 14, 136, dead_or_set: 141
insn=33, live_throughout: 0, 1, 2, 3, 13, 14, 136, 141, dead_or_set: 139
insn=14, live_throughout: 0, 1, 2, 3, 13, 14, 136, 141, dead_or_set: 139
insn=11, live_throughout: 0, 1, 2, 3, 13, 14, 136, dead_or_set: 140, 141
insn=12, live_throughout: 0, 1, 2, 3, 13, 14, 136, dead_or_set: 140, 142
insn=13, live_throughout: 0, 1, 2, 3, 13, 14, dead_or_set: 136, 142
insn=19, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3
init_insns for 139: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 13 (nil))
changing reg in insn 3
changing reg in insn 13
changing reg in insn 10
changing reg in insn 12
changing reg in insn 33
changing reg in insn 14
changing reg in insn 11
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
Spilling for insn 14.
Spilling for insn 13.

Reloads for insn # 14
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])

Reloads for insn # 13
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                                                        (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                                                        (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


dma_mmap_writecombine

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,2u} r2={2d,1u} r3={2d,1u} r4={3d,3u} r5={1d,1u} r12={3d,2u,1d} r13={1d,5u,1d} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 148{128d,18u,2e} in 8{7 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 12 [ip]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 3 2 NOTE_INSN_FUNCTION_BEG)

(insn 3 7 10 2 arch/arm/mm/dma-mapping.c:408 (set (reg/v/f:SI 12 ip [orig:136 vma ] [136])
        (reg:SI 1 r1 [ vma ])) 167 {*arm_movsi_insn} (nil))

(insn 10 3 33 2 arch/arm/mm/dma-mapping.c:409 (set (reg:SI 4 r4 [orig:141 <variable>.vm_page_prot ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 33 10 14 2 arch/arm/mm/dma-mapping.c:410 (set (reg/v:SI 5 r5 [orig:139 size ] [139])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 size+0 S4 A32])
        (nil)))

(insn 14 33 11 2 arch/arm/mm/dma-mapping.c:410 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:139 size ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 11 14 12 2 arch/arm/mm/dma-mapping.c:409 (set (reg:SI 4 r4 [140])
        (and:SI (reg:SI 4 r4 [orig:141 <variable>.vm_page_prot ] [141])
            (const_int -61 [0xffffffffffffffc3]))) 67 {*arm_andsi3_insn} (nil))

(insn 12 11 13 2 arch/arm/mm/dma-mapping.c:409 (set (reg:SI 4 r4 [142])
        (ior:SI (reg:SI 4 r4 [140])
            (const_int 4 [0x4]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
        (nil)))

(insn 13 12 19 2 arch/arm/mm/dma-mapping.c:409 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
        (reg:SI 4 r4 [142])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 19 13 20 2 arch/arm/mm/dma-mapping.c:410 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_mmap") [flags 0x3] <function_decl 0x1145e500 dma_mmap>) [0 S4 A32])
                    (const_int 4 [0x4])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 20 19 34)

(note 34 20 0 NOTE_INSN_DELETED)


;; Function dma_mmap_coherent (dma_mmap_coherent)[0:1281]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 33.
rescanning insn with uid = 33.
deleting insn with uid = 33.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a1 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 19(l0): point = 0
   Insn 13(l0): point = 2
   Insn 12(l0): point = 4
   Insn 11(l0): point = 6
   Insn 14(l0): point = 8
   Insn 33(l0): point = 10
   Insn 10(l0): point = 12
   Insn 3(l0): point = 14
 a0(r136): [3..14]
 a1(r142): [3..4]
 a2(r140): [5..6]
 a3(r141): [7..12]
 a4(r139): [9..10]
Compressing live ranges: from 17 to 9 - 52%
Ranges after the compression:
 a0(r136): [0..8]
 a1(r142): [0..1]
 a2(r140): [2..3]
 a3(r141): [4..7]
 a4(r139): [5..6]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r136,l0) conflicts: a1(r142,l0) a2(r140,l0) a3(r141,l0) a4(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r142,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r140,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r141,l0) conflicts: a0(r136,l0) a4(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r139,l0) conflicts: a0(r136,l0) a3(r141,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14

  cp0:a2(r140)<->a3(r141)@125:shuffle
  cp1:a1(r142)<->a2(r140)@125:shuffle
  regions=1, blocks=3, points=9
    allocnos=5, copies=2, conflicts=2, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r136 1r142 2r140 3r141 4r139
    modified regnos: 136 139 140 141 142
    border:
    Pressure: GENERAL_REGS=8
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 140 of GENERAL_REGS has 5 regs less
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
      Pushing a4(r139,l0)
      Pushing a3(r141,l0)
      Pushing a2(r140,l0)
      Pushing a1(r142,l0)
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 12
      Popping a1(r142,l0)  -- assign reg 4
      Popping a2(r140,l0)  -- assign reg 4
      Popping a3(r141,l0)  -- assign reg 4
      Popping a4(r139,l0)  -- assign reg 5
Disposition:
    0:r136 l0    12    4:r139 l0     5    2:r140 l0     4    3:r141 l0     4
    1:r142 l0     4
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 1, 2, 3, 13, 14, dead_or_set: 136
insn=10, live_throughout: 0, 1, 2, 3, 13, 14, 136, dead_or_set: 141
insn=33, live_throughout: 0, 1, 2, 3, 13, 14, 136, 141, dead_or_set: 139
insn=14, live_throughout: 0, 1, 2, 3, 13, 14, 136, 141, dead_or_set: 139
insn=11, live_throughout: 0, 1, 2, 3, 13, 14, 136, dead_or_set: 140, 141
insn=12, live_throughout: 0, 1, 2, 3, 13, 14, 136, dead_or_set: 140, 142
insn=13, live_throughout: 0, 1, 2, 3, 13, 14, dead_or_set: 136, 142
insn=19, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3
init_insns for 139: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 13 (nil))
changing reg in insn 3
changing reg in insn 13
changing reg in insn 10
changing reg in insn 12
changing reg in insn 33
changing reg in insn 14
changing reg in insn 11
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
Spilling for insn 14.
Spilling for insn 13.

Reloads for insn # 14
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])

Reloads for insn # 13
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                                                        (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                                                        (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


dma_mmap_coherent

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,2u} r2={2d,1u} r3={2d,1u} r4={3d,3u} r5={1d,1u} r12={3d,2u,1d} r13={1d,5u,1d} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 148{128d,18u,2e} in 8{7 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 12 [ip]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 3 2 NOTE_INSN_FUNCTION_BEG)

(insn 3 7 10 2 arch/arm/mm/dma-mapping.c:400 (set (reg/v/f:SI 12 ip [orig:136 vma ] [136])
        (reg:SI 1 r1 [ vma ])) 167 {*arm_movsi_insn} (nil))

(insn 10 3 33 2 arch/arm/mm/dma-mapping.c:401 (set (reg:SI 4 r4 [orig:141 <variable>.vm_page_prot ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 33 10 14 2 arch/arm/mm/dma-mapping.c:402 (set (reg/v:SI 5 r5 [orig:139 size ] [139])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 size+0 S4 A32])
        (nil)))

(insn 14 33 11 2 arch/arm/mm/dma-mapping.c:402 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:139 size ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 11 14 12 2 arch/arm/mm/dma-mapping.c:401 (set (reg:SI 4 r4 [140])
        (and:SI (reg:SI 4 r4 [orig:141 <variable>.vm_page_prot ] [141])
            (const_int -573 [0xfffffffffffffdc3]))) 67 {*arm_andsi3_insn} (nil))

(insn 12 11 13 2 arch/arm/mm/dma-mapping.c:401 (set (reg:SI 4 r4 [142])
        (ior:SI (reg:SI 4 r4 [140])
            (const_int 516 [0x204]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
        (nil)))

(insn 13 12 19 2 arch/arm/mm/dma-mapping.c:401 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
        (reg:SI 4 r4 [142])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 19 13 20 2 arch/arm/mm/dma-mapping.c:402 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_mmap") [flags 0x3] <function_decl 0x1145e500 dma_mmap>) [0 S4 A32])
                    (const_int 4 [0x4])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 20 19 34)

(note 34 20 0 NOTE_INSN_DELETED)


;; Function __dma_alloc (__dma_alloc)[0:1277]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 328.
verify found no changes in insn with uid = 328.
deleting insn with uid = 164.
scanning new insn with uid = 329.
verify found no changes in insn with uid = 329.
deleting insn with uid = 129.
scanning new insn with uid = 330.
verify found no changes in insn with uid = 330.
deleting insn with uid = 101.
rescanning insn with uid = 324.
deleting insn with uid = 324.
deleting insn with uid = 322.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 38 n_edges 53 count 76 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 38 n_edges 53 count 77 (    2)

Pass 0 for finding allocno costs

    a46 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r226,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r225,l0) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r222,l3) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r221,l3) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r221,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r219,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r218,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r216,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r215,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r213,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r212,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r211,l0) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r207,l3) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r205,l3) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r204,l3) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r201,l3) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r195,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a86 (r164,l1) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r164,l2) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r164,l3) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a85 (r162,l1) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r162,l2) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r162,l3) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a84 (r160,l1) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r157,l2) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r157,l3) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r157,l4) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a83 (r154,l1) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r154,l2) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a82 (r153,l1) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r152,l1) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r149,l2) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r148,l2) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r148,l3) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r148,l4) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r144,l3) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r143,l3) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r142,l3) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r141,l3) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r139,l2) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r138,l1) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r138,l2) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r138,l3) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r136,l2) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r134,l3) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a2(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a9(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a10(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a16(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a33(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a36(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a37(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a38(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a42(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a43(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a44(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a46(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a48(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a50(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r148,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a53(r157,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a54(r134,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a55(r138,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r141,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a57(r142,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a58(r143,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r144,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a60(r148,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a61(r157,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a62(r162,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a63(r164,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a64(r221,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a65(r222,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a66(r201,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a67(r207,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a68(r204,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r205,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a70(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a71(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a72(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a73(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a74(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a75(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a76(r157,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a77(r162,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a78(r164,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a79(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a80(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a81(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a82(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a84(r160,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a85(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a86(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0


Pass 1 for finding allocno costs

    r229: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r221: preferred GENERAL_REGS, alternative NO_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS
    r218: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a2(r219,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r218,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a9(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a10(r216,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r215,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r212,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r213,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r211,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a16(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r195,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r221,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a31(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a33(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a36(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a37(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a38(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a41(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a42(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a43(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a44(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a46(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a48(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a50(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r148,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a53(r157,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a54(r134,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a55(r138,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r141,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a57(r142,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a58(r143,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r144,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a60(r148,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a61(r157,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a62(r162,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a63(r164,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a64(r221,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a65(r222,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a66(r201,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a67(r207,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a68(r204,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r205,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a70(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a71(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a72(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a73(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a74(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a75(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a76(r157,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a77(r162,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a78(r164,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a79(r138,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a80(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a81(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a82(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a84(r160,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a85(r162,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a86(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0

   Insn 317(l0): point = 0
   Insn 268(l0): point = 3
   Insn 267(l0): point = 5
   Insn 266(l0): point = 7
   Insn 265(l0): point = 9
   Insn 280(l0): point = 12
   Insn 274(l0): point = 14
   Insn 256(l0): point = 17
   Insn 313(l0): point = 20
   Insn 241(l0): point = 22
   Insn 240(l0): point = 24
   Insn 239(l0): point = 26
   Insn 238(l0): point = 28
   Insn 237(l0): point = 30
   Insn 236(l0): point = 32
   Insn 234(l0): point = 35
   Insn 233(l0): point = 37
   Insn 232(l0): point = 39
   Insn 231(l0): point = 41
   Insn 196(l0): point = 44
   Insn 195(l0): point = 46
   Insn 194(l0): point = 48
   Insn 185(l0): point = 51
   Insn 186(l0): point = 53
   Insn 184(l0): point = 55
   Insn 178(l0): point = 57
   Insn 181(l0): point = 59
   Insn 177(l0): point = 61
   Insn 187(l0): point = 63
   Insn 200(l0): point = 65
   Insn 216(l0): point = 67
   Insn 176(l0): point = 69
   Insn 174(l0): point = 72
   Insn 173(l0): point = 74
   Insn 171(l0): point = 76
   Insn 169(l0): point = 78
   Insn 167(l0): point = 80
   Insn 170(l0): point = 82
   Insn 168(l0): point = 84
   Insn 328(l0): point = 86
   Insn 166(l0): point = 88
   Insn 163(l0): point = 90
   Insn 161(l0): point = 92
   Insn 160(l0): point = 94
   Insn 309(l0): point = 97
   Insn 156(l0): point = 99
   Insn 155(l0): point = 101
   Insn 153(l0): point = 103
   Insn 154(l0): point = 105
   Insn 307(l0): point = 108
   Insn 146(l0): point = 110
   Insn 145(l0): point = 112
   Insn 144(l0): point = 114
   Insn 142(l0): point = 116
   Insn 138(l0): point = 119
   Insn 137(l0): point = 121
   Insn 136(l0): point = 123
   Insn 135(l0): point = 125
   Insn 134(l0): point = 127
   Insn 329(l0): point = 129
   Insn 133(l0): point = 131
   Insn 132(l0): point = 133
   Insn 126(l0): point = 136
   Insn 125(l0): point = 138
   Insn 122(l0): point = 141
   Insn 121(l0): point = 143
   Insn 120(l0): point = 145
   Insn 119(l0): point = 147
   Insn 118(l0): point = 149
   Insn 305(l0): point = 152
   Insn 104(l0): point = 154
   Insn 103(l0): point = 156
   Insn 330(l0): point = 158
   Insn 100(l0): point = 160
   Insn 98(l0): point = 162
   Insn 97(l0): point = 164
   Insn 96(l0): point = 166
   Insn 93(l0): point = 169
   Insn 92(l0): point = 171
   Insn 90(l0): point = 173
   Insn 89(l0): point = 175
   Insn 88(l0): point = 177
   Insn 87(l0): point = 179
   Insn 86(l0): point = 181
   Insn 81(l0): point = 184
   Insn 303(l0): point = 187
   Insn 76(l0): point = 189
   Insn 69(l0): point = 192
   Insn 68(l0): point = 194
   Insn 65(l0): point = 197
   Insn 64(l0): point = 199
   Insn 301(l0): point = 202
   Insn 59(l0): point = 204
   Insn 58(l0): point = 206
   Insn 54(l0): point = 208
   Insn 53(l0): point = 210
   Insn 56(l0): point = 212
   Insn 327(l0): point = 214
   Insn 326(l0): point = 216
   Insn 55(l0): point = 218
   Insn 50(l0): point = 221
   Insn 49(l0): point = 223
   Insn 299(l0): point = 226
   Insn 42(l0): point = 228
   Insn 41(l0): point = 230
   Insn 40(l0): point = 232
   Insn 39(l0): point = 234
   Insn 36(l0): point = 237
   Insn 35(l0): point = 239
   Insn 325(l0): point = 241
   Insn 321(l0): point = 243
   Insn 324(l0): point = 245
   Insn 323(l0): point = 247
   Insn 31(l0): point = 249
   Insn 29(l0): point = 252
   Insn 28(l0): point = 254
   Insn 19(l0): point = 257
   Insn 13(l0): point = 259
   Insn 20(l0): point = 261
   Insn 11(l0): point = 263
   Insn 18(l0): point = 265
   Insn 3(l0): point = 267
   Insn 320(l0): point = 269
   Insn 5(l0): point = 271
   Insn 319(l0): point = 273
   Insn 7(l0): point = 275
   Insn 15(l0): point = 277
   Insn 12(l0): point = 279
   Insn 14(l0): point = 281
   Insn 253(l4): point = 284
   Insn 252(l4): point = 286
   Insn 248(l4): point = 289
   Insn 247(l4): point = 291
   Insn 293(l4): point = 293
   Insn 245(l4): point = 295
   Insn 311(l3): point = 298
   Insn 225(l3): point = 300
   Insn 223(l3): point = 303
   Insn 222(l3): point = 305
   Insn 217(l3): point = 308
   Insn 296(l3): point = 310
   Insn 215(l3): point = 312
   Insn 213(l3): point = 315
   Insn 212(l3): point = 317
   Insn 209(l3): point = 319
   Insn 207(l3): point = 321
   Insn 203(l3): point = 323
   Insn 210(l3): point = 325
   Insn 202(l3): point = 327
   Insn 208(l3): point = 329
   Insn 206(l3): point = 331
   Insn 211(l3): point = 333
   Insn 201(l3): point = 335
   Insn 191(l3): point = 338
   Insn 190(l3): point = 340
   Insn 189(l3): point = 342
   Insn 116(l2): point = 345
   Insn 115(l2): point = 347
   Insn 111(l2): point = 350
   Insn 110(l2): point = 352
   Insn 297(l2): point = 354
   Insn 108(l2): point = 356
   Insn 26(l1): point = 359
   Insn 23(l1): point = 361
   Insn 25(l1): point = 363
 a0(r148): [51..160] [35..43] [0..11]
 a1(r157): [51..171] [29..43] [0..11]
 a2(r219): [6..7]
 a3(r218): [56..96] [3..9]
 a4(r138): [237..273] [221..225] [108..201] [51..96] [3..11]
 a5(r139): [237..263] [221..225] [108..201] [89..96] [3..11]
 a6(r154): [237..265] [221..225] [108..201] [95..96] [3..11]
 a7(r162): [237..271] [221..225] [108..201] [51..96] [23..43] [3..11]
 a8(r164): [237..275] [221..225] [108..201] [51..96] [3..11]
 a9(r156): [226..228] [202..204] [20..39] [15..17]
 a10(r216): [23..24]
 a11(r215): [25..26]
 a12(r212): [27..28]
 a13(r213): [29..30]
 a14(r211): [31..32]
 a15(r141): [51..74] [40..43]
 a16(r142): [51..51]
 a17(r200): [52..55]
 a18(r144): [51..59]
 a19(r143): [51..57]
 a20(r140): [58..61]
 a21(r195): [62..69]
 a22(r134): [51..63]
 a23(r221): [51..65]
 a24(r222): [51..67]
 a25(r194): [83..88]
 a26(r191): [85..90]
 a27(r193): [85..86]
 a28(r135): [91..92]
 a29(r145): [93..94]
 a30(r155): [111..123]
 a31(r185): [113..116]
 a32(r150): [113..145]
 a33(r183): [124..125]
 a34(r180): [128..129]
 a35(r136): [152..154]
 a36(r149): [152..156]
 a37(r153): [237..261] [221..225] [157..201]
 a38(r179): [157..158]
 a39(r176): [161..162]
 a40(r137): [187..189] [182..184]
 a41(r225): [237..243] [217..225] [195..201]
 a42(r226): [237..241] [215..225] [200..201]
 a43(r152): [229..257] [205..225]
 a44(r174): [209..210]
 a45(r160): [235..267] [219..225]
 a46(r229): [242..245]
 a47(r168): [244..249]
 a48(r228): [246..247]
 a49(r165): [260..279]
 a50(r158): [274..277]
 a51(r166): [278..281]
 a52(r148): [284..297]
 a53(r157): [284..297]
 a54(r134): [298..344]
 a55(r138): [298..344]
 a56(r141): [298..344]
 a57(r142): [315..344] [298..308]
 a58(r143): [298..344]
 a59(r144): [315..344] [298..310]
 a60(r148): [298..344]
 a61(r157): [298..344]
 a62(r162): [298..344]
 a63(r164): [298..344]
 a64(r221): [298..344]
 a65(r222): [298..344]
 a66(r201): [311..342]
 a67(r207): [322..323]
 a68(r204): [324..327]
 a69(r205): [328..335]
 a70(r136): [345..358]
 a71(r138): [345..358]
 a72(r139): [345..358]
 a73(r148): [345..358]
 a74(r149): [345..358]
 a75(r154): [345..358]
 a76(r157): [345..358]
 a77(r162): [345..358]
 a78(r164): [345..358]
 a79(r138): [359..365]
 a80(r139): [359..365]
 a81(r152): [359..365]
 a82(r153): [359..365]
 a83(r154): [359..365]
 a84(r160): [359..365]
 a85(r162): [359..365]
 a86(r164): [359..365]
Compressing live ranges: from 366 to 131 - 35%
Ranges after the compression:
 a0(r148): [23..64] [19..22] [0..5]
 a1(r157): [23..67] [15..22] [0..5]
 a2(r219): [2..3]
 a3(r218): [26..48] [1..4]
 a4(r138): [89..105] [83..84] [49..74] [23..48] [1..5]
 a5(r139): [89..101] [83..84] [49..74] [41..48] [1..5]
 a6(r154): [89..102] [83..84] [49..74] [47..48] [1..5]
 a7(r162): [89..104] [83..84] [49..74] [23..48] [9..22] [1..5]
 a8(r164): [89..107] [83..84] [49..74] [23..48] [1..5]
 a9(r156): [85..86] [75..76] [8..20] [6..7]
 a10(r216): [9..10]
 a11(r215): [11..12]
 a12(r212): [13..14]
 a13(r213): [15..16]
 a14(r211): [17..18]
 a15(r141): [23..36] [21..22]
 a16(r142): [23..23]
 a17(r200): [24..25]
 a18(r144): [23..29]
 a19(r143): [23..27]
 a20(r140): [28..30]
 a21(r195): [31..35]
 a22(r134): [23..32]
 a23(r221): [23..33]
 a24(r222): [23..34]
 a25(r194): [37..40]
 a26(r191): [38..42]
 a27(r193): [38..39]
 a28(r135): [43..44]
 a29(r145): [45..46]
 a30(r155): [50..53]
 a31(r185): [51..52]
 a32(r150): [51..58]
 a33(r183): [54..55]
 a34(r180): [56..57]
 a35(r136): [59..60]
 a36(r149): [59..61]
 a37(r153): [89..100] [83..84] [62..74]
 a38(r179): [62..63]
 a39(r176): [65..66]
 a40(r137): [70..71] [68..69]
 a41(r225): [89..92] [81..84] [72..74]
 a42(r226): [89..90] [80..84] [73..74]
 a43(r152): [87..98] [77..84]
 a44(r174): [78..79]
 a45(r160): [88..103] [82..84]
 a46(r229): [91..94]
 a47(r168): [93..97]
 a48(r228): [95..96]
 a49(r165): [99..110]
 a50(r158): [106..108]
 a51(r166): [109..111]
 a52(r148): [112..113]
 a53(r157): [112..113]
 a54(r134): [114..126]
 a55(r138): [114..126]
 a56(r141): [114..126]
 a57(r142): [118..126] [114..115]
 a58(r143): [114..126]
 a59(r144): [118..126] [114..116]
 a60(r148): [114..126]
 a61(r157): [114..126]
 a62(r162): [114..126]
 a63(r164): [114..126]
 a64(r221): [114..126]
 a65(r222): [114..126]
 a66(r201): [117..125]
 a67(r207): [119..120]
 a68(r204): [121..122]
 a69(r205): [123..124]
 a70(r136): [127..128]
 a71(r138): [127..128]
 a72(r139): [127..128]
 a73(r148): [127..128]
 a74(r149): [127..128]
 a75(r154): [127..128]
 a76(r157): [127..128]
 a77(r162): [127..128]
 a78(r164): [127..128]
 a79(r138): [129..130]
 a80(r139): [129..130]
 a81(r152): [129..130]
 a82(r153): [129..130]
 a83(r154): [129..130]
 a84(r160): [129..130]
 a85(r162): [129..130]
 a86(r164): [129..130]
    Creating cap  a87(r201,l0: a66(r201,l3))
    Creating cap  a88(r207,l0: a67(r207,l3))
    Creating cap  a89(r204,l0: a68(r204,l3))
    Creating cap  a90(r205,l0: a69(r205,l3))
+++Allocating 1176 bytes for conflict table (uncompressed size 1456)
;; a0(r148,l0) conflicts: a1(r157,l0) a3(r218,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a2(r219,l0) a9(r156,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a17(r200,l0) a20(r140,l0) a21(r195,l0) a25(r194,l0) a27(r193,l0) a26(r191,l0) a28(r135,l0) a29(r145,l0) a30(r155,l0) a31(r185,l0) a32(r150,l0) a33(r183,l0) a34(r180,l0) a35(r136,l0) a36(r149,l0) a38(r179,l0) a37(r153,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r157,l0) conflicts: a0(r148,l0) a3(r218,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a2(r219,l0) a9(r156,l0) a13(r213,l0) a14(r211,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a17(r200,l0) a20(r140,l0) a21(r195,l0) a25(r194,l0) a27(r193,l0) a26(r191,l0) a28(r135,l0) a29(r145,l0) a30(r155,l0) a31(r185,l0) a32(r150,l0) a33(r183,l0) a34(r180,l0) a35(r136,l0) a36(r149,l0) a38(r179,l0) a37(r153,l0) a39(r176,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r219,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r218,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a2(r219,l0) a15(r141,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a20(r140,l0) a21(r195,l0) a25(r194,l0) a27(r193,l0) a26(r191,l0) a28(r135,l0) a29(r145,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r138,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a2(r219,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a17(r200,l0) a20(r140,l0) a21(r195,l0) a25(r194,l0) a27(r193,l0) a26(r191,l0) a28(r135,l0) a29(r145,l0) a30(r155,l0) a31(r185,l0) a32(r150,l0) a33(r183,l0) a34(r180,l0) a35(r136,l0) a36(r149,l0) a38(r179,l0) a37(r153,l0) a39(r176,l0) a40(r137,l0) a41(r225,l0) a42(r226,l0) a43(r152,l0) a45(r160,l0) a46(r229,l0) a47(r168,l0) a48(r228,l0) a49(r165,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r139,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a2(r219,l0) a26(r191,l0) a28(r135,l0) a29(r145,l0) a30(r155,l0) a31(r185,l0) a32(r150,l0) a33(r183,l0) a34(r180,l0) a35(r136,l0) a36(r149,l0) a38(r179,l0) a37(r153,l0) a39(r176,l0) a40(r137,l0) a41(r225,l0) a42(r226,l0) a43(r152,l0) a45(r160,l0) a46(r229,l0) a47(r168,l0) a48(r228,l0) a49(r165,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r154,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a5(r139,l0) a7(r162,l0) a8(r164,l0) a2(r219,l0) a30(r155,l0) a31(r185,l0) a32(r150,l0) a33(r183,l0) a34(r180,l0) a35(r136,l0) a36(r149,l0) a38(r179,l0) a37(r153,l0) a39(r176,l0) a40(r137,l0) a41(r225,l0) a42(r226,l0) a43(r152,l0) a45(r160,l0) a46(r229,l0) a47(r168,l0) a48(r228,l0) a49(r165,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r162,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a8(r164,l0) a2(r219,l0) a9(r156,l0) a10(r216,l0) a11(r215,l0) a12(r212,l0) a13(r213,l0) a14(r211,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a17(r200,l0) a20(r140,l0) a21(r195,l0) a25(r194,l0) a27(r193,l0) a26(r191,l0) a28(r135,l0) a29(r145,l0) a30(r155,l0) a31(r185,l0) a32(r150,l0) a33(r183,l0) a34(r180,l0) a35(r136,l0) a36(r149,l0) a38(r179,l0) a37(r153,l0) a39(r176,l0) a40(r137,l0) a41(r225,l0) a42(r226,l0) a43(r152,l0) a45(r160,l0) a46(r229,l0) a47(r168,l0) a48(r228,l0) a49(r165,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r164,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a2(r219,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a17(r200,l0) a20(r140,l0) a21(r195,l0) a25(r194,l0) a27(r193,l0) a26(r191,l0) a28(r135,l0) a29(r145,l0) a30(r155,l0) a31(r185,l0) a32(r150,l0) a33(r183,l0) a34(r180,l0) a35(r136,l0) a36(r149,l0) a38(r179,l0) a37(r153,l0) a39(r176,l0) a40(r137,l0) a41(r225,l0) a42(r226,l0) a43(r152,l0) a45(r160,l0) a46(r229,l0) a47(r168,l0) a48(r228,l0) a49(r165,l0) a50(r158,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a9(r156,l0) conflicts: a0(r148,l0) a1(r157,l0) a7(r162,l0) a10(r216,l0) a11(r215,l0) a12(r212,l0) a13(r213,l0) a14(r211,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r216,l0) conflicts: a7(r162,l0) a9(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r215,l0) conflicts: a7(r162,l0) a9(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r212,l0) conflicts: a7(r162,l0) a9(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r213,l0) conflicts: a1(r157,l0) a7(r162,l0) a9(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r211,l0) conflicts: a1(r157,l0) a7(r162,l0) a9(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r141,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a17(r200,l0) a20(r140,l0) a21(r195,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 14
;; a16(r142,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a17(r200,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r144,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a16(r142,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a17(r200,l0) a20(r140,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a19(r143,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a17(r200,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a20(r140,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a18(r144,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r195,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a22(r134,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a23(r221,l0) a24(r222,l0) a17(r200,l0) a20(r140,l0) a21(r195,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a23(r221,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a24(r222,l0) a17(r200,l0) a20(r140,l0) a21(r195,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a24(r222,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a17(r200,l0) a20(r140,l0) a21(r195,l0) a87(r201,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs:
;; a25(r194,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a27(r193,l0) a26(r191,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a26(r191,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a5(r139,l0) a7(r162,l0) a8(r164,l0) a25(r194,l0) a27(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r193,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a25(r194,l0) a26(r191,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r135,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a5(r139,l0) a7(r162,l0) a8(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r145,l0) conflicts: a0(r148,l0) a1(r157,l0) a3(r218,l0) a4(r138,l0) a5(r139,l0) a7(r162,l0) a8(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r155,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a31(r185,l0) a32(r150,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a31(r185,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a30(r155,l0) a32(r150,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a32(r150,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a30(r155,l0) a31(r185,l0) a33(r183,l0) a34(r180,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a33(r183,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a32(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r180,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a32(r150,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a35(r136,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a36(r149,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a36(r149,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a35(r136,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a37(r153,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a38(r179,l0) a39(r176,l0) a40(r137,l0) a41(r225,l0) a42(r226,l0) a43(r152,l0) a45(r160,l0) a46(r229,l0) a47(r168,l0) a48(r228,l0) a49(r165,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a38(r179,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r176,l0) conflicts: a1(r157,l0) a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r137,l0) conflicts: a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r225,l0) conflicts: a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0) a42(r226,l0) a43(r152,l0) a45(r160,l0) a46(r229,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a42(r226,l0) conflicts: a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0) a41(r225,l0) a43(r152,l0) a45(r160,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a43(r152,l0) conflicts: a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0) a41(r225,l0) a42(r226,l0) a44(r174,l0) a45(r160,l0) a46(r229,l0) a47(r168,l0) a48(r228,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a44(r174,l0) conflicts: a43(r152,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a45(r160,l0) conflicts: a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0) a41(r225,l0) a42(r226,l0) a43(r152,l0) a46(r229,l0) a47(r168,l0) a48(r228,l0) a49(r165,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a46(r229,l0) conflicts: a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0) a41(r225,l0) a43(r152,l0) a45(r160,l0) a47(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a47(r168,l0) conflicts: a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0) a43(r152,l0) a45(r160,l0) a46(r229,l0) a48(r228,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a48(r228,l0) conflicts: a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0) a43(r152,l0) a45(r160,l0) a47(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a49(r165,l0) conflicts: a4(r138,l0) a5(r139,l0) a6(r154,l0) a7(r162,l0) a8(r164,l0) a37(r153,l0) a45(r160,l0) a50(r158,l0) a51(r166,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a50(r158,l0) conflicts: a8(r164,l0) a49(r165,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a51(r166,l0) conflicts: a49(r165,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a52(r148,l4) conflicts: a53(r157,l4)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a53(r157,l4) conflicts: a52(r148,l4)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a54(r134,l3) conflicts: a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a55(r138,l3) conflicts: a54(r134,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a56(r141,l3) conflicts: a54(r134,l3) a55(r138,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a57(r142,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a58(r143,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a59(r144,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a60(r148,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a61(r157,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a62(r162,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a63(r164,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a64(r221,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a65(r222,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a65(r222,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a66(r201,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a66(r201,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a67(r207,l3) a68(r204,l3) a69(r205,l3)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a67(r207,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a68(r204,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a69(r205,l3) conflicts: a54(r134,l3) a55(r138,l3) a56(r141,l3) a57(r142,l3) a58(r143,l3) a59(r144,l3) a60(r148,l3) a61(r157,l3) a62(r162,l3) a63(r164,l3) a64(r221,l3) a65(r222,l3) a66(r201,l3)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a70(r136,l2) conflicts: a71(r138,l2) a72(r139,l2) a73(r148,l2) a74(r149,l2) a75(r154,l2) a76(r157,l2) a77(r162,l2) a78(r164,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a71(r138,l2) conflicts: a70(r136,l2) a72(r139,l2) a73(r148,l2) a74(r149,l2) a75(r154,l2) a76(r157,l2) a77(r162,l2) a78(r164,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a72(r139,l2) conflicts: a70(r136,l2) a71(r138,l2) a73(r148,l2) a74(r149,l2) a75(r154,l2) a76(r157,l2) a77(r162,l2) a78(r164,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a73(r148,l2) conflicts: a70(r136,l2) a71(r138,l2) a72(r139,l2) a74(r149,l2) a75(r154,l2) a76(r157,l2) a77(r162,l2) a78(r164,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a74(r149,l2) conflicts: a70(r136,l2) a71(r138,l2) a72(r139,l2) a73(r148,l2) a75(r154,l2) a76(r157,l2) a77(r162,l2) a78(r164,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a75(r154,l2) conflicts: a70(r136,l2) a71(r138,l2) a72(r139,l2) a73(r148,l2) a74(r149,l2) a76(r157,l2) a77(r162,l2) a78(r164,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a76(r157,l2) conflicts: a70(r136,l2) a71(r138,l2) a72(r139,l2) a73(r148,l2) a74(r149,l2) a75(r154,l2) a77(r162,l2) a78(r164,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a77(r162,l2) conflicts: a70(r136,l2) a71(r138,l2) a72(r139,l2) a73(r148,l2) a74(r149,l2) a75(r154,l2) a76(r157,l2) a78(r164,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a78(r164,l2) conflicts: a70(r136,l2) a71(r138,l2) a72(r139,l2) a73(r148,l2) a74(r149,l2) a75(r154,l2) a76(r157,l2) a77(r162,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a79(r138,l1) conflicts: a80(r139,l1) a81(r152,l1) a82(r153,l1) a83(r154,l1) a84(r160,l1) a85(r162,l1) a86(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a80(r139,l1) conflicts: a79(r138,l1) a81(r152,l1) a82(r153,l1) a83(r154,l1) a84(r160,l1) a85(r162,l1) a86(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a81(r152,l1) conflicts: a79(r138,l1) a80(r139,l1) a82(r153,l1) a83(r154,l1) a84(r160,l1) a85(r162,l1) a86(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a82(r153,l1) conflicts: a79(r138,l1) a80(r139,l1) a81(r152,l1) a83(r154,l1) a84(r160,l1) a85(r162,l1) a86(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a83(r154,l1) conflicts: a79(r138,l1) a80(r139,l1) a81(r152,l1) a82(r153,l1) a84(r160,l1) a85(r162,l1) a86(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a84(r160,l1) conflicts: a79(r138,l1) a80(r139,l1) a81(r152,l1) a82(r153,l1) a83(r154,l1) a85(r162,l1) a86(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a85(r162,l1) conflicts: a79(r138,l1) a80(r139,l1) a81(r152,l1) a82(r153,l1) a83(r154,l1) a84(r160,l1) a86(r164,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a86(r164,l1) conflicts: a79(r138,l1) a80(r139,l1) a81(r152,l1) a82(r153,l1) a83(r154,l1) a84(r160,l1) a85(r162,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a87(r201,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a88(r207,l0) a89(r204,l0) a90(r205,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a88(r207,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a87(r201,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a89(r204,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a87(r201,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a90(r205,l0) conflicts: a0(r148,l0) a1(r157,l0) a4(r138,l0) a7(r162,l0) a8(r164,l0) a15(r141,l0) a16(r142,l0) a18(r144,l0) a19(r143,l0) a22(r134,l0) a23(r221,l0) a24(r222,l0) a87(r201,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2

  cp0:a1(r157)<->a12(r212)@125:shuffle
  cp1:a12(r212)<->a13(r213)@125:shuffle
  cp2:a11(r215)<->a12(r212)@125:shuffle
  cp3:a10(r216)<->a11(r215)@125:shuffle
  cp4:a20(r140)<->a21(r195)@125:shuffle
  cp5:a19(r143)<->a20(r140)@125:shuffle
  cp6:a16(r142)<->a17(r200)@125:shuffle
  cp7:a6(r154)<->a29(r145)@125:shuffle
  cp8:a28(r135)<->a29(r145)@125:shuffle
  cp9:a26(r191)<->a28(r135)@125:shuffle
  cp10:a5(r139)<->a25(r194)@125:shuffle
  cp11:a0(r148)<->a39(r176)@125:shuffle
  cp12:a36(r149)<->a38(r179)@125:shuffle
  cp13:a36(r149)<->a37(r153)@125:shuffle
  cp14:a9(r156)<->a43(r152)@1000:move
  cp15:a9(r156)<->a43(r152)@1000:move
  cp16:a46(r229)<->a48(r228)@125:shuffle
  cp17:a50(r158)<->a51(r166)@125:shuffle
  cp18:a4(r138)<->a50(r158)@125:shuffle
  cp19:a68(r204)<->a69(r205)@125:shuffle
  cp20:a67(r207)<->a68(r204)@125:shuffle
  cp21:a89(r204)<->a90(r205)@125:shuffle
  cp22:a88(r207)<->a89(r204)@125:shuffle
  regions=5, blocks=38, points=131
    allocnos=91, copies=23, conflicts=4, ranges=128

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 37 36 35 34 31 30(->33:l4) 25 23(->24:l3) 22(->33:l4) 21(->33:l4) 20 19 18 17 14(->16:l2) 13 12 11 10 9 8 7 6 5 4 2(->3:l1)
    all: 0r148 1r157 2r219 3r218 4r138 5r139 6r154 7r162 8r164 9r156 10r216 11r215 12r212 13r213 14r211 15r141 16r142 17r200 18r144 19r143 20r140 21r195 22r134 23r221 24r222 25r194 26r191 27r193 28r135 29r145 30r155 31r185 32r150 33r183 34r180 35r136 36r149 37r153 38r179 39r176 40r137 41r225 42r226 43r152 44r174 45r160 46r229 47r168 48r228 49r165 50r158 51r166 87r201 88r207 89r204 90r205
    modified regnos: 134 135 136 137 138 139 140 141 142 143 144 145 148 149 150 152 153 154 155 156 157 158 160 162 164 165 166 168 174 176 179 180 183 185 191 193 194 195 200 201 204 205 207 211 212 213 215 216 218 219 221 222 225 226 228 229
    border:
    Pressure: GENERAL_REGS=17
    Reg 148 of GENERAL_REGS has 5 regs less
    Reg 157 of GENERAL_REGS has 5 regs less
    Reg 218 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 154 of GENERAL_REGS has 5 regs less
    Reg 162 of GENERAL_REGS has 5 regs less
    Reg 164 of GENERAL_REGS has 5 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 216 of GENERAL_REGS has 1 regs less
    Reg 215 of GENERAL_REGS has 1 regs less
    Reg 212 of GENERAL_REGS has 1 regs less
    Reg 213 of GENERAL_REGS has 1 regs less
    Reg 211 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 4 regs less
    Reg 134 of GENERAL_REGS has 4 regs less
    Reg 221 of GENERAL_REGS has 4 regs less
    Reg 222 of GENERAL_REGS has 4 regs less
    Reg 194 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 3 regs less
    Reg 185 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 3 regs less
    Reg 180 of GENERAL_REGS has 3 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 5 regs less
    Reg 225 of GENERAL_REGS has 1 regs less
    Reg 226 of GENERAL_REGS has 2 regs less
    Reg 152 of GENERAL_REGS has 5 regs less
    Reg 174 of GENERAL_REGS has 4 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 3 regs less
    Reg 158 of GENERAL_REGS has 3 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 201 of GENERAL_REGS has 4 regs less
    Reg 207 of GENERAL_REGS has 2 regs less
    Reg 204 of GENERAL_REGS has 2 regs less
    Reg 205 of GENERAL_REGS has 2 regs less
      Pushing a48(r228,l0)
      Pushing a46(r229,l0)
      Pushing a39(r176,l0)
      Pushing a38(r179,l0)
      Pushing a33(r183,l0)
      Pushing a29(r145,l0)
      Pushing a28(r135,l0)
      Pushing a27(r193,l0)
      Pushing a26(r191,l0)
      Pushing a21(r195,l0)
      Pushing a17(r200,l0)
      Pushing a2(r219,l0)
      Pushing a47(r168,l0)
      Pushing a40(r137,l0)
      Pushing a20(r140,l0)
      Pushing a31(r185,l0)
      Pushing a25(r194,l0)
      Pushing a14(r211,l0)
      Pushing a13(r213,l0)
      Pushing a12(r212,l0)
      Pushing a11(r215,l0)
      Pushing a10(r216,l0)
      Pushing a41(r225,l0)
      Pushing a45(r160,l0)
      Pushing a9(r156,l0)
      Pushing a42(r226,l0)
      Pushing a51(r166,l0)
      Pushing a50(r158,l0)
      Pushing a49(r165,l0)
      Pushing a44(r174,l0)
      Pushing a8(r164,l0)(potential spill: pri=322, cost=10000)
      Pushing a36(r149,l0)
      Pushing a34(r180,l0)
      Pushing a30(r155,l0)
      Pushing a35(r136,l0)
      Pushing a32(r150,l0)
      Pushing a24(r222,l0)(potential spill: pri=1000, cost=20000)
      Pushing a7(r162,l0)(potential spill: pri=1250, cost=30000)
      Pushing a0(r148,l0)(potential spill: pri=1363, cost=30000)
      Pushing a90(r205,l0: a69(r205,l3))
      Pushing a89(r204,l0: a68(r204,l3))
      Pushing a88(r207,l0: a67(r207,l3))
      Pushing a23(r221,l0)(potential spill: pri=2142, cost=30000)
      Pushing a6(r154,l0)(potential spill: pri=2500, cost=30000)
      Pushing a43(r152,l0)
      Pushing a37(r153,l0)
      Pushing a5(r139,l0)
      Pushing a22(r134,l0)(potential spill: pri=3076, cost=40000)
      Pushing a87(r201,l0: a66(r201,l3))(potential spill: pri=3636, cost=40000)
      Pushing a16(r142,l0)
      Pushing a15(r141,l0)
      Pushing a19(r143,l0)
      Pushing a18(r144,l0)
      Pushing a3(r218,l0)
      Pushing a1(r157,l0)
      Pushing a4(r138,l0)
      Popping a4(r138,l0)  -- assign reg 4
      Popping a1(r157,l0)  -- assign reg 5
      Popping a3(r218,l0)  -- assign reg 6
      Popping a18(r144,l0)  -- assign reg 7
      Popping a19(r143,l0)  -- assign reg 8
      Popping a15(r141,l0)  -- assign reg 10
      Popping a16(r142,l0)  -- assign reg 6
      Popping a87(r201,l0: a66(r201,l3))  -- assign reg 9
      Popping a22(r134,l0)  -- assign reg 11
      Popping a5(r139,l0)  -- assign reg 7
      Popping a37(r153,l0)  -- assign reg 6
      Popping a43(r152,l0)  -- assign reg 5
      Popping a6(r154,l0)  -- assign reg 8
      Popping a23(r221,l0)  -- assign reg 3
      Popping a88(r207,l0: a67(r207,l3))  -- assign reg 1
      Popping a89(r204,l0: a68(r204,l3))  -- assign reg 1
      Popping a90(r205,l0: a69(r205,l3))  -- assign reg 1
      Popping a0(r148,l0)  -- (memory is more profitable 30000 vs 180000) spill
      Popping a7(r162,l0)  -- (memory is more profitable 30000 vs 180000) spill
      Popping a24(r222,l0)  -- assign reg 12
      Popping a32(r150,l0)  -- assign reg 6
      Popping a35(r136,l0)  -- assign reg 10
      Popping a30(r155,l0)  -- assign reg 3
      Popping a34(r180,l0)  -- assign reg 3
      Popping a36(r149,l0)  -- assign reg 6
      Popping a8(r164,l0)  -- spill
      Popping a44(r174,l0)  -- assign reg 6
      Popping a49(r165,l0)  -- assign reg 12
      Popping a50(r158,l0)  -- assign reg 4
      Popping a51(r166,l0)  -- assign reg 4
      Popping a42(r226,l0)  -- assign reg 3
      Popping a9(r156,l0)  -- assign reg 0
      Popping a45(r160,l0)  -- assign reg 0
      Popping a41(r225,l0)  -- assign reg 2
      Popping a10(r216,l0)  -- assign reg 5
      Popping a11(r215,l0)  -- assign reg 5
      Popping a12(r212,l0)  -- assign reg 5
      Popping a13(r213,l0)  -- assign reg 3
      Popping a14(r211,l0)  -- assign reg 3
      Popping a25(r194,l0)  -- assign reg 3
      Popping a31(r185,l0)  -- assign reg 1
      Popping a20(r140,l0)  -- assign reg 8
      Popping a40(r137,l0)  -- assign reg 0
      Popping a47(r168,l0)  -- assign reg 3
      Popping a2(r219,l0)  -- assign reg 3
      Popping a17(r200,l0)  -- assign reg 6
      Popping a21(r195,l0)  -- assign reg 8
      Popping a26(r191,l0)  -- assign reg 8
      Popping a27(r193,l0)  -- assign reg 1
      Popping a28(r135,l0)  -- assign reg 8
      Popping a29(r145,l0)  -- assign reg 8
      Popping a33(r183,l0)  -- assign reg 3
      Popping a38(r179,l0)  -- assign reg 3
      Popping a39(r176,l0)  -- assign reg 3
      Popping a46(r229,l0)  -- assign reg 1
      Popping a48(r228,l0)  -- assign reg 1

  Loop 4 (parent 0, header bb33, depth 1)
    bbs: 33(->34:l0) 32
    all: 52r148 53r157
    modified regnos: 157
    border: 52r148 53r157
    Pressure: GENERAL_REGS=5
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 157 of GENERAL_REGS has 3 regs less
      Pushing a52(r148,l4)
      Pushing a53(r157,l4)
      Popping a53(r157,l4)  -- assign reg 5
      Popping a52(r148,l4)  -- (memory is more profitable -10000 vs 0) spill

  Loop 3 (parent 0, header bb24, depth 1)
    bbs: 29 28(->30:l0) 27 26 24(->25:l0)
    all: 54r134 55r138 56r141 57r142 58r143 59r144 60r148 61r157 62r162 63r164 64r221 65r222 66r201 67r207 68r204 69r205
    modified regnos: 134 138 142 143 144 201 204 205 207
    border: 54r134 55r138 56r141 57r142 58r143 59r144 60r148 61r157 62r162 63r164 64r221 65r222
    Pressure: GENERAL_REGS=17
    Reg 134 of GENERAL_REGS has 4 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 4 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 157 of GENERAL_REGS has 4 regs less
    Reg 162 of GENERAL_REGS has 4 regs less
    Reg 164 of GENERAL_REGS has 4 regs less
    Reg 201 of GENERAL_REGS has 4 regs less
    Reg 207 of GENERAL_REGS has 2 regs less
    Reg 204 of GENERAL_REGS has 2 regs less
    Reg 205 of GENERAL_REGS has 2 regs less
      Pushing a60(r148,l3)(potential spill: pri=-2000, cost=-40000)
      Pushing a62(r162,l3)(potential spill: pri=-2105, cost=-40000)
      Pushing a63(r164,l3)(potential spill: pri=-1666, cost=-30000)
      Pushing a56(r141,l3)(potential spill: pri=2352, cost=40000)
      Pushing a69(r205,l3)
      Pushing a68(r204,l3)
      Pushing a67(r207,l3)
      Pushing a61(r157,l3)(potential spill: pri=3076, cost=40000)
      Pushing a66(r201,l3)(potential spill: pri=3333, cost=40000)
      Pushing a55(r138,l3)(potential spill: pri=5454, cost=60000)
      Pushing a58(r143,l3)
      Pushing a54(r134,l3)
      Pushing a59(r144,l3)
      Pushing a57(r142,l3)
      Popping a57(r142,l3)  -- assign reg 6
      Popping a59(r144,l3)  -- assign reg 7
      Popping a54(r134,l3)  -- assign reg 11
      Popping a58(r143,l3)  -- assign reg 8
      Popping a55(r138,l3)  -- assign reg 4
      Popping a66(r201,l3)  -- assign reg 5
      Popping a61(r157,l3)  -- assign reg 10
      Popping a67(r207,l3)  -- assign reg 1
      Popping a68(r204,l3)  -- assign reg 1
      Popping a69(r205,l3)  -- assign reg 1
      Popping a56(r141,l3)  -- assign reg 9
      Popping a63(r164,l3)  -- spill
      Popping a62(r162,l3)  -- spill
      Popping a60(r148,l3)  -- spill

  Loop 2 (parent 0, header bb16, depth 1)
    bbs: 16(->17:l0) 15
    all: 70r136 71r138 72r139 73r148 74r149 75r154 76r157 77r162 78r164
    modified regnos: 136
    border: 70r136 71r138 72r139 73r148 74r149 75r154 76r157 77r162 78r164
    Pressure: GENERAL_REGS=12
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 3 regs less
    Reg 154 of GENERAL_REGS has 3 regs less
    Reg 157 of GENERAL_REGS has 3 regs less
    Reg 162 of GENERAL_REGS has 3 regs less
    Reg 164 of GENERAL_REGS has 3 regs less
      Pushing a73(r148,l2)(potential spill: pri=-3333, cost=-40000)
      Pushing a78(r164,l2)
      Pushing a77(r162,l2)
      Pushing a76(r157,l2)
      Pushing a75(r154,l2)
      Pushing a72(r139,l2)
      Pushing a71(r138,l2)
      Pushing a74(r149,l2)
      Pushing a70(r136,l2)
      Popping a70(r136,l2)  -- assign reg 10
      Popping a74(r149,l2)  -- assign reg 6
      Popping a71(r138,l2)  -- assign reg 4
      Popping a72(r139,l2)  -- assign reg 7
      Popping a75(r154,l2)  -- assign reg 8
      Popping a76(r157,l2)  -- assign reg 5
      Popping a77(r162,l2)  -- (memory is more profitable -20000 vs 0) spill
      Popping a78(r164,l2)  -- (memory is more profitable -20000 vs 0) spill
      Popping a73(r148,l2)  -- (memory is more profitable -20000 vs 0) spill

  Loop 1 (parent 0, header bb3, depth 1)
    bbs: 3(->4:l0)
    all: 79r138 80r139 81r152 82r153 83r154 84r160 85r162 86r164
    modified regnos: 152 153
    border: 79r138 80r139 81r152 82r153 83r154 84r160 85r162 86r164
    Pressure: GENERAL_REGS=8
      Pushing a86(r164,l1)
      Pushing a85(r162,l1)
      Pushing a84(r160,l1)
      Pushing a83(r154,l1)
      Pushing a80(r139,l1)
      Pushing a79(r138,l1)
      Pushing a82(r153,l1)
      Pushing a81(r152,l1)
      Popping a81(r152,l1)  -- assign reg 5
      Popping a82(r153,l1)  -- assign reg 6
      Popping a79(r138,l1)  -- assign reg 4
      Popping a80(r139,l1)  -- assign reg 7
      Popping a83(r154,l1)  -- assign reg 8
      Popping a84(r160,l1)  -- assign reg 0
      Popping a85(r162,l1)  -- (memory is more profitable -20000 vs 0) spill
      Popping a86(r164,l1)  -- (memory is more profitable -20000 vs 0) spill
Disposition:
   54:r134 l3    11   22:r134 l0    11   28:r135 l0     8   70:r136 l2    10
   35:r136 l0    10   40:r137 l0     0   79:r138 l1     4   71:r138 l2     4
   55:r138 l3     4    4:r138 l0     4   80:r139 l1     7   72:r139 l2     7
    5:r139 l0     7   20:r140 l0     8   56:r141 l3     9   15:r141 l0    10
   57:r142 l3     6   16:r142 l0     6   58:r143 l3     8   19:r143 l0     8
   59:r144 l3     7   18:r144 l0     7   29:r145 l0     8   73:r148 l2   mem
   60:r148 l3   mem   52:r148 l4   mem    0:r148 l0   mem   74:r149 l2     6
   36:r149 l0     6   32:r150 l0     6   81:r152 l1     5   43:r152 l0     5
   82:r153 l1     6   37:r153 l0     6   83:r154 l1     8   75:r154 l2     8
    6:r154 l0     8   30:r155 l0     3    9:r156 l0     0   76:r157 l2     5
   61:r157 l3    10   53:r157 l4     5    1:r157 l0     5   50:r158 l0     4
   84:r160 l1     0   45:r160 l0     0   85:r162 l1   mem   77:r162 l2   mem
   62:r162 l3   mem    7:r162 l0   mem   86:r164 l1   mem   78:r164 l2   mem
   63:r164 l3   mem    8:r164 l0   mem   49:r165 l0    12   51:r166 l0     4
   47:r168 l0     3   44:r174 l0     6   39:r176 l0     3   38:r179 l0     3
   34:r180 l0     3   33:r183 l0     3   31:r185 l0     1   26:r191 l0     8
   27:r193 l0     1   25:r194 l0     3   21:r195 l0     8   17:r200 l0     6
   66:r201 l3     5   68:r204 l3     1   69:r205 l3     1   67:r207 l3     1
   14:r211 l0     3   12:r212 l0     5   13:r213 l0     3   11:r215 l0     5
   10:r216 l0     5    3:r218 l0     6    2:r219 l0     3   64:r221 l3     3
   23:r221 l0     3   65:r222 l3    12   24:r222 l0    12   41:r225 l0     2
   42:r226 l0     3   48:r228 l0     1   46:r229 l0     1
New iteration of spill/restore move
      Changing RTL for loop 4 (header bb33)
  5 vs parent 5:      Creating newreg=230 from oldreg=157
rescanning insn with uid = 252.
deleting insn with uid = 252.
rescanning insn with uid = 245.
deleting insn with uid = 245.
rescanning insn with uid = 248.
deleting insn with uid = 248.
      Changing RTL for loop 3 (header bb24)
  11 vs parent 11:      Creating newreg=231 from oldreg=134
  4 vs parent 4:      Creating newreg=232 from oldreg=138
  9 vs parent 10:      Creating newreg=233 from oldreg=141
  6 vs parent 6:      Creating newreg=234 from oldreg=142
  8 vs parent 8:      Creating newreg=235 from oldreg=143
  7 vs parent 7:      Creating newreg=236 from oldreg=144
  10 vs parent 5:      Creating newreg=237 from oldreg=157
rescanning insn with uid = 225.
deleting insn with uid = 225.
rescanning insn with uid = 222.
deleting insn with uid = 222.
rescanning insn with uid = 215.
deleting insn with uid = 215.
rescanning insn with uid = 296.
deleting insn with uid = 296.
rescanning insn with uid = 217.
deleting insn with uid = 217.
rescanning insn with uid = 211.
deleting insn with uid = 211.
rescanning insn with uid = 206.
deleting insn with uid = 206.
rescanning insn with uid = 202.
deleting insn with uid = 202.
rescanning insn with uid = 210.
deleting insn with uid = 210.
rescanning insn with uid = 212.
deleting insn with uid = 212.
rescanning insn with uid = 189.
deleting insn with uid = 189.
      Changing RTL for loop 2 (header bb16)
  10 vs parent 10:      Creating newreg=238 from oldreg=136
  4 vs parent 4:      Creating newreg=239 from oldreg=138
  7 vs parent 7:      Creating newreg=240 from oldreg=139
  6 vs parent 6:      Creating newreg=241 from oldreg=149
  8 vs parent 8:      Creating newreg=242 from oldreg=154
  5 vs parent 5:      Creating newreg=243 from oldreg=157
rescanning insn with uid = 115.
deleting insn with uid = 115.
rescanning insn with uid = 108.
deleting insn with uid = 108.
rescanning insn with uid = 111.
deleting insn with uid = 111.
      Changing RTL for loop 1 (header bb3)
  4 vs parent 4:      Creating newreg=244 from oldreg=138
  7 vs parent 7:      Creating newreg=245 from oldreg=139
  5 vs parent 5:      Creating newreg=246 from oldreg=152
  6 vs parent 6:      Creating newreg=247 from oldreg=153
  8 vs parent 8:      Creating newreg=248 from oldreg=154
  0 vs parent 0:      Creating newreg=249 from oldreg=160
rescanning insn with uid = 25.
deleting insn with uid = 25.
rescanning insn with uid = 23.
deleting insn with uid = 23.
scanning new insn with uid = 331.
scanning new insn with uid = 332.
scanning new insn with uid = 333.
scanning new insn with uid = 334.
scanning new insn with uid = 335.
scanning new insn with uid = 336.
scanning new insn with uid = 337.
scanning new insn with uid = 338.
scanning new insn with uid = 339.
scanning new insn with uid = 340.
scanning new insn with uid = 341.
scanning new insn with uid = 342.
scanning new insn with uid = 349.
scanning new insn with uid = 350.
scanning new insn with uid = 351.
scanning new insn with uid = 352.
scanning new insn with uid = 355.
scanning new insn with uid = 356.
scanning new insn with uid = 357.
scanning new insn with uid = 358.
scanning new insn with uid = 359.
scanning new insn with uid = 360.
scanning new insn with uid = 361.
scanning new insn with uid = 362.
scanning new insn with uid = 363.
    Adding cp23:a4r138-a79r244
    Adding range [132..132] to allocno a4r138
    Adding cp24:a5r139-a80r245
    Adding range [132..134] to allocno a5r139
    Adding cp25:a43r152-a81r246
    Adding range [132..136] to allocno a43r152
    Adding cp26:a37r153-a82r247
    Adding range [132..138] to allocno a37r153
    Adding cp27:a6r154-a83r248
    Adding range [132..140] to allocno a6r154
    Adding cp28:a45r160-a84r249
    Adding range [132..142] to allocno a45r160
    Adding range [133..143] to allocno a79r244
    Adding range [135..143] to allocno a80r245
    Adding range [137..143] to allocno a81r246
    Adding range [139..143] to allocno a82r247
    Adding range [141..143] to allocno a83r248
    Adding range [143..143] to allocno a84r249
    Adding range [132..143] to live through  allocno a7r162
    Adding range [132..143] to live through  allocno a8r164
    Adding cp29:a4r138-a79r244
    Adding range [145..145] to allocno a79r244
    Adding cp30:a5r139-a80r245
    Adding range [145..147] to allocno a80r245
    Adding cp31:a43r152-a81r246
    Adding range [145..149] to allocno a81r246
    Adding cp32:a37r153-a82r247
    Adding range [145..151] to allocno a82r247
    Adding cp33:a6r154-a83r248
    Adding range [145..153] to allocno a83r248
    Adding cp34:a45r160-a84r249
    Adding range [145..155] to allocno a84r249
    Adding range [146..156] to allocno a4r138
    Adding range [148..156] to allocno a5r139
    Adding range [150..156] to allocno a43r152
    Adding range [152..156] to allocno a37r153
    Adding range [154..156] to allocno a6r154
    Adding range [156..156] to allocno a45r160
    Adding range [145..156] to live through  allocno a7r162
    Adding range [145..156] to live through  allocno a8r164
    Adding cp35:a35r136-a70r238
    Adding range [158..158] to allocno a35r136
    Adding cp36:a4r138-a71r239
    Adding range [158..160] to allocno a4r138
    Adding cp37:a5r139-a72r240
    Adding range [158..162] to allocno a5r139
    Adding cp38:a36r149-a74r241
    Adding range [158..164] to allocno a36r149
    Adding cp39:a6r154-a75r242
    Adding range [158..166] to allocno a6r154
    Adding cp40:a1r157-a76r243
    Adding range [158..168] to allocno a1r157
    Adding range [159..169] to allocno a70r238
    Adding range [161..169] to allocno a71r239
    Adding range [163..169] to allocno a72r240
    Adding range [165..169] to allocno a74r241
    Adding range [167..169] to allocno a75r242
    Adding range [169..169] to allocno a76r243
    Adding range [158..169] to live through  allocno a0r148
    Adding range [158..169] to live through  allocno a7r162
    Adding range [158..169] to live through  allocno a8r164
    Adding cp41:a4r138-a71r239
    Adding range [171..171] to allocno a71r239
    Adding cp42:a5r139-a72r240
    Adding range [171..173] to allocno a72r240
    Adding cp43:a6r154-a75r242
    Adding range [171..175] to allocno a75r242
    Adding cp44:a1r157-a76r243
    Adding range [171..177] to allocno a76r243
    Adding range [172..178] to allocno a4r138
    Adding range [174..178] to allocno a5r139
    Adding range [176..178] to allocno a6r154
    Adding range [178..178] to allocno a1r157
    Adding range [171..178] to live through  allocno a0r148
    Adding range [171..178] to live through  allocno a7r162
    Adding range [171..178] to live through  allocno a8r164
    Adding cp45:a1r157-a53r230
    Adding range [180..180] to allocno a1r157
    Adding range [181..181] to allocno a53r230
    Adding range [180..181] to live through  allocno a0r148
    Adding cp46:a1r157-a53r230
    Adding range [183..183] to allocno a1r157
    Adding range [184..184] to allocno a53r230
    Adding range [183..184] to live through  allocno a0r148
    Adding cp47:a22r134-a54r231
    Adding range [186..186] to allocno a22r134
    Adding cp48:a4r138-a55r232
    Adding range [186..188] to allocno a4r138
    Adding cp49:a15r141-a56r233
    Adding range [186..190] to allocno a15r141
    Adding cp50:a16r142-a57r234
    Adding range [186..192] to allocno a16r142
    Adding cp51:a19r143-a58r235
    Adding range [186..194] to allocno a19r143
    Adding cp52:a18r144-a59r236
    Adding range [186..196] to allocno a18r144
    Adding cp53:a1r157-a61r237
    Adding range [186..198] to allocno a1r157
    Adding range [187..199] to allocno a54r231
    Adding range [189..199] to allocno a55r232
    Adding range [191..199] to allocno a56r233
    Adding range [193..199] to allocno a57r234
    Adding range [195..199] to allocno a58r235
    Adding range [197..199] to allocno a59r236
    Adding range [199..199] to allocno a61r237
    Adding range [186..199] to live through  allocno a0r148
    Adding range [186..199] to live through  allocno a7r162
    Adding range [186..199] to live through  allocno a8r164
    Adding range [186..199] to live through  allocno a23r221
    Adding range [186..199] to live through  allocno a24r222
    Adding cp54:a1r157-a61r237
    Adding range [201..201] to allocno a61r237
    Adding cp55:a15r141-a56r233
    Adding range [201..203] to allocno a56r233
    Adding range [202..204] to allocno a1r157
    Adding range [204..204] to allocno a15r141
    Adding range [201..204] to live through  allocno a0r148
    Adding range [201..204] to live through  allocno a7r162
    Adding cp56:a1r157-a53r230
    Adding range [206..206] to allocno a1r157
    Adding range [207..207] to allocno a53r230
    Adding range [206..207] to live through  allocno a0r148
scanning new insn with uid = 343.
scanning new insn with uid = 344.
scanning new insn with uid = 345.
scanning new insn with uid = 346.
scanning new insn with uid = 347.
scanning new insn with uid = 348.
scanning new insn with uid = 353.
scanning new insn with uid = 365.
changing bb of uid 367
  unscanned insn
verify found no changes in insn with uid = 174.
Edge 22->33 redirected to 38
scanning new insn with uid = 354.
scanning new insn with uid = 369.
changing bb of uid 371
  unscanned insn
verify found no changes in insn with uid = 234.
Edge 30->33 redirected to 39
scanning new insn with uid = 364.
    New r230: setting preferred GENERAL_REGS, alternative NO_REGS
    New r231: setting preferred GENERAL_REGS, alternative NO_REGS
    New r232: setting preferred GENERAL_REGS, alternative NO_REGS
    New r233: setting preferred GENERAL_REGS, alternative NO_REGS
    New r234: setting preferred GENERAL_REGS, alternative NO_REGS
    New r235: setting preferred GENERAL_REGS, alternative NO_REGS
    New r236: setting preferred GENERAL_REGS, alternative NO_REGS
    New r237: setting preferred GENERAL_REGS, alternative NO_REGS
    New r238: setting preferred GENERAL_REGS, alternative NO_REGS
    New r239: setting preferred GENERAL_REGS, alternative NO_REGS
    New r240: setting preferred GENERAL_REGS, alternative NO_REGS
    New r241: setting preferred GENERAL_REGS, alternative NO_REGS
    New r242: setting preferred GENERAL_REGS, alternative NO_REGS
    New r243: setting preferred GENERAL_REGS, alternative NO_REGS
    New r244: setting preferred GENERAL_REGS, alternative NO_REGS
    New r245: setting preferred GENERAL_REGS, alternative NO_REGS
    New r246: setting preferred GENERAL_REGS, alternative NO_REGS
    New r247: setting preferred GENERAL_REGS, alternative NO_REGS
    New r248: setting preferred GENERAL_REGS, alternative NO_REGS
    New r249: setting preferred GENERAL_REGS, alternative NO_REGS
Flattening IR
      Moving ranges of a65r222 to a24r222:  [114..126]
      Moving ranges of a64r221 to a23r221:  [114..126]
      Moving ranges of a86r164 to a8r164:  [129..130]
      Moving ranges of a78r164 to a8r164:  [127..128]
      Moving ranges of a63r164 to a8r164:  [114..126]
      Moving ranges of a85r162 to a7r162:  [129..130]
      Moving ranges of a77r162 to a7r162:  [127..128]
      Moving ranges of a62r162 to a7r162:  [114..126]
      Moving ranges of a73r148 to a0r148:  [127..128]
      Moving ranges of a60r148 to a0r148:  [114..126]
      Moving ranges of a52r148 to a0r148:  [112..113]
      Remove cp21:c89r204-c90r205
      Remove cp22:c88r207-c89r204
      Remove a52r148
      Remove a60r148
      Remove a62r162
      Remove a63r164
      Remove a64r221
      Remove a65r222
      Remove a73r148
      Remove a77r162
      Remove a78r164
      Remove a85r162
      Remove a86r164
      Remove a87r201
      Remove a88r207
      Remove a89r204
      Remove a90r205
Compressing live ranges: from 208 to 199 - 95%
Ranges after the compression:
 a0(r148): [197..198] [193..196] [179..192] [177..178] [175..176] [167..174] [155..166] [112..128] [19..64] [0..5]
 a1(r157): [197..197] [194..196] [179..191] [177..177] [175..175] [174..174] [155..165] [23..67] [15..22] [0..5]
 a2(r219): [2..3]
 a3(r218): [26..48] [1..4]
 a4(r138): [179..181] [168..174] [155..157] [144..154] [131..131] [89..105] [83..84] [49..74] [23..48] [1..5]
 a5(r139): [170..174] [155..159] [146..154] [131..133] [89..101] [83..84] [49..74] [41..48] [1..5]
 a6(r154): [172..174] [155..163] [152..154] [131..139] [89..102] [83..84] [49..74] [47..48] [1..5]
 a7(r162): [193..196] [179..192] [167..174] [155..166] [143..154] [131..142] [114..130] [89..104] [83..84] [9..74] [1..5]
 a8(r164): [179..192] [167..174] [155..166] [143..154] [131..142] [114..130] [89..107] [83..84] [23..74] [1..5]
 a9(r156): [85..86] [75..76] [8..20] [6..7]
 a10(r216): [9..10]
 a11(r215): [11..12]
 a12(r212): [13..14]
 a13(r213): [15..16]
 a14(r211): [17..18]
 a15(r141): [196..196] [179..183] [23..36] [21..22]
 a16(r142): [179..185] [23..23]
 a17(r200): [24..25]
 a18(r144): [179..189] [23..29]
 a19(r143): [179..187] [23..27]
 a20(r140): [28..30]
 a21(r195): [31..35]
 a22(r134): [179..179] [23..32]
 a23(r221): [179..192] [114..126] [23..33]
 a24(r222): [179..192] [114..126] [23..34]
 a25(r194): [37..40]
 a26(r191): [38..42]
 a27(r193): [38..39]
 a28(r135): [43..44]
 a29(r145): [45..46]
 a30(r155): [50..53]
 a31(r185): [51..52]
 a32(r150): [51..58]
 a33(r183): [54..55]
 a34(r180): [56..57]
 a35(r136): [155..155] [59..60]
 a36(r149): [155..161] [59..61]
 a37(r153): [150..154] [131..137] [89..100] [83..84] [62..74]
 a38(r179): [62..63]
 a39(r176): [65..66]
 a40(r137): [70..71] [68..69]
 a41(r225): [89..92] [81..84] [72..74]
 a42(r226): [89..90] [80..84] [73..74]
 a43(r152): [148..154] [131..135] [87..98] [77..84]
 a44(r174): [78..79]
 a45(r160): [154..154] [131..141] [88..103] [82..84]
 a46(r229): [91..94]
 a47(r168): [93..97]
 a48(r228): [95..96]
 a49(r165): [99..110]
 a50(r158): [106..108]
 a51(r166): [109..111]
 a53(r230): [198..198] [178..178] [176..176] [112..113]
 a54(r231): [180..192] [114..126]
 a55(r232): [182..192] [114..126]
 a56(r233): [193..195] [184..192] [114..126]
 a57(r234): [186..192] [118..126] [114..115]
 a58(r235): [188..192] [114..126]
 a59(r236): [190..192] [118..126] [114..116]
 a61(r237): [193..193] [192..192] [114..126]
 a66(r201): [117..125]
 a67(r207): [119..120]
 a68(r204): [121..122]
 a69(r205): [123..124]
 a70(r238): [156..166] [127..128]
 a71(r239): [167..167] [158..166] [127..128]
 a72(r240): [167..169] [160..166] [127..128]
 a74(r241): [162..166] [127..128]
 a75(r242): [167..171] [164..166] [127..128]
 a76(r243): [167..173] [166..166] [127..128]
 a79(r244): [143..143] [132..142] [129..130]
 a80(r245): [143..145] [134..142] [129..130]
 a81(r246): [143..147] [136..142] [129..130]
 a82(r247): [143..149] [138..142] [129..130]
 a83(r248): [143..151] [140..142] [129..130]
 a84(r249): [143..153] [142..142] [129..130]
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 40 n_edges 55 count 80 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 40 n_edges 55 count 81 (    2)
+++Costs: overall 77250, reg 7250, mem 70000, ld 0, st 0, move 68000
+++       move loops 0, new jumps 4
insn=14, live_throughout: 0, 2, 3, 13, dead_or_set: 1, 166
insn=12, live_throughout: 0, 2, 3, 13, 166, dead_or_set: 165
insn=15, live_throughout: 0, 2, 3, 13, 165, dead_or_set: 158, 166
insn=7, live_throughout: 0, 2, 3, 13, 158, 165, dead_or_set: 164
insn=319, live_throughout: 0, 2, 3, 13, 164, 165, dead_or_set: 138, 158
insn=5, live_throughout: 0, 3, 13, 138, 164, 165, dead_or_set: 2, 162
insn=320, live_throughout: 0, 3, 13, 162, 164, 165, dead_or_set: 138
insn=3, live_throughout: 3, 13, 138, 162, 164, 165, dead_or_set: 0, 160
insn=18, live_throughout: 3, 13, 138, 160, 162, 164, 165, dead_or_set: 154
insn=11, live_throughout: 13, 138, 154, 160, 162, 164, 165, dead_or_set: 3, 139
insn=20, live_throughout: 13, 138, 139, 154, 160, 162, 164, 165, dead_or_set: 153
insn=13, live_throughout: 13, 138, 139, 153, 154, 160, 162, 164, dead_or_set: 165
insn=19, live_throughout: 13, 138, 139, 153, 154, 160, 162, 164, dead_or_set: 152
insn=331, live_throughout: 13, 139, 152, 153, 154, 160, 162, 164, dead_or_set: 138, 244
insn=332, live_throughout: 13, 152, 153, 154, 160, 162, 164, 244, dead_or_set: 139, 245
insn=333, live_throughout: 13, 153, 154, 160, 162, 164, 244, 245, dead_or_set: 152, 246
insn=334, live_throughout: 13, 154, 160, 162, 164, 244, 245, 246, dead_or_set: 153, 247
insn=335, live_throughout: 13, 160, 162, 164, 244, 245, 246, 247, dead_or_set: 154, 248
insn=336, live_throughout: 13, 162, 164, 244, 245, 246, 247, 248, dead_or_set: 160, 249
insn=24, live_throughout: 13, 162, 164, 244, 245, 246, 247, 248, 249, dead_or_set: 
insn=25, live_throughout: 13, 162, 164, 244, 245, 247, 248, 249, dead_or_set: 246
insn=23, live_throughout: 13, 24, 162, 164, 244, 245, 246, 248, 249, dead_or_set: 247
insn=26, live_throughout: 13, 162, 164, 244, 245, 246, 247, 248, 249, dead_or_set: 
insn=337, live_throughout: 13, 162, 164, 245, 246, 247, 248, 249, dead_or_set: 138, 244
insn=338, live_throughout: 13, 138, 162, 164, 246, 247, 248, 249, dead_or_set: 139, 245
insn=339, live_throughout: 13, 138, 139, 162, 164, 247, 248, 249, dead_or_set: 152, 246
insn=340, live_throughout: 13, 138, 139, 152, 162, 164, 248, 249, dead_or_set: 153, 247
insn=341, live_throughout: 13, 138, 139, 152, 153, 162, 164, 249, dead_or_set: 154, 248
insn=342, live_throughout: 13, 138, 139, 152, 153, 154, 162, 164, dead_or_set: 160, 249
insn=28, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, dead_or_set: 
insn=29, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, dead_or_set: 
insn=31, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, dead_or_set: 168
insn=323, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, 168, dead_or_set: 228
insn=324, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, 168, dead_or_set: 228, 229
insn=321, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, 229, dead_or_set: 168, 225
insn=325, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, 225, dead_or_set: 226, 229
insn=35, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, 225, 226, dead_or_set: 
insn=36, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, 225, 226, dead_or_set: 
insn=39, live_throughout: 13, 152, dead_or_set: 0, 160
insn=40, live_throughout: 0, 13, 152, dead_or_set: 1
insn=41, live_throughout: 13, 152, dead_or_set: 0, 1, 14
insn=42, live_throughout: 13, 14, dead_or_set: 152, 156
insn=299, live_throughout: 13, 14, 156, dead_or_set: 
insn=45, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, 225, 226, dead_or_set: 
insn=49, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, 225, 226, dead_or_set: 
insn=50, live_throughout: 13, 138, 139, 152, 153, 154, 160, 162, 164, 225, 226, dead_or_set: 
insn=55, live_throughout: 13, 152, 225, 226, dead_or_set: 0, 160
insn=326, live_throughout: 0, 13, 152, 226, dead_or_set: 2, 225
insn=327, live_throughout: 0, 2, 13, 152, dead_or_set: 3, 226
insn=56, live_throughout: 0, 2, 3, 13, 152, dead_or_set: 1
insn=53, live_throughout: 0, 1, 2, 3, 13, 152, dead_or_set: 174
insn=54, live_throughout: 0, 1, 2, 3, 13, 152, dead_or_set: 174
insn=58, live_throughout: 13, 152, dead_or_set: 0, 1, 2, 3, 14
insn=59, live_throughout: 13, 14, dead_or_set: 152, 156
insn=301, live_throughout: 13, 14, 156, dead_or_set: 
insn=62, live_throughout: 13, 138, 139, 153, 154, 162, 164, 225, 226, dead_or_set: 
insn=64, live_throughout: 13, 138, 139, 153, 154, 162, 164, 225, dead_or_set: 226
insn=65, live_throughout: 13, 138, 139, 153, 154, 162, 164, 225, dead_or_set: 
insn=68, live_throughout: 13, 138, 139, 153, 154, 162, 164, dead_or_set: 225
insn=69, live_throughout: 13, 138, 139, 153, 154, 162, 164, dead_or_set: 
insn=76, live_throughout: 13, 138, 139, 153, 154, 162, 164, dead_or_set: 137
insn=303, live_throughout: 13, 137, 138, 139, 153, 154, 162, 164, dead_or_set: 
insn=79, live_throughout: 13, 138, 139, 153, 154, 162, 164, dead_or_set: 
insn=81, live_throughout: 13, 138, 139, 153, 154, 162, 164, dead_or_set: 137
insn=82, live_throughout: 13, 137, 138, 139, 153, 154, 162, 164, dead_or_set: 
insn=86, live_throughout: 13, 138, 139, 153, 154, 162, 164, dead_or_set: 0, 137
insn=87, live_throughout: 0, 13, 138, 139, 153, 154, 162, 164, dead_or_set: 1
insn=88, live_throughout: 0, 1, 13, 138, 139, 153, 154, 162, 164, dead_or_set: 2
insn=89, live_throughout: 0, 1, 2, 13, 138, 139, 153, 154, 162, 164, dead_or_set: 3
insn=90, live_throughout: 13, 138, 139, 153, 154, 162, 164, dead_or_set: 0, 1, 2, 3, 14
insn=92, live_throughout: 0, 13, 14, 138, 139, 153, 154, 162, 164, dead_or_set: 157
insn=93, live_throughout: 0, 13, 14, 138, 139, 153, 154, 157, 162, 164, dead_or_set: 
insn=96, live_throughout: 0, 13, 138, 139, 153, 154, 157, 162, 164, dead_or_set: 1
insn=97, live_throughout: 13, 138, 139, 153, 154, 157, 162, 164, dead_or_set: 0, 1, 14
insn=98, live_throughout: 13, 138, 139, 153, 154, 157, 162, 164, dead_or_set: 176
insn=100, live_throughout: 13, 138, 139, 153, 154, 157, 162, 164, dead_or_set: 148, 176
insn=330, live_throughout: 13, 138, 139, 148, 153, 154, 157, 162, 164, dead_or_set: 179
insn=103, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, dead_or_set: 149, 153, 179
insn=104, live_throughout: 13, 138, 139, 148, 149, 154, 157, 162, 164, dead_or_set: 136
insn=343, live_throughout: 13, 138, 139, 148, 149, 154, 157, 162, 164, dead_or_set: 136, 238
insn=344, live_throughout: 13, 139, 148, 149, 154, 157, 162, 164, 238, dead_or_set: 138, 239
insn=345, live_throughout: 13, 148, 149, 154, 157, 162, 164, 238, 239, dead_or_set: 139, 240
insn=346, live_throughout: 13, 148, 154, 157, 162, 164, 238, 239, 240, dead_or_set: 149, 241
insn=347, live_throughout: 13, 148, 157, 162, 164, 238, 239, 240, 241, dead_or_set: 154, 242
insn=348, live_throughout: 13, 148, 162, 164, 238, 239, 240, 241, 242, dead_or_set: 157, 243
insn=305, live_throughout: 13, 148, 162, 164, 238, 239, 240, 241, 242, 243, dead_or_set: 
insn=114, live_throughout: 13, 148, 162, 164, 238, 239, 240, 241, 242, 243, dead_or_set: 
insn=108, live_throughout: 13, 148, 162, 164, 238, 239, 240, 241, 242, 243, dead_or_set: 0
insn=297, live_throughout: 0, 13, 148, 162, 164, 238, 239, 240, 241, 242, 243, dead_or_set: 1
insn=110, live_throughout: 13, 148, 162, 164, 238, 239, 240, 241, 242, 243, dead_or_set: 0, 1, 14
insn=111, live_throughout: 13, 148, 162, 164, 239, 240, 241, 242, 243, dead_or_set: 238
insn=112, live_throughout: 13, 148, 162, 164, 238, 239, 240, 241, 242, 243, dead_or_set: 
insn=115, live_throughout: 13, 148, 162, 164, 238, 239, 240, 241, 242, 243, dead_or_set: 
insn=116, live_throughout: 13, 148, 162, 164, 238, 239, 240, 241, 242, 243, dead_or_set: 
insn=349, live_throughout: 13, 148, 162, 164, 240, 242, 243, dead_or_set: 138, 239
insn=350, live_throughout: 13, 138, 148, 162, 164, 242, 243, dead_or_set: 139, 240
insn=351, live_throughout: 13, 138, 139, 148, 162, 164, 243, dead_or_set: 154, 242
insn=352, live_throughout: 13, 138, 139, 148, 154, 162, 164, dead_or_set: 157, 243
insn=118, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, dead_or_set: 0
insn=119, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, dead_or_set: 0, 14
insn=120, live_throughout: 0, 13, 138, 139, 148, 154, 157, 162, 164, dead_or_set: 150
insn=121, live_throughout: 0, 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 
insn=122, live_throughout: 0, 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 
insn=125, live_throughout: 0, 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 1
insn=126, live_throughout: 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 0, 1, 14
insn=127, live_throughout: 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 
insn=132, live_throughout: 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 0
insn=133, live_throughout: 0, 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 1
insn=329, live_throughout: 0, 1, 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 180
insn=134, live_throughout: 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 0, 1, 14, 180
insn=135, live_throughout: 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 183
insn=136, live_throughout: 13, 138, 139, 148, 150, 154, 157, 162, 164, dead_or_set: 155, 183
insn=137, live_throughout: 13, 138, 139, 148, 150, 154, 155, 157, 162, 164, dead_or_set: 
insn=138, live_throughout: 13, 138, 139, 148, 150, 154, 155, 157, 162, 164, dead_or_set: 
insn=142, live_throughout: 13, 138, 139, 148, 150, 154, 155, 157, 162, 164, dead_or_set: 185
insn=144, live_throughout: 13, 138, 139, 148, 150, 154, 155, 157, 162, 164, 185, dead_or_set: 0
insn=145, live_throughout: 0, 13, 138, 139, 148, 154, 155, 157, 162, 164, dead_or_set: 1, 150, 185
insn=146, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, dead_or_set: 0, 1, 14, 155
insn=307, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, dead_or_set: 
insn=264, live_throughout: 13, 148, 157, dead_or_set: 
insn=154, live_throughout: 13, 148, 157, dead_or_set: 1
insn=153, live_throughout: 1, 13, 148, 157, dead_or_set: 0
insn=155, live_throughout: 13, 148, 157, dead_or_set: 0, 1, 14
insn=156, live_throughout: 13, 148, 157, dead_or_set: 14
insn=353, live_throughout: 13, 14, 148, dead_or_set: 157, 230
insn=309, live_throughout: 13, 14, 148, 230, dead_or_set: 
insn=315, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, 218, dead_or_set: 
insn=160, live_throughout: 13, 138, 139, 148, 157, 162, 164, 218, dead_or_set: 145, 154
insn=161, live_throughout: 13, 138, 139, 148, 157, 162, 164, 218, dead_or_set: 135, 145
insn=163, live_throughout: 13, 138, 139, 148, 157, 162, 164, 218, dead_or_set: 135, 191
insn=166, live_throughout: 13, 138, 148, 157, 162, 164, 191, 218, dead_or_set: 139, 194
insn=328, live_throughout: 13, 138, 148, 157, 162, 164, 191, 194, 218, dead_or_set: 193
insn=168, live_throughout: 13, 138, 148, 157, 162, 164, 194, 218, dead_or_set: 1, 191, 193
insn=170, live_throughout: 1, 13, 138, 148, 157, 162, 164, 218, dead_or_set: 3, 194
insn=167, live_throughout: 1, 3, 13, 138, 148, 157, 162, 164, 218, dead_or_set: 0
insn=169, live_throughout: 0, 1, 3, 13, 138, 148, 157, 162, 164, 218, dead_or_set: 2
insn=171, live_throughout: 13, 138, 148, 157, 162, 164, 218, dead_or_set: 0, 1, 2, 3, 14
insn=173, live_throughout: 13, 14, 138, 148, 157, 162, 164, 218, dead_or_set: 0, 141
insn=174, live_throughout: 13, 14, 138, 141, 148, 157, 162, 164, 218, dead_or_set: 
insn=176, live_throughout: 13, 138, 141, 148, 157, 162, 164, 218, dead_or_set: 195
insn=216, live_throughout: 13, 138, 141, 148, 157, 162, 164, 195, 218, dead_or_set: 222
insn=200, live_throughout: 13, 138, 141, 148, 157, 162, 164, 195, 218, 222, dead_or_set: 221
insn=187, live_throughout: 13, 138, 141, 148, 157, 162, 164, 195, 218, 221, 222, dead_or_set: 134
insn=177, live_throughout: 13, 134, 138, 141, 148, 157, 162, 164, 218, 221, 222, dead_or_set: 140, 195
insn=181, live_throughout: 13, 134, 138, 140, 141, 148, 157, 162, 164, 218, 221, 222, dead_or_set: 144
insn=178, live_throughout: 13, 134, 138, 141, 144, 148, 157, 162, 164, 218, 221, 222, dead_or_set: 140, 143
insn=184, live_throughout: 13, 134, 138, 141, 143, 144, 148, 157, 162, 164, 221, 222, dead_or_set: 200, 218
insn=186, live_throughout: 13, 134, 138, 141, 143, 144, 148, 157, 162, 164, 200, 221, 222, dead_or_set: 
insn=185, live_throughout: 13, 134, 138, 141, 143, 144, 148, 157, 162, 164, 221, 222, dead_or_set: 142, 200
insn=355, live_throughout: 13, 138, 141, 142, 143, 144, 148, 157, 162, 164, 221, 222, dead_or_set: 134, 231
insn=356, live_throughout: 13, 141, 142, 143, 144, 148, 157, 162, 164, 221, 222, 231, dead_or_set: 138, 232
insn=357, live_throughout: 13, 142, 143, 144, 148, 157, 162, 164, 221, 222, 231, 232, dead_or_set: 141, 233
insn=358, live_throughout: 13, 143, 144, 148, 157, 162, 164, 221, 222, 231, 232, 233, dead_or_set: 142, 234
insn=359, live_throughout: 13, 144, 148, 157, 162, 164, 221, 222, 231, 232, 233, 234, dead_or_set: 143, 235
insn=360, live_throughout: 13, 148, 157, 162, 164, 221, 222, 231, 232, 233, 234, 235, dead_or_set: 144, 236
insn=361, live_throughout: 13, 148, 162, 164, 221, 222, 231, 232, 233, 234, 235, 236, dead_or_set: 157, 237
insn=226, live_throughout: 13, 148, 162, 164, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 
insn=189, live_throughout: 13, 148, 162, 164, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 201
insn=190, live_throughout: 13, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 
insn=191, live_throughout: 13, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 
insn=194, live_throughout: 13, dead_or_set: 0
insn=195, live_throughout: 0, 13, dead_or_set: 1
insn=196, live_throughout: 13, dead_or_set: 0, 1, 14
insn=198, live_throughout: 13, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 
insn=201, live_throughout: 13, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 205
insn=211, live_throughout: 13, 148, 162, 164, 201, 205, 221, 222, 231, 232, 233, 234, 235, 237, dead_or_set: 236
insn=206, live_throughout: 13, 148, 162, 164, 201, 205, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 0
insn=208, live_throughout: 0, 13, 148, 162, 164, 201, 205, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 2
insn=202, live_throughout: 0, 2, 13, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 204, 205
insn=210, live_throughout: 0, 2, 13, 148, 162, 164, 201, 204, 221, 222, 231, 232, 233, 235, 236, 237, dead_or_set: 234
insn=203, live_throughout: 0, 2, 13, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 204, 207
insn=207, live_throughout: 0, 2, 13, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 1, 207
insn=209, live_throughout: 13, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 0, 1, 2, 14
insn=212, live_throughout: 13, 14, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 
insn=213, live_throughout: 13, 14, 148, 162, 164, 201, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 
insn=215, live_throughout: 13, 14, 148, 162, 164, 201, 221, 222, 231, 232, 233, 237, dead_or_set: 235
insn=296, live_throughout: 13, 14, 148, 162, 164, 221, 222, 231, 232, 233, 235, 237, dead_or_set: 201, 236
insn=217, live_throughout: 13, 14, 148, 162, 164, 221, 222, 231, 232, 233, 235, 236, 237, dead_or_set: 234
insn=219, live_throughout: 13, 14, 148, 162, 164, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 
insn=222, live_throughout: 13, 14, 148, 162, 164, 221, 222, 231, 233, 234, 235, 236, 237, dead_or_set: 232
insn=223, live_throughout: 13, 14, 148, 162, 164, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 
insn=225, live_throughout: 13, 148, 162, 164, 221, 222, 232, 233, 234, 235, 236, 237, dead_or_set: 231
insn=311, live_throughout: 13, 148, 162, 164, 221, 222, 231, 232, 233, 234, 235, 236, 237, dead_or_set: 
insn=229, live_throughout: 13, 14, 148, 162, 233, 237, dead_or_set: 
insn=362, live_throughout: 13, 14, 148, 162, 233, dead_or_set: 157, 237
insn=363, live_throughout: 13, 14, 148, 157, 162, dead_or_set: 141, 233
insn=231, live_throughout: 13, 14, 141, 148, 157, 162, dead_or_set: 
insn=232, live_throughout: 13, 14, 148, 157, 162, dead_or_set: 141, 156
insn=233, live_throughout: 13, 14, 148, 156, 157, 162, dead_or_set: 
insn=234, live_throughout: 13, 14, 148, 156, 157, 162, dead_or_set: 
insn=236, live_throughout: 13, 14, 156, 157, 162, dead_or_set: 211
insn=237, live_throughout: 13, 14, 156, 157, 162, dead_or_set: 211, 213
insn=238, live_throughout: 13, 14, 156, 162, dead_or_set: 157, 212, 213
insn=239, live_throughout: 13, 14, 156, 162, dead_or_set: 212, 215
insn=240, live_throughout: 13, 14, 156, 162, dead_or_set: 215, 216
insn=241, live_throughout: 13, 14, 156, dead_or_set: 162, 216
insn=313, live_throughout: 13, 14, 156, dead_or_set: 
insn=251, live_throughout: 13, 148, 230, dead_or_set: 
insn=245, live_throughout: 13, 148, 230, dead_or_set: 0
insn=293, live_throughout: 0, 13, 148, 230, dead_or_set: 1
insn=247, live_throughout: 13, 148, 230, dead_or_set: 0, 1, 14
insn=248, live_throughout: 13, 14, 148, dead_or_set: 230
insn=365, live_throughout: 13, 14, 148, 230, dead_or_set: 
insn=368, live_throughout: 13, 14, 148, 157, dead_or_set: 
insn=354, live_throughout: 13, 14, 148, dead_or_set: 157, 230
insn=369, live_throughout: 13, 14, 148, 230, dead_or_set: 
insn=372, live_throughout: 13, 14, 148, 157, dead_or_set: 
insn=364, live_throughout: 13, 14, 148, dead_or_set: 157, 230
insn=298, live_throughout: 13, 14, 148, 230, dead_or_set: 
insn=252, live_throughout: 13, 14, 148, 230, dead_or_set: 
insn=253, live_throughout: 13, 14, 148, 230, dead_or_set: 
insn=254, live_throughout: 13, 14, dead_or_set: 
insn=256, live_throughout: 13, 14, dead_or_set: 156
insn=257, live_throughout: 13, 14, 156, dead_or_set: 
insn=274, live_throughout: 13, 14, dead_or_set: 0, 156
insn=280, live_throughout: 0, 13, 14, dead_or_set: 
insn=262, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, dead_or_set: 
insn=265, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, dead_or_set: 218
insn=266, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, 218, dead_or_set: 219
insn=267, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, 218, dead_or_set: 219
insn=268, live_throughout: 13, 138, 139, 148, 154, 157, 162, 164, 218, dead_or_set: 
insn=317, live_throughout: 13, 148, 157, dead_or_set: 
init_insns for 164: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 168: (insn_list:REG_DEP_TRUE 31 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 53 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 330 (nil))
init_insns for 180: (insn_list:REG_DEP_TRUE 329 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 135 (nil))
init_insns for 193: (insn_list:REG_DEP_TRUE 328 (nil))
init_insns for 195: (insn_list:REG_DEP_TRUE 176 (nil))
init_insns for 205: (insn_list:REG_DEP_TRUE 201 (nil))
init_insns for 211: (insn_list:REG_DEP_TRUE 236 (nil))
init_insns for 216: (insn_list:REG_DEP_TRUE 241 (nil))
init_insns for 218: (insn_list:REG_DEP_TRUE 265 (nil))
init_insns for 219: (insn_list:REG_DEP_TRUE 266 (nil))
init_insns for 221: (insn_list:REG_DEP_TRUE 200 (nil))
init_insns for 222: (insn_list:REG_DEP_TRUE 216 (nil))
      Slot 1 (freq,size): a0r148(3000,4)
      Slot 2 (freq,size): a7r162(3000,4)
      Slot 3 (freq,size): a8r164(2000,4)
      Assigning 162(freq=3000) a new slot 1
      Assigning 148(freq=3000) a new slot 0
changing reg in insn 187
changing reg in insn 355
changing reg in insn 161
changing reg in insn 163
changing reg in insn 104
changing reg in insn 343
changing reg in insn 81
changing reg in insn 76
changing reg in insn 86
changing reg in insn 349
changing reg in insn 337
changing reg in insn 320
changing reg in insn 319
changing reg in insn 344
changing reg in insn 356
changing reg in insn 331
changing reg in insn 320
changing reg in insn 133
changing reg in insn 169
changing reg in insn 142
changing reg in insn 125
changing reg in insn 121
changing reg in insn 98
changing reg in insn 18
changing reg in insn 350
changing reg in insn 338
changing reg in insn 11
changing reg in insn 345
changing reg in insn 332
changing reg in insn 166
changing reg in insn 81
changing reg in insn 76
changing reg in insn 177
changing reg in insn 181
changing reg in insn 178
changing reg in insn 363
changing reg in insn 173
changing reg in insn 357
changing reg in insn 232
changing reg in insn 186
changing reg in insn 176
changing reg in insn 176
changing reg in insn 185
changing reg in insn 358
changing reg in insn 178
changing reg in insn 359
changing reg in insn 184
changing reg in insn 184
changing reg in insn 181
changing reg in insn 360
changing reg in insn 185
changing reg in insn 160
changing reg in insn 161
changing reg in insn 103
changing reg in insn 346
changing reg in insn 120
changing reg in insn 145
changing reg in insn 144
changing reg in insn 133
changing reg in insn 132
changing reg in insn 339
changing reg in insn 19
changing reg in insn 333
changing reg in insn 59
changing reg in insn 42
changing reg in insn 340
changing reg in insn 20
changing reg in insn 334
changing reg in insn 103
changing reg in insn 96
changing reg in insn 87
changing reg in insn 351
changing reg in insn 341
changing reg in insn 18
changing reg in insn 347
changing reg in insn 335
changing reg in insn 160
changing reg in insn 19
changing reg in insn 136
changing reg in insn 146
changing reg in insn 137
changing reg in insn 59
changing reg in insn 42
changing reg in insn 256
changing reg in insn 232
changing reg in insn 274
changing reg in insn 233
changing reg in insn 362
changing reg in insn 352
changing reg in insn 92
changing reg in insn 364
changing reg in insn 354
changing reg in insn 353
changing reg in insn 348
changing reg in insn 361
changing reg in insn 103
changing reg in insn 100
changing reg in insn 238
changing reg in insn 187
changing reg in insn 186
changing reg in insn 118
changing reg in insn 15
changing reg in insn 319
changing reg in insn 342
changing reg in insn 3
changing reg in insn 336
changing reg in insn 323
changing reg in insn 321
changing reg in insn 55
changing reg in insn 39
changing reg in insn 28
changing reg in insn 12
changing reg in insn 20
changing reg in insn 13
changing reg in insn 14
changing reg in insn 15
changing reg in insn 31
changing reg in insn 323
changing reg in insn 321
changing reg in insn 53
changing reg in insn 54
changing reg in insn 98
changing reg in insn 100
changing reg in insn 330
changing reg in insn 103
changing reg in insn 329
changing reg in insn 134
changing reg in insn 135
changing reg in insn 136
changing reg in insn 142
changing reg in insn 145
changing reg in insn 163
changing reg in insn 168
changing reg in insn 328
changing reg in insn 168
changing reg in insn 166
changing reg in insn 170
changing reg in insn 176
changing reg in insn 177
changing reg in insn 184
changing reg in insn 185
changing reg in insn 189
changing reg in insn 296
changing reg in insn 208
changing reg in insn 190
changing reg in insn 202
changing reg in insn 203
changing reg in insn 203
changing reg in insn 201
changing reg in insn 202
changing reg in insn 203
changing reg in insn 207
changing reg in insn 236
changing reg in insn 237
changing reg in insn 238
changing reg in insn 239
changing reg in insn 239
changing reg in insn 237
changing reg in insn 238
changing reg in insn 239
changing reg in insn 240
changing reg in insn 240
changing reg in insn 241
changing reg in insn 265
changing reg in insn 216
changing reg in insn 184
changing reg in insn 266
changing reg in insn 266
changing reg in insn 266
changing reg in insn 267
changing reg in insn 200
changing reg in insn 201
changing reg in insn 201
changing reg in insn 216
changing reg in insn 217
changing reg in insn 321
changing reg in insn 326
changing reg in insn 68
changing reg in insn 49
changing reg in insn 35
changing reg in insn 325
changing reg in insn 327
changing reg in insn 64
changing reg in insn 35
changing reg in insn 323
changing reg in insn 324
changing reg in insn 324
changing reg in insn 325
changing reg in insn 364
changing reg in insn 354
changing reg in insn 353
changing reg in insn 248
changing reg in insn 248
changing reg in insn 245
changing reg in insn 252
changing reg in insn 355
changing reg in insn 225
changing reg in insn 202
changing reg in insn 225
changing reg in insn 356
changing reg in insn 222
changing reg in insn 222
changing reg in insn 222
changing reg in insn 357
changing reg in insn 363
changing reg in insn 358
changing reg in insn 210
changing reg in insn 217
changing reg in insn 189
changing reg in insn 210
changing reg in insn 206
changing reg in insn 359
changing reg in insn 215
changing reg in insn 217
changing reg in insn 215
changing reg in insn 217
changing reg in insn 360
changing reg in insn 211
changing reg in insn 296
changing reg in insn 212
changing reg in insn 211
changing reg in insn 361
changing reg in insn 362
changing reg in insn 343
changing reg in insn 111
changing reg in insn 111
changing reg in insn 108
changing reg in insn 115
changing reg in insn 344
changing reg in insn 349
changing reg in insn 345
changing reg in insn 350
changing reg in insn 346
changing reg in insn 115
changing reg in insn 347
changing reg in insn 351
changing reg in insn 348
changing reg in insn 352
changing reg in insn 331
changing reg in insn 337
changing reg in insn 332
changing reg in insn 338
changing reg in insn 333
changing reg in insn 25
changing reg in insn 339
changing reg in insn 25
changing reg in insn 25
changing reg in insn 334
changing reg in insn 23
changing reg in insn 340
changing reg in insn 23
changing reg in insn 335
changing reg in insn 341
changing reg in insn 336
changing reg in insn 342
3 uses a new slot
12 uses a new slot
3 uses a slot from prev iteration
12 uses a slot from prev iteration
Spilling for insn 7.
Using reg 1 for reload 0
Spilling for insn 5.
Spilling for insn 13.
Using reg 3 for reload 0
Spilling for insn 35.
Using reg 1 for reload 0
Spilling for insn 54.
Spilling for insn 100.
Spilling for insn 186.
Spilling for insn 207.
Using reg 14 for reload 0
Spilling for insn 374.
Spilling for insn 375.
Spilling for insn 241.
Using reg 3 for reload 0
Spilling for insn 252.
Using reg 3 for reload 0
deleting insn with uid = 7.

Reloads for insn # 5
Reload 0: reload_out (SI) = (reg/v/f:SI 162 [ handle ])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (reg/v/f:SI 162 [ handle ])

Reloads for insn # 13
Reload 0: reload_in (SI) = (reg/v/f:SI 162 [ handle ])
	CORE_REGS, RELOAD_FOR_OPERAND_ADDRESS (opnum = 0)
	reload_in_reg: (reg/v/f:SI 162 [ handle ])
	reload_reg_rtx: (reg:SI 2 r2 [ handle ])
Reload 1: reload_out (SI) = (mem:SI (reg/v/f:SI 162 [ handle ]) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/v/f:SI 162 [ handle ]) [0 S4 A32])

Reloads for insn # 35
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 54
Reload 0: reload_out (DI) = (mem:DI (reg/f:SI 13 sp) [0 S8 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:DI (reg/f:SI 13 sp) [0 S8 A64])

Reloads for insn # 100
Reload 0: reload_out (SI) = (reg/v/f:SI 148 [ p ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v/f:SI 148 [ p ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 186
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg/v/f:SI 10 sl [orig:141 c ] [141])
                                                        (const_int 16 [0x10])) [0 <variable>.vm_pages+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg/v/f:SI 10 sl [orig:141 c ] [141])
                                                        (const_int 16 [0x10])) [0 <variable>.vm_pages+0 S4 A32])

Reloads for insn # 207
Reload 0: reload_in (SI) = (reg/v:SI 164 [ prot ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:SI 164 [ prot ])
	reload_reg_rtx: (reg:SI 14 lr)

Reloads for insn # 374
Reload 0: reload_out (SI) = (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])

Reloads for insn # 375
Reload 0: reload_out (SI) = (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])

Reloads for insn # 241
Reload 0: reload_in (SI) = (reg/v/f:SI 162 [ handle ])
	CORE_REGS, RELOAD_FOR_OPERAND_ADDRESS (opnum = 0)
	reload_in_reg: (reg/v/f:SI 162 [ handle ])
	reload_reg_rtx: (reg:SI 1 r1)
Reload 1: reload_out (SI) = (mem:SI (reg/v/f:SI 162 [ handle ]) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/v/f:SI 162 [ handle ]) [0 S4 A32])

Reloads for insn # 252
Reload 0: reload_in (SI) = (reg/v/f:SI 148 [ p ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/v/f:SI 148 [ p ])
	reload_reg_rtx: (reg:SI 3 r3)
deleting insn with uid = 3.
deleting insn with uid = 331.
deleting insn with uid = 332.
deleting insn with uid = 333.
deleting insn with uid = 334.
deleting insn with uid = 335.
deleting insn with uid = 336.
deleting insn with uid = 337.
deleting insn with uid = 338.
deleting insn with uid = 339.
deleting insn with uid = 340.
deleting insn with uid = 341.
deleting insn with uid = 342.
deleting insn with uid = 39.
deleting insn with uid = 55.
deleting insn with uid = 326.
deleting insn with uid = 327.
deleting insn with uid = 86.
deleting insn with uid = 343.
deleting insn with uid = 344.
deleting insn with uid = 345.
deleting insn with uid = 346.
deleting insn with uid = 347.
deleting insn with uid = 348.
deleting insn with uid = 349.
deleting insn with uid = 350.
deleting insn with uid = 351.
deleting insn with uid = 352.
deleting insn with uid = 353.
deleting insn with uid = 170.
deleting insn with uid = 355.
deleting insn with uid = 356.
deleting insn with uid = 358.
deleting insn with uid = 359.
deleting insn with uid = 360.
deleting insn with uid = 354.
deleting insn with uid = 364.
deleting insn with uid = 274.


try_optimize_cfg iteration 1

Edge 22->33 redirected to 35
Edge 30->34 redirected to 35
Deleting block 33.
deleting insn with uid = 368.
deleting insn with uid = 367.
deleting insn with uid = 369.
deleting insn with uid = 370.
deleting block 33
Deleting block 34.
deleting insn with uid = 372.
deleting insn with uid = 371.
deleting block 34
Removing jump 365.
deleting insn with uid = 365.
deleting insn with uid = 366.
Forwarding edge 38->39 to 21 failed.


try_optimize_cfg iteration 2

Forwarding edge 38->39 to 21 failed.


try_optimize_cfg iteration 1

Forwarding edge 38->39 to 21 failed.
starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 90.
verify found no changes in insn with uid = 97.
verify found no changes in insn with uid = 110.
verify found no changes in insn with uid = 119.
verify found no changes in insn with uid = 126.
rescanning insn with uid = 134.
deleting insn with uid = 134.
rescanning insn with uid = 146.
deleting insn with uid = 146.
verify found no changes in insn with uid = 155.
verify found no changes in insn with uid = 156.
verify found no changes in insn with uid = 171.
verify found no changes in insn with uid = 196.
verify found no changes in insn with uid = 209.
verify found no changes in insn with uid = 247.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 38 n_edges 53 count 77 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 38 n_edges 53 count 77 (    2)


__dma_alloc

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={31d,25u} r1={38d,22u,1d} r2={21d,9u} r3={32d,21u,1d} r4={5d,12u} r5={9d,20u,1d} r6={10d,17u,1d} r7={5d,7u} r8={8d,11u,2d} r9={1d,1u} r10={5d,8u,1d} r11={2d,2u} r12={19d,4u} r13={1d,64u,1d} r14={17d,2u} r15={15d} r16={15d} r17={15d} r18={15d} r19={15d} r20={15d} r21={15d} r22={15d} r23={15d} r24={33d,17u} r27={15d} r28={15d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={15d} r37={15d} r38={15d} r39={15d} r40={15d} r41={15d} r42={15d} r43={15d} r44={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} r76={15d} r77={15d} r78={15d} r79={15d} r80={15d} r81={15d} r82={15d} r83={15d} r84={15d} r85={15d} r86={15d} r87={15d} r88={15d} r89={15d} r90={15d} r91={15d} r92={15d} r93={15d} r94={15d} r95={15d} r96={15d} r97={15d} r98={15d} r99={15d} r100={15d} r101={15d} r102={15d} r103={15d} r104={15d} r105={15d} r106={15d} r107={15d} r108={15d} r109={15d} r110={15d} r111={15d} r112={15d} r113={15d} r114={15d} r115={15d} r116={15d} r117={15d} r118={15d} r119={15d} r120={15d} r121={15d} r122={15d} r123={15d} r124={15d} r125={15d} r126={15d} r127={15d} r161={1d} 
;;    total ref usage 2138{1887d,242u,9e} in 169{154 regular + 15 call} insns.
(note 2 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 2 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 9 6 2 NOTE_INSN_DELETED)

(note 6 4 8 2 NOTE_INSN_DELETED)

(note 8 6 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 8 14 2 NOTE_INSN_DELETED)

(insn 14 16 12 2 arch/arm/mm/dma-mapping.c:321 (set (reg:SI 4 r4 [166])
        (plus:SI (reg:SI 1 r1 [ size ])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 12 14 15 2 arch/arm/mm/dma-mapping.c:320 (set (reg:SI 12 ip [165])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 15 12 7 2 arch/arm/mm/dma-mapping.c:321 (set (reg:SI 4 r4 [orig:158 D.24512 ] [158])
        (plus:SI (reg:SI 4 r4 [166])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 161 [ size ])
            (const_int 4095 [0xfff]))
        (nil)))

(note 7 15 319 2 NOTE_INSN_DELETED)

(insn 319 7 5 2 arch/arm/mm/dma-mapping.c:321 (set (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
        (and:SI (reg:SI 4 r4 [orig:158 D.24512 ] [158])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 5 319 320 2 arch/arm/mm/dma-mapping.c:309 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-4 S4 A32])
        (reg:SI 2 r2 [ handle ])) 167 {*arm_movsi_insn} (nil))

(insn 320 5 18 2 arch/arm/mm/dma-mapping.c:321 (set (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
        (and:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 18 320 11 2 include/asm-generic/getorder.h:13 (set (reg:SI 8 r8 [orig:154 D.25334 ] [154])
        (plus:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 11 18 20 2 arch/arm/mm/dma-mapping.c:318 (set (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
        (and:SI (reg:SI 3 r3 [ gfp ])
            (const_int -16385 [0xffffffffffffbfff]))) 67 {*arm_andsi3_insn} (nil))

(insn 20 11 378 2 include/asm-generic/getorder.h:14 (set (reg/v:SI 6 r6 [orig:153 order ] [153])
        (reg:SI 12 ip [165])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 378 20 13 2 arch/arm/mm/dma-mapping.c:320 (set (reg:SI 2 r2 [ handle ])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 378 19 2 arch/arm/mm/dma-mapping.c:320 (set (mem:SI (reg:SI 2 r2 [ handle ]) [0 S4 A32])
        (reg:SI 12 ip [165])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 19 13 24 2 include/asm-generic/getorder.h:13 (set (reg/v:SI 5 r5 [orig:152 size ] [152])
        (lshiftrt:SI (reg:SI 8 r8 [orig:154 D.25334 ] [154])
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  3 [86.0%]  (dfs_back)
(code_label 24 19 21 3 153 "" [1 uses])

(note 21 24 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 22 21 25 3 NOTE_INSN_DELETED)

(insn 25 22 23 3 include/asm-generic/getorder.h:18 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 5 r5 [orig:152 size ] [152])
                (lshiftrt:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn 23 25 26 3 include/asm-generic/getorder.h:17 (set (reg/v:SI 6 r6 [orig:153 order ] [153])
        (plus:SI (reg/v:SI 6 r6 [orig:153 order ] [153])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 26 23 27 3 include/asm-generic/getorder.h:18 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 3 -> ( 3 4)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  3 [86.0%]  (dfs_back)
;; Succ edge  4 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [14.0%]  (fallthru,loop_exit)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 4 arch/arm/mm/dma-mapping.c:34 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:160 dev ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 4 arch/arm/mm/dma-mapping.c:34 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 4 -> ( 5 12)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  12 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  4 [85.0%]  (fallthru)
(note 30 29 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 33 30 34 5 NOTE_INSN_DELETED)

(note 34 33 31 5 NOTE_INSN_DELETED)

(insn 31 34 323 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 3 r3 [168])
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 280 [0x118])
        (nil)))

(insn 323 31 324 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 1 r1 [228])
        (plus:SI (reg/v/f:SI 0 r0 [orig:160 dev ] [160])
            (reg:SI 3 r3 [168]))) 4 {*arm_addsi3} (nil))

(insn 324 323 321 5 arch/arm/mm/dma-mapping.c:35 (set (reg/f:SI 1 r1 [229])
        (plus:SI (reg:SI 1 r1 [228])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 321 324 325 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 2 r2 [orig:225 mask ] [225])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:160 dev ] [160])
                (reg:SI 3 r3 [168])) [0 <variable>.coherent_dma_mask+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 325 321 35 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 3 r3 [orig:226 mask+4 ] [226])
        (mem/s/j:SI (reg/f:SI 1 r1 [229]) [0 <variable>.coherent_dma_mask+4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 35 325 36 5 arch/arm/mm/dma-mapping.c:41 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:225 mask ] [225])
                        (reg:SI 3 r3 [orig:226 mask+4 ] [226]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 36 35 37 5 arch/arm/mm/dma-mapping.c:41 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 37 36 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 40 37 41 6 arch/arm/mm/dma-mapping.c:42 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x115c6b80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x115c6b80>)
        (nil)))

(call_insn 41 40 42 6 arch/arm/mm/dma-mapping.c:42 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dev_warn") [flags 0x41] <function_decl 0x11022280 dev_warn>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 42 41 299 6 arch/arm/mm/dma-mapping.c:325 (set (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
        (reg/v:SI 5 r5 [orig:152 size ] [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 299 42 300 6 (set (pc)
        (label_ref 257)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 37)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  37 [100.0%] 

(barrier 300 299 45)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [71.0%] 
(code_label 45 300 46 7 155 "" [1 uses])

(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 47 46 48 7 NOTE_INSN_DELETED)

(note 48 47 49 7 NOTE_INSN_DELETED)

(insn 49 48 50 7 arch/arm/mm/dma-mapping.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:225 mask ] [225])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 50 49 51 7 arch/arm/mm/dma-mapping.c:46 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  8 [29.0%]  (fallthru)
;; Succ edge  9 [71.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  7 [29.0%]  (fallthru)
(note 51 50 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 56 51 53 8 arch/arm/mm/dma-mapping.c:47 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x111f0060>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x111f0060>)
        (nil)))

(insn 53 56 54 8 arch/arm/mm/dma-mapping.c:47 (set (reg:DI 6 r6 [174])
        (const_int 4294967295 [0xffffffff])) 163 {*arm_movdi} (expr_list:REG_EQUIV (const_int 4294967295 [0xffffffff])
        (nil)))

(insn 54 53 58 8 arch/arm/mm/dma-mapping.c:47 (set (mem:DI (reg/f:SI 13 sp) [0 S8 A64])
        (reg:DI 6 r6 [174])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4294967295 [0xffffffff])
        (nil)))

(call_insn 58 54 59 8 arch/arm/mm/dma-mapping.c:47 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dev_warn") [flags 0x41] <function_decl 0x11022280 dev_warn>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 59 58 301 8 arch/arm/mm/dma-mapping.c:325 (set (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
        (reg/v:SI 5 r5 [orig:152 size ] [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 301 59 302 8 (set (pc)
        (label_ref 257)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 37)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  37 [100.0%] 

(barrier 302 301 62)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [71.0%] 
(code_label 62 302 63 9 157 "" [1 uses])

(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 64 63 65 9 arch/arm/mm/dma-mapping.c:80 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:226 mask+4 ] [226])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 65 64 283 9 arch/arm/mm/dma-mapping.c:80 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 9 -> ( 12 10)
;; lr  out 	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [50.0%] 
;; Succ edge  10 [50.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  9 [50.0%]  (fallthru)
(note 283 65 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 68 283 69 10 arch/arm/mm/dma-mapping.c:80 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:225 mask ] [225])
            (const_int -2 [0xfffffffffffffffe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 69 68 284 10 arch/arm/mm/dma-mapping.c:80 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  12 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  10 [50.0%]  (fallthru)
(note 284 69 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 76 284 303 11 arch/arm/mm/dma-mapping.c:81 (set (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
        (ior:SI (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(jump_insn 303 76 304 11 (set (pc)
        (label_ref 82)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 304 303 79)

;; Start of basic block ( 4 9 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [15.0%] 
;; Pred edge  9 [50.0%] 
;; Pred edge  10 [50.0%] 
(code_label 79 304 80 12 154 "" [3 uses])

(note 80 79 81 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 81 80 82 12 arch/arm/mm/dma-mapping.c:81 (set (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
        (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 82 81 83 13 159 "" [1 uses])

(note 83 82 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 91 83 87 13 NOTE_INSN_DELETED)

(insn 87 91 88 13 include/linux/gfp.h:300 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:153 order ] [153])) 167 {*arm_movsi_insn} (nil))

(insn 88 87 89 13 include/linux/gfp.h:300 (set (reg:SI 2 r2)
        (const:SI (plus:SI (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)
                (const_int 2304 [0x900])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)
                (const_int 2304 [0x900])))
        (nil)))

(insn 89 88 90 13 include/linux/gfp.h:300 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 90 89 92 13 include/linux/gfp.h:300 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__alloc_pages_nodemask") [flags 0x41] <function_decl 0x10cd6180 __alloc_pages_nodemask>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 92 90 93 13 arch/arm/mm/dma-mapping.c:84 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 5 r5 [orig:157 page ] [157])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 93 92 94 13 arch/arm/mm/dma-mapping.c:84 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 254)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 13 -> ( 36 14)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  36 [30.2%] 
;; Succ edge  14 [69.8%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 6 [r6] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  13 [69.8%]  (fallthru)
(note 94 93 99 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 99 94 102 14 NOTE_INSN_DELETED)

(note 102 99 96 14 NOTE_INSN_DELETED)

(insn 96 102 97 14 arch/arm/mm/dma-mapping.c:90 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:153 order ] [153])) 167 {*arm_movsi_insn} (nil))

(call_insn 97 96 98 14 arch/arm/mm/dma-mapping.c:90 (parallel [
            (call (mem:SI (symbol_ref:SI ("split_page") [flags 0x41] <function_decl 0x10f23500 split_page>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 98 97 100 14 arch/arm/mm/dma-mapping.c:91 (set (reg:SI 3 r3 [176])
        (lshiftrt:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 100 98 379 14 arch/arm/mm/dma-mapping.c:91 (set (reg:SI 3 r3)
        (plus:SI (mult:SI (reg:SI 3 r3 [176])
                (const_int 32 [0x20]))
            (reg/v/f:SI 5 r5 [orig:157 page ] [157]))) 270 {*arith_shiftsi} (nil))

(insn 379 100 330 14 arch/arm/mm/dma-mapping.c:91 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-8 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 330 379 103 14 arch/arm/mm/dma-mapping.c:91 (set (reg:SI 3 r3 [179])
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 32 [0x20])
        (nil)))

(insn 103 330 104 14 arch/arm/mm/dma-mapping.c:91 (set (reg/v/f:SI 6 r6 [orig:149 e ] [149])
        (plus:SI (ashift:SI (reg:SI 3 r3 [179])
                (reg/v:SI 6 r6 [orig:153 order ] [153]))
            (reg/v/f:SI 5 r5 [orig:157 page ] [157]))) 270 {*arith_shiftsi} (nil))

(insn 104 103 305 14 arch/arm/mm/dma-mapping.c:91 (set (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-8 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 305 104 306 14 (set (pc)
        (label_ref 112)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  16 [100.0%] 

(barrier 306 305 114)

;; Start of basic block ( 16) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  16 [91.0%] 
(code_label 114 306 107 15 162 "" [1 uses])

(note 107 114 108 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 108 107 297 15 arch/arm/mm/dma-mapping.c:92 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 297 108 110 15 arch/arm/mm/dma-mapping.c:92 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 110 297 111 15 arch/arm/mm/dma-mapping.c:92 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10cd6800 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 111 110 112 15 arch/arm/mm/dma-mapping.c:91 discrim 2 (set (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
        (plus:SI (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))
;; End of basic block 15 -> ( 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru,dfs_back)
;; Pred edge  14 [100.0%] 
(code_label 112 111 113 16 161 "" [1 uses])

(note 113 112 115 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 115 113 116 16 arch/arm/mm/dma-mapping.c:91 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
            (reg/v/f:SI 6 r6 [orig:149 e ] [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 116 115 117 16 arch/arm/mm/dma-mapping.c:91 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 16 -> ( 15 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  15 [91.0%] 
;; Succ edge  17 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  16 [9.0%]  (fallthru,loop_exit)
(note 117 116 118 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 17 arch/arm/mm/dma-mapping.c:98 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))

(call_insn 119 118 120 17 arch/arm/mm/dma-mapping.c:98 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("page_address") [flags 0x41] <function_decl 0x10f7b880 page_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 120 119 121 17 arch/arm/mm/dma-mapping.c:98 (set (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 121 120 122 17 arch/arm/mm/dma-mapping.c:99 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 122 121 123 17 arch/arm/mm/dma-mapping.c:99 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  18 [29.0%]  (fallthru)
;; Succ edge  19 [71.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  17 [29.0%]  (fallthru)
(note 123 122 125 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 125 123 126 18 arch/arm/mm/dma-mapping.c:99 discrim 1 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:138 size.959 ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn 126 125 127 18 arch/arm/mm/dma-mapping.c:99 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 18 -> ( 19)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 17 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  17 [71.0%] 
;; Pred edge  18 [100.0%]  (fallthru)
(code_label 127 126 128 19 163 "" [1 uses])

(note 128 127 130 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 130 128 131 19 NOTE_INSN_DELETED)

(note 131 130 132 19 NOTE_INSN_DELETED)

(insn 132 131 133 19 arch/arm/mm/dma-mapping.c:100 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 133 132 329 19 arch/arm/mm/dma-mapping.c:100 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
            (reg/v:SI 4 r4 [orig:138 size.959 ] [138]))) 4 {*arm_addsi3} (nil))

(insn 329 133 134 19 arch/arm/mm/dma-mapping.c:100 (set (reg/f:SI 3 r3 [180])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(call_insn 134 329 135 19 arch/arm/mm/dma-mapping.c:100 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [180])
                            (const_int 36 [0x24])) [0 cpu_cache.dma_flush_range+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 135 134 136 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (reg/f:SI 3 r3 [183])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(insn 136 135 137 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (reg/f:SI 3 r3 [orig:155 D.25331 ] [155])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [183])
                (const_int 8 [0x8])) [0 outer_cache.flush_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
                    (const_int 8 [0x8]))) [0 outer_cache.flush_range+0 S4 A32])
        (nil)))

(insn 137 136 138 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:155 D.25331 ] [155])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 138 137 139 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 262)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
        (nil)))
;; End of basic block 19 -> ( 20 38)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  20 [69.8%]  (fallthru)
;; Succ edge  38 [30.2%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  19 [69.8%]  (fallthru)
(note 139 138 141 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 141 139 143 20 NOTE_INSN_DELETED)

(note 143 141 142 20 NOTE_INSN_DELETED)

(insn 142 143 144 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (set (reg:SI 1 r1 [185])
        (plus:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 144 142 145 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 145 144 146 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
            (reg:SI 1 r1 [185]))) 4 {*arm_addsi3} (nil))

(call_insn 146 145 307 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:155 D.25331 ] [155]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 307 146 308 20 (set (pc)
        (label_ref 262)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 38)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  38 [100.0%] 

(barrier 308 307 264)

;; Start of basic block ( 39) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  39 [100.0%] 
(code_label 264 308 149 21 171 "" [1 uses])

(note 149 264 154 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 154 149 153 21 arch/arm/mm/dma-mapping.c:202 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 36 [0x24])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 36 [0x24])))
        (nil)))

(insn 153 154 155 21 arch/arm/mm/dma-mapping.c:202 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x1150bec0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x1150bec0>)
        (nil)))

(call_insn 155 153 156 21 arch/arm/mm/dma-mapping.c:202 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(call_insn 156 155 309 21 arch/arm/mm/dma-mapping.c:203 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 309 156 310 21 (set (pc)
        (label_ref 298)) 242 {*arm_jump} (nil))
;; End of basic block 21 -> ( 35)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  35 [100.0%] 

(barrier 310 309 315)

;; Start of basic block ( 38) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 10 [sl] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  38 [100.0%] 
(code_label 315 310 159 22 177 "" [1 uses])

(note 159 315 165 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 165 159 172 22 NOTE_INSN_DELETED)

(note 172 165 160 22 NOTE_INSN_DELETED)

(insn 160 172 161 22 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 8 r8 [orig:145 ret ] [145])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 8 r8 [orig:154 D.25334 ] [154])
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1265521)) -1 (nil))

(insn 161 160 163 22 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:269 (set (reg/v:SI 8 r8 [orig:135 bit.962 ] [135])
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 8 r8 [orig:145 ret ] [145]))) 28 {*arm_subsi3_insn} (nil))

(insn 163 161 166 22 arch/arm/mm/dma-mapping.c:221 (parallel [
            (set (reg:SI 8 r8 [191])
                (smin:SI (reg/v:SI 8 r8 [orig:135 bit.962 ] [135])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 24 cc))
        ]) 105 {*arm_smin_insn} (nil))

(insn 166 163 328 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 3 r3 [194])
        (and:SI (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn 328 166 168 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 1 r1 [193])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 168 328 167 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 1 r1)
        (ashift:SI (reg:SI 1 r1 [193])
            (reg:SI 8 r8 [191]))) 117 {*arm_shiftsi3} (nil))

(insn 167 168 169 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 169 167 171 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:138 size.959 ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn 171 169 173 22 arch/arm/mm/dma-mapping.c:221 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arm_vmregion_alloc") [flags 0x41] <function_decl 0x11440c00 arm_vmregion_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 173 171 174 22 arch/arm/mm/dma-mapping.c:223 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 10 sl [orig:141 c ] [141])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 174 173 175 22 arch/arm/mm/dma-mapping.c:223 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 298)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 22 -> ( 23 35)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]


;; Succ edge  23 [85.0%]  (fallthru)
;; Succ edge  35 [15.0%] 

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  kill	

;; Pred edge  22 [85.0%]  (fallthru)
(note 175 174 179 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 179 175 180 23 NOTE_INSN_DELETED)

(note 180 179 183 23 NOTE_INSN_DELETED)

(note 183 180 176 23 NOTE_INSN_DELETED)

(insn 176 183 216 23 arch/arm/mm/dma-mapping.c:225 (set (reg:SI 8 r8 [orig:195 <variable>.vm_start ] [195])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 10 sl [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 10 sl [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn 216 176 200 23 arch/arm/mm/dma-mapping.c:240 (set (reg/f:SI 12 ip [222])
        (reg/f:SI 6 r6 [218])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 200 216 187 23 arch/arm/mm/dma-mapping.c:234 (set (reg/f:SI 3 r3 [221])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn 187 200 177 23 arch/arm/mm/dma-mapping.c:229 (set (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 177 187 181 23 arch/arm/mm/dma-mapping.c:225 (set (reg:SI 8 r8 [orig:140 D.25379 ] [140])
        (plus:SI (reg:SI 8 r8 [orig:195 <variable>.vm_start ] [195])
            (const_int 16777216 [0x1000000]))) 4 {*arm_addsi3} (nil))

(insn 181 177 178 23 arch/arm/mm/dma-mapping.c:226 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (zero_extract:SI (reg:SI 8 r8 [orig:140 D.25379 ] [140])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (nil))

(insn 178 181 184 23 arch/arm/mm/dma-mapping.c:225 (set (reg/v:SI 8 r8 [orig:143 idx ] [143])
        (lshiftrt:SI (reg:SI 8 r8 [orig:140 D.25379 ] [140])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn 184 178 186 23 arch/arm/mm/dma-mapping.c:228 (set (reg/f:SI 6 r6 [200])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 6 r6 [218])) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
        (nil)))

(insn 186 184 185 23 arch/arm/mm/dma-mapping.c:229 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 10 sl [orig:141 c ] [141])
                (const_int 16 [0x10])) [0 <variable>.vm_pages+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 185 186 357 23 arch/arm/mm/dma-mapping.c:228 (set (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
        (plus:SI (mult:SI (reg/v:SI 7 r7 [orig:144 off ] [144])
                (const_int 4 [0x4]))
            (reg/f:SI 6 r6 [200]))) 270 {*arith_shiftsi} (nil))

(insn 357 185 361 23 arch/arm/mm/dma-mapping.c:228 (set (reg/v/f:SI 9 r9 [orig:141 c ] [141])
        (reg/v/f:SI 10 sl [orig:141 c ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 361 357 226 23 arch/arm/mm/dma-mapping.c:228 (set (reg/v/f:SI 10 sl [orig:157 page ] [157])
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 23 -> ( 24)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 23 29) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  29 [100.0%]  (dfs_back)
(code_label 226 361 188 24 169 "" [1 uses])

(note 188 226 189 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 189 188 190 24 arch/arm/mm/dma-mapping.c:232 (set (reg:SI 5 r5 [201])
        (mem:SI (reg/v/f:SI 6 r6 [orig:142 pte ] [142]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 190 189 191 24 arch/arm/mm/dma-mapping.c:232 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [201])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 191 190 192 24 arch/arm/mm/dma-mapping.c:232 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  25 [0.0%]  (fallthru,loop_exit)
;; Succ edge  26 [100.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  24 [0.0%]  (fallthru,loop_exit)
(note 192 191 194 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 194 192 195 25 arch/arm/mm/dma-mapping.c:232 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 195 194 196 25 arch/arm/mm/dma-mapping.c:232 discrim 1 (set (reg:SI 1 r1)
        (const_int 232 [0xe8])) 167 {*arm_movsi_insn} (nil))

(call_insn 196 195 197 25 arch/arm/mm/dma-mapping.c:232 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 25 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 197 196 198)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 11 [fp] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  24 [100.0%] 
(code_label 198 197 199 26 166 "" [1 uses])

(note 199 198 204 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 204 199 205 26 NOTE_INSN_DELETED)

(note 205 204 201 26 NOTE_INSN_DELETED)

(insn 201 205 211 26 arch/arm/mm/dma-mapping.c:234 (set (reg/f:SI 1 r1 [orig:205 mem_map ] [205])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [221]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [221]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 211 201 206 26 arch/arm/mm/dma-mapping.c:237 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (plus:SI (reg/v:SI 7 r7 [orig:144 off ] [144])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 206 211 208 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:142 pte ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 208 206 202 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 2 r2)
        (reg:SI 5 r5 [201])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 202 208 210 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 1 r1 [204])
        (minus:SI (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
            (reg/f:SI 1 r1 [orig:205 mem_map ] [205]))) 28 {*arm_subsi3_insn} (nil))

(insn 210 202 203 26 arch/arm/mm/dma-mapping.c:236 (set (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
        (plus:SI (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 203 210 380 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 1 r1 [207])
        (ashiftrt:SI (reg:SI 1 r1 [204])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 1 r1 [204])
            (const_int 32 [0x20]))
        (nil)))

(insn 380 203 207 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 14 lr)
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 prot+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 207 380 374 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 1 r1)
        (ior:SI (ashift:SI (reg:SI 1 r1 [207])
                (const_int 12 [0xc]))
            (reg:SI 14 lr))) 270 {*arith_shiftsi} (nil))

(insn 374 207 375 26 arch/arm/mm/dma-mapping.c:234 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 375 374 209 26 arch/arm/mm/dma-mapping.c:234 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (nil))

(call_insn 209 375 212 26 arch/arm/mm/dma-mapping.c:234 (parallel [
            (call (mem:SI (symbol_ref:SI ("cpu_v7_set_pte_ext") [flags 0x41] <function_decl 0x10e63d00 cpu_v7_set_pte_ext>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 212 209 376 26 arch/arm/mm/dma-mapping.c:238 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:144 off ] [144])
            (const_int 512 [0x200]))) 219 {*arm_cmpsi_insn} (nil))

(insn 376 212 377 26 arch/arm/mm/dma-mapping.c:238 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 377 376 213 26 arch/arm/mm/dma-mapping.c:238 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 213 377 214 26 arch/arm/mm/dma-mapping.c:238 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 219)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 26 -> ( 27 28)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  27 [50.0%]  (fallthru)
;; Succ edge  28 [50.0%] 

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 8 [r8] 12 [ip] 13 [sp]
;; lr  def 	 6 [r6] 7 [r7] 8 [r8]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7] 8 [r8]
;; live  kill	

;; Pred edge  26 [50.0%]  (fallthru)
(note 214 213 215 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 215 214 296 27 arch/arm/mm/dma-mapping.c:240 (set (reg/v:SI 8 r8 [orig:143 idx ] [143])
        (plus:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 296 215 217 27 arch/arm/mm/dma-mapping.c:239 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (reg:SI 5 r5 [201])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 217 296 219 27 arch/arm/mm/dma-mapping.c:240 (set (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 12 ip [222])) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
        (nil)))
;; End of basic block 27 -> ( 28)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 26 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  26 [50.0%] 
;; Pred edge  27 [100.0%]  (fallthru)
(code_label 219 217 220 28 167 "" [1 uses])

(note 220 219 221 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 221 220 222 28 NOTE_INSN_DELETED)

(insn 222 221 223 28 arch/arm/mm/dma-mapping.c:242 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
                        (const_int -4096 [0xfffffffffffff000]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
                (plus:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
                    (const_int -4096 [0xfffffffffffff000])))
        ]) 6 {*addsi3_compare0} (nil))

(jump_insn 223 222 224 28 arch/arm/mm/dma-mapping.c:242 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 229)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1400 [0x578])
        (nil)))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  29 [86.0%]  (fallthru)
;; Succ edge  30 [14.0%]  (loop_exit)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 11 [fp]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 11 [fp]
;; live  kill	

;; Pred edge  28 [86.0%]  (fallthru)
(note 224 223 225 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 225 224 311 29 arch/arm/mm/dma-mapping.c:235 (set (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
        (plus:SI (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(jump_insn 311 225 312 29 (set (pc)
        (label_ref 226)) 242 {*arm_jump} (nil))
;; End of basic block 29 -> ( 24)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  24 [100.0%]  (dfs_back)

(barrier 312 311 229)

;; Start of basic block ( 28) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 10 [sl] 24 [cc]
;; live  in  	 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  28 [14.0%]  (loop_exit)
(code_label 229 312 230 30 168 "" [1 uses])

(note 230 229 362 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 362 230 363 30 (set (reg/v/f:SI 5 r5 [orig:157 page ] [157])
        (reg/v/f:SI 10 sl [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 363 362 231 30 (set (reg/v/f:SI 10 sl [orig:141 c ] [141])
        (reg/v/f:SI 9 r9 [orig:141 c ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 231 363 232 30 arch/arm/mm/dma-mapping.c:244 (parallel [
            (asm_operands/v ("dsb") ("") 0 []
                 [] 8158962)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 232 231 233 30 arch/arm/mm/dma-mapping.c:246 (set (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 10 sl [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 233 232 234 30 arch/arm/mm/dma-mapping.c:332 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 234 233 235 30 arch/arm/mm/dma-mapping.c:332 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 298)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 767 [0x2ff])
        (nil)))
;; End of basic block 30 -> ( 31 35)
;; lr  out 	 0 [r0] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  31 [92.3%]  (fallthru)
;; Succ edge  35 [7.7%] 

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 5 [r5]
;; live  in  	 0 [r0] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  30 [92.3%]  (fallthru)
(note 235 234 236 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 236 235 237 31 arch/arm/mm/dma-mapping.c:333 (set (reg/f:SI 3 r3 [211])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn 237 236 238 31 arch/arm/mm/dma-mapping.c:333 (set (reg/f:SI 3 r3 [orig:213 mem_map ] [213])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [211]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 238 237 239 31 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 5 r5 [212])
        (minus:SI (reg/v/f:SI 5 r5 [orig:157 page ] [157])
            (reg/f:SI 3 r3 [orig:213 mem_map ] [213]))) 28 {*arm_subsi3_insn} (nil))

(insn 239 238 240 31 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 5 r5 [215])
        (ashiftrt:SI (reg:SI 5 r5 [212])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 5 r5 [212])
            (const_int 32 [0x20]))
        (nil)))

(insn 240 239 381 31 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 5 r5 [216])
        (ashift:SI (reg:SI 5 r5 [215])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 20 [0x14])) [0 %sfp+-4 S4 A32]) [0 S4 A32])
        (nil)))

(insn 381 240 241 31 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 241 381 313 31 arch/arm/mm/dma-mapping.c:333 (set (mem:SI (reg:SI 1 r1) [0 S4 A32])
        (reg:SI 5 r5 [216])) 167 {*arm_movsi_insn} (nil))

(jump_insn 313 241 314 31 (set (pc)
        (label_ref 257)) 242 {*arm_jump} (nil))
;; End of basic block 31 -> ( 37)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  37 [100.0%] 

(barrier 314 313 251)

;; Start of basic block ( 35) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  35 [91.0%] 
(code_label 251 314 244 32 170 "" [1 uses])

(note 244 251 245 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 245 244 293 32 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 293 245 247 32 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 247 293 248 32 arch/arm/mm/dma-mapping.c:114 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10cd6800 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 248 247 298 32 arch/arm/mm/dma-mapping.c:115 (set (reg/v/f:SI 5 r5 [orig:157 page ] [157])
        (plus:SI (reg/v/f:SI 5 r5 [orig:157 page ] [157])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))
;; End of basic block 32 -> ( 35)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  35 [100.0%]  (fallthru)

;; Start of basic block ( 22 21 32 30) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  22 [15.0%] 
;; Pred edge  21 [100.0%] 
;; Pred edge  32 [100.0%]  (fallthru)
;; Pred edge  30 [7.7%] 
(code_label 298 248 290 35 176 "" [3 uses])

(note 290 298 382 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 382 290 252 35 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-8 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 252 382 253 35 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 5 r5 [orig:157 page ] [157])
            (reg:SI 3 r3))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 253 252 254 35 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 251)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 35 -> ( 32 36)
;; lr  out 	 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  32 [91.0%] 
;; Succ edge  36 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 13 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  13 [30.2%] 
;; Pred edge  35 [9.0%]  (fallthru,loop_exit)
(code_label 254 253 255 36 160 "" [1 uses])

(note 255 254 256 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 256 255 257 36 arch/arm/mm/dma-mapping.c:325 (set (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 36 -> ( 37)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  37 [100.0%]  (fallthru)

;; Start of basic block ( 36 8 6 31) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  36 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  31 [100.0%] 
(code_label 257 256 258 37 156 "" [3 uses])

(note 258 257 280 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 280 258 262 37 arch/arm/mm/dma-mapping.c:338 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 37 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 19 20) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  19 [30.2%] 
;; Pred edge  20 [100.0%] 
(code_label 262 280 263 38 164 "" [2 uses])

(note 263 262 265 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 265 263 266 38 arch/arm/mm/dma-mapping.c:201 (set (reg/f:SI 6 r6 [218])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 266 265 267 38 arch/arm/mm/dma-mapping.c:201 (set (reg/f:SI 3 r3 [orig:219 consistent_pte ] [219])
        (mem/s/f/j:SI (reg/f:SI 6 r6 [218]) [0 consistent_pte+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (reg/f:SI 6 r6 [218]) [0 consistent_pte+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 consistent_pte+0 S4 A32])
            (nil))))

(insn 267 266 268 38 arch/arm/mm/dma-mapping.c:201 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:219 consistent_pte ] [219])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 268 267 316 38 arch/arm/mm/dma-mapping.c:201 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 315)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 38 -> ( 39 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  39 [0.0%]  (fallthru)
;; Succ edge  22 [100.0%] 

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 5 [r5] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  38 [0.0%]  (fallthru)
(note 316 268 317 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(jump_insn 317 316 318 39 (set (pc)
        (label_ref 264)) 242 {*arm_jump} (nil))
;; End of basic block 39 -> ( 21)
;; lr  out 	 5 [r5] 13 [sp]
;; live  out 	 5 [r5] 13 [sp]


;; Succ edge  21 [100.0%] 

(barrier 318 317 373)

(note 373 318 0 NOTE_INSN_DELETED)


;; Function dma_alloc_writecombine (dma_alloc_writecombine)[0:1279]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS

  a0(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 30(l0): point = 0
   Insn 18(l0): point = 2
   Insn 13(l0): point = 4
   Insn 12(l0): point = 6
   Insn 11(l0): point = 8
   Insn 10(l0): point = 10
   Insn 9(l0): point = 12
 a0(r142): [5..6]
 a1(r140): [7..8]
 a2(r141): [9..10]
 a3(r139): [11..12]
Compressing live ranges: from 15 to 8 - 53%
Ranges after the compression:
 a0(r142): [0..1]
 a1(r140): [2..3]
 a2(r141): [4..5]
 a3(r139): [6..7]
+++Allocating 0 bytes for conflict table (uncompressed size 32)
;; a0(r142,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r140,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a2(r141,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r139,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3

  cp0:a1(r140)<->a2(r141)@125:shuffle
  cp1:a0(r142)<->a1(r140)@125:shuffle
  regions=1, blocks=3, points=8
    allocnos=4, copies=2, conflicts=0, ranges=4

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r142 1r140 2r141 3r139
    modified regnos: 139 140 141 142
    border:
    Pressure: GENERAL_REGS=5
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
      Pushing a3(r139,l0)
      Pushing a2(r141,l0)
      Pushing a1(r140,l0)
      Pushing a0(r142,l0)
      Popping a0(r142,l0)  -- assign reg 12
      Popping a1(r140,l0)  -- assign reg 12
      Popping a2(r141,l0)  -- assign reg 12
      Popping a3(r139,l0)  -- assign reg 12
Disposition:
    3:r139 l0    12    1:r140 l0    12    2:r141 l0    12    0:r142 l0    12
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=9, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139
insn=10, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 139, 141
insn=11, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140, 141
insn=12, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 140, 142
insn=13, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 142
insn=18, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=30, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 139: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 13 (nil))
changing reg in insn 9
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 10
changing reg in insn 11
changing reg in insn 12
changing reg in insn 13
Spilling for insn 13.

Reloads for insn # 13
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


dma_alloc_writecombine

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r12={6d,4u} r13={1d,4u,1d} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 144{128d,15u,1e} in 7{6 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/mm/dma-mapping.c:364 (set (reg/f:SI 12 ip [139])
        (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)
        (nil)))

(insn 10 9 11 2 arch/arm/mm/dma-mapping.c:364 (set (reg:SI 12 ip [orig:141 pgprot_kernel ] [141])
        (mem/c/i:SI (reg/f:SI 12 ip [139]) [0 pgprot_kernel+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 12 2 arch/arm/mm/dma-mapping.c:364 (set (reg:SI 12 ip [140])
        (and:SI (reg:SI 12 ip [orig:141 pgprot_kernel ] [141])
            (const_int -61 [0xffffffffffffffc3]))) 67 {*arm_andsi3_insn} (nil))

(insn 12 11 13 2 arch/arm/mm/dma-mapping.c:364 (set (reg:SI 12 ip [142])
        (ior:SI (reg:SI 12 ip [140])
            (const_int 4 [0x4]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (nil)))

(insn 13 12 18 2 arch/arm/mm/dma-mapping.c:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [142])) 167 {*arm_movsi_insn} (nil))

(call_insn 18 13 30 2 arch/arm/mm/dma-mapping.c:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__dma_alloc") [flags 0x3] <function_decl 0x1145e100 __dma_alloc>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 30 18 34 2 arch/arm/mm/dma-mapping.c:366 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 34 30 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)


;; Function dma_alloc_coherent (dma_alloc_coherent)[0:1278]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 54.
verify found no changes in insn with uid = 54.
deleting insn with uid = 24.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 9 (  1.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)

Pass 0 for finding allocno costs

    a1 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 47(l0): point = 0
   Insn 41(l0): point = 2
   Insn 34(l0): point = 5
   Insn 33(l0): point = 7
   Insn 28(l0): point = 9
   Insn 27(l0): point = 11
   Insn 26(l0): point = 13
   Insn 25(l0): point = 15
   Insn 54(l0): point = 17
   Insn 32(l0): point = 19
   Insn 31(l0): point = 21
   Insn 30(l0): point = 23
   Insn 29(l0): point = 25
   Insn 51(l0): point = 28
   Insn 19(l0): point = 30
   Insn 17(l0): point = 33
   Insn 16(l0): point = 35
   Insn 14(l0): point = 37
   Insn 4(l0): point = 39
   Insn 3(l0): point = 41
   Insn 2(l0): point = 43
   Insn 13(l0): point = 45
   Insn 5(l0): point = 47
 a0(r133): [28..30] [3..5]
 a1(r144): [10..11]
 a2(r142): [12..13]
 a3(r143): [14..15]
 a4(r141): [16..17]
 a5(r139): [33..47] [20..27]
 a6(r138): [33..39] [22..27]
 a7(r137): [33..41] [24..27]
 a8(r136): [33..43] [26..27]
Compressing live ranges: from 50 to 22 - 44%
Ranges after the compression:
 a0(r133): [15..16] [0..1]
 a1(r144): [2..3]
 a2(r142): [4..5]
 a3(r143): [6..7]
 a4(r141): [8..9]
 a5(r139): [17..21] [10..14]
 a6(r138): [17..18] [11..14]
 a7(r137): [17..19] [12..14]
 a8(r136): [17..20] [13..14]
+++Allocating 72 bytes for conflict table (uncompressed size 72)
;; a0(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r144,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a2(r142,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r143,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a4(r141,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a5(r139,l0) conflicts: a6(r138,l0) a7(r137,l0) a8(r136,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r138,l0) conflicts: a5(r139,l0) a7(r137,l0) a8(r136,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r137,l0) conflicts: a5(r139,l0) a6(r138,l0) a8(r136,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r136,l0) conflicts: a5(r139,l0) a6(r138,l0) a7(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14

  cp0:a2(r142)<->a3(r143)@125:shuffle
  cp1:a1(r144)<->a2(r142)@125:shuffle
  regions=1, blocks=6, points=22
    allocnos=9, copies=2, conflicts=0, ranges=14

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r133 1r144 2r142 3r143 4r141 5r139 6r138 7r137 8r136
    modified regnos: 133 136 137 138 139 141 142 143 144
    border:
    Pressure: GENERAL_REGS=9
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 4 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
      Pushing a0(r133,l0)
      Pushing a4(r141,l0)
      Pushing a3(r143,l0)
      Pushing a2(r142,l0)
      Pushing a1(r144,l0)
      Pushing a8(r136,l0)
      Pushing a7(r137,l0)
      Pushing a6(r138,l0)
      Pushing a5(r139,l0)
      Popping a5(r139,l0)  -- assign reg 4
      Popping a6(r138,l0)  -- assign reg 5
      Popping a7(r137,l0)  -- assign reg 6
      Popping a8(r136,l0)  -- assign reg 7
      Popping a1(r144,l0)  -- assign reg 12
      Popping a2(r142,l0)  -- assign reg 12
      Popping a3(r143,l0)  -- assign reg 12
      Popping a4(r141,l0)  -- assign reg 12
      Popping a0(r133,l0)  -- assign reg 0
Disposition:
    0:r133 l0     0    8:r136 l0     7    7:r137 l0     6    6:r138 l0     5
    5:r139 l0     4    4:r141 l0    12    2:r142 l0    12    3:r143 l0    12
    1:r144 l0    12
New iteration of spill/restore move
+++Costs: overall -8000, reg -8000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 139
insn=13, live_throughout: 0, 1, 2, 13, 139, dead_or_set: 3
insn=2, live_throughout: 0, 1, 2, 3, 13, 139, dead_or_set: 136
insn=3, live_throughout: 0, 1, 2, 3, 13, 136, 139, dead_or_set: 137
insn=4, live_throughout: 0, 1, 2, 3, 13, 136, 137, 139, dead_or_set: 138
insn=14, live_throughout: 13, 136, 137, 138, 139, dead_or_set: 0, 1, 2, 3, 14
insn=16, live_throughout: 13, 14, 136, 137, 138, 139, dead_or_set: 0
insn=17, live_throughout: 13, 14, 136, 137, 138, 139, dead_or_set: 
insn=19, live_throughout: 13, 14, dead_or_set: 133
insn=51, live_throughout: 13, 14, 133, dead_or_set: 
insn=22, live_throughout: 13, 136, 137, 138, 139, dead_or_set: 
insn=29, live_throughout: 13, 137, 138, 139, dead_or_set: 0, 136
insn=30, live_throughout: 0, 13, 138, 139, dead_or_set: 1, 137
insn=31, live_throughout: 0, 1, 13, 139, dead_or_set: 2, 138
insn=32, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 139
insn=54, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 141
insn=25, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 141, 143
insn=26, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 142, 143
insn=27, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 142, 144
insn=28, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 144
insn=33, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=34, live_throughout: 13, 14, dead_or_set: 0, 133
insn=35, live_throughout: 13, 14, 133, dead_or_set: 
insn=41, live_throughout: 13, 14, dead_or_set: 0, 133
insn=47, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 141: (insn_list:REG_DEP_TRUE 54 (nil))
init_insns for 144: (insn_list:REG_DEP_TRUE 28 (nil))
changing reg in insn 34
changing reg in insn 19
changing reg in insn 41
changing reg in insn 2
changing reg in insn 29
changing reg in insn 3
changing reg in insn 30
changing reg in insn 4
changing reg in insn 31
changing reg in insn 5
changing reg in insn 32
changing reg in insn 54
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 25
changing reg in insn 26
changing reg in insn 27
changing reg in insn 28
Spilling for insn 28.

Reloads for insn # 28
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
deleting insn with uid = 34.
deleting insn with uid = 41.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 14.
verify found no changes in insn with uid = 33.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 9 (  1.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


dma_alloc_coherent

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,6u} r1={4d,3u} r2={4d,3u} r3={5d,3u} r4={1d,1u} r5={1d,1u} r6={1d,1u} r7={1d,1u} r12={7d,4u} r13={1d,10u,1d} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 292{256d,35u,1e} in 21{19 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 6 15 2 NOTE_INSN_DELETED)

(note 15 9 5 2 NOTE_INSN_DELETED)

(insn 5 15 13 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v:SI 4 r4 [orig:139 gfp ] [139])
        (reg:SI 3 r3 [ gfp ])) 167 {*arm_movsi_insn} (nil))

(insn 13 5 2 2 arch/arm/mm/dma-mapping.c:349 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn 2 13 3 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v/f:SI 7 r7 [orig:136 dev ] [136])
        (reg:SI 0 r0 [ dev ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 4 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v:SI 6 r6 [orig:137 size ] [137])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 4 3 14 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v/f:SI 5 r5 [orig:138 handle ] [138])
        (reg:SI 2 r2 [ handle ])) 167 {*arm_movsi_insn} (nil))

(call_insn 14 4 16 2 arch/arm/mm/dma-mapping.c:349 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_alloc_from_coherent") [flags 0x41] <function_decl 0x11060380 dma_alloc_from_coherent>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 16 14 17 2 arch/arm/mm/dma-mapping.c:349 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 2 arch/arm/mm/dma-mapping.c:349 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3898 [0xf3a])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  4 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 19 18 51 3 arch/arm/mm/dma-mapping.c:350 (set (reg/f:SI 0 r0 [orig:133 D.24543 ] [133])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 memory+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 51 19 52 3 arch/arm/mm/dma-mapping.c:350 (set (pc)
        (label_ref 35)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 52 51 22)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  2 [39.0%] 
(code_label 22 52 23 4 190 "" [1 uses])

(note 23 22 29 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 29 23 30 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:136 dev ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 30 29 31 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:137 size ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 31 30 32 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 2 r2)
        (reg/v/f:SI 5 r5 [orig:138 handle ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 32 31 54 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:139 gfp ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 54 32 25 4 arch/arm/mm/dma-mapping.c:352 (set (reg/f:SI 12 ip [141])
        (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)
        (nil)))

(insn 25 54 26 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 12 ip [orig:143 pgprot_kernel ] [143])
        (mem/c/i:SI (reg/f:SI 12 ip [141]) [0 pgprot_kernel+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>) [0 pgprot_kernel+0 S4 A32])
        (nil)))

(insn 26 25 27 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 12 ip [142])
        (and:SI (reg:SI 12 ip [orig:143 pgprot_kernel ] [143])
            (const_int -573 [0xfffffffffffffdc3]))) 67 {*arm_andsi3_insn} (nil))

(insn 27 26 28 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 12 ip [144])
        (ior:SI (reg:SI 12 ip [142])
            (const_int 516 [0x204]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (nil)))

(insn 28 27 33 4 arch/arm/mm/dma-mapping.c:352 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [144])) 167 {*arm_movsi_insn} (nil))

(call_insn 33 28 35 4 arch/arm/mm/dma-mapping.c:352 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__dma_alloc") [flags 0x3] <function_decl 0x1145e100 __dma_alloc>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 35 33 36 5 191 "" [1 uses])

(note 36 35 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 47 36 53 5 arch/arm/mm/dma-mapping.c:354 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 53 47 55 NOTE_INSN_DELETED)

(note 55 53 0 NOTE_INSN_DELETED)

