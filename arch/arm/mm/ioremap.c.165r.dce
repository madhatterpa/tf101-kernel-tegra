
;; Function __iounmap (__iounmap)[0:1243]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


__iounmap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 13[sp]
;;  ref usage 	r0={3d,2u} r1={2d} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u,1d} r134={1d,1u} r135={1d,1u} 
;;    total ref usage 145{130d,14u,1e} in 5{4 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,3] 1[3,2] 2[5,2] 3[7,2] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 133[127,1] 134[128,1] 135[129,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d2(0){ }d4(1){ }d6(2){ }d8(3){ }d9(11){ }d11(12){ }d12(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d9(bb 0 insn -1) }u1(13){ d12(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 133 134 135
;; live  kill	
;; rd  in  	(10)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(3)
127, 128, 129
;; rd  kill	(3)
127, 128, 129
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(13)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25, 127, 128, 129
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d2(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 6
;;      reg 133 { d127(bb 2 insn 2) }
;;   UD chains for insn luid 2 uid 7
;;      reg 135 { d129(bb 2 insn 6) }
;;   eq_note reg 133 { }
;;   UD chains for insn luid 3 uid 8
;;      reg 134 { d128(bb 2 insn 7) }
;;   UD chains for insn luid 4 uid 9
;;      reg 13 { d12(bb 0 insn -1) }
;;      reg 0 { d1(bb 2 insn 8) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u11(11){ d9(bb 0 insn -1) }u12(13){ d12(bb 0 insn -1) }u13(14){ d13(bb 0 insn -1) }u14(25){ d24(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(13)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25, 127, 128, 129
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(13)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25, 127, 128, 129
;;  UD chains for artificial uses
;;   reg 11 { d9(bb 0 insn -1) }
;;   reg 13 { d12(bb 0 insn -1) }
;;   reg 14 { d13(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 9 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 9:
Processing use of (reg 0 r0) in insn 9:
  Adding insn 8 to worklist
Processing use of (reg 134) in insn 8:
  Adding insn 7 to worklist
Processing use of (reg 135) in insn 7:
  Adding insn 6 to worklist
Processing use of (reg 133 [ io_addr ]) in insn 6:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:


__iounmap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 13[sp]
;;  ref usage 	r0={3d,2u} r1={2d} r2={2d} r3={2d} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r133={1d,1u,1d} r134={1d,1u} r135={1d,1u} 
;;    total ref usage 145{130d,14u,1e} in 5{4 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 10, 11, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,3] 1[3,2] 2[5,2] 3[7,2] 11[9,1] 12[10,2] 13[12,1] 14[13,1] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 133[127,1] 134[128,1] 135[129,1] 
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 133 134 135
;; live  kill	
;; rd  in  	(10)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25
;; rd  gen 	(3)
127, 128, 129
;; rd  kill	(3)
127, 128, 129

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 4 3 2 arch/arm/mm/ioremap.c:293 (set (reg/v/f:SI 133 [ io_addr ])
        (reg:SI 0 r0 [ io_addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ io_addr ])
        (nil)))

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 3 7 2 arch/arm/mm/ioremap.c:318 (set (reg:SI 135)
        (and:SI (reg/v/f:SI 133 [ io_addr ])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v/f:SI 133 [ io_addr ])
        (nil)))

(insn 7 6 8 2 arch/arm/mm/ioremap.c:318 (set (reg:SI 134)
        (and:SI (reg:SI 135)
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 135)
        (expr_list:REG_EQUAL (and:SI (reg/v/f:SI 133 [ io_addr ])
                (const_int -4096 [0xfffffffffffff000]))
            (nil))))

(insn 8 7 9 2 arch/arm/mm/ioremap.c:318 (set (reg:SI 0 r0)
        (reg:SI 134)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 134)
        (nil)))

(call_insn/j 9 8 10 2 arch/arm/mm/ioremap.c:318 (parallel [
            (call (mem:SI (symbol_ref:SI ("vunmap") [flags 0x41] <function_decl 0x10fb8c00 vunmap>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(13)
2, 4, 6, 8, 9, 11, 12, 13, 24, 25, 127, 128, 129


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 10 9 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function __arm_ioremap_pfn_caller (__arm_ioremap_pfn_caller)[0:1239]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 30 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 30 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 30 (  1.9)


__arm_ioremap_pfn_caller

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,13u} r1={11d,4u} r2={10d,3u} r3={9d,2u} r11={1d,15u} r12={8d} r13={1d,22u} r14={8d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={14d,7u} r25={1d,15u} r26={1d,15u,1d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} r133={1d,2u} r134={1d,2u} r135={1d,4u} r136={1d,1u} r137={1d,2u} r139={1d,1u,1d} r140={1d,2u} r141={4d,1u} r143={1d,4u,1d} r144={1d,2u,1d} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} 
;;    total ref usage 1016{878d,134u,4e} in 69{62 regular + 7 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848
0[0,15] 1[15,11] 2[26,10] 3[36,9] 11[45,1] 12[46,8] 13[54,1] 14[55,8] 15[63,7] 16[70,7] 17[77,7] 18[84,7] 19[91,7] 20[98,7] 21[105,7] 22[112,7] 23[119,7] 24[126,14] 25[140,1] 26[141,1] 27[142,7] 28[149,7] 29[156,7] 30[163,7] 31[170,7] 32[177,7] 33[184,7] 34[191,7] 35[198,7] 36[205,7] 37[212,7] 38[219,7] 39[226,7] 40[233,7] 41[240,7] 42[247,7] 43[254,7] 44[261,7] 45[268,7] 46[275,7] 47[282,7] 48[289,7] 49[296,7] 50[303,7] 51[310,7] 52[317,7] 53[324,7] 54[331,7] 55[338,7] 56[345,7] 57[352,7] 58[359,7] 59[366,7] 60[373,7] 61[380,7] 62[387,7] 63[394,7] 64[401,7] 65[408,7] 66[415,7] 67[422,7] 68[429,7] 69[436,7] 70[443,7] 71[450,7] 72[457,7] 73[464,7] 74[471,7] 75[478,7] 76[485,7] 77[492,7] 78[499,7] 79[506,7] 80[513,7] 81[520,7] 82[527,7] 83[534,7] 84[541,7] 85[548,7] 86[555,7] 87[562,7] 88[569,7] 89[576,7] 90[583,7] 91[590,7] 92[597,7] 93[604,7] 94[611,7] 95[618,7] 96[625,7] 97[632,7] 98[639,7] 99[646,7] 100[653,7] 101[660,7] 102[667,7] 103[674,7] 104[681,7] 105[688,7] 106[695,7] 107[702,7] 108[709,7] 109[716,7] 110[723,7] 111[730,7] 112[737,7] 113[744,7] 114[751,7] 115[758,7] 116[765,7] 117[772,7] 118[779,7] 119[786,7] 120[793,7] 121[800,7] 122[807,7] 123[814,7] 124[821,7] 125[828,7] 126[835,7] 127[842,7] 133[849,1] 134[850,1] 135[851,1] 136[852,1] 137[853,1] 139[854,1] 140[855,1] 141[856,4] 143[860,1] 144[861,1] 145[862,1] 146[863,1] 147[864,1] 148[865,1] 149[866,1] 150[867,1] 152[868,1] 153[869,1] 154[870,1] 155[871,1] 156[872,1] 157[873,1] 158[874,1] 159[875,1] 160[876,1] 161[877,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d14(0){ }d25(1){ }d35(2){ }d44(3){ }d45(11){ }d53(12){ }d54(13){ }d62(14){ }d140(25){ }d141(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
14, 25, 35, 44, 45, 53, 54, 62, 140, 141
;; rd  kill	(65)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 140, 141
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
14, 25, 35, 44, 45, 53, 54, 62, 140, 141

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d45(bb 0 insn -1) }u1(13){ d54(bb 0 insn -1) }u2(25){ d140(bb 0 insn -1) }u3(26){ d141(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 143 144 145 146 147 148
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 143 144 145 146 147 148
;; live  kill	
;; rd  in  	(10)
14, 25, 35, 44, 45, 53, 54, 62, 140, 141
;; rd  gen 	(7)
139, 860, 861, 862, 863, 864, 865
;; rd  kill	(20)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 860, 861, 862, 863, 864, 865
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; rd  out 	(17)
14, 25, 35, 44, 45, 53, 54, 62, 139, 140, 141, 860, 861, 862, 863, 864, 865
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 2
;;      reg 0 { d14(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 3
;;      reg 1 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 4
;;      reg 2 { d35(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 5
;;      reg 3 { d44(bb 0 insn -1) }
;;   UD chains for insn luid 4 uid 6
;;      reg 26 { d141(bb 0 insn -1) }
;;   eq_note reg 26 { }
;;   UD chains for insn luid 6 uid 11
;;      reg 143 { d860(bb 2 insn 2) }
;;      reg 148 { d865(bb 2 insn 10) }
;;   eq_note reg 143 { }
;;   UD chains for insn luid 7 uid 12
;;      reg 24 { d139(bb 2 insn 11) }

( 2 )->[3]->( 14 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u14(11){ d45(bb 0 insn -1) }u15(13){ d54(bb 0 insn -1) }u16(25){ d140(bb 0 insn -1) }u17(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 149 150
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; live  gen 	 24 [cc] 149 150
;; live  kill	
;; rd  in  	(17)
14, 25, 35, 44, 45, 53, 54, 62, 139, 140, 141, 860, 861, 862, 863, 864, 865
;; rd  gen 	(3)
138, 866, 867
;; rd  kill	(16)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 866, 867
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; rd  out 	(19)
14, 25, 35, 44, 45, 53, 54, 62, 138, 140, 141, 860, 861, 862, 863, 864, 865, 866, 867
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 14
;;      reg 143 { d860(bb 2 insn 2) }
;;   UD chains for insn luid 1 uid 15
;;      reg 149 { d866(bb 3 insn 14) }
;;   UD chains for insn luid 2 uid 16
;;      reg 150 { d867(bb 3 insn 15) }
;;   UD chains for insn luid 3 uid 17
;;      reg 24 { d138(bb 3 insn 16) }

( 2 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u22(11){ d45(bb 0 insn -1) }u23(13){ d54(bb 0 insn -1) }u24(25){ d140(bb 0 insn -1) }u25(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 145 146 147
;; live  gen 	 0 [r0] 24 [cc] 140
;; live  kill	 14 [lr]
;; rd  in  	(20)
14, 25, 35, 44, 45, 53, 54, 62, 138, 139, 140, 141, 860, 861, 862, 863, 864, 865, 866, 867
;; rd  gen 	(3)
12, 136, 855
;; rd  kill	(38)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 55, 56, 57, 58, 59, 60, 61, 62, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 855
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 143 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 143 144 145 146 147
;; rd  out 	(19)
12, 25, 35, 44, 45, 53, 54, 136, 140, 141, 855, 860, 861, 862, 863, 864, 865, 866, 867
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 20
;;      reg 143 { d860(bb 2 insn 2) }
;;   UD chains for insn luid 1 uid 21
;;      reg 13 { d54(bb 0 insn -1) }
;;      reg 0 { d13(bb 4 insn 20) }
;;   UD chains for insn luid 2 uid 22
;;      reg 0 { d12(bb 4 insn 21) }
;;   UD chains for insn luid 3 uid 23
;;      reg 140 { d855(bb 4 insn 22) }
;;   UD chains for insn luid 4 uid 24
;;      reg 24 { d136(bb 4 insn 23) }

( 4 )->[5]->( 15 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u32(11){ d45(bb 0 insn -1) }u33(13){ d54(bb 0 insn -1) }u34(25){ d140(bb 0 insn -1) }u35(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 141
;; live  kill	 14 [lr]
;; rd  in  	(19)
12, 25, 35, 44, 45, 53, 54, 136, 140, 141, 855, 860, 861, 862, 863, 864, 865, 866, 867
;; rd  gen 	(1)
859
;; rd  kill	(12)
55, 56, 57, 58, 59, 60, 61, 62, 856, 857, 858, 859
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; rd  out 	(20)
12, 25, 35, 44, 45, 53, 54, 136, 140, 141, 855, 859, 860, 861, 862, 863, 864, 865, 866, 867
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 2 uid 29
;;      reg 13 { d54(bb 0 insn -1) }
;;      reg 0 { d0(bb 5 insn 27) }
;;      reg 1 { d23(bb 5 insn 28) }

( 4 )->[6]->( 14 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u39(11){ d45(bb 0 insn -1) }u40(13){ d54(bb 0 insn -1) }u41(25){ d140(bb 0 insn -1) }u42(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 143 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 143 144 145 146 147
;; live  gen 	 0 [r0] 24 [cc] 137
;; live  kill	 14 [lr]
;; rd  in  	(19)
12, 25, 35, 44, 45, 53, 54, 136, 140, 141, 855, 860, 861, 862, 863, 864, 865, 866, 867
;; rd  gen 	(3)
9, 133, 853
;; rd  kill	(38)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 55, 56, 57, 58, 59, 60, 61, 62, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 853
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 143 144 145 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 143 144 145 147
;; rd  out 	(20)
9, 25, 35, 44, 45, 53, 54, 133, 140, 141, 853, 855, 860, 861, 862, 863, 864, 865, 866, 867
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 35
;;      reg 146 { d863(bb 2 insn 5) }
;;   UD chains for insn luid 1 uid 36
;;      reg 13 { d54(bb 0 insn -1) }
;;      reg 0 { d10(bb 6 insn 35) }
;;   UD chains for insn luid 2 uid 37
;;      reg 0 { d9(bb 6 insn 36) }
;;   UD chains for insn luid 3 uid 38
;;      reg 137 { d853(bb 6 insn 37) }
;;   UD chains for insn luid 4 uid 39
;;      reg 24 { d133(bb 6 insn 38) }

( 6 )->[7]->( 14 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u49(11){ d45(bb 0 insn -1) }u50(13){ d54(bb 0 insn -1) }u51(25){ d140(bb 0 insn -1) }u52(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 143 144 145 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 145 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 152 153 154
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 143 144 145 147
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 133 134 139 152 153 154
;; live  kill	 14 [lr]
;; rd  in  	(20)
9, 25, 35, 44, 45, 53, 54, 133, 140, 141, 853, 855, 860, 861, 862, 863, 864, 865, 866, 867
;; rd  gen 	(8)
7, 131, 849, 850, 854, 868, 869, 870
;; rd  kill	(43)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 55, 56, 57, 58, 59, 60, 61, 62, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 849, 850, 854, 868, 869, 870
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 140 143 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 140 143 144
;; rd  out 	(26)
7, 25, 35, 44, 45, 53, 54, 131, 140, 141, 849, 850, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 41
;;      reg 144 { d861(bb 2 insn 3) }
;;   UD chains for insn luid 1 uid 42
;;      reg 153 { d869(bb 7 insn 41) }
;;   eq_note reg 144 { }
;;   UD chains for insn luid 2 uid 43
;;      reg 145 { d862(bb 2 insn 4) }
;;      reg 152 { d868(bb 7 insn 42) }
;;   UD chains for insn luid 3 uid 44
;;      reg 139 { d854(bb 7 insn 43) }
;;   UD chains for insn luid 4 uid 45
;;      reg 154 { d870(bb 7 insn 44) }
;;   eq_note reg 139 { }
;;   UD chains for insn luid 5 uid 46
;;      reg 133 { d849(bb 7 insn 45) }
;;   UD chains for insn luid 7 uid 48
;;      reg 147 { d864(bb 2 insn 6) }
;;   UD chains for insn luid 8 uid 49
;;      reg 13 { d54(bb 0 insn -1) }
;;      reg 0 { d8(bb 7 insn 46) }
;;      reg 1 { d20(bb 7 insn 47) }
;;      reg 2 { d31(bb 7 insn 48) }
;;   UD chains for insn luid 9 uid 50
;;      reg 0 { d7(bb 7 insn 49) }
;;   UD chains for insn luid 10 uid 51
;;      reg 134 { d850(bb 7 insn 50) }
;;   UD chains for insn luid 11 uid 52
;;      reg 24 { d131(bb 7 insn 51) }

( 7 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u70(11){ d45(bb 0 insn -1) }u71(13){ d54(bb 0 insn -1) }u72(25){ d140(bb 0 insn -1) }u73(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 140 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 155 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 140 143 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 135 136 155 156
;; live  kill	 14 [lr]
;; rd  in  	(26)
7, 25, 35, 44, 45, 53, 54, 131, 140, 141, 849, 850, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870
;; rd  gen 	(6)
5, 129, 851, 852, 871, 872
;; rd  kill	(41)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 55, 56, 57, 58, 59, 60, 61, 62, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 851, 852, 871, 872
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 144
;; rd  out 	(30)
5, 25, 35, 44, 45, 53, 54, 129, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 54
;;      reg 134 { d850(bb 7 insn 50) }
;;   UD chains for insn luid 1 uid 56
;;      reg 133 { d849(bb 7 insn 45) }
;;      reg 135 { d851(bb 8 insn 54) }
;;   UD chains for insn luid 2 uid 57
;;      reg 143 { d860(bb 2 insn 2) }
;;   UD chains for insn luid 3 uid 58
;;      reg 135 { d851(bb 8 insn 54) }
;;   UD chains for insn luid 4 uid 59
;;      reg 155 { d871(bb 8 insn 56) }
;;   UD chains for insn luid 5 uid 60
;;      reg 156 { d872(bb 8 insn 57) }
;;   UD chains for insn luid 6 uid 61
;;      reg 137 { d853(bb 6 insn 37) }
;;   UD chains for insn luid 7 uid 62
;;      reg 13 { d54(bb 0 insn -1) }
;;      reg 0 { d6(bb 8 insn 58) }
;;      reg 1 { d18(bb 8 insn 59) }
;;      reg 2 { d29(bb 8 insn 60) }
;;      reg 3 { d39(bb 8 insn 61) }
;;   UD chains for insn luid 8 uid 63
;;      reg 0 { d5(bb 8 insn 62) }
;;   UD chains for insn luid 9 uid 64
;;      reg 136 { d852(bb 8 insn 63) }
;;   UD chains for insn luid 10 uid 65
;;      reg 24 { d129(bb 8 insn 64) }

( 8 )->[9]->( 15 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u90(11){ d45(bb 0 insn -1) }u91(13){ d54(bb 0 insn -1) }u92(25){ d140(bb 0 insn -1) }u93(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140
;; live  gen 	 0 [r0] 141
;; live  kill	 14 [lr]
;; rd  in  	(30)
5, 25, 35, 44, 45, 53, 54, 129, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872
;; rd  gen 	(1)
856
;; rd  kill	(12)
55, 56, 57, 58, 59, 60, 61, 62, 856, 857, 858, 859
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; rd  out 	(31)
5, 25, 35, 44, 45, 53, 54, 129, 140, 141, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 67
;;      reg 135 { d851(bb 8 insn 54) }
;;   UD chains for insn luid 1 uid 68
;;      reg 13 { d54(bb 0 insn -1) }
;;      reg 0 { d2(bb 9 insn 67) }
;;   UD chains for insn luid 2 uid 69
;;      reg 140 { d855(bb 4 insn 22) }

( 8 )->[10]->( 11 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u98(11){ d45(bb 0 insn -1) }u99(13){ d54(bb 0 insn -1) }u100(25){ d140(bb 0 insn -1) }u101(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 157 158 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; live  gen 	 24 [cc] 157 158 159
;; live  kill	
;; rd  in  	(30)
5, 25, 35, 44, 45, 53, 54, 129, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872
;; rd  gen 	(4)
127, 873, 874, 875
;; rd  kill	(17)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 873, 874, 875
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; rd  out 	(33)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 75
;;      reg 157 { d873(bb 10 insn 74) }
;;   UD chains for insn luid 2 uid 76
;;      reg 159 { d875(bb 10 insn 75) }
;;   UD chains for insn luid 3 uid 77
;;      reg 158 { d874(bb 10 insn 76) }
;;   UD chains for insn luid 4 uid 78
;;      reg 24 { d127(bb 10 insn 77) }

( 10 )->[11]->( 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u106(11){ d45(bb 0 insn -1) }u107(13){ d54(bb 0 insn -1) }u108(25){ d140(bb 0 insn -1) }u109(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 160 161
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; live  gen 	 160 161
;; live  kill	 14 [lr]
;; rd  in  	(33)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875
;; rd  gen 	(2)
876, 877
;; rd  kill	(10)
55, 56, 57, 58, 59, 60, 61, 62, 876, 877
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; rd  out 	(35)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 81
;;      reg 160 { d876(bb 11 insn 80) }
;;   UD chains for insn luid 2 uid 82
;;      reg 13 { d54(bb 0 insn -1) }
;;      reg 161 { d877(bb 11 insn 81) }

( 10 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u113(11){ d45(bb 0 insn -1) }u114(13){ d54(bb 0 insn -1) }u115(25){ d140(bb 0 insn -1) }u116(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; live  gen 	
;; live  kill	
;; rd  in  	(33)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; rd  out 	(33)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }

( 12 11 )->[13]->( 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u117(11){ d45(bb 0 insn -1) }u118(13){ d54(bb 0 insn -1) }u119(25){ d140(bb 0 insn -1) }u120(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; live  gen 	 141
;; live  kill	
;; rd  in  	(35)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877
;; rd  gen 	(1)
858
;; rd  kill	(4)
856, 857, 858, 859
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; rd  out 	(36)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 90
;;      reg 135 { d851(bb 8 insn 54) }
;;      reg 144 { d861(bb 2 insn 3) }

( 3 7 6 )->[14]->( 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u123(11){ d45(bb 0 insn -1) }u124(13){ d54(bb 0 insn -1) }u125(25){ d140(bb 0 insn -1) }u126(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 141
;; live  kill	
;; rd  in  	(31)
7, 9, 14, 25, 35, 44, 45, 53, 54, 62, 131, 133, 138, 140, 141, 849, 850, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870
;; rd  gen 	(1)
857
;; rd  kill	(4)
856, 857, 858, 859
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; rd  out 	(32)
7, 9, 14, 25, 35, 44, 45, 53, 54, 62, 131, 133, 138, 140, 141, 849, 850, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }

( 14 5 9 13 )->[15]->( 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u127(11){ d45(bb 0 insn -1) }u128(13){ d54(bb 0 insn -1) }u129(25){ d140(bb 0 insn -1) }u130(26){ d141(bb 0 insn -1) }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(49)
5, 7, 9, 12, 14, 25, 35, 44, 45, 53, 54, 62, 127, 129, 131, 133, 136, 138, 140, 141, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877
;; rd  gen 	(1)
1
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(45)
1, 25, 35, 44, 45, 53, 54, 62, 127, 129, 131, 133, 136, 138, 140, 141, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877
;;  UD chains for artificial uses
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }
;;   reg 26 { d141(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 102
;;      reg 141 { d859(bb 5 insn 30) d858(bb 13 insn 90) d857(bb 14 insn 95) d856(bb 9 insn 69) }
;;   UD chains for insn luid 1 uid 108
;;      reg 0 { d1(bb 15 insn 102) }

( 15 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u133(0){ d1(bb 15 insn 102) }u134(11){ d45(bb 0 insn -1) }u135(13){ d54(bb 0 insn -1) }u136(14){ d62(bb 0 insn -1) }u137(25){ d140(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(45)
1, 25, 35, 44, 45, 53, 54, 62, 127, 129, 131, 133, 136, 138, 140, 141, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(45)
1, 25, 35, 44, 45, 53, 54, 62, 127, 129, 131, 133, 136, 138, 140, 141, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877
;;  UD chains for artificial uses
;;   reg 0 { d1(bb 15 insn 102) }
;;   reg 11 { d45(bb 0 insn -1) }
;;   reg 13 { d54(bb 0 insn -1) }
;;   reg 14 { d62(bb 0 insn -1) }
;;   reg 25 { d140(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 12 to worklist
  Adding insn 17 to worklist
  Adding insn 24 to worklist
  Adding insn 21 to worklist
  Adding insn 131 to worklist
  Adding insn 29 to worklist
  Adding insn 39 to worklist
  Adding insn 36 to worklist
  Adding insn 52 to worklist
  Adding insn 49 to worklist
  Adding insn 65 to worklist
  Adding insn 62 to worklist
  Adding insn 133 to worklist
  Adding insn 68 to worklist
  Adding insn 78 to worklist
  Adding insn 135 to worklist
  Adding insn 82 to worklist
  Adding insn 87 to worklist
  Adding insn 137 to worklist
  Adding insn 108 to worklist
Finished finding needed instructions:
  Adding insn 102 to worklist
Processing use of (reg 141 [ D.23353 ]) in insn 102:
  Adding insn 30 to worklist
  Adding insn 90 to worklist
  Adding insn 95 to worklist
  Adding insn 69 to worklist
Processing use of (reg 140 [ D.23354 ]) in insn 69:
  Adding insn 22 to worklist
Processing use of (reg 0 r0) in insn 22:
Processing use of (reg 135 [ addr ]) in insn 90:
  Adding insn 54 to worklist
Processing use of (reg 144 [ offset ]) in insn 90:
  Adding insn 3 to worklist
Processing use of (reg 1 r1) in insn 3:
Processing use of (reg 134 [ area ]) in insn 54:
  Adding insn 50 to worklist
Processing use of (reg 0 r0) in insn 50:
Processing use of (reg 0 r0) in insn 108:
Processing use of (reg 13 sp) in insn 82:
Processing use of (reg 161 [ cpu_cache.flush_kern_all ]) in insn 82:
  Adding insn 81 to worklist
Processing use of (reg 160) in insn 81:
  Adding insn 80 to worklist
Processing use of (reg 24 cc) in insn 78:
  Adding insn 77 to worklist
Processing use of (reg 158) in insn 77:
  Adding insn 76 to worklist
Processing use of (reg 159 [ cacheid ]) in insn 76:
  Adding insn 75 to worklist
Processing use of (reg 157) in insn 75:
  Adding insn 74 to worklist
Processing use of (reg 13 sp) in insn 68:
Processing use of (reg 0 r0) in insn 68:
  Adding insn 67 to worklist
Processing use of (reg 135 [ addr ]) in insn 67:
Processing use of (reg 13 sp) in insn 62:
Processing use of (reg 0 r0) in insn 62:
  Adding insn 58 to worklist
Processing use of (reg 1 r1) in insn 62:
  Adding insn 59 to worklist
Processing use of (reg 2 r2) in insn 62:
  Adding insn 60 to worklist
Processing use of (reg 3 r3) in insn 62:
  Adding insn 61 to worklist
Processing use of (reg 137 [ type ]) in insn 61:
  Adding insn 37 to worklist
Processing use of (reg 0 r0) in insn 37:
Processing use of (reg 156) in insn 60:
  Adding insn 57 to worklist
Processing use of (reg 143 [ pfn ]) in insn 57:
  Adding insn 2 to worklist
Processing use of (reg 0 r0) in insn 2:
Processing use of (reg 155) in insn 59:
  Adding insn 56 to worklist
Processing use of (reg 133 [ size.389 ]) in insn 56:
  Adding insn 45 to worklist
Processing use of (reg 135 [ addr ]) in insn 56:
Processing use of (reg 154) in insn 45:
  Adding insn 44 to worklist
Processing use of (reg 139 [ D.23365 ]) in insn 44:
  Adding insn 43 to worklist
Processing use of (reg 145 [ size ]) in insn 43:
  Adding insn 4 to worklist
Processing use of (reg 152) in insn 43:
  Adding insn 42 to worklist
Processing use of (reg 153) in insn 42:
  Adding insn 41 to worklist
Processing use of (reg 144 [ offset ]) in insn 41:
Processing use of (reg 2 r2) in insn 4:
Processing use of (reg 135 [ addr ]) in insn 58:
Processing use of (reg 24 cc) in insn 65:
  Adding insn 64 to worklist
Processing use of (reg 136 [ err ]) in insn 64:
  Adding insn 63 to worklist
Processing use of (reg 0 r0) in insn 63:
Processing use of (reg 13 sp) in insn 49:
Processing use of (reg 0 r0) in insn 49:
  Adding insn 46 to worklist
Processing use of (reg 1 r1) in insn 49:
  Adding insn 47 to worklist
Processing use of (reg 2 r2) in insn 49:
  Adding insn 48 to worklist
Processing use of (reg 147 [ caller ]) in insn 48:
  Adding insn 6 to worklist
Processing use of (reg 26 afp) in insn 6:
Processing use of (reg 133 [ size.389 ]) in insn 46:
Processing use of (reg 24 cc) in insn 52:
  Adding insn 51 to worklist
Processing use of (reg 134 [ area ]) in insn 51:
Processing use of (reg 13 sp) in insn 36:
Processing use of (reg 0 r0) in insn 36:
  Adding insn 35 to worklist
Processing use of (reg 146 [ mtype ]) in insn 35:
  Adding insn 5 to worklist
Processing use of (reg 3 r3) in insn 5:
Processing use of (reg 24 cc) in insn 39:
  Adding insn 38 to worklist
Processing use of (reg 137 [ type ]) in insn 38:
Processing use of (reg 13 sp) in insn 29:
Processing use of (reg 0 r0) in insn 29:
  Adding insn 27 to worklist
Processing use of (reg 1 r1) in insn 29:
  Adding insn 28 to worklist
Processing use of (reg 13 sp) in insn 21:
Processing use of (reg 0 r0) in insn 21:
  Adding insn 20 to worklist
Processing use of (reg 143 [ pfn ]) in insn 20:
Processing use of (reg 24 cc) in insn 24:
  Adding insn 23 to worklist
Processing use of (reg 140 [ D.23354 ]) in insn 23:
Processing use of (reg 24 cc) in insn 17:
  Adding insn 16 to worklist
Processing use of (reg 150) in insn 16:
  Adding insn 15 to worklist
Processing use of (reg 149) in insn 15:
  Adding insn 14 to worklist
Processing use of (reg 143 [ pfn ]) in insn 14:
Processing use of (reg 24 cc) in insn 12:
  Adding insn 11 to worklist
Processing use of (reg 143 [ pfn ]) in insn 11:
Processing use of (reg 148) in insn 11:
  Adding insn 10 to worklist


__arm_ioremap_pfn_caller

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,13u} r1={11d,4u} r2={10d,3u} r3={9d,2u} r11={1d,15u} r12={8d} r13={1d,22u} r14={8d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={14d,7u} r25={1d,15u} r26={1d,15u,1d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} r133={1d,2u} r134={1d,2u} r135={1d,4u} r136={1d,1u} r137={1d,2u} r139={1d,1u,1d} r140={1d,2u} r141={4d,1u} r143={1d,4u,1d} r144={1d,2u,1d} r145={1d,1u} r146={1d,1u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r156={1d,1u} r157={1d,1u} r158={1d,1u} r159={1d,1u} r160={1d,1u} r161={1d,1u} 
;;    total ref usage 1016{878d,134u,4e} in 69{62 regular + 7 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848
0[0,15] 1[15,11] 2[26,10] 3[36,9] 11[45,1] 12[46,8] 13[54,1] 14[55,8] 15[63,7] 16[70,7] 17[77,7] 18[84,7] 19[91,7] 20[98,7] 21[105,7] 22[112,7] 23[119,7] 24[126,14] 25[140,1] 26[141,1] 27[142,7] 28[149,7] 29[156,7] 30[163,7] 31[170,7] 32[177,7] 33[184,7] 34[191,7] 35[198,7] 36[205,7] 37[212,7] 38[219,7] 39[226,7] 40[233,7] 41[240,7] 42[247,7] 43[254,7] 44[261,7] 45[268,7] 46[275,7] 47[282,7] 48[289,7] 49[296,7] 50[303,7] 51[310,7] 52[317,7] 53[324,7] 54[331,7] 55[338,7] 56[345,7] 57[352,7] 58[359,7] 59[366,7] 60[373,7] 61[380,7] 62[387,7] 63[394,7] 64[401,7] 65[408,7] 66[415,7] 67[422,7] 68[429,7] 69[436,7] 70[443,7] 71[450,7] 72[457,7] 73[464,7] 74[471,7] 75[478,7] 76[485,7] 77[492,7] 78[499,7] 79[506,7] 80[513,7] 81[520,7] 82[527,7] 83[534,7] 84[541,7] 85[548,7] 86[555,7] 87[562,7] 88[569,7] 89[576,7] 90[583,7] 91[590,7] 92[597,7] 93[604,7] 94[611,7] 95[618,7] 96[625,7] 97[632,7] 98[639,7] 99[646,7] 100[653,7] 101[660,7] 102[667,7] 103[674,7] 104[681,7] 105[688,7] 106[695,7] 107[702,7] 108[709,7] 109[716,7] 110[723,7] 111[730,7] 112[737,7] 113[744,7] 114[751,7] 115[758,7] 116[765,7] 117[772,7] 118[779,7] 119[786,7] 120[793,7] 121[800,7] 122[807,7] 123[814,7] 124[821,7] 125[828,7] 126[835,7] 127[842,7] 133[849,1] 134[850,1] 135[851,1] 136[852,1] 137[853,1] 139[854,1] 140[855,1] 141[856,4] 143[860,1] 144[861,1] 145[862,1] 146[863,1] 147[864,1] 148[865,1] 149[866,1] 150[867,1] 152[868,1] 153[869,1] 154[870,1] 155[871,1] 156[872,1] 157[873,1] 158[874,1] 159[875,1] 160[876,1] 161[877,1] 
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 143 144 145 146 147 148
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 143 144 145 146 147 148
;; live  kill	
;; rd  in  	(10)
14, 25, 35, 44, 45, 53, 54, 62, 140, 141
;; rd  gen 	(7)
139, 860, 861, 862, 863, 864, 865
;; rd  kill	(20)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 860, 861, 862, 863, 864, 865

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 8 3 2 arch/arm/mm/ioremap.c:192 (set (reg/v:SI 143 [ pfn ])
        (reg:SI 0 r0 [ pfn ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ pfn ])
        (nil)))

(insn 3 2 4 2 arch/arm/mm/ioremap.c:192 (set (reg/v:SI 144 [ offset ])
        (reg:SI 1 r1 [ offset ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ offset ])
        (nil)))

(insn 4 3 5 2 arch/arm/mm/ioremap.c:192 (set (reg/v:SI 145 [ size ])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ size ])
        (nil)))

(insn 5 4 6 2 arch/arm/mm/ioremap.c:192 (set (reg/v:SI 146 [ mtype ])
        (reg:SI 3 r3 [ mtype ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ mtype ])
        (nil)))

(insn 6 5 7 2 arch/arm/mm/ioremap.c:192 (set (reg/v/f:SI 147 [ caller ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 caller+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 caller+0 S4 A32])
        (nil)))

(note 7 6 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 7 11 2 arch/arm/mm/ioremap.c:201 (set (reg:SI 148)
        (const_int 1048575 [0xfffff])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 12 2 arch/arm/mm/ioremap.c:201 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 143 [ pfn ])
            (reg:SI 148))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 148)
        (expr_list:REG_EQUAL (compare:CC (reg/v:SI 143 [ pfn ])
                (const_int 1048575 [0xfffff]))
            (nil))))

(jump_insn 12 11 13 2 arch/arm/mm/ioremap.c:201 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2899 [0xb53])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; rd  out 	(17)
14, 25, 35, 44, 45, 53, 54, 62, 139, 140, 141, 860, 861, 862, 863, 864, 865


;; Succ edge  3 [71.0%]  (fallthru)
;; Succ edge  4 [29.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u14(11){ }u15(13){ }u16(25){ }u17(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 24 [cc] 149 150
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; live  gen 	 24 [cc] 149 150
;; live  kill	
;; rd  in  	(17)
14, 25, 35, 44, 45, 53, 54, 62, 139, 140, 141, 860, 861, 862, 863, 864, 865
;; rd  gen 	(3)
138, 866, 867
;; rd  kill	(16)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 866, 867

;; Pred edge  2 [71.0%]  (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 3 arch/arm/mm/ioremap.c:201 discrim 1 (set (reg:SI 149)
        (ashift:SI (reg/v:SI 143 [ pfn ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 15 14 16 3 arch/arm/mm/ioremap.c:201 discrim 1 (set (reg:SI 150)
        (and:SI (reg:SI 149)
            (const_int 16777215 [0xffffff]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 149)
        (nil)))

(insn 16 15 17 3 arch/arm/mm/ioremap.c:201 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 150)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 150)
        (nil)))

(jump_insn 17 16 18 3 arch/arm/mm/ioremap.c:201 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9000 [0x2328])
            (nil))))
;; End of basic block 3 -> ( 14 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 143 144 145 146 147
;; rd  out 	(19)
14, 25, 35, 44, 45, 53, 54, 62, 138, 140, 141, 860, 861, 862, 863, 864, 865, 866, 867


;; Succ edge  14 [90.0%] 
;; Succ edge  4 [10.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u22(11){ }u23(13){ }u24(25){ }u25(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 144 145 146 147
;; live  gen 	 0 [r0] 24 [cc] 140
;; live  kill	 14 [lr]
;; rd  in  	(20)
14, 25, 35, 44, 45, 53, 54, 62, 138, 139, 140, 141, 860, 861, 862, 863, 864, 865, 866, 867
;; rd  gen 	(3)
12, 136, 855
;; rd  kill	(38)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 55, 56, 57, 58, 59, 60, 61, 62, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 855

;; Pred edge  2 [29.0%] 
;; Pred edge  3 [10.0%]  (fallthru)
(code_label 18 17 19 4 4 "" [1 uses])

(note 19 18 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 4 arch/arm/mm/ioremap.c:207 (set (reg:SI 0 r0)
        (reg/v:SI 143 [ pfn ])) 167 {*arm_movsi_insn} (nil))

(call_insn 21 20 22 4 arch/arm/mm/ioremap.c:207 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("pfn_valid") [flags 0x41] <function_decl 0x10c01c80 pfn_valid>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 22 21 23 4 arch/arm/mm/ioremap.c:207 (set (reg:SI 140 [ D.23354 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 23 22 24 4 arch/arm/mm/ioremap.c:207 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 140 [ D.23354 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 25 4 arch/arm/mm/ioremap.c:207 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 143 144 145 146 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 143 144 145 146 147
;; rd  out 	(19)
12, 25, 35, 44, 45, 53, 54, 136, 140, 141, 855, 860, 861, 862, 863, 864, 865, 866, 867


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u32(11){ }u33(13){ }u34(25){ }u35(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 141
;; live  kill	 14 [lr]
;; rd  in  	(19)
12, 25, 35, 44, 45, 53, 54, 136, 140, 141, 855, 860, 861, 862, 863, 864, 865, 866, 867
;; rd  gen 	(1)
859
;; rd  kill	(12)
55, 56, 57, 58, 59, 60, 61, 62, 856, 857, 858, 859

;; Pred edge  4 [0.0%]  (fallthru)
(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 25 28 5 arch/arm/mm/ioremap.c:207 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x1140be10>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x1140be10>)
        (nil)))

(insn 28 27 29 5 arch/arm/mm/ioremap.c:207 discrim 1 (set (reg:SI 1 r1)
        (const_int 207 [0xcf])) 167 {*arm_movsi_insn} (nil))

(call_insn 29 28 30 5 arch/arm/mm/ioremap.c:207 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a67280 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 30 29 131 5 arch/arm/mm/ioremap.c:208 (set (reg/f:SI 141 [ D.23353 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 131 30 132 5 (set (pc)
        (label_ref 96)) -1 (nil))
;; End of basic block 5 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; rd  out 	(20)
12, 25, 35, 44, 45, 53, 54, 136, 140, 141, 855, 859, 860, 861, 862, 863, 864, 865, 866, 867


;; Succ edge  15 [100.0%] 

(barrier 132 131 33)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u39(11){ }u40(13){ }u41(25){ }u42(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 143 144 145 146 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 143 144 145 146 147
;; live  gen 	 0 [r0] 24 [cc] 137
;; live  kill	 14 [lr]
;; rd  in  	(19)
12, 25, 35, 44, 45, 53, 54, 136, 140, 141, 855, 860, 861, 862, 863, 864, 865, 866, 867
;; rd  gen 	(3)
9, 133, 853
;; rd  kill	(38)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 55, 56, 57, 58, 59, 60, 61, 62, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 853

;; Pred edge  4 [100.0%] 
(code_label 33 132 34 6 6 "" [1 uses])

(note 34 33 35 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 35 34 36 6 arch/arm/mm/ioremap.c:210 (set (reg:SI 0 r0)
        (reg/v:SI 146 [ mtype ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 146 [ mtype ])
        (nil)))

(call_insn 36 35 37 6 arch/arm/mm/ioremap.c:210 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_mem_type") [flags 0x41] <function_decl 0x113ded80 get_mem_type>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 37 36 38 6 arch/arm/mm/ioremap.c:210 (set (reg/v/f:SI 137 [ type ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 38 37 39 6 arch/arm/mm/ioremap.c:211 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 137 [ type ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 39 38 40 6 arch/arm/mm/ioremap.c:211 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7954 [0x1f12])
            (nil))))
;; End of basic block 6 -> ( 14 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 140 143 144 145 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 143 144 145 147
;; rd  out 	(20)
9, 25, 35, 44, 45, 53, 54, 133, 140, 141, 853, 855, 860, 861, 862, 863, 864, 865, 866, 867


;; Succ edge  14 [79.5%] 
;; Succ edge  7 [20.5%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u49(11){ }u50(13){ }u51(25){ }u52(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 143 144 145 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 145 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 139 152 153 154
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140 143 144 145 147
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 133 134 139 152 153 154
;; live  kill	 14 [lr]
;; rd  in  	(20)
9, 25, 35, 44, 45, 53, 54, 133, 140, 141, 853, 855, 860, 861, 862, 863, 864, 865, 866, 867
;; rd  gen 	(8)
7, 131, 849, 850, 854, 868, 869, 870
;; rd  kill	(43)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 55, 56, 57, 58, 59, 60, 61, 62, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 849, 850, 854, 868, 869, 870

;; Pred edge  6 [20.5%]  (fallthru)
(note 40 39 41 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 41 40 42 7 arch/arm/mm/ioremap.c:217 (set (reg:SI 153)
        (plus:SI (reg/v:SI 144 [ offset ])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 42 41 43 7 arch/arm/mm/ioremap.c:217 (set (reg:SI 152)
        (plus:SI (reg:SI 153)
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_EQUAL (plus:SI (reg/v:SI 144 [ offset ])
                (const_int 4095 [0xfff]))
            (nil))))

(insn 43 42 44 7 arch/arm/mm/ioremap.c:217 (set (reg:SI 139 [ D.23365 ])
        (plus:SI (reg:SI 152)
            (reg/v:SI 145 [ size ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 152)
        (expr_list:REG_DEAD (reg/v:SI 145 [ size ])
            (nil))))

(insn 44 43 45 7 arch/arm/mm/ioremap.c:217 (set (reg:SI 154)
        (and:SI (reg:SI 139 [ D.23365 ])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 139 [ D.23365 ])
        (nil)))

(insn 45 44 46 7 arch/arm/mm/ioremap.c:217 (set (reg/v:SI 133 [ size.389 ])
        (and:SI (reg:SI 154)
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 154)
        (expr_list:REG_EQUAL (and:SI (reg:SI 139 [ D.23365 ])
                (const_int -4096 [0xfffffffffffff000]))
            (nil))))

(insn 46 45 47 7 arch/arm/mm/ioremap.c:219 (set (reg:SI 0 r0)
        (reg/v:SI 133 [ size.389 ])) 167 {*arm_movsi_insn} (nil))

(insn 47 46 48 7 arch/arm/mm/ioremap.c:219 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 48 47 49 7 arch/arm/mm/ioremap.c:219 (set (reg:SI 2 r2)
        (reg/v/f:SI 147 [ caller ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 147 [ caller ])
        (nil)))

(call_insn 49 48 50 7 arch/arm/mm/ioremap.c:219 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_vm_area_caller") [flags 0x41] <function_decl 0x10fb8f00 get_vm_area_caller>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 50 49 51 7 arch/arm/mm/ioremap.c:219 (set (reg/v/f:SI 134 [ area ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 51 50 52 7 arch/arm/mm/ioremap.c:220 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 134 [ area ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 52 51 53 7 arch/arm/mm/ioremap.c:220 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2164 [0x874])
            (nil))))
;; End of basic block 7 -> ( 14 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 137 140 143 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 140 143 144
;; rd  out 	(26)
7, 25, 35, 44, 45, 53, 54, 131, 140, 141, 849, 850, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870


;; Succ edge  14 [21.6%] 
;; Succ edge  8 [78.4%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u70(11){ }u71(13){ }u72(25){ }u73(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 140 143 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 155 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 137 140 143 144
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 135 136 155 156
;; live  kill	 14 [lr]
;; rd  in  	(26)
7, 25, 35, 44, 45, 53, 54, 131, 140, 141, 849, 850, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870
;; rd  gen 	(6)
5, 129, 851, 852, 871, 872
;; rd  kill	(41)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 55, 56, 57, 58, 59, 60, 61, 62, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 851, 852, 871, 872

;; Pred edge  7 [78.4%]  (fallthru)
(note 53 52 54 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 54 53 56 8 arch/arm/mm/ioremap.c:222 (set (reg/v:SI 135 [ addr ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 134 [ area ])
                (const_int 4 [0x4])) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 134 [ area ])
        (nil)))

(insn 56 54 57 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 155)
        (plus:SI (reg/v:SI 133 [ size.389 ])
            (reg/v:SI 135 [ addr ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 133 [ size.389 ])
        (nil)))

(insn 57 56 58 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 156)
        (ashift:SI (reg/v:SI 143 [ pfn ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 143 [ pfn ])
        (nil)))

(insn 58 57 59 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 59 58 60 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 1 r1)
        (reg:SI 155)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 155)
        (nil)))

(insn 60 59 61 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 2 r2)
        (reg:SI 156)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 156)
        (nil)))

(insn 61 60 62 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 3 r3)
        (mem/s/j:SI (reg/v/f:SI 137 [ type ]) [0 <variable>.prot_pte+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 137 [ type ])
        (nil)))

(call_insn 62 61 63 8 arch/arm/mm/ioremap.c:236 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ioremap_page_range") [flags 0x41] <function_decl 0x10fcbc00 ioremap_page_range>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 63 62 64 8 arch/arm/mm/ioremap.c:236 (set (reg/v:SI 136 [ err ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 64 63 65 8 arch/arm/mm/ioremap.c:239 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 136 [ err ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 136 [ err ])
        (nil)))

(jump_insn 65 64 66 8 arch/arm/mm/ioremap.c:239 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9566 [0x255e])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 144
;; rd  out 	(30)
5, 25, 35, 44, 45, 53, 54, 129, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872


;; Succ edge  9 [4.3%]  (fallthru)
;; Succ edge  10 [95.7%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u90(11){ }u91(13){ }u92(25){ }u93(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140
;; live  gen 	 0 [r0] 141
;; live  kill	 14 [lr]
;; rd  in  	(30)
5, 25, 35, 44, 45, 53, 54, 129, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872
;; rd  gen 	(1)
856
;; rd  kill	(12)
55, 56, 57, 58, 59, 60, 61, 62, 856, 857, 858, 859

;; Pred edge  8 [4.3%]  (fallthru)
(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 67 66 68 9 arch/arm/mm/ioremap.c:240 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ addr ])
        (nil)))

(call_insn 68 67 69 9 arch/arm/mm/ioremap.c:240 (parallel [
            (call (mem:SI (symbol_ref:SI ("vunmap") [flags 0x41] <function_decl 0x10fb8c00 vunmap>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 69 68 133 9 arch/arm/mm/ioremap.c:241 (set (reg/f:SI 141 [ D.23353 ])
        (reg:SI 140 [ D.23354 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 140 [ D.23354 ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 133 69 134 9 arch/arm/mm/ioremap.c:241 (set (pc)
        (label_ref 96)) -1 (nil))
;; End of basic block 9 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; rd  out 	(31)
5, 25, 35, 44, 45, 53, 54, 129, 140, 141, 849, 850, 851, 852, 853, 854, 855, 856, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872


;; Succ edge  15 [100.0%] 

(barrier 134 133 72)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u98(11){ }u99(13){ }u100(25){ }u101(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 157 158 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; live  gen 	 24 [cc] 157 158 159
;; live  kill	
;; rd  in  	(30)
5, 25, 35, 44, 45, 53, 54, 129, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872
;; rd  gen 	(4)
127, 873, 874, 875
;; rd  kill	(17)
126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 873, 874, 875

;; Pred edge  8 [95.7%] 
(code_label 72 134 73 10 8 "" [1 uses])

(note 73 72 74 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 74 73 75 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg/f:SI 157)
        (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x10fc0960 cacheid>)) 167 {*arm_movsi_insn} (nil))

(insn 75 74 76 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:SI 159 [ cacheid ])
        (mem/c/i:SI (reg/f:SI 157) [0 cacheid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 157)
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x10fc0960 cacheid>) [0 cacheid+0 S4 A32])
            (nil))))

(insn 76 75 77 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:SI 158)
        (and:SI (reg:SI 159 [ cacheid ])
            (const_int 2 [0x2]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 159 [ cacheid ])
        (nil)))

(insn 77 76 78 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 158)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 158)
        (nil)))

(jump_insn 78 77 79 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; rd  out 	(33)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875


;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  12 [71.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u106(11){ }u107(13){ }u108(25){ }u109(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 160 161
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; live  gen 	 160 161
;; live  kill	 14 [lr]
;; rd  in  	(33)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875
;; rd  gen 	(2)
876, 877
;; rd  kill	(10)
55, 56, 57, 58, 59, 60, 61, 62, 876, 877

;; Pred edge  10 [29.0%]  (fallthru)
(note 79 78 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 80 79 81 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cacheflush.h:332 (set (reg/f:SI 160)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x10fc0f60 cpu_cache>)) 167 {*arm_movsi_insn} (nil))

(insn 81 80 82 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cacheflush.h:332 (set (reg/f:SI 161 [ cpu_cache.flush_kern_all ])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 160)
                (const_int 4 [0x4])) [0 cpu_cache.flush_kern_all+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 160)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x10fc0f60 cpu_cache>)
                        (const_int 4 [0x4]))) [0 cpu_cache.flush_kern_all+0 S4 A32])
            (nil))))

(call_insn 82 81 135 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cacheflush.h:332 (parallel [
            (call (mem:SI (reg/f:SI 161 [ cpu_cache.flush_kern_all ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 161 [ cpu_cache.flush_kern_all ])
        (nil))
    (nil))

(jump_insn 135 82 136 11 (set (pc)
        (label_ref 88)) -1 (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; rd  out 	(35)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877


;; Succ edge  13 [100.0%] 

(barrier 136 135 85)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u113(11){ }u114(13){ }u115(25){ }u116(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; live  gen 	
;; live  kill	
;; rd  in  	(33)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875
;; rd  gen 	(0)

;; rd  kill	(0)


;; Pred edge  10 [71.0%] 
(code_label 85 136 86 12 9 "" [1 uses])

(note 86 85 87 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 87 86 88 12 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cacheflush.h:338 (parallel [
            (asm_operands/v ("dsb") ("") 0 []
                 [] 5635626)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; rd  out 	(33)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u117(11){ }u118(13){ }u119(25){ }u120(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 144
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 144
;; live  gen 	 141
;; live  kill	
;; rd  in  	(35)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877
;; rd  gen 	(1)
858
;; rd  kill	(4)
856, 857, 858, 859

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 88 87 89 13 10 "" [1 uses])

(note 89 88 90 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 90 89 137 13 arch/arm/mm/ioremap.c:245 (set (reg/f:SI 141 [ D.23353 ])
        (plus:SI (reg/v:SI 144 [ offset ])
            (reg/v:SI 135 [ addr ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 144 [ offset ])
        (expr_list:REG_DEAD (reg/v:SI 135 [ addr ])
            (nil))))

(jump_insn 137 90 138 13 arch/arm/mm/ioremap.c:245 (set (pc)
        (label_ref 96)) -1 (nil))
;; End of basic block 13 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; rd  out 	(36)
5, 25, 35, 44, 45, 53, 54, 127, 140, 141, 849, 850, 851, 852, 853, 854, 855, 858, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877


;; Succ edge  15 [100.0%] 

(barrier 138 137 93)

;; Start of basic block ( 3 7 6) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u123(11){ }u124(13){ }u125(25){ }u126(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 141
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 141
;; live  kill	
;; rd  in  	(31)
7, 9, 14, 25, 35, 44, 45, 53, 54, 62, 131, 133, 138, 140, 141, 849, 850, 853, 854, 855, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870
;; rd  gen 	(1)
857
;; rd  kill	(4)
856, 857, 858, 859

;; Pred edge  3 [90.0%] 
;; Pred edge  7 [21.6%] 
;; Pred edge  6 [79.5%] 
(code_label 93 138 94 14 5 "" [3 uses])

(note 94 93 95 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 14 arch/arm/mm/ioremap.c:202 (set (reg/f:SI 141 [ D.23353 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; rd  out 	(32)
7, 9, 14, 25, 35, 44, 45, 53, 54, 62, 131, 133, 138, 140, 141, 849, 850, 853, 854, 855, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 14 5 9 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u127(11){ }u128(13){ }u129(25){ }u130(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141
;; live  gen 	 0 [r0]
;; live  kill	
;; rd  in  	(49)
5, 7, 9, 12, 14, 25, 35, 44, 45, 53, 54, 62, 127, 129, 131, 133, 136, 138, 140, 141, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877
;; rd  gen 	(1)
1
;; rd  kill	(15)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14

;; Pred edge  14 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  13 [100.0%] 
(code_label 96 95 97 15 7 "" [3 uses])

(note 97 96 102 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 102 97 108 15 arch/arm/mm/ioremap.c:246 (set (reg/i:SI 0 r0)
        (reg/f:SI 141 [ D.23353 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 141 [ D.23353 ])
        (nil)))

(insn 108 102 0 15 arch/arm/mm/ioremap.c:246 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(45)
1, 25, 35, 44, 45, 53, 54, 62, 127, 129, 131, 133, 136, 138, 140, 141, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function __arm_ioremap_pfn (__arm_ioremap_pfn)[0:1241]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


__arm_ioremap_pfn

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r140={1d,1u} 
;;    total ref usage 146{128d,18u,0e} in 4{3 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 140[127,1] 

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d1(0){ }d3(1){ }d5(2){ }d7(3){ }d8(11){ }d10(12){ }d11(13){ }d13(14){ }d24(25){ }d25(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; rd  in  	(0)

;; rd  gen 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  kill	(16)
0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 24, 25
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; rd  out 	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25

( 0 )->[2]->( 1 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ d8(bb 0 insn -1) }u1(13){ d11(bb 0 insn -1) }u2(25){ d24(bb 0 insn -1) }u3(26){ d25(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(2)
0, 127
;; rd  kill	(5)
0, 1, 12, 13, 127
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127
;;  UD chains for artificial uses
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 25 { d24(bb 0 insn -1) }
;;   reg 26 { d25(bb 0 insn -1) }
;;   UD chains for insn luid 0 uid 31
;;      reg 14 { d13(bb 0 insn -1) }
;;   UD chains for insn luid 1 uid 10
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 140 { d127(bb 2 insn 31) }
;;   UD chains for insn luid 2 uid 15
;;      reg 13 { d11(bb 0 insn -1) }
;;      reg 0 { d1(bb 0 insn -1) }
;;      reg 1 { d3(bb 0 insn -1) }
;;      reg 2 { d5(bb 0 insn -1) }
;;      reg 3 { d7(bb 0 insn -1) }
;;   UD chains for insn luid 3 uid 27
;;      reg 0 { d0(bb 2 insn 15) }

( 2 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u13(0){ d0(bb 2 insn 15) }u14(11){ d8(bb 0 insn -1) }u15(13){ d11(bb 0 insn -1) }u16(14){ }u17(25){ d24(bb 0 insn -1) }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; rd  in  	(10)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127
;; rd  gen 	(0)

;; rd  kill	(0)

;; lr  out 	
;; live  out 	
;; rd  out 	(10)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127
;;  UD chains for artificial uses
;;   reg 0 { d0(bb 2 insn 15) }
;;   reg 11 { d8(bb 0 insn -1) }
;;   reg 13 { d11(bb 0 insn -1) }
;;   reg 14 { }
;;   reg 25 { d24(bb 0 insn -1) }

Finding needed instructions:
  Adding insn 27 to worklist
  Adding insn 15 to worklist
  Adding insn 10 to worklist
Finished finding needed instructions:
Processing use of (reg 13 sp) in insn 10:
Processing use of (reg 140) in insn 10:
  Adding insn 31 to worklist
Processing use of (reg 14 lr) in insn 31:
Processing use of (reg 13 sp) in insn 15:
Processing use of (reg 0 r0) in insn 15:
Processing use of (reg 1 r1) in insn 15:
Processing use of (reg 2 r2) in insn 15:
Processing use of (reg 3 r3) in insn 15:
Processing use of (reg 0 r0) in insn 27:


__arm_ioremap_pfn

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r140={1d,1u} 
;;    total ref usage 146{128d,18u,0e} in 4{3 regular + 1 call} insns.
;; Reaching defs:

  sparse invalidated 	
  dense invalidated 	0, 1, 2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126
0[0,2] 1[2,2] 2[4,2] 3[6,2] 11[8,1] 12[9,2] 13[11,1] 14[12,2] 15[14,1] 16[15,1] 17[16,1] 18[17,1] 19[18,1] 20[19,1] 21[20,1] 22[21,1] 23[22,1] 24[23,1] 25[24,1] 26[25,1] 27[26,1] 28[27,1] 29[28,1] 30[29,1] 31[30,1] 32[31,1] 33[32,1] 34[33,1] 35[34,1] 36[35,1] 37[36,1] 38[37,1] 39[38,1] 40[39,1] 41[40,1] 42[41,1] 43[42,1] 44[43,1] 45[44,1] 46[45,1] 47[46,1] 48[47,1] 49[48,1] 50[49,1] 51[50,1] 52[51,1] 53[52,1] 54[53,1] 55[54,1] 56[55,1] 57[56,1] 58[57,1] 59[58,1] 60[59,1] 61[60,1] 62[61,1] 63[62,1] 64[63,1] 65[64,1] 66[65,1] 67[66,1] 68[67,1] 69[68,1] 70[69,1] 71[70,1] 72[71,1] 73[72,1] 74[73,1] 75[74,1] 76[75,1] 77[76,1] 78[77,1] 79[78,1] 80[79,1] 81[80,1] 82[81,1] 83[82,1] 84[83,1] 85[84,1] 86[85,1] 87[86,1] 88[87,1] 89[88,1] 90[89,1] 91[90,1] 92[91,1] 93[92,1] 94[93,1] 95[94,1] 96[95,1] 97[96,1] 98[97,1] 99[98,1] 100[99,1] 101[100,1] 102[101,1] 103[102,1] 104[103,1] 105[104,1] 106[105,1] 107[106,1] 108[107,1] 109[108,1] 110[109,1] 111[110,1] 112[111,1] 113[112,1] 114[113,1] 115[114,1] 116[115,1] 117[116,1] 118[117,1] 119[118,1] 120[119,1] 121[120,1] 122[121,1] 123[122,1] 124[123,1] 125[124,1] 126[125,1] 127[126,1] 140[127,1] 
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 140
;; live  kill	 14 [lr]
;; rd  in  	(10)
1, 3, 5, 7, 8, 10, 11, 13, 24, 25
;; rd  gen 	(2)
0, 127
;; rd  kill	(5)
0, 1, 12, 13, 127

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 31 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 31 7 6 2 (set (reg:SI 140)
        (reg:SI 14 lr)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(note 6 31 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 15 2 arch/arm/mm/ioremap.c:279 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 140)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 140)
        (nil)))

(call_insn 15 10 27 2 arch/arm/mm/ioremap.c:279 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__arm_ioremap_pfn_caller") [flags 0x3] <function_decl 0x10fbf980 __arm_ioremap_pfn_caller>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 27 15 0 2 arch/arm/mm/ioremap.c:281 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; rd  out 	(10)
0, 3, 5, 7, 8, 10, 11, 24, 25, 127


;; Succ edge  EXIT [100.0%]  (fallthru)

starting the processing of deferred insns
ending the processing of deferred insns
