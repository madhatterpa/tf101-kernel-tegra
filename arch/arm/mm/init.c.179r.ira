
;; Function parse_tag_initrd2 (parse_tag_initrd2)[0:1345] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 22(l0): point = 0
   Insn 11(l0): point = 2
   Insn 10(l0): point = 4
   Insn 8(l0): point = 6
   Insn 7(l0): point = 8
   Insn 16(l0): point = 10
   Insn 6(l0): point = 12
   Insn 2(l0): point = 14
 a0(r135): [3..12]
 a1(r138): [3..4]
 a2(r134): [5..14]
 a3(r136): [7..8]
Compressing live ranges: from 17 to 7 - 41%
Ranges after the compression:
 a0(r135): [0..5]
 a1(r138): [0..1]
 a2(r134): [2..6]
 a3(r136): [3..4]
+++Allocating 32 bytes for conflict table (uncompressed size 32)
;; a0(r135,l0) conflicts: a1(r138,l0) a2(r134,l0) a3(r136,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r138,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a2(r134,l0) conflicts: a0(r135,l0) a3(r136,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a3(r136,l0) conflicts: a0(r135,l0) a2(r134,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  regions=1, blocks=3, points=7
    allocnos=4, copies=0, conflicts=1, ranges=4

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r135 1r138 2r134 3r136
    modified regnos: 134 135 136 138
    border:
    Pressure: GENERAL_REGS=5
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 136 of GENERAL_REGS has 2 regs less
      Pushing a3(r136,l0)
      Pushing a1(r138,l0)
      Pushing a2(r134,l0)
      Pushing a0(r135,l0)
      Popping a0(r135,l0)  -- assign reg 3
      Popping a2(r134,l0)  -- assign reg 2
      Popping a1(r138,l0)  -- assign reg 2
      Popping a3(r136,l0)  -- assign reg 1
Disposition:
    2:r134 l0     2    0:r135 l0     3    3:r136 l0     1    1:r138 l0     2
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, 14, dead_or_set: 0, 134
insn=6, live_throughout: 13, 14, 134, dead_or_set: 135
insn=16, live_throughout: 13, 14, 134, 135, dead_or_set: 0
insn=7, live_throughout: 0, 13, 14, 134, 135, dead_or_set: 136
insn=8, live_throughout: 0, 13, 14, 134, 135, dead_or_set: 136
insn=10, live_throughout: 0, 13, 14, 135, dead_or_set: 134, 138
insn=11, live_throughout: 0, 13, 14, dead_or_set: 135, 138
insn=22, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 135: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 136: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 138: (insn_list:REG_DEP_TRUE 11 (nil))
changing reg in insn 2
changing reg in insn 10
changing reg in insn 7
changing reg in insn 7
changing reg in insn 6
changing reg in insn 11
changing reg in insn 8
changing reg in insn 10
changing reg in insn 7
changing reg in insn 8
changing reg in insn 10
changing reg in insn 11
Spilling for insn 8.
Spilling for insn 11.

Reloads for insn # 8
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [135]) [0 phys_initrd_start+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [135]) [0 phys_initrd_start+0 S4 A32])

Reloads for insn # 11
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [135])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [135])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


parse_tag_initrd2

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={3d,3u,1d} r3={2d,2u,1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 26{12d,12u,2e} in 8{8 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 3 2 2 NOTE_INSN_DELETED)

(insn 2 12 6 2 arch/arm/mm/init.c:68 (set (reg/v/f:SI 2 r2 [orig:134 tag ] [134])
        (reg:SI 0 r0 [ tag ])) 167 {*arm_movsi_insn} (nil))

(insn 6 2 16 2 arch/arm/mm/init.c:69 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 16 6 7 2 arch/arm/mm/init.c:72 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 7 16 8 2 arch/arm/mm/init.c:69 (set (reg:SI 1 r1 [orig:136 <variable>.u.initrd.start ] [136])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 tag ] [134])
                (const_int 8 [0x8])) [0 <variable>.u.initrd.start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 tag ] [134])
                (const_int 8 [0x8])) [0 <variable>.u.initrd.start+0 S4 A32])
        (nil)))

(insn 8 7 10 2 arch/arm/mm/init.c:69 (set (mem/c/i:SI (reg/f:SI 3 r3 [135]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 1 r1 [orig:136 <variable>.u.initrd.start ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 10 8 11 2 arch/arm/mm/init.c:70 (set (reg:SI 2 r2 [orig:138 <variable>.u.initrd.size ] [138])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 tag ] [134])
                (const_int 12 [0xc])) [0 <variable>.u.initrd.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn 11 10 22 2 arch/arm/mm/init.c:70 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 2 r2 [orig:138 <variable>.u.initrd.size ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 22 11 26 2 arch/arm/mm/init.c:72 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 26 22 27 NOTE_INSN_DELETED)

(note 27 26 0 NOTE_INSN_DELETED)


;; Function meminfo_cmp (meminfo_cmp)[0:1352] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a4 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 35(l0): point = 0
   Insn 29(l0): point = 2
   Insn 21(l0): point = 5
   Insn 58(l0): point = 8
   Insn 15(l0): point = 10
   Insn 13(l0): point = 13
   Insn 12(l0): point = 15
   Insn 11(l0): point = 17
   Insn 10(l0): point = 19
   Insn 7(l0): point = 21
   Insn 9(l0): point = 23
 a0(r134): [8..10] [3..5]
 a1(r133): [16..17]
 a2(r140): [18..19]
 a3(r139): [18..21]
 a4(r141): [20..23]
Compressing live ranges: from 26 to 11 - 42%
Ranges after the compression:
 a0(r134): [2..3] [0..1]
 a1(r133): [4..5]
 a2(r140): [6..7]
 a3(r139): [6..9]
 a4(r141): [8..10]
+++Allocating 24 bytes for conflict table (uncompressed size 40)
;; a0(r134,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r140,l0) conflicts: a3(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r139,l0) conflicts: a2(r140,l0) a4(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r141,l0) conflicts: a3(r139,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  cp0:a2(r140)<->a4(r141)@125:shuffle
  cp1:a1(r133)<->a2(r140)@125:shuffle
  cp2:a1(r133)<->a3(r139)@125:shuffle
  regions=1, blocks=6, points=11
    allocnos=5, copies=3, conflicts=2, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 5 4 3 2
    all: 0r134 1r133 2r140 3r139 4r141
    modified regnos: 133 134 139 140 141
    border:
    Pressure: GENERAL_REGS=3
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 2 regs less
      Pushing a3(r139,l0)
      Pushing a2(r140,l0)
      Pushing a1(r133,l0)
      Pushing a0(r134,l0)
      Pushing a4(r141,l0)
      Popping a4(r141,l0)  -- assign reg 3
      Popping a0(r134,l0)  -- assign reg 0
      Popping a1(r133,l0)  -- assign reg 3
      Popping a2(r140,l0)  -- assign reg 3
      Popping a3(r139,l0)  -- assign reg 2
Disposition:
    1:r133 l0     3    0:r134 l0     0    3:r139 l0     2    2:r140 l0     3
    4:r141 l0     3
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=9, live_throughout: 0, 13, 14, dead_or_set: 1, 141
insn=7, live_throughout: 13, 14, 141, dead_or_set: 0, 139
insn=10, live_throughout: 13, 14, 139, dead_or_set: 140, 141
insn=11, live_throughout: 13, 14, dead_or_set: 133, 139, 140
insn=12, live_throughout: 13, 14, dead_or_set: 133
insn=13, live_throughout: 13, 14, 24, dead_or_set: 
insn=15, live_throughout: 13, 14, dead_or_set: 134
insn=58, live_throughout: 13, 14, 134, dead_or_set: 
insn=18, live_throughout: 13, 14, 24, dead_or_set: 
insn=21, live_throughout: 13, 14, dead_or_set: 134
insn=23, live_throughout: 13, 14, 134, dead_or_set: 
insn=29, live_throughout: 13, 14, dead_or_set: 0, 134
insn=35, live_throughout: 0, 13, 14, dead_or_set: 
changing reg in insn 11
changing reg in insn 12
changing reg in insn 21
changing reg in insn 15
changing reg in insn 29
changing reg in insn 7
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 9
changing reg in insn 10
deleting insn with uid = 29.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 6 n_edges 6 count 10 (  1.7)


meminfo_cmp

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,3u} r1={1d,1u} r2={2d,1u} r3={4d,3u} r12={1d} r13={1d,5u} r14={1d,1u} r24={1d,2u} 
;;    total ref usage 30{14d,16u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 3 2 NOTE_INSN_DELETED)

(note 3 2 4 2 NOTE_INSN_DELETED)

(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 9 2 NOTE_INSN_DELETED)

(insn 9 8 7 2 arch/arm/mm/init.c:324 (set (reg:SI 3 r3 [orig:141 <variable>.start ] [141])
        (mem/s/j:SI (reg:SI 1 r1 [ _b ]) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 7 9 10 2 arch/arm/mm/init.c:324 (set (reg:SI 2 r2 [orig:139 <variable>.start ] [139])
        (mem/s/j:SI (reg:SI 0 r0 [ _a ]) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 10 7 11 2 arch/arm/mm/init.c:324 (set (reg:SI 3 r3 [140])
        (lshiftrt:SI (reg:SI 3 r3 [orig:141 <variable>.start ] [141])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 11 10 12 2 arch/arm/mm/init.c:324 (set (reg/v:SI 3 r3 [orig:133 cmp ] [133])
        (minus:SI (lshiftrt:SI (reg:SI 2 r2 [orig:139 <variable>.start ] [139])
                (const_int 12 [0xc]))
            (reg:SI 3 r3 [140]))) 270 {*arith_shiftsi} (nil))

(insn 12 11 13 2 arch/arm/mm/init.c:325 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:133 cmp ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 13 12 14 2 arch/arm/mm/init.c:325 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8088 [0x1f98])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  4 [80.9%] 
;; Succ edge  3 [19.1%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [19.1%]  (fallthru)
(note 14 13 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 58 3 arch/arm/mm/init.c:325 discrim 2 (set (reg:SI 0 r0 [orig:134 D.25161 ] [134])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(jump_insn 58 15 59 3 (set (pc)
        (label_ref 23)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 59 58 18)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [80.9%] 
(code_label 18 59 19 4 6 "" [1 uses])

(note 19 18 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 21 19 23 4 arch/arm/mm/init.c:325 discrim 1 (set (reg:SI 0 r0 [orig:134 D.25161 ] [134])
        (gt:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 23 21 24 5 7 "" [1 uses])

(note 24 23 35 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 35 24 60 5 arch/arm/mm/init.c:326 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 60 35 61 NOTE_INSN_DELETED)

(note 61 60 0 NOTE_INSN_DELETED)


;; Function keepinitrd_setup (keepinitrd_setup)[0:1363] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 24.
verify found no changes in insn with uid = 24.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a1 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 19(l0): point = 0
   Insn 8(l0): point = 2
   Insn 24(l0): point = 4
   Insn 13(l0): point = 6
   Insn 7(l0): point = 8
 a0(r135): [3..4]
 a1(r136): [3..8]
Compressing live ranges: from 11 to 3 - 27%
Ranges after the compression:
 a0(r135): [0..1]
 a1(r136): [0..2]
+++Allocating 16 bytes for conflict table (uncompressed size 16)
;; a0(r135,l0) conflicts: a1(r136,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r136,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  regions=1, blocks=3, points=3
    allocnos=2, copies=0, conflicts=2, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r135 1r136
    modified regnos: 135 136
    border:
    Pressure: GENERAL_REGS=4
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 136 of GENERAL_REGS has 2 regs less
      Pushing a0(r135,l0)
      Pushing a1(r136,l0)
      Popping a1(r136,l0)  -- assign reg 3
      Popping a0(r135,l0)  -- assign reg 2
Disposition:
    0:r135 l0     2    1:r136 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 13, 14, dead_or_set: 136
insn=13, live_throughout: 13, 14, 136, dead_or_set: 0
insn=24, live_throughout: 0, 13, 14, 136, dead_or_set: 135
insn=8, live_throughout: 0, 13, 14, dead_or_set: 135, 136
insn=19, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 135: (insn_list:REG_DEP_TRUE 24 (nil))
init_insns for 136: (insn_list:REG_DEP_TRUE 7 (nil))
changing reg in insn 24
changing reg in insn 8
changing reg in insn 7
changing reg in insn 13
changing reg in insn 8
Spilling for insn 8.

Reloads for insn # 8
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 2 r2 [135]) [0 keep_initrd+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 2 r2 [135]) [0 keep_initrd+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


keepinitrd_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3]
;;  ref usage 	r0={2d,2u} r1={1d} r2={2d,1u} r3={2d,2u} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 18{10d,8u,0e} in 5{5 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 3 13 2 arch/arm/mm/init.c:766 (set (reg:SI 3 r3 [136])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 13 7 24 2 arch/arm/mm/init.c:768 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 24 13 8 2 arch/arm/mm/init.c:766 (set (reg/f:SI 2 r2 [135])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 8 24 19 2 arch/arm/mm/init.c:766 (set (mem/c/i:SI (reg/f:SI 2 r2 [135]) [0 keep_initrd+0 S4 A32])
        (reg:SI 3 r3 [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 19 8 23 2 arch/arm/mm/init.c:768 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 23 19 25 NOTE_INSN_DELETED)

(note 25 23 0 NOTE_INSN_DELETED)


;; Function early_initrd (early_initrd)[0:1343] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r148: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 39(l0): point = 0
   Insn 33(l0): point = 2
   Insn 26(l0): point = 5
   Insn 23(l0): point = 7
   Insn 21(l0): point = 9
   Insn 19(l0): point = 11
   Insn 18(l0): point = 13
   Insn 17(l0): point = 15
   Insn 14(l0): point = 18
   Insn 13(l0): point = 20
   Insn 12(l0): point = 22
   Insn 11(l0): point = 24
   Insn 43(l0): point = 26
   Insn 9(l0): point = 28
   Insn 8(l0): point = 30
 a0(r141): [6..9]
 a1(r148): [8..26]
 a2(r134): [16..24]
 a3(r139): [21..22]
Compressing live ranges: from 33 to 8 - 24%
Ranges after the compression:
 a0(r141): [0..2]
 a1(r148): [1..7]
 a2(r134): [3..6]
 a3(r139): [4..5]
+++Allocating 32 bytes for conflict table (uncompressed size 32)
;; a0(r141,l0) conflicts: a1(r148,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r148,l0) conflicts: a0(r141,l0) a2(r134,l0) a3(r139,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r134,l0) conflicts: a1(r148,l0) a3(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r139,l0) conflicts: a1(r148,l0) a2(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  regions=1, blocks=5, points=8
    allocnos=4, copies=0, conflicts=1, ranges=4

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r141 1r148 2r134 3r139
    modified regnos: 134 139 141 148
    border:
    Pressure: GENERAL_REGS=4
    Reg 141 of GENERAL_REGS has 2 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
      Pushing a3(r139,l0)
      Pushing a2(r134,l0)
      Pushing a0(r141,l0)
      Pushing a1(r148,l0)
      Popping a1(r148,l0)  -- assign reg 4
      Popping a0(r141,l0)  -- assign reg 3
      Popping a2(r134,l0)  -- assign reg 0
      Popping a3(r139,l0)  -- assign reg 3
Disposition:
    2:r134 l0     0    3:r139 l0     3    0:r141 l0     3    1:r148 l0     4
New iteration of spill/restore move
+++Costs: overall -250, reg -250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=8, live_throughout: 0, 13, dead_or_set: 1
insn=9, live_throughout: 13, dead_or_set: 0, 1, 14
insn=43, live_throughout: 13, 14, dead_or_set: 0, 148
insn=11, live_throughout: 13, 14, 148, dead_or_set: 134
insn=12, live_throughout: 13, 14, 134, 148, dead_or_set: 139
insn=13, live_throughout: 13, 14, 134, 148, dead_or_set: 139
insn=14, live_throughout: 13, 14, 134, 148, dead_or_set: 
insn=17, live_throughout: 13, 148, dead_or_set: 0, 134
insn=18, live_throughout: 0, 13, 148, dead_or_set: 1
insn=19, live_throughout: 13, 148, dead_or_set: 0, 1, 14
insn=21, live_throughout: 0, 13, 14, 148, dead_or_set: 141
insn=23, live_throughout: 0, 13, 14, 141, dead_or_set: 148
insn=26, live_throughout: 13, 14, dead_or_set: 0, 141
insn=27, live_throughout: 13, 14, dead_or_set: 
insn=33, live_throughout: 13, 14, dead_or_set: 0
insn=39, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 141: (insn_list:REG_DEP_TRUE 21 (nil))
changing reg in insn 11
changing reg in insn 17
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 21
changing reg in insn 26
changing reg in insn 23
changing reg in insn 43
changing reg in insn 23
Spilling for insn 23.
Spilling for insn 26.

Reloads for insn # 23
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [141]) [0 phys_initrd_start+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [141]) [0 phys_initrd_start+0 S4 A32])

Reloads for insn # 26
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [141])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [141])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 9.
verify found no changes in insn with uid = 19.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


early_initrd

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,8u} r1={5d,2u} r2={3d} r3={5d,3u} r4={1d,1u} r12={3d} r13={1d,8u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 274{250d,24u,0e} in 15{13 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 8 2 NOTE_INSN_DELETED)

(insn 8 6 9 2 arch/arm/mm/init.c:45 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(call_insn 9 8 43 2 arch/arm/mm/init.c:45 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memparse") [flags 0x41] <function_decl 0x10a58100 memparse>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 43 9 11 2 arch/arm/mm/init.c:45 (set (reg:SI 4 r4 [orig:148 D.24930 ] [148])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 11 43 12 2 arch/arm/mm/init.c:46 (set (reg/f:SI 0 r0 [orig:134 endp.338 ] [134])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 endp+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 12 11 13 2 arch/arm/mm/init.c:46 (set (reg:SI 3 r3 [139])
        (zero_extend:SI (mem:QI (reg/f:SI 0 r0 [orig:134 endp.338 ] [134]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn 13 12 14 2 arch/arm/mm/init.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [139])
            (const_int 44 [0x2c]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 14 13 15 2 arch/arm/mm/init.c:46 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8010 [0x1f4a])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  3 [19.9%]  (fallthru)
;; Succ edge  4 [80.1%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [19.9%]  (fallthru)
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 16 15 45 3 NOTE_INSN_DELETED)

(note 45 16 17 3 NOTE_INSN_DELETED)

(insn 17 45 18 3 arch/arm/mm/init.c:47 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [orig:134 endp.338 ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 18 17 19 3 arch/arm/mm/init.c:47 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 19 18 21 3 arch/arm/mm/init.c:47 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memparse") [flags 0x41] <function_decl 0x10a58100 memparse>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 21 19 23 3 arch/arm/mm/init.c:49 (set (reg/f:SI 3 r3 [141])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 23 21 26 3 arch/arm/mm/init.c:49 (set (mem/c/i:SI (reg/f:SI 3 r3 [141]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 4 r4 [orig:148 D.24930 ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 26 23 27 3 arch/arm/mm/init.c:50 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [141])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [80.1%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 27 26 28 4 15 "" [1 uses])

(note 28 27 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 33 28 39 4 arch/arm/mm/init.c:53 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 39 33 47 4 arch/arm/mm/init.c:53 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 47 39 48 NOTE_INSN_DELETED)

(note 48 47 0 NOTE_INSN_DELETED)


;; Function parse_tag_initrd (parse_tag_initrd)[0:1344] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a1 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 26(l0): point = 0
   Insn 15(l0): point = 2
   Insn 14(l0): point = 4
   Insn 12(l0): point = 6
   Insn 11(l0): point = 8
   Insn 20(l0): point = 10
   Insn 10(l0): point = 12
   Insn 9(l0): point = 14
   Insn 8(l0): point = 16
   Insn 7(l0): point = 18
   Insn 2(l0): point = 20
 a0(r136): [3..14]
 a1(r140): [3..4]
 a2(r134): [5..20]
 a3(r138): [7..8]
 a4(r137): [9..12]
Compressing live ranges: from 23 to 9 - 39%
Ranges after the compression:
 a0(r136): [0..7]
 a1(r140): [0..1]
 a2(r134): [2..8]
 a3(r138): [3..4]
 a4(r137): [5..6]
+++Allocating 40 bytes for conflict table (uncompressed size 40)
;; a0(r136,l0) conflicts: a1(r140,l0) a2(r134,l0) a3(r138,l0) a4(r137,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r140,l0) conflicts: a0(r136,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a2(r134,l0) conflicts: a0(r136,l0) a3(r138,l0) a4(r137,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a3(r138,l0) conflicts: a0(r136,l0) a2(r134,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a4(r137,l0) conflicts: a0(r136,l0) a2(r134,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  cp0:a3(r138)<->a4(r137)@125:shuffle
  regions=1, blocks=3, points=9
    allocnos=5, copies=1, conflicts=1, ranges=5

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r136 1r140 2r134 3r138 4r137
    modified regnos: 134 136 137 138 140
    border:
    Pressure: GENERAL_REGS=5
    Reg 136 of GENERAL_REGS has 2 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
    Reg 134 of GENERAL_REGS has 2 regs less
    Reg 138 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
      Pushing a4(r137,l0)
      Pushing a3(r138,l0)
      Pushing a1(r140,l0)
      Pushing a2(r134,l0)
      Pushing a0(r136,l0)
      Popping a0(r136,l0)  -- assign reg 3
      Popping a2(r134,l0)  -- assign reg 4
      Popping a1(r140,l0)  -- assign reg 2
      Popping a3(r138,l0)  -- assign reg 2
      Popping a4(r137,l0)  -- assign reg 2
Disposition:
    2:r134 l0     4    0:r136 l0     3    4:r137 l0     2    3:r138 l0     2
    1:r140 l0     2
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, dead_or_set: 0, 134
insn=7, live_throughout: 13, 134, dead_or_set: 0
insn=8, live_throughout: 13, 134, dead_or_set: 0, 14
insn=9, live_throughout: 13, 14, 134, dead_or_set: 136
insn=10, live_throughout: 13, 14, 134, 136, dead_or_set: 137
insn=20, live_throughout: 13, 14, 134, 136, 137, dead_or_set: 0
insn=11, live_throughout: 0, 13, 14, 134, 136, dead_or_set: 137, 138
insn=12, live_throughout: 0, 13, 14, 134, 136, dead_or_set: 138
insn=14, live_throughout: 0, 13, 14, 136, dead_or_set: 134, 140
insn=15, live_throughout: 0, 13, 14, dead_or_set: 136, 140
insn=26, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 136: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 137: (insn_list:REG_DEP_TRUE 10 (nil))
init_insns for 138: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 15 (nil))
changing reg in insn 2
changing reg in insn 14
changing reg in insn 10
changing reg in insn 10
changing reg in insn 9
changing reg in insn 15
changing reg in insn 12
changing reg in insn 14
changing reg in insn 11
changing reg in insn 10
changing reg in insn 11
changing reg in insn 11
changing reg in insn 12
changing reg in insn 14
changing reg in insn 15
Spilling for insn 12.
Spilling for insn 15.

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [136]) [0 phys_initrd_start+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [136]) [0 phys_initrd_start+0 S4 A32])

Reloads for insn # 15
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [136])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [136])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


parse_tag_initrd

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={4d,4u} r1={2d} r2={5d,3u} r3={3d,2u,2d} r4={1d,2u,1d} r12={2d} r13={1d,3u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 149{131d,15u,3e} in 11{10 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 16 2 NOTE_INSN_DELETED)

(note 16 6 2 2 NOTE_INSN_DELETED)

(insn 2 16 7 2 arch/arm/mm/init.c:57 (set (reg/v/f:SI 4 r4 [orig:134 tag ] [134])
        (reg:SI 0 r0 [ tag ])) 167 {*arm_movsi_insn} (nil))

(insn 7 2 8 2 arch/arm/mm/init.c:58 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10ee9180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10ee9180>)
        (nil)))

(call_insn 8 7 9 2 arch/arm/mm/init.c:58 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 9 8 10 2 arch/arm/mm/init.c:60 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 10 9 20 2 arch/arm/mm/init.c:60 (set (reg:SI 2 r2 [orig:137 <variable>.u.initrd.start ] [137])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 tag ] [134])
                (const_int 8 [0x8])) [0 <variable>.u.initrd.start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 tag ] [134])
                (const_int 8 [0x8])) [0 <variable>.u.initrd.start+0 S4 A32])
        (nil)))

(insn 20 10 11 2 arch/arm/mm/init.c:63 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 11 20 12 2 arch/arm/mm/init.c:60 (set (reg:SI 2 r2 [138])
        (plus:SI (reg:SI 2 r2 [orig:137 <variable>.u.initrd.start ] [137])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [136]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(insn 12 11 14 2 arch/arm/mm/init.c:60 (set (mem/c/i:SI (reg/f:SI 3 r3 [136]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 2 r2 [138])) 167 {*arm_movsi_insn} (nil))

(insn 14 12 15 2 arch/arm/mm/init.c:61 (set (reg:SI 2 r2 [orig:140 <variable>.u.initrd.size ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 tag ] [134])
                (const_int 12 [0xc])) [0 <variable>.u.initrd.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [136])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn 15 14 26 2 arch/arm/mm/init.c:61 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [136])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 2 r2 [orig:140 <variable>.u.initrd.size ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 26 15 30 2 arch/arm/mm/init.c:63 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 30 26 31 NOTE_INSN_DELETED)

(note 31 30 0 NOTE_INSN_DELETED)


;; Function free_initrd_mem (free_initrd_mem)[0:1362]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 26 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 26 (    2)
scanning new insn with uid = 131.
verify found no changes in insn with uid = 131.
deleting insn with uid = 105.
scanning new insn with uid = 132.
verify found no changes in insn with uid = 132.
deleting insn with uid = 62.
scanning new insn with uid = 133.
verify found no changes in insn with uid = 133.
deleting insn with uid = 38.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 26 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 26 (    2)

Pass 0 for finding allocno costs

    a39 (r198,l1) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r196,l2) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r194,l2) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r191,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r187,l2) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r174,l1) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r173,l1) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r172,l2) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r172,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r171,l2) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r170,l1) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r169,l2) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r168,l2) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r167,l2) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r166,l2) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r165,l2) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r164,l1) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a19(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r165,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r166,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a28(r169,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a29(r171,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r172,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a31(r194,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r196,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r168,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a34(r187,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r173,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a38(r174,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a39(r198,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r198: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r191: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS

  a0(r191,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r172,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a8(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a17(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a18(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a19(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r165,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r166,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a27(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a28(r169,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a29(r171,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r172,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a31(r194,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r196,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r168,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a34(r187,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a35(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a36(r170,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a37(r173,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a38(r174,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a39(r198,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 108(l0): point = 1
   Insn 131(l0): point = 3
   Insn 107(l0): point = 5
   Insn 106(l0): point = 7
   Insn 102(l0): point = 10
   Insn 100(l0): point = 12
   Insn 99(l0): point = 14
   Insn 101(l0): point = 16
   Insn 95(l0): point = 19
   Insn 94(l0): point = 21
   Insn 125(l0): point = 24
   Insn 75(l0): point = 26
   Insn 69(l0): point = 28
   Insn 70(l0): point = 30
   Insn 63(l0): point = 32
   Insn 132(l0): point = 34
   Insn 71(l0): point = 36
   Insn 68(l0): point = 38
   Insn 67(l0): point = 40
   Insn 65(l0): point = 42
   Insn 81(l0): point = 44
   Insn 66(l0): point = 46
   Insn 64(l0): point = 48
   Insn 123(l0): point = 51
   Insn 47(l0): point = 53
   Insn 128(l0): point = 55
   Insn 127(l0): point = 57
   Insn 52(l0): point = 59
   Insn 44(l0): point = 61
   Insn 48(l0): point = 63
   Insn 43(l0): point = 65
   Insn 41(l0): point = 68
   Insn 40(l0): point = 70
   Insn 39(l0): point = 72
   Insn 133(l0): point = 74
   Insn 34(l0): point = 76
   Insn 33(l0): point = 78
   Insn 92(l2): point = 81
   Insn 91(l2): point = 83
   Insn 119(l2): point = 85
   Insn 85(l2): point = 88
   Insn 121(l2): point = 90
   Insn 83(l2): point = 92
   Insn 82(l2): point = 94
   Insn 80(l2): point = 96
   Insn 79(l2): point = 98
   Insn 87(l2): point = 100
   Insn 77(l2): point = 102
   Insn 86(l2): point = 104
   Insn 76(l2): point = 106
   Insn 60(l1): point = 109
   Insn 57(l1): point = 111
   Insn 54(l1): point = 113
   Insn 59(l1): point = 115
   Insn 53(l1): point = 118
 a0(r191): [2..3]
 a1(r193): [2..5]
 a2(r165): [6..36]
 a3(r192): [6..7]
 a4(r169): [8..42]
 a5(r172): [8..32]
 a6(r167): [17..28]
 a7(r194): [24..26]
 a8(r185): [29..38]
 a9(r166): [24..30]
 a10(r182): [33..34]
 a11(r171): [24..40]
 a12(r184): [41..46]
 a13(r183): [43..48]
 a14(r196): [24..44]
 a15(r174): [47..76]
 a16(r173): [49..78]
 a17(r170): [51..53]
 a18(r179): [54..57]
 a19(r177): [58..61]
 a20(r198): [51..59]
 a21(r178): [62..65]
 a22(r164): [51..63]
 a23(r176): [71..72]
 a24(r175): [73..74]
 a25(r165): [81..108]
 a26(r166): [81..108]
 a27(r167): [81..108]
 a28(r169): [81..108]
 a29(r171): [81..108]
 a30(r172): [81..108]
 a31(r194): [81..108]
 a32(r196): [81..108]
 a33(r168): [93..102]
 a34(r187): [103..106]
 a35(r164): [109..120]
 a36(r170): [109..120]
 a37(r173): [109..120]
 a38(r174): [109..120]
 a39(r198): [109..120]
 Rebuilding regno allocno list for 187
 Rebuilding regno allocno list for 168
Compressing live ranges: from 121 to 50 - 41%
Ranges after the compression:
 a0(r191): [0..1]
 a1(r193): [0..2]
 a2(r165): [42..47] [3..15]
 a3(r192): [3..4]
 a4(r169): [42..47] [5..19]
 a5(r172): [42..47] [5..12]
 a6(r167): [42..47] [6..9]
 a7(r194): [42..47] [7..8]
 a8(r185): [10..16]
 a9(r166): [42..47] [7..11]
 a10(r182): [13..14]
 a11(r171): [42..47] [7..17]
 a12(r184): [18..22]
 a13(r183): [20..24]
 a14(r196): [42..47] [7..21]
 a15(r174): [48..49] [23..40]
 a16(r173): [48..49] [25..41]
 a17(r170): [48..49] [26..27]
 a18(r179): [28..29]
 a19(r177): [30..32]
 a20(r198): [48..49] [26..31]
 a21(r178): [33..35]
 a22(r164): [48..49] [26..34]
 a23(r176): [36..37]
 a24(r175): [38..39]
 a33(r168): [43..44]
 a34(r187): [45..46]
+++Allocating 216 bytes for conflict table (uncompressed size 320)
;; a0(r191,l0) conflicts: a1(r193,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r193,l0) conflicts: a0(r191,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r165,l0) conflicts: a3(r192,l0) a4(r169,l0) a5(r172,l0) a6(r167,l0) a7(r194,l0) a9(r166,l0) a11(r171,l0) a14(r196,l0) a8(r185,l0) a10(r182,l0) a33(r168,l0) a34(r187,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r192,l0) conflicts: a2(r165,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r169,l0) conflicts: a2(r165,l0) a5(r172,l0) a6(r167,l0) a7(r194,l0) a9(r166,l0) a11(r171,l0) a14(r196,l0) a8(r185,l0) a10(r182,l0) a12(r184,l0) a33(r168,l0) a34(r187,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r172,l0) conflicts: a2(r165,l0) a4(r169,l0) a6(r167,l0) a7(r194,l0) a9(r166,l0) a11(r171,l0) a14(r196,l0) a8(r185,l0) a33(r168,l0) a34(r187,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a6(r167,l0) conflicts: a2(r165,l0) a4(r169,l0) a5(r172,l0) a7(r194,l0) a9(r166,l0) a11(r171,l0) a14(r196,l0) a33(r168,l0) a34(r187,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a7(r194,l0) conflicts: a2(r165,l0) a4(r169,l0) a5(r172,l0) a6(r167,l0) a9(r166,l0) a11(r171,l0) a14(r196,l0) a33(r168,l0) a34(r187,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r185,l0) conflicts: a2(r165,l0) a4(r169,l0) a5(r172,l0) a9(r166,l0) a11(r171,l0) a14(r196,l0) a10(r182,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r166,l0) conflicts: a2(r165,l0) a4(r169,l0) a5(r172,l0) a6(r167,l0) a7(r194,l0) a11(r171,l0) a14(r196,l0) a8(r185,l0) a33(r168,l0) a34(r187,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a10(r182,l0) conflicts: a2(r165,l0) a4(r169,l0) a11(r171,l0) a14(r196,l0) a8(r185,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r171,l0) conflicts: a2(r165,l0) a4(r169,l0) a5(r172,l0) a6(r167,l0) a7(r194,l0) a9(r166,l0) a14(r196,l0) a8(r185,l0) a10(r182,l0) a33(r168,l0) a34(r187,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a12(r184,l0) conflicts: a4(r169,l0) a14(r196,l0) a13(r183,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r183,l0) conflicts: a14(r196,l0) a12(r184,l0) a15(r174,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r196,l0) conflicts: a2(r165,l0) a4(r169,l0) a5(r172,l0) a6(r167,l0) a7(r194,l0) a9(r166,l0) a11(r171,l0) a8(r185,l0) a10(r182,l0) a12(r184,l0) a13(r183,l0) a33(r168,l0) a34(r187,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a15(r174,l0) conflicts: a13(r183,l0) a16(r173,l0) a17(r170,l0) a20(r198,l0) a22(r164,l0) a18(r179,l0) a19(r177,l0) a21(r178,l0) a23(r176,l0) a24(r175,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r173,l0) conflicts: a15(r174,l0) a17(r170,l0) a20(r198,l0) a22(r164,l0) a18(r179,l0) a19(r177,l0) a21(r178,l0) a23(r176,l0) a24(r175,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a17(r170,l0) conflicts: a15(r174,l0) a16(r173,l0) a20(r198,l0) a22(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r179,l0) conflicts: a15(r174,l0) a16(r173,l0) a20(r198,l0) a22(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r177,l0) conflicts: a15(r174,l0) a16(r173,l0) a20(r198,l0) a22(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r198,l0) conflicts: a15(r174,l0) a16(r173,l0) a17(r170,l0) a22(r164,l0) a18(r179,l0) a19(r177,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r178,l0) conflicts: a15(r174,l0) a16(r173,l0) a22(r164,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a22(r164,l0) conflicts: a15(r174,l0) a16(r173,l0) a17(r170,l0) a20(r198,l0) a18(r179,l0) a19(r177,l0) a21(r178,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a23(r176,l0) conflicts: a15(r174,l0) a16(r173,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a24(r175,l0) conflicts: a15(r174,l0) a16(r173,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a33(r168,l0) conflicts: a2(r165,l0) a4(r169,l0) a5(r172,l0) a6(r167,l0) a7(r194,l0) a9(r166,l0) a11(r171,l0) a14(r196,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a34(r187,l0) conflicts: a2(r165,l0) a4(r169,l0) a5(r172,l0) a6(r167,l0) a7(r194,l0) a9(r166,l0) a11(r171,l0) a14(r196,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  cp0:a3(r192)<->a5(r172)@125:shuffle
  cp1:a3(r192)<->a4(r169)@125:shuffle
  cp2:a1(r193)<->a3(r192)@125:shuffle
  cp3:a1(r193)<->a2(r165)@125:shuffle
  cp4:a33(r168)<->a34(r187)@125:shuffle
  cp5:a13(r183)<->a16(r173)@125:shuffle
  cp6:a12(r184)<->a15(r174)@125:shuffle
  cp7:a4(r169)<->a13(r183)@125:shuffle
  cp8:a11(r171)<->a12(r184)@125:shuffle
  cp9:a6(r167)<->a8(r185)@125:shuffle
  cp10:a19(r177)<->a21(r178)@125:shuffle
  cp11:a18(r179)<->a19(r177)@125:shuffle
  cp12:a17(r170)<->a18(r179)@125:shuffle
  regions=3, blocks=13, points=50
    allocnos=40, copies=13, conflicts=3, ranges=40

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 12 11 10 9 8 7 6 5 4 3 2
    all: 0r191 1r193 2r165 3r192 4r169 5r172 6r167 7r194 8r185 9r166 10r182 11r171 12r184 13r183 14r196 15r174 16r173 17r170 18r179 19r177 20r198 21r178 22r164 23r176 24r175 33r168 34r187
    modified regnos: 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 182 183 184 185 187 191 192 193 194 196 198
    border:
    Pressure: GENERAL_REGS=12
    Reg 191 of GENERAL_REGS has 1 regs less
    Reg 193 of GENERAL_REGS has 1 regs less
    Reg 165 of GENERAL_REGS has 4 regs less
    Reg 192 of GENERAL_REGS has 1 regs less
    Reg 169 of GENERAL_REGS has 4 regs less
    Reg 172 of GENERAL_REGS has 4 regs less
    Reg 167 of GENERAL_REGS has 3 regs less
    Reg 194 of GENERAL_REGS has 3 regs less
    Reg 185 of GENERAL_REGS has 1 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 182 of GENERAL_REGS has 1 regs less
    Reg 171 of GENERAL_REGS has 3 regs less
    Reg 184 of GENERAL_REGS has 1 regs less
    Reg 183 of GENERAL_REGS has 1 regs less
    Reg 196 of GENERAL_REGS has 3 regs less
    Reg 174 of GENERAL_REGS has 1 regs less
    Reg 173 of GENERAL_REGS has 2 regs less
    Reg 170 of GENERAL_REGS has 1 regs less
    Reg 179 of GENERAL_REGS has 1 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 198 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 175 of GENERAL_REGS has 1 regs less
    Reg 168 of GENERAL_REGS has 3 regs less
    Reg 187 of GENERAL_REGS has 1 regs less
      Pushing a34(r187,l0)
      Pushing a24(r175,l0)
      Pushing a23(r176,l0)
      Pushing a21(r178,l0)
      Pushing a20(r198,l0)
      Pushing a19(r177,l0)
      Pushing a13(r183,l0)
      Pushing a12(r184,l0)
      Pushing a10(r182,l0)
      Pushing a8(r185,l0)
      Pushing a3(r192,l0)
      Pushing a1(r193,l0)
      Pushing a0(r191,l0)
      Pushing a15(r174,l0)
      Pushing a22(r164,l0)
      Pushing a18(r179,l0)
      Pushing a17(r170,l0)
      Pushing a16(r173,l0)
      Pushing a5(r172,l0)(potential spill: pri=1538, cost=20000)
      Pushing a14(r196,l0)
      Pushing a7(r194,l0)
      Pushing a11(r171,l0)
      Pushing a6(r167,l0)
      Pushing a33(r168,l0)
      Pushing a9(r166,l0)
      Pushing a4(r169,l0)
      Pushing a2(r165,l0)
      Popping a2(r165,l0)  -- assign reg 4
      Popping a4(r169,l0)  -- assign reg 5
      Popping a9(r166,l0)  -- assign reg 6
      Popping a33(r168,l0)  -- assign reg 7
      Popping a6(r167,l0)  -- assign reg 8
      Popping a11(r171,l0)  -- assign reg 10
      Popping a7(r194,l0)  -- assign reg 9
      Popping a14(r196,l0)  -- assign reg 11
      Popping a5(r172,l0)  -- (memory is more profitable 20000 vs 40000) spill
      Popping a16(r173,l0)  -- assign reg 0
      Popping a17(r170,l0)  -- assign reg 3
      Popping a18(r179,l0)  -- assign reg 3
      Popping a22(r164,l0)  -- assign reg 2
      Popping a15(r174,l0)  -- assign reg 1
      Popping a0(r191,l0)  -- assign reg 3
      Popping a1(r193,l0)  -- assign reg 4
      Popping a3(r192,l0)  -- assign reg 5
      Popping a8(r185,l0)  -- assign reg 8
      Popping a10(r182,l0)  -- assign reg 3
      Popping a12(r184,l0)  -- assign reg 10
      Popping a13(r183,l0)  -- assign reg 5
      Popping a19(r177,l0)  -- assign reg 3
      Popping a20(r198,l0)  -- assign reg 12
      Popping a21(r178,l0)  -- assign reg 3
      Popping a23(r176,l0)  -- assign reg 3
      Popping a24(r175,l0)  -- assign reg 3
      Popping a34(r187,l0)  -- assign reg 7
Disposition:
   22:r164 l0     2    2:r165 l0     4    9:r166 l0     6    6:r167 l0     8
   33:r168 l0     7    4:r169 l0     5   17:r170 l0     3   11:r171 l0    10
    5:r172 l0   mem   16:r173 l0     0   15:r174 l0     1   24:r175 l0     3
   23:r176 l0     3   19:r177 l0     3   21:r178 l0     3   18:r179 l0     3
   10:r182 l0     3   13:r183 l0     5   12:r184 l0    10    8:r185 l0     8
   34:r187 l0     7    0:r191 l0     3    3:r192 l0     5    1:r193 l0     4
    7:r194 l0     9   14:r196 l0    11   20:r198 l0    12
New iteration of spill/restore move
+++Costs: overall 12000, reg -8000, mem 20000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=33, live_throughout: 1, 13, 14, dead_or_set: 0, 173
insn=34, live_throughout: 13, 14, 173, dead_or_set: 1, 174
insn=133, live_throughout: 13, 14, 173, 174, dead_or_set: 175
insn=39, live_throughout: 13, 14, 173, 174, dead_or_set: 175, 176
insn=40, live_throughout: 13, 14, 173, 174, dead_or_set: 176
insn=41, live_throughout: 13, 14, 173, 174, dead_or_set: 
insn=43, live_throughout: 13, 14, 173, 174, dead_or_set: 178
insn=48, live_throughout: 13, 14, 173, 174, 178, dead_or_set: 164
insn=44, live_throughout: 13, 14, 164, 173, 174, dead_or_set: 177, 178
insn=52, live_throughout: 13, 14, 164, 173, 174, 177, dead_or_set: 198
insn=127, live_throughout: 13, 14, 164, 173, 174, 198, dead_or_set: 177, 179
insn=128, live_throughout: 13, 14, 164, 173, 174, 198, dead_or_set: 179
insn=47, live_throughout: 13, 14, 164, 173, 174, 198, dead_or_set: 170, 179
insn=123, live_throughout: 13, 14, 164, 170, 173, 174, 198, dead_or_set: 
insn=58, live_throughout: 13, 14, 164, 170, 173, 174, 198, dead_or_set: 
insn=53, live_throughout: 13, 14, 164, 170, 173, 174, 198, dead_or_set: 
insn=55, live_throughout: 13, 14, 164, 170, 173, 174, 198, dead_or_set: 
insn=59, live_throughout: 13, 14, 164, 170, 173, 174, 198, dead_or_set: 
insn=54, live_throughout: 13, 14, 24, 164, 173, 174, 198, dead_or_set: 170
insn=57, live_throughout: 13, 14, 24, 170, 173, 174, 198, dead_or_set: 164
insn=60, live_throughout: 13, 14, 164, 170, 173, 174, 198, dead_or_set: 
insn=64, live_throughout: 13, 14, 174, dead_or_set: 173, 183
insn=66, live_throughout: 13, 14, 183, dead_or_set: 174, 184
insn=81, live_throughout: 13, 14, 183, 184, dead_or_set: 196
insn=65, live_throughout: 13, 14, 184, 196, dead_or_set: 169, 183
insn=67, live_throughout: 13, 14, 169, 196, dead_or_set: 171, 184
insn=68, live_throughout: 13, 14, 169, 171, 196, dead_or_set: 185
insn=71, live_throughout: 13, 14, 169, 171, 185, 196, dead_or_set: 165
insn=132, live_throughout: 13, 14, 165, 169, 171, 185, 196, dead_or_set: 182
insn=63, live_throughout: 13, 14, 165, 169, 171, 185, 196, dead_or_set: 172, 182
insn=70, live_throughout: 13, 14, 165, 169, 171, 172, 185, 196, dead_or_set: 166
insn=69, live_throughout: 13, 14, 165, 166, 169, 171, 172, 196, dead_or_set: 167, 185
insn=75, live_throughout: 13, 14, 165, 166, 167, 169, 171, 172, 196, dead_or_set: 194
insn=125, live_throughout: 13, 14, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 
insn=90, live_throughout: 0, 13, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 
insn=76, live_throughout: 0, 13, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 187
insn=86, live_throughout: 0, 13, 166, 167, 169, 171, 172, 187, 194, 196, dead_or_set: 165
insn=77, live_throughout: 0, 13, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 168, 187
insn=87, live_throughout: 0, 13, 165, 167, 168, 169, 171, 172, 194, 196, dead_or_set: 166
insn=79, live_throughout: 0, 13, 165, 166, 167, 168, 169, 171, 172, 194, 196, dead_or_set: 1
insn=80, live_throughout: 13, 165, 166, 167, 168, 169, 171, 172, 194, 196, dead_or_set: 0, 1, 14
insn=82, live_throughout: 13, 165, 166, 167, 168, 169, 171, 172, 194, 196, dead_or_set: 
insn=83, live_throughout: 13, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 0, 168
insn=121, live_throughout: 0, 13, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 1
insn=85, live_throughout: 13, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 0, 1, 14
insn=88, live_throughout: 13, 14, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 
insn=119, live_throughout: 13, 14, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 0
insn=91, live_throughout: 0, 13, 14, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 
insn=92, live_throughout: 0, 13, 14, 165, 166, 167, 169, 171, 172, 194, 196, dead_or_set: 
insn=94, live_throughout: 13, 14, 165, 167, 169, 172, dead_or_set: 
insn=95, live_throughout: 13, 14, 165, 167, 169, 172, dead_or_set: 
insn=101, live_throughout: 13, 165, 169, 172, dead_or_set: 2, 167
insn=99, live_throughout: 2, 13, 165, 169, 172, dead_or_set: 0
insn=100, live_throughout: 0, 2, 13, 165, 169, 172, dead_or_set: 1
insn=102, live_throughout: 13, 165, 169, 172, dead_or_set: 0, 1, 2, 14
insn=103, live_throughout: 13, 14, 165, 169, 172, dead_or_set: 
insn=106, live_throughout: 13, 14, 165, dead_or_set: 169, 172, 192
insn=107, live_throughout: 13, 14, dead_or_set: 165, 192, 193
insn=131, live_throughout: 13, 14, 193, dead_or_set: 191
insn=108, live_throughout: 13, 14, dead_or_set: 191, 193
insn=114, live_throughout: 13, 14, dead_or_set: 
init_insns for 175: (insn_list:REG_DEP_TRUE 133 (nil))
init_insns for 182: (insn_list:REG_DEP_TRUE 132 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 76 (nil))
init_insns for 191: (insn_list:REG_DEP_TRUE 131 (nil))
init_insns for 194: (insn_list:REG_DEP_TRUE 75 (nil))
init_insns for 196: (insn_list:REG_DEP_TRUE 81 (nil))
init_insns for 198: (insn_list:REG_DEP_TRUE 52 (nil))
      Slot 1 (freq,size): a5r172(2000,4)
      Assigning 172(freq=2000) a new slot 0
changing reg in insn 57
changing reg in insn 48
changing reg in insn 53
changing reg in insn 57
changing reg in insn 86
changing reg in insn 71
changing reg in insn 107
changing reg in insn 91
changing reg in insn 86
changing reg in insn 87
changing reg in insn 70
changing reg in insn 87
changing reg in insn 77
changing reg in insn 69
changing reg in insn 101
changing reg in insn 94
changing reg in insn 77
changing reg in insn 82
changing reg in insn 83
changing reg in insn 79
changing reg in insn 65
changing reg in insn 106
changing reg in insn 71
changing reg in insn 70
changing reg in insn 68
changing reg in insn 54
changing reg in insn 47
changing reg in insn 59
changing reg in insn 54
changing reg in insn 67
changing reg in insn 91
changing reg in insn 68
changing reg in insn 33
changing reg in insn 64
changing reg in insn 48
changing reg in insn 47
changing reg in insn 34
changing reg in insn 66
changing reg in insn 43
changing reg in insn 44
changing reg in insn 133
changing reg in insn 39
changing reg in insn 39
changing reg in insn 40
changing reg in insn 44
changing reg in insn 127
changing reg in insn 43
changing reg in insn 44
changing reg in insn 128
changing reg in insn 127
changing reg in insn 128
changing reg in insn 47
changing reg in insn 132
changing reg in insn 63
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 67
changing reg in insn 68
changing reg in insn 69
changing reg in insn 76
changing reg in insn 77
changing reg in insn 131
changing reg in insn 108
changing reg in insn 106
changing reg in insn 107
changing reg in insn 107
changing reg in insn 108
changing reg in insn 75
changing reg in insn 76
changing reg in insn 76
changing reg in insn 81
changing reg in insn 82
changing reg in insn 52
changing reg in insn 53
Spilling for insn 53.
Spilling for insn 63.
Spilling for insn 82.
Spilling for insn 106.
Using reg 3 for reload 0
Spilling for insn 108.

Reloads for insn # 53
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
                                                        (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
                                                        (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])

Reloads for insn # 63
Reload 0: reload_out (SI) = (reg:SI 172 [ totalram_pages.414 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 172 [ totalram_pages.414 ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 82
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:168 page ] [168])
                                                        (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:168 page ] [168])
                                                        (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])

Reloads for insn # 106
Reload 0: reload_in (SI) = (reg:SI 172 [ totalram_pages.414 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:SI 172 [ totalram_pages.414 ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 108
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [191]) [0 totalram_pages+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [191]) [0 totalram_pages+0 S4 A32])
deleting insn with uid = 33.
deleting insn with uid = 34.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 80.
verify found no changes in insn with uid = 85.
verify found no changes in insn with uid = 102.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 26 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 26 (    2)


free_initrd_mem

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,6u} r1={7d,5u,1d} r2={7d,3u} r3={16d,12u} r4={3d,4u} r5={3d,6u} r6={2d,2u} r7={2d,4u} r8={2d,3u} r9={1d,1u,1d} r10={2d,3u} r11={1d,1u} r12={5d,1u} r13={1d,17u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={7d,4u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 475{400d,73u,2e} in 55{52 regular + 3 call} insns.
(note 32 0 36 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 36 32 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 35 36 133 2 NOTE_INSN_FUNCTION_BEG)

(insn 133 35 39 2 arch/arm/mm/init.c:756 (set (reg/f:SI 3 r3 [175])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 39 133 40 2 arch/arm/mm/init.c:756 (set (reg:SI 3 r3 [orig:176 keep_initrd ] [176])
        (mem/c/i:SI (reg/f:SI 3 r3 [175]) [0 keep_initrd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 keep_initrd+0 S4 A32])
        (nil)))

(insn 40 39 41 2 arch/arm/mm/init.c:756 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:176 keep_initrd ] [176])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 41 40 42 2 arch/arm/mm/init.c:756 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 3 12)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 13 [sp] 14 [lr]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 42 41 45 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 45 42 43 3 NOTE_INSN_DELETED)

(insn 43 45 48 3 arch/arm/mm/init.c:757 (set (reg:SI 3 r3 [178])
        (plus:SI (reg/v:SI 1 r1 [orig:174 end ] [174])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 48 43 44 3 arch/arm/mm/init.c:757 (set (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
        (reg/v:SI 0 r0 [orig:173 start ] [173])) 167 {*arm_movsi_insn} (nil))

(insn 44 48 52 3 arch/arm/mm/init.c:757 (set (reg:SI 3 r3 [177])
        (plus:SI (reg:SI 3 r3 [178])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 1 r1 [orig:174 end ] [174])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 52 44 127 3 arch/arm/mm/init.c:445 (set (reg:SI 12 ip [198])
        (const_int -402792720 [0xffffffffe7fddef0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -402792720 [0xffffffffe7fddef0])
        (nil)))

(insn 127 52 128 3 arch/arm/mm/init.c:757 (set (reg:SI 3 r3 [179])
        (and:SI (reg:SI 3 r3 [177])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 128 127 47 3 arch/arm/mm/init.c:757 (set (reg:SI 3 r3 [179])
        (and:SI (reg:SI 3 r3 [179])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 47 128 123 3 arch/arm/mm/init.c:757 (set (reg/v:SI 3 r3 [orig:170 count ] [170])
        (minus:SI (reg:SI 3 r3 [179])
            (reg/v:SI 0 r0 [orig:173 start ] [173]))) 28 {*arm_subsi3_insn} (nil))

(jump_insn 123 47 124 3 (set (pc)
        (label_ref 55)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 124 123 58)

;; Start of basic block ( 5) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [91.0%] 
(code_label 58 124 51 4 26 "" [1 uses])

(note 51 58 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 53 51 55 4 arch/arm/mm/init.c:445 (set (mem:SI (plus:SI (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
                (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])
        (reg:SI 12 ip [198])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -402792720 [0xffffffffe7fddef0])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 55 53 56 5 25 "" [1 uses])

(note 56 55 59 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 59 56 54 5 arch/arm/mm/init.c:444 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:170 count ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 54 59 57 5 arch/arm/mm/init.c:444 discrim 2 (set (reg/v:SI 3 r3 [orig:170 count ] [170])
        (plus:SI (reg/v:SI 3 r3 [orig:170 count ] [170])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(insn 57 54 60 5 arch/arm/mm/init.c:444 discrim 2 (set (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
        (plus:SI (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 60 57 61 5 arch/arm/mm/init.c:444 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 58)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 5 -> ( 4 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [91.0%] 
;; Succ edge  6 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	

;; Pred edge  5 [9.0%]  (fallthru,loop_exit)
(note 61 60 64 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 64 61 66 6 arch/arm/mm/init.c:758 (set (reg:SI 5 r5 [183])
        (plus:SI (reg/v:SI 0 r0 [orig:173 start ] [173])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 66 64 81 6 arch/arm/mm/init.c:758 (set (reg:SI 10 sl [184])
        (plus:SI (reg/v:SI 1 r1 [orig:174 end ] [174])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 81 66 65 6 include/linux/mm.h:417 (set (reg:SI 11 fp [196])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 65 81 67 6 arch/arm/mm/init.c:758 (set (reg/v:SI 5 r5 [orig:169 pfn ] [169])
        (lshiftrt:SI (reg:SI 5 r5 [183])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 67 65 68 6 arch/arm/mm/init.c:758 (set (reg:SI 10 sl [orig:171 D.25487 ] [171])
        (lshiftrt:SI (reg:SI 10 sl [184])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 68 67 71 6 arch/arm/mm/init.c:421 (set (reg:SI 8 r8 [185])
        (minus:SI (reg:SI 10 sl [orig:171 D.25487 ] [171])
            (reg/v:SI 5 r5 [orig:169 pfn ] [169]))) 28 {*arm_subsi3_insn} (nil))

(insn 71 68 132 6 arch/arm/mm/init.c:421 (set (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165])
        (reg/v:SI 5 r5 [orig:169 pfn ] [169])) 167 {*arm_movsi_insn} (nil))

(insn 132 71 63 6 arch/arm/mm/init.c:758 (set (reg/f:SI 3 r3 [182])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn 63 132 135 6 arch/arm/mm/init.c:758 (set (reg:SI 3 r3)
        (mem/c/i:SI (reg/f:SI 3 r3 [182]) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>) [0 totalram_pages+0 S4 A32])
        (nil)))

(insn 135 63 70 6 arch/arm/mm/init.c:758 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 70 135 69 6 arch/arm/mm/init.c:421 (set (reg:SI 6 r6 [orig:166 ivtmp.563 ] [166])
        (ashift:SI (reg/v:SI 5 r5 [orig:169 pfn ] [169])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn 69 70 75 6 arch/arm/mm/init.c:421 (set (reg/v:SI 8 r8 [orig:167 size ] [167])
        (ashift:SI (reg:SI 8 r8 [185])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 75 69 125 6 arch/arm/mm/init.c:424 (set (reg/f:SI 9 r9 [194])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(jump_insn 125 75 126 6 (set (pc)
        (label_ref 88)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%] 

(barrier 126 125 90)

;; Start of basic block ( 8) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 6 [r6] 9 [r9] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  8 [91.0%] 
(code_label 90 126 74 7 28 "" [1 uses])

(note 74 90 76 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 76 74 86 7 arch/arm/mm/init.c:424 (set (reg/f:SI 7 r7 [orig:187 mem_map ] [187])
        (mem/f/c/i:SI (reg/f:SI 9 r9 [194]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 9 r9 [194]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 86 76 77 7 arch/arm/mm/init.c:423 discrim 2 (set (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165])
        (plus:SI (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 77 86 87 7 arch/arm/mm/init.c:424 (set (reg/v/f:SI 7 r7 [orig:168 page ] [168])
        (plus:SI (reg/f:SI 7 r7 [orig:187 mem_map ] [187])
            (reg:SI 6 r6 [orig:166 ivtmp.563 ] [166]))) 4 {*arm_addsi3} (nil))

(insn 87 77 79 7 arch/arm/mm/init.c:423 discrim 2 (set (reg:SI 6 r6 [orig:166 ivtmp.563 ] [166])
        (plus:SI (reg:SI 6 r6 [orig:166 ivtmp.563 ] [166])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 79 87 80 7 include/linux/page-flags.h:207 (set (reg:SI 1 r1)
        (reg/v/f:SI 7 r7 [orig:168 page ] [168])) 167 {*arm_movsi_insn} (nil))

(call_insn 80 79 82 7 include/linux/page-flags.h:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 82 80 83 7 include/linux/mm.h:417 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:168 page ] [168])
                (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
        (reg:SI 11 fp [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 83 82 121 7 arch/arm/mm/init.c:427 (set (reg:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:168 page ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 121 83 85 7 arch/arm/mm/init.c:427 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 85 121 88 7 arch/arm/mm/init.c:427 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10f4c580 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru,dfs_back)
;; Pred edge  6 [100.0%] 
(code_label 88 85 89 8 27 "" [1 uses])

(note 89 88 119 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 119 89 91 8 include/linux/page-flags.h:207 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn 91 119 92 8 arch/arm/mm/init.c:423 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165])
            (reg:SI 10 sl [orig:171 D.25487 ] [171]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 92 91 93 8 arch/arm/mm/init.c:423 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 90)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 8 -> ( 7 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  7 [91.0%] 
;; Succ edge  9 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [9.0%]  (fallthru,loop_exit)
(note 93 92 94 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 94 93 95 9 arch/arm/mm/init.c:431 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:167 size ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 95 94 96 9 arch/arm/mm/init.c:431 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  10 [0.0%]  (fallthru)
;; Succ edge  11 [100.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%]  (fallthru)
(note 96 95 101 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 101 96 99 10 arch/arm/mm/init.c:432 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:167 size ] [167])) 167 {*arm_movsi_insn} (nil))

(insn 99 101 100 10 arch/arm/mm/init.c:432 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1161a480>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1161a480>)
        (nil)))

(insn 100 99 102 10 arch/arm/mm/init.c:432 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11686560>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11686560>)
        (nil)))

(call_insn 102 100 103 10 arch/arm/mm/init.c:432 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 10 -> ( 11)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  9 [100.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
(code_label 103 102 104 11 29 "" [1 uses])

(note 104 103 136 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 136 104 106 11 arch/arm/mm/init.c:758 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 106 136 107 11 arch/arm/mm/init.c:758 (set (reg:SI 5 r5 [192])
        (minus:SI (reg:SI 3 r3)
            (reg/v:SI 5 r5 [orig:169 pfn ] [169]))) 28 {*arm_subsi3_insn} (nil))

(insn 107 106 131 11 arch/arm/mm/init.c:758 (set (reg:SI 4 r4 [193])
        (plus:SI (reg:SI 5 r5 [192])
            (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165]))) 4 {*arm_addsi3} (nil))

(insn 131 107 108 11 arch/arm/mm/init.c:758 (set (reg/f:SI 3 r3 [191])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn 108 131 114 11 arch/arm/mm/init.c:758 (set (mem/c/i:SI (reg/f:SI 3 r3 [191]) [0 totalram_pages+0 S4 A32])
        (reg:SI 4 r4 [193])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 2) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
(code_label 114 108 117 12 30 "" [1 uses])

(note 117 114 130 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 12 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 130 117 134 NOTE_INSN_DELETED)

(note 134 130 0 NOTE_INSN_DELETED)


;; Function free_initmem (free_initmem)[0:1361]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 22 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 22 (    2)
scanning new insn with uid = 89.
verify found no changes in insn with uid = 89.
deleting insn with uid = 66.
scanning new insn with uid = 90.
verify found no changes in insn with uid = 90.
deleting insn with uid = 23.
scanning new insn with uid = 91.
verify found no changes in insn with uid = 91.
deleting insn with uid = 27.
scanning new insn with uid = 92.
verify found no changes in insn with uid = 92.
deleting insn with uid = 25.
scanning new insn with uid = 93.
verify found no changes in insn with uid = 93.
deleting insn with uid = 5.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 22 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 22 (    2)

Pass 0 for finding allocno costs

    a34 (r164,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r164,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r161,l2) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r159,l2) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r152,l2) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r141,l1) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r140,l2) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r139,l2) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r138,l2) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r137,l2) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r136,l2) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r135,l2) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r134,l1) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r133,l2) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r133,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a24(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a25(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r140,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a27(r159,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r161,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a30(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a31(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r164: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a13(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a15(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a16(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r164,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a21(r133,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a23(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a24(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a25(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r140,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a27(r159,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r161,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a29(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a30(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a31(r134,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a32(r141,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a33(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a34(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 69(l0): point = 0
   Insn 89(l0): point = 2
   Insn 68(l0): point = 4
   Insn 67(l0): point = 6
   Insn 63(l0): point = 9
   Insn 61(l0): point = 11
   Insn 60(l0): point = 13
   Insn 62(l0): point = 15
   Insn 56(l0): point = 18
   Insn 55(l0): point = 20
   Insn 85(l0): point = 23
   Insn 30(l0): point = 25
   Insn 31(l0): point = 27
   Insn 24(l0): point = 29
   Insn 90(l0): point = 31
   Insn 29(l0): point = 33
   Insn 32(l0): point = 35
   Insn 28(l0): point = 37
   Insn 91(l0): point = 39
   Insn 36(l0): point = 41
   Insn 26(l0): point = 43
   Insn 92(l0): point = 45
   Insn 42(l0): point = 47
   Insn 83(l0): point = 50
   Insn 7(l0): point = 52
   Insn 93(l0): point = 54
   Insn 14(l0): point = 56
   Insn 12(l0): point = 58
   Insn 8(l0): point = 60
   Insn 6(l0): point = 62
   Insn 53(l2): point = 65
   Insn 52(l2): point = 67
   Insn 78(l2): point = 69
   Insn 46(l2): point = 72
   Insn 80(l2): point = 74
   Insn 44(l2): point = 76
   Insn 43(l2): point = 78
   Insn 41(l2): point = 80
   Insn 40(l2): point = 82
   Insn 48(l2): point = 84
   Insn 38(l2): point = 86
   Insn 47(l2): point = 88
   Insn 37(l2): point = 90
   Insn 21(l1): point = 93
   Insn 20(l1): point = 95
   Insn 16(l1): point = 98
   Insn 15(l1): point = 100
 a0(r156): [1..2]
 a1(r158): [1..4]
 a2(r133): [5..35]
 a3(r157): [5..6]
 a4(r138): [7..43]
 a5(r140): [7..29]
 a6(r136): [16..25]
 a7(r150): [26..33]
 a8(r135): [23..27]
 a9(r147): [30..31]
 a10(r139): [23..37]
 a11(r149): [38..39]
 a12(r159): [23..41]
 a13(r148): [44..45]
 a14(r161): [23..47]
 a15(r141): [50..52]
 a16(r143): [53..62]
 a17(r142): [53..54]
 a18(r164): [50..56]
 a19(r163): [50..58]
 a20(r134): [50..60]
 a21(r133): [65..92]
 a22(r135): [65..92]
 a23(r136): [65..92]
 a24(r138): [65..92]
 a25(r139): [65..92]
 a26(r140): [65..92]
 a27(r159): [65..92]
 a28(r161): [65..92]
 a29(r137): [77..86]
 a30(r152): [87..90]
 a31(r134): [93..102]
 a32(r141): [93..102]
 a33(r163): [93..102]
 a34(r164): [93..102]
 Rebuilding regno allocno list for 152
 Rebuilding regno allocno list for 137
Compressing live ranges: from 103 to 40 - 38%
Ranges after the compression:
 a0(r156): [0..1]
 a1(r158): [0..2]
 a2(r133): [32..37] [3..15]
 a3(r157): [3..4]
 a4(r138): [32..37] [5..20]
 a5(r140): [32..37] [5..11]
 a6(r136): [32..37] [6..8]
 a7(r150): [9..14]
 a8(r135): [32..37] [7..10]
 a9(r147): [12..13]
 a10(r139): [32..37] [7..16]
 a11(r149): [17..18]
 a12(r159): [32..37] [7..19]
 a13(r148): [21..22]
 a14(r161): [32..37] [7..23]
 a15(r141): [38..39] [24..25]
 a16(r143): [26..31]
 a17(r142): [26..27]
 a18(r164): [38..39] [24..28]
 a19(r163): [38..39] [24..29]
 a20(r134): [38..39] [24..30]
 a29(r137): [33..34]
 a30(r152): [35..36]
+++Allocating 184 bytes for conflict table (uncompressed size 280)
;; a0(r156,l0) conflicts: a1(r158,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r158,l0) conflicts: a0(r156,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r133,l0) conflicts: a3(r157,l0) a4(r138,l0) a5(r140,l0) a6(r136,l0) a8(r135,l0) a10(r139,l0) a12(r159,l0) a14(r161,l0) a7(r150,l0) a9(r147,l0) a29(r137,l0) a30(r152,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r157,l0) conflicts: a2(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r138,l0) conflicts: a2(r133,l0) a5(r140,l0) a6(r136,l0) a8(r135,l0) a10(r139,l0) a12(r159,l0) a14(r161,l0) a7(r150,l0) a9(r147,l0) a11(r149,l0) a29(r137,l0) a30(r152,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r140,l0) conflicts: a2(r133,l0) a4(r138,l0) a6(r136,l0) a8(r135,l0) a10(r139,l0) a12(r159,l0) a14(r161,l0) a7(r150,l0) a29(r137,l0) a30(r152,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a6(r136,l0) conflicts: a2(r133,l0) a4(r138,l0) a5(r140,l0) a8(r135,l0) a10(r139,l0) a12(r159,l0) a14(r161,l0) a29(r137,l0) a30(r152,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a7(r150,l0) conflicts: a2(r133,l0) a4(r138,l0) a5(r140,l0) a8(r135,l0) a10(r139,l0) a12(r159,l0) a14(r161,l0) a9(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r135,l0) conflicts: a2(r133,l0) a4(r138,l0) a5(r140,l0) a6(r136,l0) a10(r139,l0) a12(r159,l0) a14(r161,l0) a7(r150,l0) a29(r137,l0) a30(r152,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a9(r147,l0) conflicts: a2(r133,l0) a4(r138,l0) a10(r139,l0) a12(r159,l0) a14(r161,l0) a7(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r139,l0) conflicts: a2(r133,l0) a4(r138,l0) a5(r140,l0) a6(r136,l0) a8(r135,l0) a12(r159,l0) a14(r161,l0) a7(r150,l0) a9(r147,l0) a29(r137,l0) a30(r152,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a11(r149,l0) conflicts: a4(r138,l0) a12(r159,l0) a14(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r159,l0) conflicts: a2(r133,l0) a4(r138,l0) a5(r140,l0) a6(r136,l0) a8(r135,l0) a10(r139,l0) a14(r161,l0) a7(r150,l0) a9(r147,l0) a11(r149,l0) a29(r137,l0) a30(r152,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a13(r148,l0) conflicts: a14(r161,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r161,l0) conflicts: a2(r133,l0) a4(r138,l0) a5(r140,l0) a6(r136,l0) a8(r135,l0) a10(r139,l0) a12(r159,l0) a7(r150,l0) a9(r147,l0) a11(r149,l0) a13(r148,l0) a29(r137,l0) a30(r152,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a15(r141,l0) conflicts: a18(r164,l0) a19(r163,l0) a20(r134,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r143,l0) conflicts: a18(r164,l0) a19(r163,l0) a20(r134,l0) a17(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r142,l0) conflicts: a18(r164,l0) a19(r163,l0) a20(r134,l0) a16(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r164,l0) conflicts: a15(r141,l0) a19(r163,l0) a20(r134,l0) a17(r142,l0) a16(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r163,l0) conflicts: a15(r141,l0) a18(r164,l0) a20(r134,l0) a17(r142,l0) a16(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r134,l0) conflicts: a15(r141,l0) a18(r164,l0) a19(r163,l0) a17(r142,l0) a16(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a29(r137,l0) conflicts: a2(r133,l0) a4(r138,l0) a5(r140,l0) a6(r136,l0) a8(r135,l0) a10(r139,l0) a12(r159,l0) a14(r161,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a30(r152,l0) conflicts: a2(r133,l0) a4(r138,l0) a5(r140,l0) a6(r136,l0) a8(r135,l0) a10(r139,l0) a12(r159,l0) a14(r161,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  cp0:a3(r157)<->a5(r140)@125:shuffle
  cp1:a3(r157)<->a4(r138)@125:shuffle
  cp2:a1(r158)<->a3(r157)@125:shuffle
  cp3:a1(r158)<->a2(r133)@125:shuffle
  cp4:a29(r137)<->a30(r152)@125:shuffle
  cp5:a4(r138)<->a13(r148)@125:shuffle
  cp6:a10(r139)<->a11(r149)@125:shuffle
  cp7:a6(r136)<->a7(r150)@125:shuffle
  cp8:a15(r141)<->a17(r142)@125:shuffle
  cp9:a15(r141)<->a16(r143)@125:shuffle
  regions=3, blocks=11, points=40
    allocnos=35, copies=10, conflicts=4, ranges=35

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 10 9 8 7 6 5 4 3 2
    all: 0r156 1r158 2r133 3r157 4r138 5r140 6r136 7r150 8r135 9r147 10r139 11r149 12r159 13r148 14r161 15r141 16r143 17r142 18r164 19r163 20r134 29r137 30r152
    modified regnos: 133 134 135 136 137 138 139 140 141 142 143 147 148 149 150 152 156 157 158 159 161 163 164
    border:
    Pressure: GENERAL_REGS=12
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 161 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 164 of GENERAL_REGS has 1 regs less
    Reg 163 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
      Pushing a30(r152,l0)
      Pushing a19(r163,l0)
      Pushing a18(r164,l0)
      Pushing a17(r142,l0)
      Pushing a15(r141,l0)
      Pushing a13(r148,l0)
      Pushing a11(r149,l0)
      Pushing a9(r147,l0)
      Pushing a7(r150,l0)
      Pushing a3(r157,l0)
      Pushing a1(r158,l0)
      Pushing a0(r156,l0)
      Pushing a16(r143,l0)
      Pushing a20(r134,l0)
      Pushing a5(r140,l0)(potential spill: pri=1538, cost=20000)
      Pushing a14(r161,l0)
      Pushing a12(r159,l0)
      Pushing a10(r139,l0)
      Pushing a6(r136,l0)
      Pushing a29(r137,l0)
      Pushing a8(r135,l0)
      Pushing a4(r138,l0)
      Pushing a2(r133,l0)
      Popping a2(r133,l0)  -- assign reg 4
      Popping a4(r138,l0)  -- assign reg 5
      Popping a8(r135,l0)  -- assign reg 6
      Popping a29(r137,l0)  -- assign reg 7
      Popping a6(r136,l0)  -- assign reg 8
      Popping a10(r139,l0)  -- assign reg 10
      Popping a12(r159,l0)  -- assign reg 9
      Popping a14(r161,l0)  -- assign reg 11
      Popping a5(r140,l0)  -- (memory is more profitable 20000 vs 40000) spill
      Popping a20(r134,l0)  -- assign reg 3
      Popping a16(r143,l0)  -- assign reg 2
      Popping a0(r156,l0)  -- assign reg 3
      Popping a1(r158,l0)  -- assign reg 4
      Popping a3(r157,l0)  -- assign reg 5
      Popping a7(r150,l0)  -- assign reg 8
      Popping a9(r147,l0)  -- assign reg 3
      Popping a11(r149,l0)  -- assign reg 10
      Popping a13(r148,l0)  -- assign reg 5
      Popping a15(r141,l0)  -- assign reg 2
      Popping a17(r142,l0)  -- assign reg 1
      Popping a18(r164,l0)  -- assign reg 0
      Popping a19(r163,l0)  -- assign reg 12
      Popping a30(r152,l0)  -- assign reg 7
Disposition:
    2:r133 l0     4   20:r134 l0     3    8:r135 l0     6    6:r136 l0     8
   29:r137 l0     7    4:r138 l0     5   10:r139 l0    10    5:r140 l0   mem
   15:r141 l0     2   17:r142 l0     1   16:r143 l0     2    9:r147 l0     3
   13:r148 l0     5   11:r149 l0    10    7:r150 l0     8   30:r152 l0     7
    0:r156 l0     3    3:r157 l0     5    1:r158 l0     4   12:r159 l0     9
   14:r161 l0    11   19:r163 l0    12   18:r164 l0     0
New iteration of spill/restore move
+++Costs: overall 20000, reg 0, mem 20000, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=6, live_throughout: 13, 14, dead_or_set: 143
insn=8, live_throughout: 13, 14, 143, dead_or_set: 134
insn=12, live_throughout: 13, 14, 134, 143, dead_or_set: 163
insn=14, live_throughout: 13, 14, 134, 143, 163, dead_or_set: 164
insn=93, live_throughout: 13, 14, 134, 143, 163, 164, dead_or_set: 142
insn=7, live_throughout: 13, 14, 134, 163, 164, dead_or_set: 141, 142, 143
insn=83, live_throughout: 13, 14, 134, 141, 163, 164, dead_or_set: 
insn=19, live_throughout: 13, 14, 134, 141, 163, 164, dead_or_set: 
insn=15, live_throughout: 13, 14, 134, 141, 163, 164, dead_or_set: 
insn=16, live_throughout: 13, 14, 141, 163, 164, dead_or_set: 134
insn=17, live_throughout: 13, 14, 134, 141, 163, 164, dead_or_set: 
insn=20, live_throughout: 13, 14, 134, 141, 163, 164, dead_or_set: 
insn=21, live_throughout: 13, 14, 134, 141, 163, 164, dead_or_set: 
insn=42, live_throughout: 13, 14, dead_or_set: 161
insn=92, live_throughout: 13, 14, 161, dead_or_set: 148
insn=26, live_throughout: 13, 14, 161, dead_or_set: 138, 148
insn=36, live_throughout: 13, 14, 138, 161, dead_or_set: 159
insn=91, live_throughout: 13, 14, 138, 159, 161, dead_or_set: 149
insn=28, live_throughout: 13, 14, 138, 159, 161, dead_or_set: 139, 149
insn=32, live_throughout: 13, 14, 138, 139, 159, 161, dead_or_set: 133
insn=29, live_throughout: 13, 14, 133, 138, 139, 159, 161, dead_or_set: 150
insn=90, live_throughout: 13, 14, 133, 138, 139, 150, 159, 161, dead_or_set: 147
insn=24, live_throughout: 13, 14, 133, 138, 139, 150, 159, 161, dead_or_set: 140, 147
insn=31, live_throughout: 13, 14, 133, 138, 139, 140, 150, 159, 161, dead_or_set: 135
insn=30, live_throughout: 13, 14, 133, 135, 138, 139, 140, 159, 161, dead_or_set: 136, 150
insn=85, live_throughout: 13, 14, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 
insn=51, live_throughout: 0, 13, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 
insn=37, live_throughout: 0, 13, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 152
insn=47, live_throughout: 0, 13, 135, 136, 138, 139, 140, 152, 159, 161, dead_or_set: 133
insn=38, live_throughout: 0, 13, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 137, 152
insn=48, live_throughout: 0, 13, 133, 136, 137, 138, 139, 140, 159, 161, dead_or_set: 135
insn=40, live_throughout: 0, 13, 133, 135, 136, 137, 138, 139, 140, 159, 161, dead_or_set: 1
insn=41, live_throughout: 13, 133, 135, 136, 137, 138, 139, 140, 159, 161, dead_or_set: 0, 1, 14
insn=43, live_throughout: 13, 133, 135, 136, 137, 138, 139, 140, 159, 161, dead_or_set: 
insn=44, live_throughout: 13, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 0, 137
insn=80, live_throughout: 0, 13, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 1
insn=46, live_throughout: 13, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 0, 1, 14
insn=49, live_throughout: 13, 14, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 
insn=78, live_throughout: 13, 14, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 0
insn=52, live_throughout: 0, 13, 14, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 
insn=53, live_throughout: 0, 13, 14, 133, 135, 136, 138, 139, 140, 159, 161, dead_or_set: 
insn=55, live_throughout: 13, 14, 133, 136, 138, 140, dead_or_set: 
insn=56, live_throughout: 13, 14, 133, 136, 138, 140, dead_or_set: 
insn=62, live_throughout: 13, 133, 138, 140, dead_or_set: 2, 136
insn=60, live_throughout: 2, 13, 133, 138, 140, dead_or_set: 0
insn=61, live_throughout: 0, 2, 13, 133, 138, 140, dead_or_set: 1
insn=63, live_throughout: 13, 133, 138, 140, dead_or_set: 0, 1, 2, 14
insn=64, live_throughout: 13, 14, 133, 138, 140, dead_or_set: 
insn=67, live_throughout: 13, 14, 133, dead_or_set: 138, 140, 157
insn=68, live_throughout: 13, 14, dead_or_set: 133, 157, 158
insn=89, live_throughout: 13, 14, 158, dead_or_set: 156
insn=69, live_throughout: 13, 14, dead_or_set: 156, 158
init_insns for 142: (insn_list:REG_DEP_TRUE 93 (nil))
init_insns for 143: (insn_list:REG_DEP_TRUE 6 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 90 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 92 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 91 (nil))
init_insns for 152: (insn_list:REG_DEP_TRUE 37 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 89 (nil))
init_insns for 159: (insn_list:REG_DEP_TRUE 36 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 42 (nil))
init_insns for 163: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 164: (insn_list:REG_DEP_TRUE 14 (nil))
      Slot 1 (freq,size): a5r140(2000,4)
      Assigning 140(freq=2000) a new slot 0
changing reg in insn 47
changing reg in insn 32
changing reg in insn 68
changing reg in insn 52
changing reg in insn 47
changing reg in insn 16
changing reg in insn 8
changing reg in insn 15
changing reg in insn 20
changing reg in insn 16
changing reg in insn 48
changing reg in insn 31
changing reg in insn 48
changing reg in insn 38
changing reg in insn 30
changing reg in insn 62
changing reg in insn 55
changing reg in insn 38
changing reg in insn 43
changing reg in insn 44
changing reg in insn 40
changing reg in insn 26
changing reg in insn 67
changing reg in insn 32
changing reg in insn 31
changing reg in insn 29
changing reg in insn 28
changing reg in insn 52
changing reg in insn 29
changing reg in insn 7
changing reg in insn 20
changing reg in insn 93
changing reg in insn 7
changing reg in insn 6
changing reg in insn 12
changing reg in insn 7
changing reg in insn 90
changing reg in insn 24
changing reg in insn 92
changing reg in insn 26
changing reg in insn 91
changing reg in insn 28
changing reg in insn 29
changing reg in insn 30
changing reg in insn 37
changing reg in insn 38
changing reg in insn 89
changing reg in insn 69
changing reg in insn 67
changing reg in insn 68
changing reg in insn 68
changing reg in insn 69
changing reg in insn 36
changing reg in insn 37
changing reg in insn 37
changing reg in insn 42
changing reg in insn 43
changing reg in insn 12
changing reg in insn 15
changing reg in insn 14
changing reg in insn 15
Spilling for insn 15.
Spilling for insn 24.
Spilling for insn 43.
Spilling for insn 67.
Using reg 3 for reload 0
Spilling for insn 69.

Reloads for insn # 15
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
                                                        (reg/f:SI 12 ip [163])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
                                                        (reg/f:SI 12 ip [163])) [0 S4 A32])

Reloads for insn # 24
Reload 0: reload_out (SI) = (reg:SI 140 [ totalram_pages.408 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 140 [ totalram_pages.408 ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 43
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:137 page ] [137])
                                                        (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:137 page ] [137])
                                                        (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])

Reloads for insn # 67
Reload 0: reload_in (SI) = (reg:SI 140 [ totalram_pages.408 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:SI 140 [ totalram_pages.408 ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 69
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [156]) [0 totalram_pages+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [156]) [0 totalram_pages+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 46.
verify found no changes in insn with uid = 63.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 22 (    2)
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 22 (    2)


free_initmem

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,4u} r1={8d,4u} r2={7d,4u} r3={10d,7u} r4={3d,4u} r5={3d,6u} r6={2d,2u} r7={2d,4u} r8={2d,3u} r9={1d,1u,1d} r10={2d,3u} r11={1d,1u} r12={5d,1u} r13={1d,15u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 459{395d,63u,1e} in 49{46 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 2 8 2 arch/arm/mm/init.c:743 (set (reg/f:SI 2 r2 [143])
        (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
        (nil)))

(insn 8 6 12 2 arch/arm/mm/init.c:743 (set (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 12 8 14 2 arch/arm/mm/init.c:445 (set (reg/f:SI 12 ip [163])
        (reg/f:SI 2 r2 [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
        (nil)))

(insn 14 12 93 2 arch/arm/mm/init.c:445 (set (reg:SI 0 r0 [164])
        (const_int -402792720 [0xffffffffe7fddef0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -402792720 [0xffffffffe7fddef0])
        (nil)))

(insn 93 14 7 2 arch/arm/mm/init.c:743 (set (reg/f:SI 1 r1 [142])
        (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
        (nil)))

(insn 7 93 83 2 arch/arm/mm/init.c:743 (set (reg:SI 2 r2 [orig:141 D.25457 ] [141])
        (minus:SI (reg/f:SI 1 r1 [142])
            (reg/f:SI 2 r2 [143]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
            (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>))
        (nil)))

(jump_insn 83 7 84 2 (set (pc)
        (label_ref 17)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 84 83 19)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [91.0%] 
(code_label 19 84 11 3 35 "" [1 uses])

(note 11 19 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 11 16 3 arch/arm/mm/init.c:445 (set (mem:SI (plus:SI (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
                (reg/f:SI 12 ip [163])) [0 S4 A32])
        (reg:SI 0 r0 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -402792720 [0xffffffffe7fddef0])
        (nil)))

(insn 16 15 17 3 arch/arm/mm/init.c:445 (set (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
        (plus:SI (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 17 16 18 4 34 "" [1 uses])

(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 18 21 4 arch/arm/mm/init.c:732 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:141 D.25457 ] [141])
            (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 21 20 22 4 arch/arm/mm/init.c:732 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 22 21 42 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 42 22 92 5 include/linux/mm.h:417 (set (reg:SI 11 fp [161])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 92 42 26 5 arch/arm/mm/init.c:745 (set (reg/f:SI 5 r5 [148])
        (const:SI (plus:SI (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
                (const_int 1073741824 [0x40000000])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
                (const_int 1073741824 [0x40000000])))
        (nil)))

(insn 26 92 36 5 arch/arm/mm/init.c:745 (set (reg/v:SI 5 r5 [orig:138 pfn ] [138])
        (lshiftrt:SI (reg/f:SI 5 r5 [148])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (lshiftrt:SI (const:SI (plus:SI (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
                    (const_int 1073741824 [0x40000000])))
            (const_int 12 [0xc]))
        (nil)))

(insn 36 26 91 5 arch/arm/mm/init.c:424 (set (reg/f:SI 9 r9 [159])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(insn 91 36 28 5 arch/arm/mm/init.c:745 (set (reg/f:SI 10 sl [149])
        (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (const_int 1073741824 [0x40000000])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (const_int 1073741824 [0x40000000])))
        (nil)))

(insn 28 91 32 5 arch/arm/mm/init.c:745 (set (reg:SI 10 sl [orig:139 D.25467 ] [139])
        (lshiftrt:SI (reg/f:SI 10 sl [149])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (lshiftrt:SI (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                    (const_int 1073741824 [0x40000000])))
            (const_int 12 [0xc]))
        (nil)))

(insn 32 28 29 5 arch/arm/mm/init.c:421 (set (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133])
        (reg/v:SI 5 r5 [orig:138 pfn ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 29 32 90 5 arch/arm/mm/init.c:421 (set (reg:SI 8 r8 [150])
        (minus:SI (reg:SI 10 sl [orig:139 D.25467 ] [139])
            (reg/v:SI 5 r5 [orig:138 pfn ] [138]))) 28 {*arm_subsi3_insn} (nil))

(insn 90 29 24 5 arch/arm/mm/init.c:745 (set (reg/f:SI 3 r3 [147])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn 24 90 95 5 arch/arm/mm/init.c:745 (set (reg:SI 3 r3)
        (mem/c/i:SI (reg/f:SI 3 r3 [147]) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>) [0 totalram_pages+0 S4 A32])
        (nil)))

(insn 95 24 31 5 arch/arm/mm/init.c:745 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 31 95 30 5 arch/arm/mm/init.c:421 (set (reg:SI 6 r6 [orig:135 ivtmp.616 ] [135])
        (ashift:SI (reg/v:SI 5 r5 [orig:138 pfn ] [138])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn 30 31 85 5 arch/arm/mm/init.c:421 (set (reg/v:SI 8 r8 [orig:136 size ] [136])
        (ashift:SI (reg:SI 8 r8 [150])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 85 30 86 5 (set (pc)
        (label_ref 49)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%] 

(barrier 86 85 51)

;; Start of basic block ( 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 6 [r6] 9 [r9] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  7 [91.0%] 
(code_label 51 86 35 6 37 "" [1 uses])

(note 35 51 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 37 35 47 6 arch/arm/mm/init.c:424 (set (reg/f:SI 7 r7 [orig:152 mem_map ] [152])
        (mem/f/c/i:SI (reg/f:SI 9 r9 [159]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 9 r9 [159]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 47 37 38 6 arch/arm/mm/init.c:423 discrim 2 (set (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133])
        (plus:SI (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 38 47 48 6 arch/arm/mm/init.c:424 (set (reg/v/f:SI 7 r7 [orig:137 page ] [137])
        (plus:SI (reg/f:SI 7 r7 [orig:152 mem_map ] [152])
            (reg:SI 6 r6 [orig:135 ivtmp.616 ] [135]))) 4 {*arm_addsi3} (nil))

(insn 48 38 40 6 arch/arm/mm/init.c:423 discrim 2 (set (reg:SI 6 r6 [orig:135 ivtmp.616 ] [135])
        (plus:SI (reg:SI 6 r6 [orig:135 ivtmp.616 ] [135])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 40 48 41 6 include/linux/page-flags.h:207 (set (reg:SI 1 r1)
        (reg/v/f:SI 7 r7 [orig:137 page ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn 41 40 43 6 include/linux/page-flags.h:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 43 41 44 6 include/linux/mm.h:417 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:137 page ] [137])
                (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
        (reg:SI 11 fp [161])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 44 43 80 6 arch/arm/mm/init.c:427 (set (reg:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:137 page ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 80 44 46 6 arch/arm/mm/init.c:427 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 46 80 49 6 arch/arm/mm/init.c:427 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10f4c580 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
;; Pred edge  5 [100.0%] 
(code_label 49 46 50 7 36 "" [1 uses])

(note 50 49 78 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 78 50 52 7 include/linux/page-flags.h:207 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn 52 78 53 7 arch/arm/mm/init.c:423 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133])
            (reg:SI 10 sl [orig:139 D.25467 ] [139]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 53 52 54 7 arch/arm/mm/init.c:423 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 7 -> ( 6 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  6 [91.0%] 
;; Succ edge  8 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [9.0%]  (fallthru,loop_exit)
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 56 8 arch/arm/mm/init.c:431 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:136 size ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 56 55 57 8 arch/arm/mm/init.c:431 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
(note 57 56 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 62 57 60 9 arch/arm/mm/init.c:432 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:136 size ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 60 62 61 9 arch/arm/mm/init.c:432 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1161a480>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1161a480>)
        (nil)))

(insn 61 60 63 9 arch/arm/mm/init.c:432 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1169b720>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1169b720>)
        (nil)))

(call_insn 63 61 64 9 arch/arm/mm/init.c:432 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  8 [0.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 64 63 65 10 38 "" [1 uses])

(note 65 64 96 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 96 65 67 10 arch/arm/mm/init.c:745 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 67 96 68 10 arch/arm/mm/init.c:745 (set (reg:SI 5 r5 [157])
        (minus:SI (reg:SI 3 r3)
            (reg/v:SI 5 r5 [orig:138 pfn ] [138]))) 28 {*arm_subsi3_insn} (nil))

(insn 68 67 89 10 arch/arm/mm/init.c:745 (set (reg:SI 4 r4 [158])
        (plus:SI (reg:SI 5 r5 [157])
            (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133]))) 4 {*arm_addsi3} (nil))

(insn 89 68 69 10 arch/arm/mm/init.c:745 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn 69 89 88 10 arch/arm/mm/init.c:745 (set (mem/c/i:SI (reg/f:SI 3 r3 [156]) [0 totalram_pages+0 S4 A32])
        (reg:SI 4 r4 [158])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 88 69 94 NOTE_INSN_DELETED)

(note 94 88 0 NOTE_INSN_DELETED)


;; Function mem_init (mem_init)[0:1360] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 44 n_edges 61 count 120 (  2.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 44 n_edges 61 count 138 (  3.1)
scanning new insn with uid = 558.
verify found no changes in insn with uid = 558.
deleting insn with uid = 453.
scanning new insn with uid = 559.
verify found no changes in insn with uid = 559.
deleting insn with uid = 439.
scanning new insn with uid = 560.
verify found no changes in insn with uid = 560.
deleting insn with uid = 425.
scanning new insn with uid = 561.
verify found no changes in insn with uid = 561.
deleting insn with uid = 411.
scanning new insn with uid = 562.
verify found no changes in insn with uid = 562.
deleting insn with uid = 403.
scanning new insn with uid = 563.
verify found no changes in insn with uid = 563.
deleting insn with uid = 401.
scanning new insn with uid = 564.
verify found no changes in insn with uid = 564.
deleting insn with uid = 386.
scanning new insn with uid = 565.
verify found no changes in insn with uid = 565.
deleting insn with uid = 381.
scanning new insn with uid = 566.
verify found no changes in insn with uid = 566.
deleting insn with uid = 379.
scanning new insn with uid = 567.
verify found no changes in insn with uid = 567.
deleting insn with uid = 377.
scanning new insn with uid = 568.
verify found no changes in insn with uid = 568.
deleting insn with uid = 375.
scanning new insn with uid = 569.
verify found no changes in insn with uid = 569.
deleting insn with uid = 373.
scanning new insn with uid = 570.
verify found no changes in insn with uid = 570.
deleting insn with uid = 455.
scanning new insn with uid = 571.
verify found no changes in insn with uid = 571.
deleting insn with uid = 441.
scanning new insn with uid = 572.
verify found no changes in insn with uid = 572.
deleting insn with uid = 427.
scanning new insn with uid = 573.
verify found no changes in insn with uid = 573.
deleting insn with uid = 413.
scanning new insn with uid = 574.
verify found no changes in insn with uid = 574.
deleting insn with uid = 367.
scanning new insn with uid = 575.
verify found no changes in insn with uid = 575.
deleting insn with uid = 358.
scanning new insn with uid = 576.
verify found no changes in insn with uid = 576.
deleting insn with uid = 351.
scanning new insn with uid = 577.
verify found no changes in insn with uid = 577.
deleting insn with uid = 483.
scanning new insn with uid = 578.
verify found no changes in insn with uid = 578.
deleting insn with uid = 305.
scanning new insn with uid = 579.
verify found no changes in insn with uid = 579.
deleting insn with uid = 234.
scanning new insn with uid = 580.
verify found no changes in insn with uid = 580.
deleting insn with uid = 226.
scanning new insn with uid = 581.
verify found no changes in insn with uid = 581.
deleting insn with uid = 86.
scanning new insn with uid = 582.
verify found no changes in insn with uid = 582.
deleting insn with uid = 8.
scanning new insn with uid = 583.
verify found no changes in insn with uid = 583.
deleting insn with uid = 9.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 44 n_edges 61 count 120 (  2.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 44 n_edges 61 count 138 (  3.1)

Pass 0 for finding allocno costs

    a225 (r415,l1) best GENERAL_REGS, cover GENERAL_REGS
    a88 (r415,l0) best GENERAL_REGS, cover GENERAL_REGS
    a224 (r414,l1) best GENERAL_REGS, cover GENERAL_REGS
    a89 (r414,l0) best GENERAL_REGS, cover GENERAL_REGS
    a223 (r413,l1) best GENERAL_REGS, cover GENERAL_REGS
    a90 (r413,l0) best GENERAL_REGS, cover GENERAL_REGS
    a217 (r407,l8) best GENERAL_REGS, cover GENERAL_REGS
    a185 (r407,l6) best GENERAL_REGS, cover GENERAL_REGS
    a174 (r407,l7) best GENERAL_REGS, cover GENERAL_REGS
    a146 (r407,l2) best GENERAL_REGS, cover GENERAL_REGS
    a84 (r407,l0) best GENERAL_REGS, cover GENERAL_REGS
    a216 (r406,l8) best GENERAL_REGS, cover GENERAL_REGS
    a184 (r406,l6) best GENERAL_REGS, cover GENERAL_REGS
    a173 (r406,l7) best GENERAL_REGS, cover GENERAL_REGS
    a145 (r406,l2) best GENERAL_REGS, cover GENERAL_REGS
    a82 (r406,l0) best GENERAL_REGS, cover GENERAL_REGS
    a215 (r405,l8) best GENERAL_REGS, cover GENERAL_REGS
    a183 (r405,l6) best GENERAL_REGS, cover GENERAL_REGS
    a172 (r405,l7) best GENERAL_REGS, cover GENERAL_REGS
    a144 (r405,l2) best GENERAL_REGS, cover GENERAL_REGS
    a83 (r405,l0) best GENERAL_REGS, cover GENERAL_REGS
    a214 (r404,l8) best GENERAL_REGS, cover GENERAL_REGS
    a182 (r404,l6) best GENERAL_REGS, cover GENERAL_REGS
    a171 (r404,l7) best GENERAL_REGS, cover GENERAL_REGS
    a143 (r404,l2) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r404,l0) best GENERAL_REGS, cover GENERAL_REGS
    a136 (r387,l5) best GENERAL_REGS, cover GENERAL_REGS
    a119 (r387,l3) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r387,l0) best GENERAL_REGS, cover GENERAL_REGS
    a99 (r385,l4) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r385,l0) best GENERAL_REGS, cover GENERAL_REGS
    a98 (r384,l4) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r384,l0) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r383,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r382,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r381,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r379,l0) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r376,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r375,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r374,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r373,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r372,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r371,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r369,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r366,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r365,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r364,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r363,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r362,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r361,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r359,l0) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r356,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r355,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r354,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r353,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r352,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r351,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r349,l0) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r346,l0) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r345,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r344,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r343,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r340,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r339,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r337,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r336,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r335,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r334,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r333,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r332,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r331,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r330,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r329,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r328,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r327,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r326,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r325,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r322,l0) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r321,l0) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r320,l0) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r319,l0) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r318,l0) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r314,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r312,l0) best GENERAL_REGS, cover GENERAL_REGS
    a102 (r308,l4) best GENERAL_REGS, cover GENERAL_REGS
    a100 (r307,l4) best GENERAL_REGS, cover GENERAL_REGS
    a103 (r306,l4) best GENERAL_REGS, cover GENERAL_REGS
    a105 (r300,l4) best GENERAL_REGS, cover GENERAL_REGS
    a106 (r299,l4) best GENERAL_REGS, cover GENERAL_REGS
    a107 (r296,l4) best GENERAL_REGS, cover GENERAL_REGS
    a112 (r295,l4) best GENERAL_REGS, cover GENERAL_REGS
    a109 (r294,l4) best GENERAL_REGS, cover GENERAL_REGS
    a110 (r292,l4) best GENERAL_REGS, cover GENERAL_REGS
    a108 (r291,l4) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r290,l0) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r289,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r288,l0) best GENERAL_REGS, cover GENERAL_REGS
    a121 (r283,l3) best GENERAL_REGS, cover GENERAL_REGS
    a126 (r282,l3) best GENERAL_REGS, cover GENERAL_REGS
    a124 (r281,l3) best GENERAL_REGS, cover GENERAL_REGS
    a123 (r279,l3) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r276,l0) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r274,l0) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r273,l0) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r272,l0) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r270,l0) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r269,l0) best GENERAL_REGS, cover GENERAL_REGS
    a148 (r268,l2) best GENERAL_REGS, cover GENERAL_REGS
    a147 (r267,l2) best GENERAL_REGS, cover GENERAL_REGS
    a149 (r266,l2) best GENERAL_REGS, cover GENERAL_REGS
    a150 (r262,l2) best GENERAL_REGS, cover GENERAL_REGS
    a152 (r261,l2) best GENERAL_REGS, cover GENERAL_REGS
    a176 (r258,l7) best GENERAL_REGS, cover GENERAL_REGS
    a187 (r255,l6) best GENERAL_REGS, cover GENERAL_REGS
    a186 (r254,l6) best GENERAL_REGS, cover GENERAL_REGS
    a188 (r253,l6) best GENERAL_REGS, cover GENERAL_REGS
    a190 (r249,l6) best GENERAL_REGS, cover GENERAL_REGS
    a192 (r248,l6) best GENERAL_REGS, cover GENERAL_REGS
    a219 (r245,l8) best GENERAL_REGS, cover GENERAL_REGS
    a201 (r242,l6) best GENERAL_REGS, cover GENERAL_REGS
    a200 (r241,l6) best GENERAL_REGS, cover GENERAL_REGS
    a203 (r240,l6) best GENERAL_REGS, cover GENERAL_REGS
    a202 (r239,l6) best GENERAL_REGS, cover GENERAL_REGS
    a159 (r237,l2) best GENERAL_REGS, cover GENERAL_REGS
    a158 (r236,l2) best GENERAL_REGS, cover GENERAL_REGS
    a163 (r235,l2) best GENERAL_REGS, cover GENERAL_REGS
    a162 (r234,l2) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r233,l0) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r232,l0) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r231,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r229,l0) best GENERAL_REGS, cover GENERAL_REGS
    a226 (r228,l1) best GENERAL_REGS, cover GENERAL_REGS
    a229 (r225,l1) best GENERAL_REGS, cover GENERAL_REGS
    a228 (r224,l1) best GENERAL_REGS, cover GENERAL_REGS
    a230 (r223,l1) best GENERAL_REGS, cover GENERAL_REGS
    a231 (r220,l1) best GENERAL_REGS, cover GENERAL_REGS
    a235 (r217,l1) best GENERAL_REGS, cover GENERAL_REGS
    a237 (r216,l1) best GENERAL_REGS, cover GENERAL_REGS
    a236 (r213,l1) best GENERAL_REGS, cover GENERAL_REGS
    a234 (r212,l1) best GENERAL_REGS, cover GENERAL_REGS
    a238 (r211,l1) best GENERAL_REGS, cover GENERAL_REGS
    a241 (r201,l1) best GENERAL_REGS, cover GENERAL_REGS
    a243 (r200,l1) best GENERAL_REGS, cover GENERAL_REGS
    a86 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a87 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a91 (r194,l0) best GENERAL_REGS, cover GENERAL_REGS
    a85 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a125 (r190,l3) best GENERAL_REGS, cover GENERAL_REGS
    a135 (r189,l5) best GENERAL_REGS, cover GENERAL_REGS
    a118 (r189,l3) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a134 (r188,l5) best GENERAL_REGS, cover GENERAL_REGS
    a117 (r188,l3) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r186,l0) best GENERAL_REGS, cover GENERAL_REGS
    a133 (r185,l5) best GENERAL_REGS, cover GENERAL_REGS
    a116 (r185,l3) best GENERAL_REGS, cover GENERAL_REGS
    a97 (r185,l4) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r185,l0) best GENERAL_REGS, cover GENERAL_REGS
    a132 (r184,l5) best GENERAL_REGS, cover GENERAL_REGS
    a115 (r184,l3) best GENERAL_REGS, cover GENERAL_REGS
    a96 (r184,l4) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a131 (r183,l5) best GENERAL_REGS, cover GENERAL_REGS
    a114 (r183,l3) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r183,l0) best GENERAL_REGS, cover GENERAL_REGS
    a130 (r182,l5) best GENERAL_REGS, cover GENERAL_REGS
    a122 (r182,l3) best GENERAL_REGS, cover GENERAL_REGS
    a129 (r181,l5) best GENERAL_REGS, cover GENERAL_REGS
    a120 (r181,l3) best GENERAL_REGS, cover GENERAL_REGS
    a104 (r180,l4) best GENERAL_REGS, cover GENERAL_REGS
    a239 (r179,l1) best GENERAL_REGS, cover GENERAL_REGS
    a233 (r178,l1) best GENERAL_REGS, cover GENERAL_REGS
    a232 (r177,l1) best GENERAL_REGS, cover GENERAL_REGS
    a222 (r176,l1) best GENERAL_REGS, cover GENERAL_REGS
    a94 (r176,l0) best GENERAL_REGS, cover GENERAL_REGS
    a221 (r175,l1) best GENERAL_REGS, cover GENERAL_REGS
    a92 (r175,l0) best GENERAL_REGS, cover GENERAL_REGS
    a242 (r174,l1) best GENERAL_REGS, cover GENERAL_REGS
    a175 (r173,l7) best GENERAL_REGS, cover GENERAL_REGS
    a218 (r172,l8) best GENERAL_REGS, cover GENERAL_REGS
    a199 (r171,l6) best GENERAL_REGS, cover GENERAL_REGS
    a161 (r170,l2) best GENERAL_REGS, cover GENERAL_REGS
    a213 (r169,l8) best GENERAL_REGS, cover GENERAL_REGS
    a181 (r169,l6) best GENERAL_REGS, cover GENERAL_REGS
    a170 (r169,l7) best GENERAL_REGS, cover GENERAL_REGS
    a142 (r169,l2) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a212 (r168,l8) best GENERAL_REGS, cover GENERAL_REGS
    a180 (r168,l6) best GENERAL_REGS, cover GENERAL_REGS
    a160 (r168,l2) best GENERAL_REGS, cover GENERAL_REGS
    a211 (r167,l8) best GENERAL_REGS, cover GENERAL_REGS
    a179 (r167,l6) best GENERAL_REGS, cover GENERAL_REGS
    a169 (r167,l7) best GENERAL_REGS, cover GENERAL_REGS
    a141 (r167,l2) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r167,l0) best GENERAL_REGS, cover GENERAL_REGS
    a210 (r166,l8) best GENERAL_REGS, cover GENERAL_REGS
    a193 (r166,l6) best GENERAL_REGS, cover GENERAL_REGS
    a140 (r165,l5) best GENERAL_REGS, cover GENERAL_REGS
    a137 (r163,l5) best GENERAL_REGS, cover GENERAL_REGS
    a139 (r162,l5) best GENERAL_REGS, cover GENERAL_REGS
    a111 (r160,l4) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a95 (r157,l4) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a128 (r156,l5) best GENERAL_REGS, cover GENERAL_REGS
    a113 (r156,l3) best GENERAL_REGS, cover GENERAL_REGS
    a72 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a127 (r155,l3) best GENERAL_REGS, cover GENERAL_REGS
    a168 (r154,l7) best GENERAL_REGS, cover GENERAL_REGS
    a155 (r154,l2) best GENERAL_REGS, cover GENERAL_REGS
    a209 (r153,l8) best GENERAL_REGS, cover GENERAL_REGS
    a194 (r153,l6) best GENERAL_REGS, cover GENERAL_REGS
    a220 (r152,l1) best GENERAL_REGS, cover GENERAL_REGS
    a93 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a227 (r151,l1) best GENERAL_REGS, cover GENERAL_REGS
    a240 (r150,l1) best GENERAL_REGS, cover GENERAL_REGS
    a157 (r149,l2) best GENERAL_REGS, cover GENERAL_REGS
    a208 (r148,l8) best GENERAL_REGS, cover GENERAL_REGS
    a178 (r148,l6) best GENERAL_REGS, cover GENERAL_REGS
    a167 (r148,l7) best GENERAL_REGS, cover GENERAL_REGS
    a154 (r148,l2) best GENERAL_REGS, cover GENERAL_REGS
    a197 (r147,l6) best GENERAL_REGS, cover GENERAL_REGS
    a198 (r146,l6) best GENERAL_REGS, cover GENERAL_REGS
    a207 (r145,l8) best GENERAL_REGS, cover GENERAL_REGS
    a177 (r145,l6) best GENERAL_REGS, cover GENERAL_REGS
    a166 (r145,l7) best GENERAL_REGS, cover GENERAL_REGS
    a156 (r145,l2) best GENERAL_REGS, cover GENERAL_REGS
    a206 (r144,l8) best GENERAL_REGS, cover GENERAL_REGS
    a191 (r144,l6) best GENERAL_REGS, cover GENERAL_REGS
    a165 (r142,l7) best GENERAL_REGS, cover GENERAL_REGS
    a153 (r142,l2) best GENERAL_REGS, cover GENERAL_REGS
    a138 (r141,l5) best GENERAL_REGS, cover GENERAL_REGS
    a205 (r140,l8) best GENERAL_REGS, cover GENERAL_REGS
    a195 (r140,l6) best GENERAL_REGS, cover GENERAL_REGS
    a204 (r139,l8) best GENERAL_REGS, cover GENERAL_REGS
    a189 (r139,l6) best GENERAL_REGS, cover GENERAL_REGS
    a196 (r138,l6) best GENERAL_REGS, cover GENERAL_REGS
    a164 (r137,l7) best GENERAL_REGS, cover GENERAL_REGS
    a151 (r137,l2) best GENERAL_REGS, cover GENERAL_REGS
    a101 (r136,l4) best GENERAL_REGS, cover GENERAL_REGS

  a0(r373,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r363,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r353,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r343,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r337,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r334,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r330,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r382,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r374,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r372,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r364,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r362,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r354,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r352,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r344,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r340,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r339,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r336,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r333,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r331,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r329,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r328,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r379,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r327,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r369,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r326,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r359,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r325,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r349,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r332,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r335,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r381,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r375,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a35(r371,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r365,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a37(r361,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r355,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a39(r351,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r345,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a41(r376,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r366,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r356,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r346,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r322,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r321,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a47(r319,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r320,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r314,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r318,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r312,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r383,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a58(r290,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r384,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a60(r288,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a61(r289,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a62(r385,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a63(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a64(r387,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a65(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a66(r274,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a67(r273,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a68(r272,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a70(r276,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a71(r270,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a74(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a75(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a76(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a78(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a79(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a80(r233,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a81(r404,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a82(r406,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a83(r405,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a84(r407,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a85(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a86(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a88(r415,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a89(r414,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a90(r413,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a92(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a93(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a94(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a95(r157,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a96(r184,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a97(r185,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a98(r384,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a99(r385,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a100(r307,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a101(r136,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a102(r308,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a103(r306,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a104(r180,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a105(r300,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a106(r299,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a107(r296,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a108(r291,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a109(r294,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a110(r292,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a111(r160,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a112(r295,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a113(r156,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a114(r183,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a115(r184,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a116(r185,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a117(r188,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a118(r189,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a119(r387,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a120(r181,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a121(r283,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a122(r182,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a123(r279,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a124(r281,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a125(r190,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a126(r282,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a127(r155,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a128(r156,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a129(r181,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a130(r182,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a131(r183,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a132(r184,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a133(r185,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a134(r188,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a135(r189,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a136(r387,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a137(r163,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a138(r141,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a139(r162,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a140(r165,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a141(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a142(r169,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a143(r404,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a144(r405,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a145(r406,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a146(r407,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a147(r267,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a148(r268,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a149(r266,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a150(r262,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a151(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a152(r261,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a153(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a154(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a155(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a156(r145,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a157(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a158(r236,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a159(r237,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a160(r168,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a161(r170,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a162(r234,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a163(r235,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a164(r137,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a165(r142,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a166(r145,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a167(r148,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a168(r154,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a169(r167,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a170(r169,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a171(r404,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a172(r405,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a173(r406,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a174(r407,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a175(r173,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a176(r258,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a177(r145,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a178(r148,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a179(r167,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a180(r168,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a181(r169,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a182(r404,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a183(r405,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a184(r406,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a185(r407,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a186(r254,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a187(r255,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a188(r253,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a189(r139,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a190(r249,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a191(r144,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a192(r248,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a193(r166,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a194(r153,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a195(r140,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a196(r138,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a197(r147,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a198(r146,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a199(r171,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a200(r241,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a201(r242,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a202(r239,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a203(r240,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a204(r139,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a205(r140,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a206(r144,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a207(r145,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a208(r148,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a209(r153,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a210(r166,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a211(r167,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a212(r168,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a213(r169,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a214(r404,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a215(r405,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a216(r406,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a217(r407,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a218(r172,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a219(r245,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a220(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a221(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a222(r176,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a223(r413,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a224(r414,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a225(r415,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a226(r228,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a227(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a228(r224,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a229(r225,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a230(r223,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a231(r220,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a232(r177,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a233(r178,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a234(r212,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a235(r217,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a236(r213,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a237(r216,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a238(r211,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a239(r179,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a240(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a241(r201,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a242(r174,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a243(r200,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r415: preferred GENERAL_REGS, alternative NO_REGS
    r414: preferred GENERAL_REGS, alternative NO_REGS
    r413: preferred GENERAL_REGS, alternative NO_REGS
    r407: preferred GENERAL_REGS, alternative NO_REGS
    r406: preferred GENERAL_REGS, alternative NO_REGS
    r405: preferred GENERAL_REGS, alternative NO_REGS
    r404: preferred GENERAL_REGS, alternative NO_REGS
    r387: preferred GENERAL_REGS, alternative NO_REGS
    r385: preferred GENERAL_REGS, alternative NO_REGS
    r384: preferred GENERAL_REGS, alternative NO_REGS
    r383: preferred GENERAL_REGS, alternative NO_REGS
    r382: preferred GENERAL_REGS, alternative NO_REGS
    r381: preferred GENERAL_REGS, alternative NO_REGS
    r379: preferred GENERAL_REGS, alternative NO_REGS
    r376: preferred GENERAL_REGS, alternative NO_REGS
    r375: preferred GENERAL_REGS, alternative NO_REGS
    r374: preferred GENERAL_REGS, alternative NO_REGS
    r373: preferred GENERAL_REGS, alternative NO_REGS
    r372: preferred GENERAL_REGS, alternative NO_REGS
    r371: preferred GENERAL_REGS, alternative NO_REGS
    r369: preferred GENERAL_REGS, alternative NO_REGS
    r366: preferred GENERAL_REGS, alternative NO_REGS
    r365: preferred GENERAL_REGS, alternative NO_REGS
    r364: preferred GENERAL_REGS, alternative NO_REGS
    r363: preferred GENERAL_REGS, alternative NO_REGS
    r362: preferred GENERAL_REGS, alternative NO_REGS
    r361: preferred GENERAL_REGS, alternative NO_REGS
    r359: preferred GENERAL_REGS, alternative NO_REGS
    r356: preferred GENERAL_REGS, alternative NO_REGS
    r355: preferred GENERAL_REGS, alternative NO_REGS
    r354: preferred GENERAL_REGS, alternative NO_REGS
    r353: preferred GENERAL_REGS, alternative NO_REGS
    r352: preferred GENERAL_REGS, alternative NO_REGS
    r351: preferred GENERAL_REGS, alternative NO_REGS
    r349: preferred GENERAL_REGS, alternative NO_REGS
    r346: preferred GENERAL_REGS, alternative NO_REGS
    r345: preferred GENERAL_REGS, alternative NO_REGS
    r344: preferred GENERAL_REGS, alternative NO_REGS
    r343: preferred GENERAL_REGS, alternative NO_REGS
    r340: preferred GENERAL_REGS, alternative NO_REGS
    r339: preferred GENERAL_REGS, alternative NO_REGS
    r337: preferred GENERAL_REGS, alternative NO_REGS
    r336: preferred GENERAL_REGS, alternative NO_REGS
    r335: preferred GENERAL_REGS, alternative NO_REGS
    r334: preferred GENERAL_REGS, alternative NO_REGS
    r333: preferred GENERAL_REGS, alternative NO_REGS
    r332: preferred GENERAL_REGS, alternative NO_REGS
    r331: preferred GENERAL_REGS, alternative NO_REGS
    r330: preferred GENERAL_REGS, alternative NO_REGS
    r329: preferred GENERAL_REGS, alternative NO_REGS
    r328: preferred GENERAL_REGS, alternative NO_REGS
    r327: preferred GENERAL_REGS, alternative NO_REGS
    r326: preferred GENERAL_REGS, alternative NO_REGS
    r325: preferred GENERAL_REGS, alternative NO_REGS
    r322: preferred GENERAL_REGS, alternative NO_REGS
    r321: preferred GENERAL_REGS, alternative NO_REGS
    r320: preferred GENERAL_REGS, alternative NO_REGS
    r319: preferred GENERAL_REGS, alternative NO_REGS
    r318: preferred GENERAL_REGS, alternative NO_REGS
    r314: preferred GENERAL_REGS, alternative NO_REGS
    r312: preferred GENERAL_REGS, alternative NO_REGS
    r308: preferred GENERAL_REGS, alternative NO_REGS
    r307: preferred GENERAL_REGS, alternative NO_REGS
    r306: preferred GENERAL_REGS, alternative NO_REGS
    r300: preferred GENERAL_REGS, alternative NO_REGS
    r299: preferred GENERAL_REGS, alternative NO_REGS
    r296: preferred GENERAL_REGS, alternative NO_REGS
    r295: preferred GENERAL_REGS, alternative NO_REGS
    r294: preferred GENERAL_REGS, alternative NO_REGS
    r292: preferred GENERAL_REGS, alternative NO_REGS
    r291: preferred GENERAL_REGS, alternative NO_REGS
    r290: preferred GENERAL_REGS, alternative NO_REGS
    r289: preferred GENERAL_REGS, alternative NO_REGS
    r288: preferred GENERAL_REGS, alternative NO_REGS
    r283: preferred GENERAL_REGS, alternative NO_REGS
    r282: preferred GENERAL_REGS, alternative NO_REGS
    r281: preferred GENERAL_REGS, alternative NO_REGS
    r279: preferred GENERAL_REGS, alternative NO_REGS
    r276: preferred GENERAL_REGS, alternative NO_REGS
    r274: preferred GENERAL_REGS, alternative NO_REGS
    r273: preferred GENERAL_REGS, alternative NO_REGS
    r272: preferred GENERAL_REGS, alternative NO_REGS
    r270: preferred GENERAL_REGS, alternative NO_REGS
    r269: preferred GENERAL_REGS, alternative NO_REGS
    r268: preferred GENERAL_REGS, alternative NO_REGS
    r267: preferred GENERAL_REGS, alternative NO_REGS
    r266: preferred GENERAL_REGS, alternative NO_REGS
    r262: preferred GENERAL_REGS, alternative NO_REGS
    r261: preferred GENERAL_REGS, alternative NO_REGS
    r258: preferred GENERAL_REGS, alternative NO_REGS
    r255: preferred GENERAL_REGS, alternative NO_REGS
    r254: preferred GENERAL_REGS, alternative NO_REGS
    r253: preferred GENERAL_REGS, alternative NO_REGS
    r249: preferred GENERAL_REGS, alternative NO_REGS
    r248: preferred GENERAL_REGS, alternative NO_REGS
    r245: preferred GENERAL_REGS, alternative NO_REGS
    r242: preferred GENERAL_REGS, alternative NO_REGS
    r241: preferred GENERAL_REGS, alternative NO_REGS
    r240: preferred GENERAL_REGS, alternative NO_REGS
    r239: preferred GENERAL_REGS, alternative NO_REGS
    r237: preferred GENERAL_REGS, alternative NO_REGS
    r236: preferred GENERAL_REGS, alternative NO_REGS
    r235: preferred GENERAL_REGS, alternative NO_REGS
    r234: preferred GENERAL_REGS, alternative NO_REGS
    r233: preferred GENERAL_REGS, alternative NO_REGS
    r232: preferred GENERAL_REGS, alternative NO_REGS
    r231: preferred GENERAL_REGS, alternative NO_REGS
    r229: preferred GENERAL_REGS, alternative NO_REGS
    r228: preferred GENERAL_REGS, alternative NO_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS
    r220: preferred GENERAL_REGS, alternative NO_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r194: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r175: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS

  a0(r373,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r363,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r353,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r343,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r337,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r334,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r186,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r330,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r382,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r374,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r372,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r364,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r362,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r354,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r352,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r344,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r340,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r339,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r336,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r333,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r331,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a22(r329,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r328,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r379,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r327,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r369,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r326,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a28(r359,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r325,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a30(r349,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a31(r332,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a32(r335,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a33(r381,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r375,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a35(r371,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r365,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a37(r361,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r355,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a39(r351,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a40(r345,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a41(r376,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a42(r366,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r356,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r346,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r322,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r321,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a47(r319,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a48(r320,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r314,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a51(r318,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a52(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a53(r185,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a54(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r312,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a56(r383,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a57(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a58(r290,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r384,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a60(r288,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a61(r289,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a62(r385,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a63(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a64(r387,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a65(r269,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a66(r274,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a67(r273,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a68(r272,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a69(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a70(r276,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a71(r270,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a72(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r183,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a74(r229,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a75(r231,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a76(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a78(r232,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a79(r167,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a80(r233,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a81(r404,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a82(r406,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a83(r405,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a84(r407,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a85(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a86(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a88(r415,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a89(r414,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a90(r413,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r194,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a92(r175,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a93(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a94(r176,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a95(r157,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a96(r184,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a97(r185,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a98(r384,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a99(r385,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a100(r307,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a101(r136,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a102(r308,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a103(r306,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a104(r180,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a105(r300,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a106(r299,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a107(r296,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a108(r291,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a109(r294,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a110(r292,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a111(r160,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a112(r295,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a113(r156,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a114(r183,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a115(r184,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a116(r185,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a117(r188,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a118(r189,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a119(r387,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a120(r181,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a121(r283,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a122(r182,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a123(r279,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a124(r281,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a125(r190,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a126(r282,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a127(r155,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a128(r156,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a129(r181,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a130(r182,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a131(r183,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a132(r184,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a133(r185,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a134(r188,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a135(r189,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a136(r387,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a137(r163,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a138(r141,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a139(r162,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a140(r165,l5) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a141(r167,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a142(r169,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a143(r404,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a144(r405,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a145(r406,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a146(r407,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a147(r267,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a148(r268,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a149(r266,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a150(r262,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a151(r137,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a152(r261,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a153(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a154(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a155(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a156(r145,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a157(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a158(r236,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a159(r237,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a160(r168,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a161(r170,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a162(r234,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a163(r235,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a164(r137,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a165(r142,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a166(r145,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a167(r148,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a168(r154,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a169(r167,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a170(r169,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a171(r404,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a172(r405,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a173(r406,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a174(r407,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a175(r173,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a176(r258,l7) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a177(r145,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a178(r148,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a179(r167,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a180(r168,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a181(r169,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a182(r404,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a183(r405,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a184(r406,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a185(r407,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a186(r254,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a187(r255,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a188(r253,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a189(r139,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a190(r249,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a191(r144,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a192(r248,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a193(r166,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a194(r153,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a195(r140,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a196(r138,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a197(r147,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a198(r146,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a199(r171,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a200(r241,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a201(r242,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a202(r239,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a203(r240,l6) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a204(r139,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a205(r140,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a206(r144,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a207(r145,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a208(r148,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a209(r153,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a210(r166,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a211(r167,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a212(r168,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a213(r169,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a214(r404,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a215(r405,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a216(r406,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a217(r407,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a218(r172,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a219(r245,l8) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a220(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a221(r175,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a222(r176,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a223(r413,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a224(r414,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a225(r415,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a226(r228,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a227(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a228(r224,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a229(r225,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a230(r223,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a231(r220,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a232(r177,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a233(r178,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a234(r212,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a235(r217,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a236(r213,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a237(r216,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a238(r211,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a239(r179,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a240(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a241(r201,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a242(r174,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a243(r200,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 469(l0): point = 0
   Insn 452(l0): point = 2
   Insn 438(l0): point = 4
   Insn 424(l0): point = 6
   Insn 410(l0): point = 8
   Insn 398(l0): point = 10
   Insn 393(l0): point = 12
   Insn 392(l0): point = 14
   Insn 385(l0): point = 16
   Insn 384(l0): point = 18
   Insn 464(l0): point = 20
   Insn 454(l0): point = 22
   Insn 558(l0): point = 24
   Insn 450(l0): point = 26
   Insn 440(l0): point = 28
   Insn 559(l0): point = 30
   Insn 436(l0): point = 32
   Insn 426(l0): point = 34
   Insn 560(l0): point = 36
   Insn 422(l0): point = 38
   Insn 412(l0): point = 40
   Insn 561(l0): point = 42
   Insn 408(l0): point = 44
   Insn 406(l0): point = 46
   Insn 404(l0): point = 48
   Insn 562(l0): point = 50
   Insn 402(l0): point = 52
   Insn 563(l0): point = 54
   Insn 400(l0): point = 56
   Insn 396(l0): point = 58
   Insn 390(l0): point = 60
   Insn 387(l0): point = 62
   Insn 564(l0): point = 64
   Insn 382(l0): point = 66
   Insn 565(l0): point = 68
   Insn 380(l0): point = 70
   Insn 566(l0): point = 72
   Insn 463(l0): point = 74
   Insn 378(l0): point = 76
   Insn 567(l0): point = 78
   Insn 449(l0): point = 80
   Insn 376(l0): point = 82
   Insn 568(l0): point = 84
   Insn 435(l0): point = 86
   Insn 374(l0): point = 88
   Insn 569(l0): point = 90
   Insn 421(l0): point = 92
   Insn 467(l0): point = 94
   Insn 389(l0): point = 96
   Insn 466(l0): point = 98
   Insn 395(l0): point = 100
   Insn 465(l0): point = 102
   Insn 388(l0): point = 104
   Insn 462(l0): point = 106
   Insn 448(l0): point = 108
   Insn 434(l0): point = 110
   Insn 420(l0): point = 112
   Insn 459(l0): point = 114
   Insn 445(l0): point = 116
   Insn 431(l0): point = 118
   Insn 417(l0): point = 120
   Insn 397(l0): point = 122
   Insn 457(l0): point = 124
   Insn 570(l0): point = 126
   Insn 544(l0): point = 128
   Insn 443(l0): point = 130
   Insn 571(l0): point = 132
   Insn 429(l0): point = 134
   Insn 572(l0): point = 136
   Insn 415(l0): point = 138
   Insn 573(l0): point = 140
   Insn 543(l0): point = 142
   Insn 394(l0): point = 144
   Insn 451(l0): point = 146
   Insn 369(l0): point = 148
   Insn 437(l0): point = 150
   Insn 368(l0): point = 152
   Insn 574(l0): point = 154
   Insn 391(l0): point = 156
   Insn 423(l0): point = 158
   Insn 383(l0): point = 160
   Insn 409(l0): point = 162
   Insn 468(l0): point = 164
   Insn 366(l0): point = 166
   Insn 361(l0): point = 168
   Insn 360(l0): point = 170
   Insn 363(l0): point = 172
   Insn 354(l0): point = 174
   Insn 359(l0): point = 176
   Insn 575(l0): point = 178
   Insn 352(l0): point = 180
   Insn 576(l0): point = 182
   Insn 362(l0): point = 184
   Insn 365(l0): point = 186
   Insn 364(l0): point = 188
   Insn 350(l0): point = 190
   Insn 349(l0): point = 192
   Insn 348(l0): point = 194
   Insn 346(l0): point = 196
   Insn 577(l0): point = 198
   Insn 541(l0): point = 201
   Insn 308(l0): point = 203
   Insn 335(l0): point = 205
   Insn 306(l0): point = 207
   Insn 578(l0): point = 209
   Insn 478(l0): point = 211
   Insn 307(l0): point = 213
   Insn 304(l0): point = 215
   Insn 303(l0): point = 217
   Insn 302(l0): point = 219
   Insn 535(l0): point = 222
   Insn 233(l0): point = 224
   Insn 231(l0): point = 226
   Insn 230(l0): point = 228
   Insn 235(l0): point = 230
   Insn 579(l0): point = 232
   Insn 229(l0): point = 234
   Insn 228(l0): point = 236
   Insn 580(l0): point = 238
   Insn 239(l0): point = 240
   Insn 238(l0): point = 242
   Insn 524(l0): point = 244
   Insn 237(l0): point = 246
   Insn 236(l0): point = 248
   Insn 225(l0): point = 250
   Insn 527(l0): point = 253
   Insn 85(l0): point = 255
   Insn 84(l0): point = 257
   Insn 87(l0): point = 259
   Insn 581(l0): point = 261
   Insn 89(l0): point = 263
   Insn 216(l0): point = 265
   Insn 88(l0): point = 267
   Insn 81(l0): point = 269
   Insn 80(l0): point = 271
   Insn 132(l0): point = 273
   Insn 125(l0): point = 275
   Insn 138(l0): point = 277
   Insn 79(l0): point = 279
   Insn 525(l0): point = 282
   Insn 13(l0): point = 284
   Insn 582(l0): point = 286
   Insn 12(l0): point = 288
   Insn 39(l0): point = 290
   Insn 21(l0): point = 292
   Insn 10(l0): point = 294
   Insn 583(l0): point = 296
   Insn 16(l0): point = 298
   Insn 74(l0): point = 300
   Insn 15(l0): point = 302
   Insn 14(l0): point = 304
   Insn 342(l4): point = 307
   Insn 341(l4): point = 309
   Insn 340(l4): point = 311
   Insn 333(l4): point = 313
   Insn 339(l4): point = 315
   Insn 332(l4): point = 317
   Insn 337(l4): point = 319
   Insn 329(l4): point = 322
   Insn 328(l4): point = 324
   Insn 324(l4): point = 326
   Insn 323(l4): point = 328
   Insn 319(l4): point = 330
   Insn 318(l4): point = 332
   Insn 484(l4): point = 334
   Insn 314(l4): point = 336
   Insn 317(l4): point = 338
   Insn 322(l4): point = 340
   Insn 316(l4): point = 342
   Insn 313(l4): point = 344
   Insn 312(l4): point = 346
   Insn 299(l3): point = 349
   Insn 298(l3): point = 351
   Insn 294(l3): point = 354
   Insn 293(l3): point = 356
   Insn 254(l3): point = 359
   Insn 249(l3): point = 361
   Insn 252(l3): point = 363
   Insn 247(l3): point = 365
   Insn 251(l3): point = 367
   Insn 246(l3): point = 369
   Insn 250(l3): point = 371
   Insn 245(l3): point = 373
   Insn 291(l5): point = 376
   Insn 290(l5): point = 378
   Insn 288(l5): point = 380
   Insn 285(l5): point = 383
   Insn 283(l5): point = 386
   Insn 282(l5): point = 388
   Insn 281(l5): point = 390
   Insn 277(l5): point = 393
   Insn 539(l5): point = 396
   Insn 270(l5): point = 399
   Insn 269(l5): point = 401
   Insn 267(l5): point = 403
   Insn 537(l5): point = 406
   Insn 262(l5): point = 408
   Insn 260(l5): point = 411
   Insn 259(l5): point = 413
   Insn 272(l5): point = 415
   Insn 257(l5): point = 417
   Insn 223(l2): point = 420
   Insn 222(l2): point = 422
   Insn 221(l2): point = 424
   Insn 220(l2): point = 426
   Insn 218(l2): point = 428
   Insn 212(l2): point = 431
   Insn 209(l2): point = 434
   Insn 208(l2): point = 436
   Insn 207(l2): point = 438
   Insn 533(l2): point = 441
   Insn 183(l2): point = 443
   Insn 182(l2): point = 445
   Insn 179(l2): point = 448
   Insn 176(l2): point = 450
   Insn 178(l2): point = 452
   Insn 529(l2): point = 455
   Insn 103(l2): point = 457
   Insn 102(l2): point = 459
   Insn 101(l2): point = 461
   Insn 105(l2): point = 463
   Insn 100(l2): point = 465
   Insn 98(l2): point = 468
   Insn 97(l2): point = 470
   Insn 96(l2): point = 472
   Insn 95(l2): point = 474
   Insn 94(l2): point = 476
   Insn 93(l2): point = 478
   Insn 204(l7): point = 481
   Insn 198(l7): point = 483
   Insn 203(l7): point = 485
   Insn 487(l7): point = 487
   Insn 197(l7): point = 490
   Insn 489(l7): point = 492
   Insn 195(l7): point = 494
   Insn 194(l7): point = 496
   Insn 192(l7): point = 498
   Insn 191(l7): point = 500
   Insn 199(l7): point = 502
   Insn 189(l7): point = 504
   Insn 188(l7): point = 506
   Insn 174(l6): point = 509
   Insn 173(l6): point = 511
   Insn 172(l6): point = 513
   Insn 171(l6): point = 515
   Insn 169(l6): point = 517
   Insn 163(l6): point = 520
   Insn 160(l6): point = 523
   Insn 158(l6): point = 526
   Insn 157(l6): point = 528
   Insn 154(l6): point = 531
   Insn 153(l6): point = 533
   Insn 152(l6): point = 535
   Insn 531(l6): point = 538
   Insn 128(l6): point = 540
   Insn 127(l6): point = 542
   Insn 126(l6): point = 544
   Insn 123(l6): point = 547
   Insn 122(l6): point = 549
   Insn 120(l6): point = 551
   Insn 119(l6): point = 553
   Insn 121(l6): point = 555
   Insn 118(l6): point = 557
   Insn 116(l6): point = 560
   Insn 115(l6): point = 562
   Insn 114(l6): point = 564
   Insn 113(l6): point = 566
   Insn 112(l6): point = 568
   Insn 111(l6): point = 570
   Insn 110(l6): point = 572
   Insn 109(l6): point = 574
   Insn 149(l8): point = 577
   Insn 148(l8): point = 579
   Insn 491(l8): point = 581
   Insn 142(l8): point = 584
   Insn 493(l8): point = 586
   Insn 140(l8): point = 588
   Insn 139(l8): point = 590
   Insn 137(l8): point = 592
   Insn 136(l8): point = 594
   Insn 144(l8): point = 596
   Insn 134(l8): point = 598
   Insn 143(l8): point = 600
   Insn 133(l8): point = 602
   Insn 77(l1): point = 605
   Insn 69(l1): point = 607
   Insn 76(l1): point = 609
   Insn 70(l1): point = 611
   Insn 75(l1): point = 613
   Insn 22(l1): point = 615
   Insn 552(l1): point = 618
   Insn 551(l1): point = 620
   Insn 66(l1): point = 622
   Insn 65(l1): point = 624
   Insn 64(l1): point = 626
   Insn 63(l1): point = 628
   Insn 58(l1): point = 631
   Insn 57(l1): point = 633
   Insn 56(l1): point = 635
   Insn 53(l1): point = 638
   Insn 52(l1): point = 640
   Insn 554(l1): point = 642
   Insn 556(l1): point = 644
   Insn 553(l1): point = 646
   Insn 555(l1): point = 648
   Insn 44(l1): point = 650
   Insn 49(l1): point = 652
   Insn 43(l1): point = 654
   Insn 48(l1): point = 656
   Insn 42(l1): point = 658
   Insn 40(l1): point = 660
   Insn 37(l1): point = 663
   Insn 36(l1): point = 665
   Insn 26(l1): point = 667
   Insn 25(l1): point = 669
   Insn 24(l1): point = 671
   Insn 23(l1): point = 673
 a0(r373): [3..146]
 a1(r363): [5..150]
 a2(r353): [7..158]
 a3(r343): [9..162]
 a4(r337): [11..122]
 a5(r187): [13..152]
 a6(r334): [15..156]
 a7(r186): [17..142]
 a8(r330): [19..160]
 a9(r382): [21..74]
 a10(r374): [23..24]
 a11(r372): [27..80]
 a12(r364): [29..30]
 a13(r362): [33..86]
 a14(r354): [35..36]
 a15(r352): [39..92]
 a16(r344): [41..42]
 a17(r340): [49..50]
 a18(r339): [53..54]
 a19(r336): [59..100]
 a20(r333): [61..96]
 a21(r331): [63..64]
 a22(r329): [67..68]
 a23(r328): [71..72]
 a24(r379): [75..106]
 a25(r327): [77..78]
 a26(r369): [81..108]
 a27(r326): [83..84]
 a28(r359): [87..110]
 a29(r325): [89..90]
 a30(r349): [93..112]
 a31(r332): [97..104]
 a32(r335): [101..144]
 a33(r381): [107..114]
 a34(r375): [107..124]
 a35(r371): [109..116]
 a36(r365): [109..130]
 a37(r361): [111..118]
 a38(r355): [111..134]
 a39(r351): [113..120]
 a40(r345): [113..138]
 a41(r376): [125..126]
 a42(r366): [131..132]
 a43(r356): [135..136]
 a44(r346): [139..140]
 a45(r322): [143..148]
 a46(r321): [153..154]
 a47(r319): [169..170]
 a48(r320): [171..176]
 a49(r314): [173..174]
 a50(r158): [175..180]
 a51(r318): [177..178]
 a52(r159): [181..182]
 a53(r185): [187..240]
 a54(r184): [189..242]
 a55(r312): [193..196]
 a56(r383): [197..198]
 a57(r157): [201..203]
 a58(r290): [204..213]
 a59(r384): [201..205]
 a60(r288): [208..215]
 a61(r289): [208..209]
 a62(r385): [201..211]
 a63(r188): [222..224]
 a64(r387): [222..244]
 a65(r269): [227..250]
 a66(r274): [227..228]
 a67(r273): [229..234]
 a68(r272): [229..236]
 a69(r189): [222..230]
 a70(r276): [231..232]
 a71(r270): [237..238]
 a72(r156): [222..248]
 a73(r183): [222..246]
 a74(r229): [256..279]
 a75(r231): [256..257]
 a76(r192): [258..271]
 a77(r169): [253..259]
 a78(r232): [260..261]
 a79(r167): [253..263]
 a80(r233): [264..267]
 a81(r404): [253..265]
 a82(r406): [253..273]
 a83(r405): [253..275]
 a84(r407): [253..277]
 a85(r193): [285..286]
 a86(r197): [285..288]
 a87(r196): [289..294]
 a88(r415): [282..290]
 a89(r414): [282..292]
 a90(r413): [282..300]
 a91(r194): [295..296]
 a92(r175): [282..298]
 a93(r152): [282..304]
 a94(r176): [282..302]
 a95(r157): [307..348]
 a96(r184): [307..348]
 a97(r185): [307..348]
 a98(r384): [307..348]
 a99(r385): [307..348]
 a100(r307): [310..311]
 a101(r136): [310..317]
 a102(r308): [312..315]
 a103(r306): [312..319]
 a104(r180): [325..330]
 a105(r300): [327..328]
 a106(r299): [329..340]
 a107(r296): [331..332]
 a108(r291): [331..336]
 a109(r294): [333..338]
 a110(r292): [337..344]
 a111(r160): [337..346]
 a112(r295): [339..342]
 a113(r156): [349..375]
 a114(r183): [349..375]
 a115(r184): [349..375]
 a116(r185): [349..375]
 a117(r188): [349..375]
 a118(r189): [349..375]
 a119(r387): [349..375]
 a120(r181): [359..359]
 a121(r283): [360..363]
 a122(r182): [359..361]
 a123(r279): [362..365]
 a124(r281): [364..367]
 a125(r190): [366..369]
 a126(r282): [368..371]
 a127(r155): [370..373]
 a128(r156): [376..419]
 a129(r181): [376..419]
 a130(r182): [376..419]
 a131(r183): [376..419]
 a132(r184): [376..419]
 a133(r185): [376..419]
 a134(r188): [376..419]
 a135(r189): [376..419]
 a136(r387): [376..419]
 a137(r163): [389..390]
 a138(r141): [411..415] [396..405] [391..393]
 a139(r162): [402..403]
 a140(r165): [414..417]
 a141(r167): [420..480]
 a142(r169): [420..480]
 a143(r404): [420..480]
 a144(r405): [420..480]
 a145(r406): [420..480]
 a146(r407): [420..480]
 a147(r267): [423..424]
 a148(r268): [425..426]
 a149(r266): [425..428]
 a150(r262): [435..436]
 a151(r137): [437..450]
 a152(r261): [437..438]
 a153(r142): [439..445]
 a154(r148): [439..472]
 a155(r154): [441..443]
 a156(r145): [441..457]
 a157(r149): [458..459]
 a158(r236): [460..461]
 a159(r237): [462..465]
 a160(r168): [455..463]
 a161(r170): [466..478]
 a162(r234): [473..474]
 a163(r235): [475..476]
 a164(r137): [481..508]
 a165(r142): [481..508]
 a166(r145): [481..508]
 a167(r148): [481..508]
 a168(r154): [481..508]
 a169(r167): [481..508]
 a170(r169): [481..508]
 a171(r404): [481..508]
 a172(r405): [481..508]
 a173(r406): [481..508]
 a174(r407): [481..508]
 a175(r173): [495..504]
 a176(r258): [505..506]
 a177(r145): [536..576] [509..523]
 a178(r148): [509..576]
 a179(r167): [509..576]
 a180(r168): [509..576]
 a181(r169): [509..576]
 a182(r404): [509..576]
 a183(r405): [509..576]
 a184(r406): [509..576]
 a185(r407): [509..576]
 a186(r254): [512..513]
 a187(r255): [514..515]
 a188(r253): [514..517]
 a189(r139): [524..555]
 a190(r249): [532..533]
 a191(r144): [534..540]
 a192(r248): [534..535]
 a193(r166): [536..544]
 a194(r153): [538..542]
 a195(r140): [538..551]
 a196(r138): [552..553]
 a197(r147): [554..557]
 a198(r146): [556..564]
 a199(r171): [558..574]
 a200(r241): [565..566]
 a201(r242): [567..568]
 a202(r239): [569..570]
 a203(r240): [571..572]
 a204(r139): [577..604]
 a205(r140): [577..604]
 a206(r144): [577..604]
 a207(r145): [577..604]
 a208(r148): [577..604]
 a209(r153): [577..604]
 a210(r166): [577..604]
 a211(r167): [577..604]
 a212(r168): [577..604]
 a213(r169): [577..604]
 a214(r404): [577..604]
 a215(r405): [577..604]
 a216(r406): [577..604]
 a217(r407): [577..604]
 a218(r172): [589..598]
 a219(r245): [599..602]
 a220(r152): [605..675]
 a221(r175): [659..675] [605..620]
 a222(r176): [605..675]
 a223(r413): [605..675]
 a224(r414): [605..675]
 a225(r415): [605..675]
 a226(r228): [610..613]
 a227(r151): [629..675] [605..615]
 a228(r224): [621..622]
 a229(r225): [623..624]
 a230(r223): [625..626]
 a231(r220): [627..628]
 a232(r177): [634..648]
 a233(r178): [636..646]
 a234(r212): [647..650]
 a235(r217): [649..652]
 a236(r213): [651..654]
 a237(r216): [653..656]
 a238(r211): [655..658]
 a239(r179): [657..660]
 a240(r150): [657..667]
 a241(r201): [668..669]
 a242(r174): [670..671]
 a243(r200): [672..673]
 Rebuilding regno allocno list for 165
 Rebuilding regno allocno list for 163
 Rebuilding regno allocno list for 162
 Rebuilding regno allocno list for 141
Compressing live ranges: from 676 to 337 - 49%
Ranges after the compression:
 a0(r373): [0..80]
 a1(r363): [1..82]
 a2(r353): [2..87]
 a3(r343): [3..89]
 a4(r337): [4..64]
 a5(r187): [5..83]
 a6(r334): [6..86]
 a7(r186): [7..77]
 a8(r330): [8..88]
 a9(r382): [9..33]
 a10(r374): [10..11]
 a11(r372): [12..37]
 a12(r364): [13..14]
 a13(r362): [15..41]
 a14(r354): [16..17]
 a15(r352): [18..45]
 a16(r344): [19..20]
 a17(r340): [21..22]
 a18(r339): [23..24]
 a19(r336): [25..49]
 a20(r333): [26..47]
 a21(r331): [27..28]
 a22(r329): [29..30]
 a23(r328): [31..32]
 a24(r379): [34..52]
 a25(r327): [35..36]
 a26(r369): [38..54]
 a27(r326): [39..40]
 a28(r359): [42..56]
 a29(r325): [43..44]
 a30(r349): [46..58]
 a31(r332): [48..51]
 a32(r335): [50..79]
 a33(r381): [53..60]
 a34(r375): [53..65]
 a35(r371): [55..61]
 a36(r365): [55..68]
 a37(r361): [57..62]
 a38(r355): [57..71]
 a39(r351): [59..63]
 a40(r345): [59..74]
 a41(r376): [66..67]
 a42(r366): [69..70]
 a43(r356): [72..73]
 a44(r346): [75..76]
 a45(r322): [78..81]
 a46(r321): [84..85]
 a47(r319): [90..91]
 a48(r320): [92..96]
 a49(r314): [93..94]
 a50(r158): [95..99]
 a51(r318): [97..98]
 a52(r159): [100..101]
 a53(r185): [102..129]
 a54(r184): [103..130]
 a55(r312): [104..105]
 a56(r383): [106..107]
 a57(r157): [108..109]
 a58(r290): [110..115]
 a59(r384): [108..111]
 a60(r288): [112..116]
 a61(r289): [112..113]
 a62(r385): [108..114]
 a63(r188): [117..118]
 a64(r387): [117..131]
 a65(r269): [119..134]
 a66(r274): [119..120]
 a67(r273): [121..125]
 a68(r272): [121..126]
 a69(r189): [117..122]
 a70(r276): [123..124]
 a71(r270): [127..128]
 a72(r156): [117..133]
 a73(r183): [117..132]
 a74(r229): [136..150]
 a75(r231): [136..137]
 a76(r192): [138..146]
 a77(r169): [135..139]
 a78(r232): [140..141]
 a79(r167): [135..142]
 a80(r233): [143..145]
 a81(r404): [135..144]
 a82(r406): [135..147]
 a83(r405): [135..148]
 a84(r407): [135..149]
 a85(r193): [152..153]
 a86(r197): [152..154]
 a87(r196): [155..158]
 a88(r415): [151..156]
 a89(r414): [151..157]
 a90(r413): [151..162]
 a91(r194): [159..160]
 a92(r175): [151..161]
 a93(r152): [151..164]
 a94(r176): [151..163]
 a95(r157): [165..188]
 a96(r184): [165..188]
 a97(r185): [165..188]
 a98(r384): [165..188]
 a99(r385): [165..188]
 a100(r307): [166..167]
 a101(r136): [166..170]
 a102(r308): [168..169]
 a103(r306): [168..171]
 a104(r180): [172..176]
 a105(r300): [173..174]
 a106(r299): [175..184]
 a107(r296): [177..178]
 a108(r291): [177..180]
 a109(r294): [179..182]
 a110(r292): [181..186]
 a111(r160): [181..187]
 a112(r295): [183..185]
 a113(r156): [189..217]
 a114(r183): [189..217]
 a115(r184): [189..217]
 a116(r185): [189..217]
 a117(r188): [189..217]
 a118(r189): [189..217]
 a119(r387): [189..217]
 a120(r181): [204..217] [190..190]
 a121(r283): [191..194]
 a122(r182): [204..217] [190..192]
 a123(r279): [193..196]
 a124(r281): [195..198]
 a125(r190): [197..200]
 a126(r282): [199..202]
 a127(r155): [201..203]
 a137(r163): [205..206]
 a138(r141): [213..215] [209..212] [207..208]
 a139(r162): [210..211]
 a140(r165): [214..216]
 a141(r167): [218..249]
 a142(r169): [218..249]
 a143(r404): [218..249]
 a144(r405): [218..249]
 a145(r406): [218..249]
 a146(r407): [218..249]
 a147(r267): [219..220]
 a148(r268): [221..222]
 a149(r266): [221..223]
 a150(r262): [224..225]
 a151(r137): [226..232]
 a152(r261): [226..227]
 a153(r142): [228..231]
 a154(r148): [228..243]
 a155(r154): [229..230]
 a156(r145): [229..234]
 a157(r149): [235..236]
 a158(r236): [237..238]
 a159(r237): [239..241]
 a160(r168): [233..240]
 a161(r170): [242..248]
 a162(r234): [244..245]
 a163(r235): [246..247]
 a164(r137): [250..255]
 a165(r142): [250..255]
 a166(r145): [250..255]
 a167(r148): [250..255]
 a168(r154): [250..255]
 a169(r167): [250..255]
 a170(r169): [250..255]
 a171(r404): [250..255]
 a172(r405): [250..255]
 a173(r406): [250..255]
 a174(r407): [250..255]
 a175(r173): [251..252]
 a176(r258): [253..254]
 a177(r145): [268..291] [256..262]
 a178(r148): [256..291]
 a179(r167): [256..291]
 a180(r168): [256..291]
 a181(r169): [256..291]
 a182(r404): [256..291]
 a183(r405): [256..291]
 a184(r406): [256..291]
 a185(r407): [256..291]
 a186(r254): [257..258]
 a187(r255): [259..260]
 a188(r253): [259..261]
 a189(r139): [263..277]
 a190(r249): [264..265]
 a191(r144): [266..270]
 a192(r248): [266..267]
 a193(r166): [268..272]
 a194(r153): [269..271]
 a195(r140): [269..273]
 a196(r138): [274..275]
 a197(r147): [276..279]
 a198(r146): [278..281]
 a199(r171): [280..290]
 a200(r241): [282..283]
 a201(r242): [284..285]
 a202(r239): [286..287]
 a203(r240): [288..289]
 a204(r139): [292..297]
 a205(r140): [292..297]
 a206(r144): [292..297]
 a207(r145): [292..297]
 a208(r148): [292..297]
 a209(r153): [292..297]
 a210(r166): [292..297]
 a211(r167): [292..297]
 a212(r168): [292..297]
 a213(r169): [292..297]
 a214(r404): [292..297]
 a215(r405): [292..297]
 a216(r406): [292..297]
 a217(r407): [292..297]
 a218(r172): [293..294]
 a219(r245): [295..296]
 a220(r152): [298..336]
 a221(r175): [327..336] [298..302]
 a222(r176): [298..336]
 a223(r413): [298..336]
 a224(r414): [298..336]
 a225(r415): [298..336]
 a226(r228): [299..300]
 a227(r151): [311..336] [298..301]
 a228(r224): [303..304]
 a229(r225): [305..306]
 a230(r223): [307..308]
 a231(r220): [309..310]
 a232(r177): [312..316]
 a233(r178): [313..314]
 a234(r212): [315..318]
 a235(r217): [317..320]
 a236(r213): [319..322]
 a237(r216): [321..324]
 a238(r211): [323..326]
 a239(r179): [325..328]
 a240(r150): [325..329]
 a241(r201): [330..331]
 a242(r174): [332..333]
 a243(r200): [334..335]
    Creating cap  a244(r307,l0: a100(r307,l4))
    Creating cap  a245(r136,l0: a101(r136,l4))
    Creating cap  a246(r308,l0: a102(r308,l4))
    Creating cap  a247(r306,l0: a103(r306,l4))
    Creating cap  a248(r180,l0: a104(r180,l4))
    Creating cap  a249(r300,l0: a105(r300,l4))
    Creating cap  a250(r299,l0: a106(r299,l4))
    Creating cap  a251(r296,l0: a107(r296,l4))
    Creating cap  a252(r291,l0: a108(r291,l4))
    Creating cap  a253(r294,l0: a109(r294,l4))
    Creating cap  a254(r292,l0: a110(r292,l4))
    Creating cap  a255(r160,l0: a111(r160,l4))
    Creating cap  a256(r295,l0: a112(r295,l4))
    Creating cap  a257(r181,l0: a120(r181,l3))
    Creating cap  a258(r283,l0: a121(r283,l3))
    Creating cap  a259(r182,l0: a122(r182,l3))
    Creating cap  a260(r279,l0: a123(r279,l3))
    Creating cap  a261(r281,l0: a124(r281,l3))
    Creating cap  a262(r190,l0: a125(r190,l3))
    Creating cap  a263(r282,l0: a126(r282,l3))
    Creating cap  a264(r155,l0: a127(r155,l3))
    Creating cap  a265(r163,l0: a137(r163,l3))
    Creating cap  a266(r141,l0: a138(r141,l3))
    Creating cap  a267(r162,l0: a139(r162,l3))
    Creating cap  a268(r165,l0: a140(r165,l3))
    Creating cap  a269(r267,l0: a147(r267,l2))
    Creating cap  a270(r268,l0: a148(r268,l2))
    Creating cap  a271(r266,l0: a149(r266,l2))
    Creating cap  a272(r262,l0: a150(r262,l2))
    Creating cap  a273(r137,l0: a151(r137,l2))
    Creating cap  a274(r261,l0: a152(r261,l2))
    Creating cap  a275(r142,l0: a153(r142,l2))
    Creating cap  a276(r148,l0: a154(r148,l2))
    Creating cap  a277(r154,l0: a155(r154,l2))
    Creating cap  a278(r145,l0: a156(r145,l2))
    Creating cap  a279(r149,l0: a157(r149,l2))
    Creating cap  a280(r236,l0: a158(r236,l2))
    Creating cap  a281(r237,l0: a159(r237,l2))
    Creating cap  a282(r168,l0: a160(r168,l2))
    Creating cap  a283(r170,l0: a161(r170,l2))
    Creating cap  a284(r234,l0: a162(r234,l2))
    Creating cap  a285(r235,l0: a163(r235,l2))
    Creating cap  a286(r173,l2: a175(r173,l7))
    Creating cap  a287(r258,l2: a176(r258,l7))
    Creating cap  a288(r254,l2: a186(r254,l6))
    Creating cap  a289(r255,l2: a187(r255,l6))
    Creating cap  a290(r253,l2: a188(r253,l6))
    Creating cap  a291(r139,l2: a189(r139,l6))
    Creating cap  a292(r249,l2: a190(r249,l6))
    Creating cap  a293(r144,l2: a191(r144,l6))
    Creating cap  a294(r248,l2: a192(r248,l6))
    Creating cap  a295(r166,l2: a193(r166,l6))
    Creating cap  a296(r153,l2: a194(r153,l6))
    Creating cap  a297(r140,l2: a195(r140,l6))
    Creating cap  a298(r138,l2: a196(r138,l6))
    Creating cap  a299(r147,l2: a197(r147,l6))
    Creating cap  a300(r146,l2: a198(r146,l6))
    Creating cap  a301(r171,l2: a199(r171,l6))
    Creating cap  a302(r241,l2: a200(r241,l6))
    Creating cap  a303(r242,l2: a201(r242,l6))
    Creating cap  a304(r239,l2: a202(r239,l6))
    Creating cap  a305(r240,l2: a203(r240,l6))
    Creating cap  a306(r172,l6: a218(r172,l8))
    Creating cap  a307(r245,l6: a219(r245,l8))
    Creating cap  a308(r228,l0: a226(r228,l1))
    Creating cap  a309(r151,l0: a227(r151,l1))
    Creating cap  a310(r224,l0: a228(r224,l1))
    Creating cap  a311(r225,l0: a229(r225,l1))
    Creating cap  a312(r223,l0: a230(r223,l1))
    Creating cap  a313(r220,l0: a231(r220,l1))
    Creating cap  a314(r177,l0: a232(r177,l1))
    Creating cap  a315(r178,l0: a233(r178,l1))
    Creating cap  a316(r212,l0: a234(r212,l1))
    Creating cap  a317(r217,l0: a235(r217,l1))
    Creating cap  a318(r213,l0: a236(r213,l1))
    Creating cap  a319(r216,l0: a237(r216,l1))
    Creating cap  a320(r211,l0: a238(r211,l1))
    Creating cap  a321(r179,l0: a239(r179,l1))
    Creating cap  a322(r150,l0: a240(r150,l1))
    Creating cap  a323(r201,l0: a241(r201,l1))
    Creating cap  a324(r174,l0: a242(r174,l1))
    Creating cap  a325(r200,l0: a243(r200,l1))
    Creating cap  a326(r173,l0: a286(r173,l2: a175(r173,l7)))
    Creating cap  a327(r258,l0: a287(r258,l2: a176(r258,l7)))
    Creating cap  a328(r254,l0: a288(r254,l2: a186(r254,l6)))
    Creating cap  a329(r255,l0: a289(r255,l2: a187(r255,l6)))
    Creating cap  a330(r253,l0: a290(r253,l2: a188(r253,l6)))
    Creating cap  a331(r139,l0: a291(r139,l2: a189(r139,l6)))
    Creating cap  a332(r249,l0: a292(r249,l2: a190(r249,l6)))
    Creating cap  a333(r144,l0: a293(r144,l2: a191(r144,l6)))
    Creating cap  a334(r248,l0: a294(r248,l2: a192(r248,l6)))
    Creating cap  a335(r166,l0: a295(r166,l2: a193(r166,l6)))
    Creating cap  a336(r153,l0: a296(r153,l2: a194(r153,l6)))
    Creating cap  a337(r140,l0: a297(r140,l2: a195(r140,l6)))
    Creating cap  a338(r138,l0: a298(r138,l2: a196(r138,l6)))
    Creating cap  a339(r147,l0: a299(r147,l2: a197(r147,l6)))
    Creating cap  a340(r146,l0: a300(r146,l2: a198(r146,l6)))
    Creating cap  a341(r171,l0: a301(r171,l2: a199(r171,l6)))
    Creating cap  a342(r241,l0: a302(r241,l2: a200(r241,l6)))
    Creating cap  a343(r242,l0: a303(r242,l2: a201(r242,l6)))
    Creating cap  a344(r239,l0: a304(r239,l2: a202(r239,l6)))
    Creating cap  a345(r240,l0: a305(r240,l2: a203(r240,l6)))
    Creating cap  a346(r172,l2: a306(r172,l6: a218(r172,l8)))
    Creating cap  a347(r245,l2: a307(r245,l6: a219(r245,l8)))
    Creating cap  a348(r172,l0: a346(r172,l2: a306(r172,l6: a218(r172,l8))))
    Creating cap  a349(r245,l0: a347(r245,l2: a307(r245,l6: a219(r245,l8))))
+++Allocating 7216 bytes for conflict table (uncompressed size 16800)
;; a0(r373,l0) conflicts: a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0) a44(r346,l0) a45(r322,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r363,l0) conflicts: a0(r373,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0) a44(r346,l0) a45(r322,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a2(r353,l0) conflicts: a0(r373,l0) a1(r363,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0) a44(r346,l0) a45(r322,l0) a46(r321,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r343,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0) a44(r346,l0) a45(r322,l0) a46(r321,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a4(r337,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a5(r187,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0) a44(r346,l0) a45(r322,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a6(r334,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0) a44(r346,l0) a45(r322,l0) a46(r321,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a7(r186,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a8(r330,l0) a9(r382,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0) a44(r346,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a8(r330,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a9(r382,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0) a44(r346,l0) a45(r322,l0) a46(r321,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a9(r382,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a10(r374,l0) a11(r372,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a10(r374,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a11(r372,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a12(r364,l0) a13(r362,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a12(r364,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a13(r362,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a14(r354,l0) a15(r352,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a14(r354,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a15(r352,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0) a16(r344,l0) a17(r340,l0) a18(r339,l0) a19(r336,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a16(r344,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a17(r340,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a18(r339,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a19(r336,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0) a20(r333,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a20(r333,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0) a19(r336,l0) a21(r331,l0) a22(r329,l0) a23(r328,l0) a24(r379,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a21(r331,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0) a19(r336,l0) a20(r333,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a22(r329,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0) a19(r336,l0) a20(r333,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a23(r328,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a9(r382,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0) a19(r336,l0) a20(r333,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a24(r379,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0) a19(r336,l0) a20(r333,l0) a25(r327,l0) a26(r369,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a25(r327,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a11(r372,l0) a13(r362,l0) a15(r352,l0) a19(r336,l0) a20(r333,l0) a24(r379,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a26(r369,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a13(r362,l0) a15(r352,l0) a19(r336,l0) a20(r333,l0) a24(r379,l0) a27(r326,l0) a28(r359,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a27(r326,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a13(r362,l0) a15(r352,l0) a19(r336,l0) a20(r333,l0) a24(r379,l0) a26(r369,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a28(r359,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a15(r352,l0) a19(r336,l0) a20(r333,l0) a24(r379,l0) a26(r369,l0) a29(r325,l0) a30(r349,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a29(r325,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a15(r352,l0) a19(r336,l0) a20(r333,l0) a24(r379,l0) a26(r369,l0) a28(r359,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a30(r349,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a19(r336,l0) a20(r333,l0) a24(r379,l0) a26(r369,l0) a28(r359,l0) a31(r332,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a31(r332,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a19(r336,l0) a24(r379,l0) a26(r369,l0) a28(r359,l0) a30(r349,l0) a32(r335,l0)
;;     total conflict hard regs: 0 1 3
;;     conflict hard regs: 0 1 3
;; a32(r335,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a24(r379,l0) a26(r369,l0) a28(r359,l0) a30(r349,l0) a31(r332,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0) a44(r346,l0) a45(r322,l0)
;;     total conflict hard regs: 0 3
;;     conflict hard regs: 0 3
;; a33(r381,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a26(r369,l0) a28(r359,l0) a30(r349,l0) a32(r335,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a34(r375,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a26(r369,l0) a28(r359,l0) a30(r349,l0) a32(r335,l0) a33(r381,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a35(r371,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a28(r359,l0) a30(r349,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a36(r365,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a28(r359,l0) a30(r349,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a37(r361,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a30(r349,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a38(r355,l0) a39(r351,l0) a40(r345,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a38(r355,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a30(r349,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a39(r351,l0) a40(r345,l0) a41(r376,l0) a42(r366,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a39(r351,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a40(r345,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a40(r345,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a4(r337,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a32(r335,l0) a33(r381,l0) a34(r375,l0) a35(r371,l0) a36(r365,l0) a37(r361,l0) a38(r355,l0) a39(r351,l0) a41(r376,l0) a42(r366,l0) a43(r356,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a41(r376,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a32(r335,l0) a36(r365,l0) a38(r355,l0) a40(r345,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a42(r366,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a32(r335,l0) a38(r355,l0) a40(r345,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a43(r356,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a32(r335,l0) a40(r345,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a44(r346,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a5(r187,l0) a6(r334,l0) a7(r186,l0) a8(r330,l0) a32(r335,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a45(r322,l0) conflicts: a0(r373,l0) a1(r363,l0) a2(r353,l0) a3(r343,l0) a5(r187,l0) a6(r334,l0) a8(r330,l0) a32(r335,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a46(r321,l0) conflicts: a2(r353,l0) a3(r343,l0) a6(r334,l0) a8(r330,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a47(r319,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a48(r320,l0) conflicts: a49(r314,l0) a50(r158,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a49(r314,l0) conflicts: a48(r320,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a50(r158,l0) conflicts: a48(r320,l0) a51(r318,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a51(r318,l0) conflicts: a50(r158,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a52(r159,l0) conflicts:
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a53(r185,l0) conflicts: a54(r184,l0) a55(r312,l0) a56(r383,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a58(r290,l0) a61(r289,l0) a60(r288,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a66(r274,l0) a65(r269,l0) a67(r273,l0) a68(r272,l0) a70(r276,l0) a71(r270,l0) a244(r307,l0) a245(r136,l0) a246(r308,l0) a247(r306,l0) a248(r180,l0) a249(r300,l0) a250(r299,l0) a251(r296,l0) a252(r291,l0) a253(r294,l0) a254(r292,l0) a255(r160,l0) a256(r295,l0) a257(r181,l0) a259(r182,l0) a258(r283,l0) a260(r279,l0) a261(r281,l0) a262(r190,l0) a263(r282,l0) a264(r155,l0) a265(r163,l0) a266(r141,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a54(r184,l0) conflicts: a53(r185,l0) a55(r312,l0) a56(r383,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a58(r290,l0) a61(r289,l0) a60(r288,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a66(r274,l0) a65(r269,l0) a67(r273,l0) a68(r272,l0) a70(r276,l0) a71(r270,l0) a244(r307,l0) a245(r136,l0) a246(r308,l0) a247(r306,l0) a248(r180,l0) a249(r300,l0) a250(r299,l0) a251(r296,l0) a252(r291,l0) a253(r294,l0) a254(r292,l0) a255(r160,l0) a256(r295,l0) a257(r181,l0) a259(r182,l0) a258(r283,l0) a260(r279,l0) a261(r281,l0) a262(r190,l0) a263(r282,l0) a264(r155,l0) a265(r163,l0) a266(r141,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a55(r312,l0) conflicts: a53(r185,l0) a54(r184,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a56(r383,l0) conflicts: a53(r185,l0) a54(r184,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a57(r157,l0) conflicts: a53(r185,l0) a54(r184,l0) a59(r384,l0) a62(r385,l0) a244(r307,l0) a245(r136,l0) a246(r308,l0) a247(r306,l0) a248(r180,l0) a249(r300,l0) a250(r299,l0) a251(r296,l0) a252(r291,l0) a253(r294,l0) a254(r292,l0) a255(r160,l0) a256(r295,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a58(r290,l0) conflicts: a53(r185,l0) a54(r184,l0) a59(r384,l0) a62(r385,l0) a61(r289,l0) a60(r288,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a59(r384,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a62(r385,l0) a58(r290,l0) a244(r307,l0) a245(r136,l0) a246(r308,l0) a247(r306,l0) a248(r180,l0) a249(r300,l0) a250(r299,l0) a251(r296,l0) a252(r291,l0) a253(r294,l0) a254(r292,l0) a255(r160,l0) a256(r295,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a60(r288,l0) conflicts: a53(r185,l0) a54(r184,l0) a62(r385,l0) a58(r290,l0) a61(r289,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a61(r289,l0) conflicts: a53(r185,l0) a54(r184,l0) a62(r385,l0) a58(r290,l0) a60(r288,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a62(r385,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a58(r290,l0) a61(r289,l0) a60(r288,l0) a244(r307,l0) a245(r136,l0) a246(r308,l0) a247(r306,l0) a248(r180,l0) a249(r300,l0) a250(r299,l0) a251(r296,l0) a252(r291,l0) a253(r294,l0) a254(r292,l0) a255(r160,l0) a256(r295,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a63(r188,l0) conflicts: a53(r185,l0) a54(r184,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a257(r181,l0) a259(r182,l0) a258(r283,l0) a260(r279,l0) a261(r281,l0) a262(r190,l0) a263(r282,l0) a264(r155,l0) a265(r163,l0) a266(r141,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a64(r387,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a66(r274,l0) a65(r269,l0) a67(r273,l0) a68(r272,l0) a70(r276,l0) a71(r270,l0) a257(r181,l0) a259(r182,l0) a258(r283,l0) a260(r279,l0) a261(r281,l0) a262(r190,l0) a263(r282,l0) a264(r155,l0) a265(r163,l0) a266(r141,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a65(r269,l0) conflicts: a53(r185,l0) a54(r184,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a66(r274,l0) a67(r273,l0) a68(r272,l0) a70(r276,l0) a71(r270,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a66(r274,l0) conflicts: a53(r185,l0) a54(r184,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a65(r269,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a67(r273,l0) conflicts: a53(r185,l0) a54(r184,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a65(r269,l0) a68(r272,l0) a70(r276,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a68(r272,l0) conflicts: a53(r185,l0) a54(r184,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a65(r269,l0) a67(r273,l0) a70(r276,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a69(r189,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a72(r156,l0) a73(r183,l0) a66(r274,l0) a65(r269,l0) a67(r273,l0) a68(r272,l0) a257(r181,l0) a259(r182,l0) a258(r283,l0) a260(r279,l0) a261(r281,l0) a262(r190,l0) a263(r282,l0) a264(r155,l0) a265(r163,l0) a266(r141,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a70(r276,l0) conflicts: a53(r185,l0) a54(r184,l0) a64(r387,l0) a72(r156,l0) a73(r183,l0) a65(r269,l0) a67(r273,l0) a68(r272,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a71(r270,l0) conflicts: a53(r185,l0) a54(r184,l0) a64(r387,l0) a72(r156,l0) a73(r183,l0) a65(r269,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a72(r156,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a73(r183,l0) a66(r274,l0) a65(r269,l0) a67(r273,l0) a68(r272,l0) a70(r276,l0) a71(r270,l0) a257(r181,l0) a259(r182,l0) a258(r283,l0) a260(r279,l0) a261(r281,l0) a262(r190,l0) a263(r282,l0) a264(r155,l0) a265(r163,l0) a266(r141,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a73(r183,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a66(r274,l0) a65(r269,l0) a67(r273,l0) a68(r272,l0) a70(r276,l0) a71(r270,l0) a257(r181,l0) a259(r182,l0) a258(r283,l0) a260(r279,l0) a261(r281,l0) a262(r190,l0) a263(r282,l0) a264(r155,l0) a265(r163,l0) a266(r141,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a74(r229,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a75(r231,l0) a76(r192,l0) a78(r232,l0) a80(r233,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a75(r231,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a74(r229,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a76(r192,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a74(r229,l0) a78(r232,l0) a80(r233,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a77(r169,l0) conflicts: a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a75(r231,l0) a74(r229,l0) a76(r192,l0) a269(r267,l0) a270(r268,l0) a271(r266,l0) a272(r262,l0) a274(r261,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0) a282(r168,l0) a279(r149,l0) a280(r236,l0) a281(r237,l0) a283(r170,l0) a284(r234,l0) a285(r235,l0) a326(r173,l0) a327(r258,l0) a328(r254,l0) a329(r255,l0) a330(r253,l0) a331(r139,l0) a332(r249,l0) a334(r248,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a340(r146,l0) a341(r171,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0
;; a78(r232,l0) conflicts: a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a74(r229,l0) a76(r192,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a79(r167,l0) conflicts: a77(r169,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a75(r231,l0) a74(r229,l0) a76(r192,l0) a78(r232,l0) a269(r267,l0) a270(r268,l0) a271(r266,l0) a272(r262,l0) a274(r261,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0) a282(r168,l0) a279(r149,l0) a280(r236,l0) a281(r237,l0) a283(r170,l0) a284(r234,l0) a285(r235,l0) a326(r173,l0) a327(r258,l0) a328(r254,l0) a329(r255,l0) a330(r253,l0) a331(r139,l0) a332(r249,l0) a334(r248,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a340(r146,l0) a341(r171,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0
;; a80(r233,l0) conflicts: a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a74(r229,l0) a76(r192,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a81(r404,l0) conflicts: a77(r169,l0) a79(r167,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a75(r231,l0) a74(r229,l0) a76(r192,l0) a78(r232,l0) a80(r233,l0) a269(r267,l0) a270(r268,l0) a271(r266,l0) a272(r262,l0) a274(r261,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0) a282(r168,l0) a279(r149,l0) a280(r236,l0) a281(r237,l0) a283(r170,l0) a284(r234,l0) a285(r235,l0) a326(r173,l0) a327(r258,l0) a328(r254,l0) a329(r255,l0) a330(r253,l0) a331(r139,l0) a332(r249,l0) a334(r248,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a340(r146,l0) a341(r171,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0
;; a82(r406,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a83(r405,l0) a84(r407,l0) a75(r231,l0) a74(r229,l0) a76(r192,l0) a78(r232,l0) a80(r233,l0) a269(r267,l0) a270(r268,l0) a271(r266,l0) a272(r262,l0) a274(r261,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0) a282(r168,l0) a279(r149,l0) a280(r236,l0) a281(r237,l0) a283(r170,l0) a284(r234,l0) a285(r235,l0) a326(r173,l0) a327(r258,l0) a328(r254,l0) a329(r255,l0) a330(r253,l0) a331(r139,l0) a332(r249,l0) a334(r248,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a340(r146,l0) a341(r171,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 14
;; a83(r405,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a84(r407,l0) a75(r231,l0) a74(r229,l0) a76(r192,l0) a78(r232,l0) a80(r233,l0) a269(r267,l0) a270(r268,l0) a271(r266,l0) a272(r262,l0) a274(r261,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0) a282(r168,l0) a279(r149,l0) a280(r236,l0) a281(r237,l0) a283(r170,l0) a284(r234,l0) a285(r235,l0) a326(r173,l0) a327(r258,l0) a328(r254,l0) a329(r255,l0) a330(r253,l0) a331(r139,l0) a332(r249,l0) a334(r248,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a340(r146,l0) a341(r171,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 14
;; a84(r407,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a75(r231,l0) a74(r229,l0) a76(r192,l0) a78(r232,l0) a80(r233,l0) a269(r267,l0) a270(r268,l0) a271(r266,l0) a272(r262,l0) a274(r261,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0) a282(r168,l0) a279(r149,l0) a280(r236,l0) a281(r237,l0) a283(r170,l0) a284(r234,l0) a285(r235,l0) a326(r173,l0) a327(r258,l0) a328(r254,l0) a329(r255,l0) a330(r253,l0) a331(r139,l0) a332(r249,l0) a334(r248,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a340(r146,l0) a341(r171,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 14
;; a85(r193,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a86(r197,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a86(r197,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a85(r193,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a87(r196,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a88(r415,l0) conflicts: a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a85(r193,l0) a86(r197,l0) a87(r196,l0) a309(r151,l0) a308(r228,l0) a310(r224,l0) a311(r225,l0) a312(r223,l0) a313(r220,l0) a314(r177,l0) a315(r178,l0) a316(r212,l0) a317(r217,l0) a318(r213,l0) a319(r216,l0) a320(r211,l0) a321(r179,l0) a322(r150,l0) a323(r201,l0) a324(r174,l0) a325(r200,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a89(r414,l0) conflicts: a88(r415,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a85(r193,l0) a86(r197,l0) a87(r196,l0) a309(r151,l0) a308(r228,l0) a310(r224,l0) a311(r225,l0) a312(r223,l0) a313(r220,l0) a314(r177,l0) a315(r178,l0) a316(r212,l0) a317(r217,l0) a318(r213,l0) a319(r216,l0) a320(r211,l0) a321(r179,l0) a322(r150,l0) a323(r201,l0) a324(r174,l0) a325(r200,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a90(r413,l0) conflicts: a88(r415,l0) a89(r414,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a85(r193,l0) a86(r197,l0) a87(r196,l0) a91(r194,l0) a309(r151,l0) a308(r228,l0) a310(r224,l0) a311(r225,l0) a312(r223,l0) a313(r220,l0) a314(r177,l0) a315(r178,l0) a316(r212,l0) a317(r217,l0) a318(r213,l0) a319(r216,l0) a320(r211,l0) a321(r179,l0) a322(r150,l0) a323(r201,l0) a324(r174,l0) a325(r200,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a91(r194,l0) conflicts: a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a92(r175,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0) a85(r193,l0) a86(r197,l0) a87(r196,l0) a91(r194,l0) a309(r151,l0) a308(r228,l0) a321(r179,l0) a322(r150,l0) a323(r201,l0) a324(r174,l0) a325(r200,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a93(r152,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a94(r176,l0) a85(r193,l0) a86(r197,l0) a87(r196,l0) a91(r194,l0) a309(r151,l0) a308(r228,l0) a310(r224,l0) a311(r225,l0) a312(r223,l0) a313(r220,l0) a314(r177,l0) a315(r178,l0) a316(r212,l0) a317(r217,l0) a318(r213,l0) a319(r216,l0) a320(r211,l0) a321(r179,l0) a322(r150,l0) a323(r201,l0) a324(r174,l0) a325(r200,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a94(r176,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a85(r193,l0) a86(r197,l0) a87(r196,l0) a91(r194,l0) a309(r151,l0) a308(r228,l0) a310(r224,l0) a311(r225,l0) a312(r223,l0) a313(r220,l0) a314(r177,l0) a315(r178,l0) a316(r212,l0) a317(r217,l0) a318(r213,l0) a319(r216,l0) a320(r211,l0) a321(r179,l0) a322(r150,l0) a323(r201,l0) a324(r174,l0) a325(r200,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a95(r157,l4) conflicts: a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a100(r307,l4) a101(r136,l4) a102(r308,l4) a103(r306,l4) a104(r180,l4) a105(r300,l4) a106(r299,l4) a107(r296,l4) a108(r291,l4) a109(r294,l4) a110(r292,l4) a111(r160,l4) a112(r295,l4)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a96(r184,l4) conflicts: a95(r157,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a100(r307,l4) a101(r136,l4) a102(r308,l4) a103(r306,l4) a104(r180,l4) a105(r300,l4) a106(r299,l4) a107(r296,l4) a108(r291,l4) a109(r294,l4) a110(r292,l4) a111(r160,l4) a112(r295,l4)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a97(r185,l4) conflicts: a95(r157,l4) a96(r184,l4) a98(r384,l4) a99(r385,l4) a100(r307,l4) a101(r136,l4) a102(r308,l4) a103(r306,l4) a104(r180,l4) a105(r300,l4) a106(r299,l4) a107(r296,l4) a108(r291,l4) a109(r294,l4) a110(r292,l4) a111(r160,l4) a112(r295,l4)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a98(r384,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a99(r385,l4) a100(r307,l4) a101(r136,l4) a102(r308,l4) a103(r306,l4) a104(r180,l4) a105(r300,l4) a106(r299,l4) a107(r296,l4) a108(r291,l4) a109(r294,l4) a110(r292,l4) a111(r160,l4) a112(r295,l4)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a99(r385,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a100(r307,l4) a101(r136,l4) a102(r308,l4) a103(r306,l4) a104(r180,l4) a105(r300,l4) a106(r299,l4) a107(r296,l4) a108(r291,l4) a109(r294,l4) a110(r292,l4) a111(r160,l4) a112(r295,l4)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a100(r307,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a101(r136,l4)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a101(r136,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a100(r307,l4) a102(r308,l4) a103(r306,l4)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a102(r308,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a101(r136,l4) a103(r306,l4)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a103(r306,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a101(r136,l4) a102(r308,l4)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a104(r180,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a105(r300,l4) a106(r299,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a105(r300,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a104(r180,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a106(r299,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a104(r180,l4) a107(r296,l4) a108(r291,l4) a109(r294,l4) a110(r292,l4) a111(r160,l4) a112(r295,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a107(r296,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a106(r299,l4) a108(r291,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a108(r291,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a106(r299,l4) a107(r296,l4) a109(r294,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a109(r294,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a106(r299,l4) a108(r291,l4) a110(r292,l4) a111(r160,l4)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a110(r292,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a106(r299,l4) a109(r294,l4) a111(r160,l4) a112(r295,l4)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a111(r160,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a106(r299,l4) a109(r294,l4) a110(r292,l4) a112(r295,l4)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a112(r295,l4) conflicts: a95(r157,l4) a96(r184,l4) a97(r185,l4) a98(r384,l4) a99(r385,l4) a106(r299,l4) a110(r292,l4) a111(r160,l4)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a113(r156,l3) conflicts: a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3) a121(r283,l3) a123(r279,l3) a124(r281,l3) a125(r190,l3) a126(r282,l3) a127(r155,l3) a137(r163,l3) a138(r141,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a114(r183,l3) conflicts: a113(r156,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3) a121(r283,l3) a123(r279,l3) a124(r281,l3) a125(r190,l3) a126(r282,l3) a127(r155,l3) a137(r163,l3) a138(r141,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a115(r184,l3) conflicts: a113(r156,l3) a114(r183,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3) a121(r283,l3) a123(r279,l3) a124(r281,l3) a125(r190,l3) a126(r282,l3) a127(r155,l3) a137(r163,l3) a138(r141,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a116(r185,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3) a121(r283,l3) a123(r279,l3) a124(r281,l3) a125(r190,l3) a126(r282,l3) a127(r155,l3) a137(r163,l3) a138(r141,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a117(r188,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3) a121(r283,l3) a123(r279,l3) a124(r281,l3) a125(r190,l3) a126(r282,l3) a127(r155,l3) a137(r163,l3) a138(r141,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a118(r189,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3) a121(r283,l3) a123(r279,l3) a124(r281,l3) a125(r190,l3) a126(r282,l3) a127(r155,l3) a137(r163,l3) a138(r141,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a119(r387,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a120(r181,l3) a122(r182,l3) a121(r283,l3) a123(r279,l3) a124(r281,l3) a125(r190,l3) a126(r282,l3) a127(r155,l3) a137(r163,l3) a138(r141,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a120(r181,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a122(r182,l3) a137(r163,l3) a138(r141,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a121(r283,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a122(r182,l3) a123(r279,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a122(r182,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a121(r283,l3) a137(r163,l3) a138(r141,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a123(r279,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a121(r283,l3) a124(r281,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a124(r281,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a123(r279,l3) a125(r190,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a125(r190,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a124(r281,l3) a126(r282,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a126(r282,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a125(r190,l3) a127(r155,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a127(r155,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a126(r282,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a137(r163,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a138(r141,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3) a139(r162,l3) a140(r165,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a139(r162,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3) a138(r141,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a140(r165,l3) conflicts: a113(r156,l3) a114(r183,l3) a115(r184,l3) a116(r185,l3) a117(r188,l3) a118(r189,l3) a119(r387,l3) a120(r181,l3) a122(r182,l3) a138(r141,l3)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a141(r167,l2) conflicts: a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a147(r267,l2) a148(r268,l2) a149(r266,l2) a150(r262,l2) a152(r261,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2) a160(r168,l2) a157(r149,l2) a158(r236,l2) a159(r237,l2) a161(r170,l2) a162(r234,l2) a163(r235,l2) a286(r173,l2) a287(r258,l2) a288(r254,l2) a289(r255,l2) a290(r253,l2) a291(r139,l2) a292(r249,l2) a294(r248,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a300(r146,l2) a301(r171,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a142(r169,l2) conflicts: a141(r167,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a147(r267,l2) a148(r268,l2) a149(r266,l2) a150(r262,l2) a152(r261,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2) a160(r168,l2) a157(r149,l2) a158(r236,l2) a159(r237,l2) a161(r170,l2) a162(r234,l2) a163(r235,l2) a286(r173,l2) a287(r258,l2) a288(r254,l2) a289(r255,l2) a290(r253,l2) a291(r139,l2) a292(r249,l2) a294(r248,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a300(r146,l2) a301(r171,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a143(r404,l2) conflicts: a141(r167,l2) a142(r169,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a147(r267,l2) a148(r268,l2) a149(r266,l2) a150(r262,l2) a152(r261,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2) a160(r168,l2) a157(r149,l2) a158(r236,l2) a159(r237,l2) a161(r170,l2) a162(r234,l2) a163(r235,l2) a286(r173,l2) a287(r258,l2) a288(r254,l2) a289(r255,l2) a290(r253,l2) a291(r139,l2) a292(r249,l2) a294(r248,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a300(r146,l2) a301(r171,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a144(r405,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a145(r406,l2) a146(r407,l2) a147(r267,l2) a148(r268,l2) a149(r266,l2) a150(r262,l2) a152(r261,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2) a160(r168,l2) a157(r149,l2) a158(r236,l2) a159(r237,l2) a161(r170,l2) a162(r234,l2) a163(r235,l2) a286(r173,l2) a287(r258,l2) a288(r254,l2) a289(r255,l2) a290(r253,l2) a291(r139,l2) a292(r249,l2) a294(r248,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a300(r146,l2) a301(r171,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a145(r406,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a146(r407,l2) a147(r267,l2) a148(r268,l2) a149(r266,l2) a150(r262,l2) a152(r261,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2) a160(r168,l2) a157(r149,l2) a158(r236,l2) a159(r237,l2) a161(r170,l2) a162(r234,l2) a163(r235,l2) a286(r173,l2) a287(r258,l2) a288(r254,l2) a289(r255,l2) a290(r253,l2) a291(r139,l2) a292(r249,l2) a294(r248,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a300(r146,l2) a301(r171,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a146(r407,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a147(r267,l2) a148(r268,l2) a149(r266,l2) a150(r262,l2) a152(r261,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2) a160(r168,l2) a157(r149,l2) a158(r236,l2) a159(r237,l2) a161(r170,l2) a162(r234,l2) a163(r235,l2) a286(r173,l2) a287(r258,l2) a288(r254,l2) a289(r255,l2) a290(r253,l2) a291(r139,l2) a292(r249,l2) a294(r248,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a300(r146,l2) a301(r171,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a147(r267,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a148(r268,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a149(r266,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a149(r266,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a148(r268,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a150(r262,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a151(r137,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a152(r261,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2) a286(r173,l2) a287(r258,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a152(r261,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a151(r137,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a153(r142,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a151(r137,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2) a286(r173,l2) a287(r258,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a154(r148,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a151(r137,l2) a153(r142,l2) a155(r154,l2) a156(r145,l2) a160(r168,l2) a157(r149,l2) a158(r236,l2) a159(r237,l2) a161(r170,l2) a286(r173,l2) a287(r258,l2) a288(r254,l2) a289(r255,l2) a290(r253,l2) a291(r139,l2) a292(r249,l2) a294(r248,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a300(r146,l2) a301(r171,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a155(r154,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a156(r145,l2) a286(r173,l2) a287(r258,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a156(r145,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a160(r168,l2) a286(r173,l2) a287(r258,l2) a288(r254,l2) a289(r255,l2) a290(r253,l2) a291(r139,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a300(r146,l2) a301(r171,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a157(r149,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a160(r168,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a158(r236,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a160(r168,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a159(r237,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a160(r168,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a160(r168,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a157(r149,l2) a158(r236,l2) a159(r237,l2) a288(r254,l2) a289(r255,l2) a290(r253,l2) a291(r139,l2) a292(r249,l2) a294(r248,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a300(r146,l2) a301(r171,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a161(r170,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a162(r234,l2) a163(r235,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a162(r234,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a161(r170,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a163(r235,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a161(r170,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a164(r137,l7) conflicts: a165(r142,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a165(r142,l7) conflicts: a164(r137,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a166(r145,l7) conflicts: a164(r137,l7) a165(r142,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a167(r148,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a168(r154,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a167(r148,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a169(r167,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a170(r169,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a171(r404,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a172(r405,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a173(r406,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a173(r406,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a174(r407,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a174(r407,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a175(r173,l7) a176(r258,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a175(r173,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a176(r258,l7) conflicts: a164(r137,l7) a165(r142,l7) a166(r145,l7) a167(r148,l7) a168(r154,l7) a169(r167,l7) a170(r169,l7) a171(r404,l7) a172(r405,l7) a173(r406,l7) a174(r407,l7)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a177(r145,l6) conflicts: a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a186(r254,l6) a187(r255,l6) a188(r253,l6) a189(r139,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a198(r146,l6) a199(r171,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a178(r148,l6) conflicts: a177(r145,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a186(r254,l6) a187(r255,l6) a188(r253,l6) a189(r139,l6) a190(r249,l6) a192(r248,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a198(r146,l6) a199(r171,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a179(r167,l6) conflicts: a177(r145,l6) a178(r148,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a186(r254,l6) a187(r255,l6) a188(r253,l6) a189(r139,l6) a190(r249,l6) a192(r248,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a198(r146,l6) a199(r171,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a180(r168,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a186(r254,l6) a187(r255,l6) a188(r253,l6) a189(r139,l6) a190(r249,l6) a192(r248,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a198(r146,l6) a199(r171,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a181(r169,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a186(r254,l6) a187(r255,l6) a188(r253,l6) a189(r139,l6) a190(r249,l6) a192(r248,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a198(r146,l6) a199(r171,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a182(r404,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a186(r254,l6) a187(r255,l6) a188(r253,l6) a189(r139,l6) a190(r249,l6) a192(r248,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a198(r146,l6) a199(r171,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a183(r405,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a184(r406,l6) a185(r407,l6) a186(r254,l6) a187(r255,l6) a188(r253,l6) a189(r139,l6) a190(r249,l6) a192(r248,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a198(r146,l6) a199(r171,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a184(r406,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a185(r407,l6) a186(r254,l6) a187(r255,l6) a188(r253,l6) a189(r139,l6) a190(r249,l6) a192(r248,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a198(r146,l6) a199(r171,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a185(r407,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a186(r254,l6) a187(r255,l6) a188(r253,l6) a189(r139,l6) a190(r249,l6) a192(r248,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a198(r146,l6) a199(r171,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a186(r254,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a187(r255,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a188(r253,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a188(r253,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a187(r255,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a189(r139,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a190(r249,l6) a192(r248,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a196(r138,l6) a197(r147,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a190(r249,l6) conflicts: a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a191(r144,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6) a192(r248,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a192(r248,l6) conflicts: a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6) a191(r144,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a193(r166,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6) a191(r144,l6) a194(r153,l6) a195(r140,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a194(r153,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6) a191(r144,l6) a193(r166,l6) a195(r140,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a195(r140,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a306(r172,l6) a307(r245,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a196(r138,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a197(r147,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6) a198(r146,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a198(r146,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a197(r147,l6) a199(r171,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a199(r171,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a198(r146,l6) a200(r241,l6) a201(r242,l6) a202(r239,l6) a203(r240,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a200(r241,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a199(r171,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a201(r242,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a199(r171,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a202(r239,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a199(r171,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a203(r240,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a199(r171,l6)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a204(r139,l8) conflicts: a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a205(r140,l8) conflicts: a204(r139,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a206(r144,l8) conflicts: a204(r139,l8) a205(r140,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a207(r145,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a208(r148,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a209(r153,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a210(r166,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a211(r167,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a212(r168,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a213(r169,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a214(r404,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a215(r405,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a216(r406,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a216(r406,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a217(r407,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a217(r407,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a218(r172,l8) a219(r245,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a218(r172,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a219(r245,l8) conflicts: a204(r139,l8) a205(r140,l8) a206(r144,l8) a207(r145,l8) a208(r148,l8) a209(r153,l8) a210(r166,l8) a211(r167,l8) a212(r168,l8) a213(r169,l8) a214(r404,l8) a215(r405,l8) a216(r406,l8) a217(r407,l8)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a220(r152,l1) conflicts: a221(r175,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a226(r228,l1) a228(r224,l1) a229(r225,l1) a230(r223,l1) a231(r220,l1) a232(r177,l1) a233(r178,l1) a234(r212,l1) a235(r217,l1) a236(r213,l1) a237(r216,l1) a238(r211,l1) a239(r179,l1) a240(r150,l1) a241(r201,l1) a242(r174,l1) a243(r200,l1)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a221(r175,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a226(r228,l1) a239(r179,l1) a240(r150,l1) a241(r201,l1) a242(r174,l1) a243(r200,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a222(r176,l1) conflicts: a220(r152,l1) a221(r175,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a226(r228,l1) a228(r224,l1) a229(r225,l1) a230(r223,l1) a231(r220,l1) a232(r177,l1) a233(r178,l1) a234(r212,l1) a235(r217,l1) a236(r213,l1) a237(r216,l1) a238(r211,l1) a239(r179,l1) a240(r150,l1) a241(r201,l1) a242(r174,l1) a243(r200,l1)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a223(r413,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a226(r228,l1) a228(r224,l1) a229(r225,l1) a230(r223,l1) a231(r220,l1) a232(r177,l1) a233(r178,l1) a234(r212,l1) a235(r217,l1) a236(r213,l1) a237(r216,l1) a238(r211,l1) a239(r179,l1) a240(r150,l1) a241(r201,l1) a242(r174,l1) a243(r200,l1)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a224(r414,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a223(r413,l1) a225(r415,l1) a227(r151,l1) a226(r228,l1) a228(r224,l1) a229(r225,l1) a230(r223,l1) a231(r220,l1) a232(r177,l1) a233(r178,l1) a234(r212,l1) a235(r217,l1) a236(r213,l1) a237(r216,l1) a238(r211,l1) a239(r179,l1) a240(r150,l1) a241(r201,l1) a242(r174,l1) a243(r200,l1)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a225(r415,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a227(r151,l1) a226(r228,l1) a228(r224,l1) a229(r225,l1) a230(r223,l1) a231(r220,l1) a232(r177,l1) a233(r178,l1) a234(r212,l1) a235(r217,l1) a236(r213,l1) a237(r216,l1) a238(r211,l1) a239(r179,l1) a240(r150,l1) a241(r201,l1) a242(r174,l1) a243(r200,l1)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a226(r228,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a227(r151,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a226(r228,l1) a232(r177,l1) a233(r178,l1) a234(r212,l1) a235(r217,l1) a236(r213,l1) a237(r216,l1) a238(r211,l1) a239(r179,l1) a240(r150,l1) a241(r201,l1) a242(r174,l1) a243(r200,l1)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a228(r224,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a229(r225,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a230(r223,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a231(r220,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a232(r177,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a233(r178,l1) a234(r212,l1)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a233(r178,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a232(r177,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a234(r212,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a232(r177,l1) a235(r217,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a235(r217,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a234(r212,l1) a236(r213,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a236(r213,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a235(r217,l1) a237(r216,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a237(r216,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a236(r213,l1) a238(r211,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a238(r211,l1) conflicts: a220(r152,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a237(r216,l1) a239(r179,l1) a240(r150,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a239(r179,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a238(r211,l1) a240(r150,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a240(r150,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1) a238(r211,l1) a239(r179,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a241(r201,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a242(r174,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a243(r200,l1) conflicts: a220(r152,l1) a221(r175,l1) a222(r176,l1) a223(r413,l1) a224(r414,l1) a225(r415,l1) a227(r151,l1)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a244(r307,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a245(r136,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a245(r136,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a244(r307,l0) a246(r308,l0) a247(r306,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a246(r308,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a245(r136,l0) a247(r306,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a247(r306,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a245(r136,l0) a246(r308,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a248(r180,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a249(r300,l0) a250(r299,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a249(r300,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a248(r180,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a250(r299,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a248(r180,l0) a251(r296,l0) a252(r291,l0) a253(r294,l0) a254(r292,l0) a255(r160,l0) a256(r295,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a251(r296,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a250(r299,l0) a252(r291,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a252(r291,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a250(r299,l0) a251(r296,l0) a253(r294,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a253(r294,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a250(r299,l0) a252(r291,l0) a254(r292,l0) a255(r160,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a254(r292,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a250(r299,l0) a253(r294,l0) a255(r160,l0) a256(r295,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a255(r160,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a250(r299,l0) a253(r294,l0) a254(r292,l0) a256(r295,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a256(r295,l0) conflicts: a53(r185,l0) a54(r184,l0) a57(r157,l0) a59(r384,l0) a62(r385,l0) a250(r299,l0) a254(r292,l0) a255(r160,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a257(r181,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a259(r182,l0) a265(r163,l0) a266(r141,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a258(r283,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a259(r182,l0) a260(r279,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a259(r182,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a257(r181,l0) a258(r283,l0) a265(r163,l0) a266(r141,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a260(r279,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a258(r283,l0) a261(r281,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a261(r281,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a260(r279,l0) a262(r190,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a262(r190,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a261(r281,l0) a263(r282,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a263(r282,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a262(r190,l0) a264(r155,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a264(r155,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a263(r282,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a265(r163,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a257(r181,l0) a259(r182,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a266(r141,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a257(r181,l0) a259(r182,l0) a267(r162,l0) a268(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a267(r162,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a257(r181,l0) a259(r182,l0) a266(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a268(r165,l0) conflicts: a53(r185,l0) a54(r184,l0) a63(r188,l0) a64(r387,l0) a69(r189,l0) a72(r156,l0) a73(r183,l0) a257(r181,l0) a259(r182,l0) a266(r141,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a269(r267,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a270(r268,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a271(r266,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a271(r266,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a270(r268,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a272(r262,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a273(r137,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a274(r261,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0) a326(r173,l0) a327(r258,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a274(r261,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a273(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a275(r142,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a273(r137,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0) a326(r173,l0) a327(r258,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a276(r148,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a273(r137,l0) a275(r142,l0) a277(r154,l0) a278(r145,l0) a282(r168,l0) a279(r149,l0) a280(r236,l0) a281(r237,l0) a283(r170,l0) a326(r173,l0) a327(r258,l0) a328(r254,l0) a329(r255,l0) a330(r253,l0) a331(r139,l0) a332(r249,l0) a334(r248,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a340(r146,l0) a341(r171,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a277(r154,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a278(r145,l0) a326(r173,l0) a327(r258,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a278(r145,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a282(r168,l0) a326(r173,l0) a327(r258,l0) a328(r254,l0) a329(r255,l0) a330(r253,l0) a331(r139,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a340(r146,l0) a341(r171,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a279(r149,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a282(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a280(r236,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a282(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a281(r237,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a282(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a282(r168,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a279(r149,l0) a280(r236,l0) a281(r237,l0) a328(r254,l0) a329(r255,l0) a330(r253,l0) a331(r139,l0) a332(r249,l0) a334(r248,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a340(r146,l0) a341(r171,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a283(r170,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a284(r234,l0) a285(r235,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a284(r234,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a283(r170,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a285(r235,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a283(r170,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a286(r173,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a287(r258,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a151(r137,l2) a153(r142,l2) a154(r148,l2) a155(r154,l2) a156(r145,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a288(r254,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a289(r255,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a290(r253,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a290(r253,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a289(r255,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a291(r139,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a292(r249,l2) a294(r248,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a298(r138,l2) a299(r147,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a292(r249,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a160(r168,l2) a291(r139,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a293(r144,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a291(r139,l2) a294(r248,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a294(r248,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a160(r168,l2) a291(r139,l2) a293(r144,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a295(r166,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a291(r139,l2) a293(r144,l2) a296(r153,l2) a297(r140,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a296(r153,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a291(r139,l2) a293(r144,l2) a295(r166,l2) a297(r140,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a297(r140,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a291(r139,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a346(r172,l2) a347(r245,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a298(r138,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a291(r139,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a299(r147,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a291(r139,l2) a300(r146,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a300(r146,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a299(r147,l2) a301(r171,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a301(r171,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a300(r146,l2) a302(r241,l2) a303(r242,l2) a304(r239,l2) a305(r240,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a302(r241,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a301(r171,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a303(r242,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a301(r171,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a304(r239,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a301(r171,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a305(r240,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a301(r171,l2)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a306(r172,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a307(r245,l6) conflicts: a177(r145,l6) a178(r148,l6) a179(r167,l6) a180(r168,l6) a181(r169,l6) a182(r404,l6) a183(r405,l6) a184(r406,l6) a185(r407,l6) a189(r139,l6) a191(r144,l6) a193(r166,l6) a194(r153,l6) a195(r140,l6)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a308(r228,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a309(r151,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a308(r228,l0) a314(r177,l0) a315(r178,l0) a316(r212,l0) a317(r217,l0) a318(r213,l0) a319(r216,l0) a320(r211,l0) a321(r179,l0) a322(r150,l0) a323(r201,l0) a324(r174,l0) a325(r200,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a310(r224,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a311(r225,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a312(r223,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a313(r220,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a314(r177,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0) a315(r178,l0) a316(r212,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a315(r178,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0) a314(r177,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a316(r212,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0) a314(r177,l0) a317(r217,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a317(r217,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0) a316(r212,l0) a318(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a318(r213,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0) a317(r217,l0) a319(r216,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a319(r216,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0) a318(r213,l0) a320(r211,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a320(r211,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0) a319(r216,l0) a321(r179,l0) a322(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a321(r179,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0) a320(r211,l0) a322(r150,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a322(r150,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0) a320(r211,l0) a321(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a323(r201,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a324(r174,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a325(r200,l0) conflicts: a88(r415,l0) a89(r414,l0) a90(r413,l0) a92(r175,l0) a93(r152,l0) a94(r176,l0) a309(r151,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a326(r173,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a327(r258,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a273(r137,l0) a275(r142,l0) a276(r148,l0) a277(r154,l0) a278(r145,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a328(r254,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a329(r255,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a330(r253,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a330(r253,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a329(r255,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a331(r139,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a332(r249,l0) a334(r248,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a338(r138,l0) a339(r147,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a332(r249,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a282(r168,l0) a331(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a333(r144,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a331(r139,l0) a334(r248,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a334(r248,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a282(r168,l0) a331(r139,l0) a333(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a335(r166,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a331(r139,l0) a333(r144,l0) a336(r153,l0) a337(r140,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a336(r153,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a331(r139,l0) a333(r144,l0) a335(r166,l0) a337(r140,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a337(r140,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a331(r139,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a348(r172,l0) a349(r245,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs:
;; a338(r138,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a331(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a339(r147,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a331(r139,l0) a340(r146,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a340(r146,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a339(r147,l0) a341(r171,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a341(r171,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a340(r146,l0) a342(r241,l0) a343(r242,l0) a344(r239,l0) a345(r240,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a342(r241,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a341(r171,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a343(r242,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a341(r171,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a344(r239,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a341(r171,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a345(r240,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a341(r171,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a346(r172,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a291(r139,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a347(r245,l2) conflicts: a141(r167,l2) a142(r169,l2) a143(r404,l2) a144(r405,l2) a145(r406,l2) a146(r407,l2) a154(r148,l2) a156(r145,l2) a160(r168,l2) a291(r139,l2) a293(r144,l2) a295(r166,l2) a296(r153,l2) a297(r140,l2)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a348(r172,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a331(r139,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a349(r245,l0) conflicts: a77(r169,l0) a79(r167,l0) a81(r404,l0) a82(r406,l0) a83(r405,l0) a84(r407,l0) a276(r148,l0) a278(r145,l0) a282(r168,l0) a331(r139,l0) a333(r144,l0) a335(r166,l0) a336(r153,l0) a337(r140,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  cp0:a49(r314)<->a50(r158)@125:shuffle
  cp1:a47(r319)<->a48(r320)@125:shuffle
  cp2:a7(r186)<->a45(r322)@125:shuffle
  cp3:a40(r345)<->a44(r346)@125:shuffle
  cp4:a38(r355)<->a43(r356)@125:shuffle
  cp5:a36(r365)<->a42(r366)@125:shuffle
  cp6:a34(r375)<->a41(r376)@125:shuffle
  cp7:a30(r349)<->a40(r345)@250:shuffle
  cp8:a30(r349)<->a39(r351)@125:shuffle
  cp9:a28(r359)<->a38(r355)@250:shuffle
  cp10:a28(r359)<->a37(r361)@125:shuffle
  cp11:a26(r369)<->a36(r365)@250:shuffle
  cp12:a26(r369)<->a35(r371)@125:shuffle
  cp13:a24(r379)<->a34(r375)@250:shuffle
  cp14:a24(r379)<->a33(r381)@125:shuffle
  cp15:a19(r336)<->a32(r335)@125:shuffle
  cp16:a20(r333)<->a31(r332)@125:shuffle
  cp17:a15(r352)<->a30(r349)@125:shuffle
  cp18:a13(r362)<->a28(r359)@125:shuffle
  cp19:a11(r372)<->a26(r369)@125:shuffle
  cp20:a9(r382)<->a24(r379)@125:shuffle
  cp21:a66(r274)<->a68(r272)@125:shuffle
  cp22:a66(r274)<->a67(r273)@125:shuffle
  cp23:a75(r231)<->a76(r192)@125:shuffle
  cp24:a86(r197)<->a87(r196)@125:shuffle
  cp25:a100(r307)<->a102(r308)@125:shuffle
  cp26:a100(r307)<->a103(r306)@125:shuffle
  cp27:a109(r294)<->a112(r295)@125:shuffle
  cp28:a108(r291)<->a111(r160)@125:shuffle
  cp29:a108(r291)<->a110(r292)@125:shuffle
  cp30:a107(r296)<->a109(r294)@125:shuffle
  cp31:a104(r180)<->a107(r296)@125:shuffle
  cp32:a104(r180)<->a108(r291)@125:shuffle
  cp33:a105(r300)<->a106(r299)@125:shuffle
  cp34:a124(r281)<->a126(r282)@125:shuffle
  cp35:a123(r279)<->a125(r190)@125:shuffle
  cp36:a121(r283)<->a124(r281)@125:shuffle
  cp37:a122(r182)<->a123(r279)@125:shuffle
  cp38:a120(r181)<->a121(r283)@125:shuffle
  cp39:a147(r267)<->a148(r268)@125:shuffle
  cp40:a147(r267)<->a149(r266)@125:shuffle
  cp41:a152(r261)<->a154(r148)@125:shuffle
  cp42:a152(r261)<->a153(r142)@125:shuffle
  cp43:a150(r262)<->a152(r261)@125:shuffle
  cp44:a150(r262)<->a151(r137)@125:shuffle
  cp45:a159(r237)<->a161(r170)@125:shuffle
  cp46:a158(r236)<->a159(r237)@125:shuffle
  cp47:a157(r149)<->a158(r236)@125:shuffle
  cp48:a156(r145)<->a157(r149)@125:shuffle
  cp49:a162(r234)<->a163(r235)@125:shuffle
  cp50:a154(r148)<->a162(r234)@125:shuffle
  cp51:a175(r173)<->a176(r258)@125:shuffle
  cp52:a186(r254)<->a187(r255)@125:shuffle
  cp53:a186(r254)<->a188(r253)@125:shuffle
  cp54:a192(r248)<->a193(r166)@125:shuffle
  cp55:a177(r145)<->a192(r248)@125:shuffle
  cp56:a190(r249)<->a192(r248)@125:shuffle
  cp57:a190(r249)<->a191(r144)@125:shuffle
  cp58:a197(r147)<->a199(r171)@125:shuffle
  cp59:a189(r139)<->a198(r146)@125:shuffle
  cp60:a196(r138)<->a197(r147)@125:shuffle
  cp61:a195(r140)<->a196(r138)@125:shuffle
  cp62:a202(r239)<->a203(r240)@125:shuffle
  cp63:a201(r242)<->a202(r239)@125:shuffle
  cp64:a200(r241)<->a201(r242)@125:shuffle
  cp65:a198(r146)<->a200(r241)@125:shuffle
  cp66:a218(r172)<->a219(r245)@125:shuffle
  cp67:a230(r223)<->a231(r220)@125:shuffle
  cp68:a229(r225)<->a230(r223)@125:shuffle
  cp69:a228(r224)<->a229(r225)@125:shuffle
  cp70:a221(r175)<->a228(r224)@125:shuffle
  cp71:a221(r175)<->a238(r211)@125:shuffle
  cp72:a237(r216)<->a239(r179)@125:shuffle
  cp73:a237(r216)<->a240(r150)@125:shuffle
  cp74:a236(r213)<->a238(r211)@125:shuffle
  cp75:a235(r217)<->a237(r216)@125:shuffle
  cp76:a234(r212)<->a236(r213)@125:shuffle
  cp77:a232(r177)<->a235(r217)@125:shuffle
  cp78:a233(r178)<->a234(r212)@125:shuffle
  cp79:a242(r174)<->a243(r200)@125:shuffle
  cp80:a241(r201)<->a242(r174)@125:shuffle
  cp81:a240(r150)<->a241(r201)@125:shuffle
  cp82:a244(r307)<->a246(r308)@125:shuffle
  cp83:a244(r307)<->a247(r306)@125:shuffle
  cp84:a253(r294)<->a256(r295)@125:shuffle
  cp85:a252(r291)<->a255(r160)@125:shuffle
  cp86:a252(r291)<->a254(r292)@125:shuffle
  cp87:a251(r296)<->a253(r294)@125:shuffle
  cp88:a248(r180)<->a251(r296)@125:shuffle
  cp89:a248(r180)<->a252(r291)@125:shuffle
  cp90:a249(r300)<->a250(r299)@125:shuffle
  cp91:a261(r281)<->a263(r282)@125:shuffle
  cp92:a260(r279)<->a262(r190)@125:shuffle
  cp93:a258(r283)<->a261(r281)@125:shuffle
  cp94:a259(r182)<->a260(r279)@125:shuffle
  cp95:a257(r181)<->a258(r283)@125:shuffle
  cp96:a269(r267)<->a270(r268)@125:shuffle
  cp97:a269(r267)<->a271(r266)@125:shuffle
  cp98:a274(r261)<->a276(r148)@125:shuffle
  cp99:a274(r261)<->a275(r142)@125:shuffle
  cp100:a272(r262)<->a274(r261)@125:shuffle
  cp101:a272(r262)<->a273(r137)@125:shuffle
  cp102:a281(r237)<->a283(r170)@125:shuffle
  cp103:a280(r236)<->a281(r237)@125:shuffle
  cp104:a279(r149)<->a280(r236)@125:shuffle
  cp105:a278(r145)<->a279(r149)@125:shuffle
  cp106:a284(r234)<->a285(r235)@125:shuffle
  cp107:a276(r148)<->a284(r234)@125:shuffle
  cp108:a286(r173)<->a287(r258)@125:shuffle
  cp109:a288(r254)<->a289(r255)@125:shuffle
  cp110:a288(r254)<->a290(r253)@125:shuffle
  cp111:a294(r248)<->a295(r166)@125:shuffle
  cp112:a156(r145)<->a294(r248)@125:shuffle
  cp113:a292(r249)<->a294(r248)@125:shuffle
  cp114:a292(r249)<->a293(r144)@125:shuffle
  cp115:a299(r147)<->a301(r171)@125:shuffle
  cp116:a291(r139)<->a300(r146)@125:shuffle
  cp117:a298(r138)<->a299(r147)@125:shuffle
  cp118:a297(r140)<->a298(r138)@125:shuffle
  cp119:a304(r239)<->a305(r240)@125:shuffle
  cp120:a303(r242)<->a304(r239)@125:shuffle
  cp121:a302(r241)<->a303(r242)@125:shuffle
  cp122:a300(r146)<->a302(r241)@125:shuffle
  cp123:a306(r172)<->a307(r245)@125:shuffle
  cp124:a312(r223)<->a313(r220)@125:shuffle
  cp125:a311(r225)<->a312(r223)@125:shuffle
  cp126:a310(r224)<->a311(r225)@125:shuffle
  cp127:a92(r175)<->a310(r224)@125:shuffle
  cp128:a92(r175)<->a320(r211)@125:shuffle
  cp129:a319(r216)<->a321(r179)@125:shuffle
  cp130:a319(r216)<->a322(r150)@125:shuffle
  cp131:a318(r213)<->a320(r211)@125:shuffle
  cp132:a317(r217)<->a319(r216)@125:shuffle
  cp133:a316(r212)<->a318(r213)@125:shuffle
  cp134:a314(r177)<->a317(r217)@125:shuffle
  cp135:a315(r178)<->a316(r212)@125:shuffle
  cp136:a324(r174)<->a325(r200)@125:shuffle
  cp137:a323(r201)<->a324(r174)@125:shuffle
  cp138:a322(r150)<->a323(r201)@125:shuffle
  cp139:a326(r173)<->a327(r258)@125:shuffle
  cp140:a328(r254)<->a329(r255)@125:shuffle
  cp141:a328(r254)<->a330(r253)@125:shuffle
  cp142:a334(r248)<->a335(r166)@125:shuffle
  cp143:a278(r145)<->a334(r248)@125:shuffle
  cp144:a332(r249)<->a334(r248)@125:shuffle
  cp145:a332(r249)<->a333(r144)@125:shuffle
  cp146:a339(r147)<->a341(r171)@125:shuffle
  cp147:a331(r139)<->a340(r146)@125:shuffle
  cp148:a338(r138)<->a339(r147)@125:shuffle
  cp149:a337(r140)<->a338(r138)@125:shuffle
  cp150:a344(r239)<->a345(r240)@125:shuffle
  cp151:a343(r242)<->a344(r239)@125:shuffle
  cp152:a342(r241)<->a343(r242)@125:shuffle
  cp153:a340(r146)<->a342(r241)@125:shuffle
  cp154:a346(r172)<->a347(r245)@125:shuffle
  cp155:a348(r172)<->a349(r245)@125:shuffle
  regions=9, blocks=44, points=337
    allocnos=350, copies=156, conflicts=366, ranges=242

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 43 40(->42:l4) 28(->39:l3) 8(->27:l2) 2(->7:l1)
    all: 0r373 1r363 2r353 3r343 4r337 5r187 6r334 7r186 8r330 9r382 10r374 11r372 12r364 13r362 14r354 15r352 16r344 17r340 18r339 19r336 20r333 21r331 22r329 23r328 24r379 25r327 26r369 27r326 28r359 29r325 30r349 31r332 32r335 33r381 34r375 35r371 36r365 37r361 38r355 39r351 40r345 41r376 42r366 43r356 44r346 45r322 46r321 47r319 48r320 49r314 50r158 51r318 52r159 53r185 54r184 55r312 56r383 57r157 58r290 59r384 60r288 61r289 62r385 63r188 64r387 65r269 66r274 67r273 68r272 69r189 70r276 71r270 72r156 73r183 74r229 75r231 76r192 77r169 78r232 79r167 80r233 81r404 82r406 83r405 84r407 85r193 86r197 87r196 88r415 89r414 90r413 91r194 92r175 93r152 94r176 244r307 245r136 246r308 247r306 248r180 249r300 250r299 251r296 252r291 253r294 254r292 255r160 256r295 257r181 258r283 259r182 260r279 261r281 262r190 263r282 264r155 265r163 266r141 267r162 268r165 269r267 270r268 271r266 272r262 273r137 274r261 275r142 276r148 277r154 278r145 279r149 280r236 281r237 282r168 283r170 284r234 285r235 308r228 309r151 310r224 311r225 312r223 313r220 314r177 315r178 316r212 317r217 318r213 319r216 320r211 321r179 322r150 323r201 324r174 325r200 326r173 327r258 328r254 329r255 330r253 331r139 332r249 333r144 334r248 335r166 336r153 337r140 338r138 339r147 340r146 341r171 342r241 343r242 344r239 345r240 348r172 349r245
    modified regnos
    border:
    Pressure: GENERAL_REGS=20
    Reg 373 of GENERAL_REGS has 4 regs less
    Reg 363 of GENERAL_REGS has 4 regs less
    Reg 353 of GENERAL_REGS has 4 regs less
    Reg 343 of GENERAL_REGS has 4 regs less
    Reg 337 of GENERAL_REGS has 4 regs less
    Reg 187 of GENERAL_REGS has 4 regs less
    Reg 334 of GENERAL_REGS has 4 regs less
    Reg 186 of GENERAL_REGS has 4 regs less
    Reg 330 of GENERAL_REGS has 4 regs less
    Reg 382 of GENERAL_REGS has 4 regs less
    Reg 374 of GENERAL_REGS has 4 regs less
    Reg 372 of GENERAL_REGS has 4 regs less
    Reg 364 of GENERAL_REGS has 4 regs less
    Reg 362 of GENERAL_REGS has 4 regs less
    Reg 354 of GENERAL_REGS has 4 regs less
    Reg 352 of GENERAL_REGS has 4 regs less
    Reg 344 of GENERAL_REGS has 4 regs less
    Reg 340 of GENERAL_REGS has 4 regs less
    Reg 339 of GENERAL_REGS has 4 regs less
    Reg 336 of GENERAL_REGS has 4 regs less
    Reg 333 of GENERAL_REGS has 4 regs less
    Reg 331 of GENERAL_REGS has 4 regs less
    Reg 329 of GENERAL_REGS has 4 regs less
    Reg 328 of GENERAL_REGS has 4 regs less
    Reg 379 of GENERAL_REGS has 4 regs less
    Reg 327 of GENERAL_REGS has 4 regs less
    Reg 369 of GENERAL_REGS has 4 regs less
    Reg 326 of GENERAL_REGS has 4 regs less
    Reg 359 of GENERAL_REGS has 4 regs less
    Reg 325 of GENERAL_REGS has 4 regs less
    Reg 349 of GENERAL_REGS has 4 regs less
    Reg 332 of GENERAL_REGS has 3 regs less
    Reg 335 of GENERAL_REGS has 2 regs less
    Reg 381 of GENERAL_REGS has 1 regs less
    Reg 375 of GENERAL_REGS has 1 regs less
    Reg 371 of GENERAL_REGS has 1 regs less
    Reg 365 of GENERAL_REGS has 1 regs less
    Reg 361 of GENERAL_REGS has 1 regs less
    Reg 355 of GENERAL_REGS has 1 regs less
    Reg 351 of GENERAL_REGS has 1 regs less
    Reg 345 of GENERAL_REGS has 1 regs less
    Reg 376 of GENERAL_REGS has 1 regs less
    Reg 366 of GENERAL_REGS has 1 regs less
    Reg 356 of GENERAL_REGS has 1 regs less
    Reg 346 of GENERAL_REGS has 1 regs less
    Reg 322 of GENERAL_REGS has 1 regs less
    Reg 321 of GENERAL_REGS has 1 regs less
    Reg 319 of GENERAL_REGS has 4 regs less
    Reg 320 of GENERAL_REGS has 4 regs less
    Reg 314 of GENERAL_REGS has 3 regs less
    Reg 158 of GENERAL_REGS has 3 regs less
    Reg 318 of GENERAL_REGS has 3 regs less
    Reg 159 of GENERAL_REGS has 3 regs less
    Reg 185 of GENERAL_REGS has 4 regs less
    Reg 184 of GENERAL_REGS has 3 regs less
    Reg 312 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 3 regs less
    Reg 384 of GENERAL_REGS has 3 regs less
    Reg 385 of GENERAL_REGS has 3 regs less
    Reg 229 of GENERAL_REGS has 2 regs less
    Reg 192 of GENERAL_REGS has 2 regs less
    Reg 169 of GENERAL_REGS has 3 regs less
    Reg 232 of GENERAL_REGS has 1 regs less
    Reg 167 of GENERAL_REGS has 3 regs less
    Reg 233 of GENERAL_REGS has 1 regs less
    Reg 404 of GENERAL_REGS has 3 regs less
    Reg 406 of GENERAL_REGS has 3 regs less
    Reg 405 of GENERAL_REGS has 3 regs less
    Reg 407 of GENERAL_REGS has 3 regs less
    Reg 415 of GENERAL_REGS has 3 regs less
    Reg 414 of GENERAL_REGS has 3 regs less
    Reg 413 of GENERAL_REGS has 3 regs less
    Reg 152 of GENERAL_REGS has 3 regs less
    Reg 176 of GENERAL_REGS has 3 regs less
    Reg 180 of GENERAL_REGS has 1 regs less
    Reg 300 of GENERAL_REGS has 1 regs less
    Reg 299 of GENERAL_REGS has 1 regs less
    Reg 296 of GENERAL_REGS has 1 regs less
    Reg 291 of GENERAL_REGS has 1 regs less
    Reg 294 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 154 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 3 regs less
    Reg 168 of GENERAL_REGS has 3 regs less
    Reg 151 of GENERAL_REGS has 3 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
    Reg 173 of GENERAL_REGS has 3 regs less
    Reg 258 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 3 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 172 of GENERAL_REGS has 3 regs less
    Reg 245 of GENERAL_REGS has 1 regs less
      Pushing a345(r240,l0: a305(r240,l2: a203(r240,l6)))
      Pushing a344(r239,l0: a304(r239,l2: a202(r239,l6)))
      Pushing a343(r242,l0: a303(r242,l2: a201(r242,l6)))
      Pushing a342(r241,l0: a302(r241,l2: a200(r241,l6)))
      Pushing a339(r147,l0: a299(r147,l2: a197(r147,l6)))
      Pushing a338(r138,l0: a298(r138,l2: a196(r138,l6)))
      Pushing a334(r248,l0: a294(r248,l2: a192(r248,l6)))
      Pushing a332(r249,l0: a292(r249,l2: a190(r249,l6)))
      Pushing a330(r253,l0: a290(r253,l2: a188(r253,l6)))
      Pushing a329(r255,l0: a289(r255,l2: a187(r255,l6)))
      Pushing a328(r254,l0: a288(r254,l2: a186(r254,l6)))
      Pushing a325(r200,l0: a243(r200,l1))
      Pushing a324(r174,l0: a242(r174,l1))
      Pushing a323(r201,l0: a241(r201,l1))
      Pushing a320(r211,l0: a238(r211,l1))
      Pushing a319(r216,l0: a237(r216,l1))
      Pushing a318(r213,l0: a236(r213,l1))
      Pushing a317(r217,l0: a235(r217,l1))
      Pushing a316(r212,l0: a234(r212,l1))
      Pushing a313(r220,l0: a231(r220,l1))
      Pushing a312(r223,l0: a230(r223,l1))
      Pushing a311(r225,l0: a229(r225,l1))
      Pushing a310(r224,l0: a228(r224,l1))
      Pushing a308(r228,l0: a226(r228,l1))
      Pushing a285(r235,l0: a163(r235,l2))
      Pushing a284(r234,l0: a162(r234,l2))
      Pushing a281(r237,l0: a159(r237,l2))
      Pushing a280(r236,l0: a158(r236,l2))
      Pushing a279(r149,l0: a157(r149,l2))
      Pushing a274(r261,l0: a152(r261,l2))
      Pushing a272(r262,l0: a150(r262,l2))
      Pushing a271(r266,l0: a149(r266,l2))
      Pushing a270(r268,l0: a148(r268,l2))
      Pushing a269(r267,l0: a147(r267,l2))
      Pushing a268(r165,l0: a140(r165,l3))
      Pushing a267(r162,l0: a139(r162,l3))
      Pushing a265(r163,l0: a137(r163,l3))
      Pushing a263(r282,l0: a126(r282,l3))
      Pushing a261(r281,l0: a124(r281,l3))
      Pushing a260(r279,l0: a123(r279,l3))
      Pushing a258(r283,l0: a121(r283,l3))
      Pushing a257(r181,l0: a120(r181,l3))
      Pushing a256(r295,l0: a112(r295,l4))
      Pushing a254(r292,l0: a110(r292,l4))
      Pushing a247(r306,l0: a103(r306,l4))
      Pushing a246(r308,l0: a102(r308,l4))
      Pushing a245(r136,l0: a101(r136,l4))
      Pushing a244(r307,l0: a100(r307,l4))
      Pushing a91(r194,l0)
      Pushing a87(r196,l0)
      Pushing a86(r197,l0)
      Pushing a85(r193,l0)
      Pushing a75(r231,l0)
      Pushing a71(r270,l0)
      Pushing a70(r276,l0)
      Pushing a68(r272,l0)
      Pushing a67(r273,l0)
      Pushing a66(r274,l0)
      Pushing a63(r188,l0)
      Pushing a61(r289,l0)
      Pushing a56(r383,l0)
      Pushing a341(r171,l0: a301(r171,l2: a199(r171,l6)))
      Pushing a340(r146,l0: a300(r146,l2: a198(r146,l6)))
      Pushing a322(r150,l0: a240(r150,l1))
      Pushing a321(r179,l0: a239(r179,l1))
      Pushing a283(r170,l0: a161(r170,l2))
      Pushing a266(r141,l0: a138(r141,l3))
      Pushing a264(r155,l0: a127(r155,l3))
      Pushing a262(r190,l0: a125(r190,l3))
      Pushing a255(r160,l0: a111(r160,l4))
      Pushing a69(r189,l0)
      Pushing a65(r269,l0)
      Pushing a60(r288,l0)
      Pushing a58(r290,l0)
      Pushing a73(r183,l0)
      Pushing a64(r387,l0)
      Pushing a315(r178,l0: a233(r178,l1))
      Pushing a92(r175,l0)
      Pushing a72(r156,l0)
      Pushing a259(r182,l0: a122(r182,l3))
      Pushing a327(r258,l0: a287(r258,l2: a176(r258,l7)))
      Pushing a253(r294,l0: a109(r294,l4))
      Pushing a252(r291,l0: a108(r291,l4))
      Pushing a251(r296,l0: a107(r296,l4))
      Pushing a250(r299,l0: a106(r299,l4))
      Pushing a249(r300,l0: a105(r300,l4))
      Pushing a78(r232,l0)
      Pushing a55(r312,l0)
      Pushing a46(r321,l0)
      Pushing a45(r322,l0)
      Pushing a44(r346,l0)
      Pushing a43(r356,l0)
      Pushing a42(r366,l0)
      Pushing a248(r180,l0: a104(r180,l4))
      Pushing a80(r233,l0)
      Pushing a314(r177,l0: a232(r177,l1))
      Pushing a76(r192,l0)
      Pushing a74(r229,l0)
      Pushing a89(r414,l0)
      Pushing a88(r415,l0)
      Pushing a52(r159,l0)
      Pushing a51(r318,l0)
      Pushing a50(r158,l0)
      Pushing a49(r314,l0)
      Pushing a90(r413,l0)
      Pushing a62(r385,l0)
      Pushing a59(r384,l0)
      Pushing a309(r151,l0: a227(r151,l1))
      Pushing a94(r176,l0)
      Pushing a54(r184,l0)
      Pushing a93(r152,l0)
      Pushing a57(r157,l0)
      Pushing a48(r320,l0)
      Pushing a47(r319,l0)
      Pushing a53(r185,l0)
      Pushing a15(r352,l0)(potential spill: pri=645, cost=20000)
      Pushing a0(r373,l0)(potential spill: pri=666, cost=30000)
      Pushing a41(r376,l0)
      Pushing a1(r363,l0)(potential spill: pri=697, cost=30000)
      Pushing a2(r353,l0)(potential spill: pri=714, cost=30000)
      Pushing a3(r343,l0)(potential spill: pri=731, cost=30000)
      Pushing a4(r337,l0)(potential spill: pri=750, cost=30000)
      Pushing a10(r374,l0)
      Pushing a5(r187,l0)(potential spill: pri=789, cost=30000)
      Pushing a39(r351,l0)
      Pushing a37(r361,l0)
      Pushing a35(r371,l0)
      Pushing a33(r381,l0)
      Pushing a40(r345,l0)
      Pushing a38(r355,l0)
      Pushing a36(r365,l0)
      Pushing a34(r375,l0)
      Pushing a32(r335,l0)
      Pushing a12(r364,l0)
      Pushing a13(r362,l0)(potential spill: pri=869, cost=20000)
      Pushing a18(r339,l0)
      Pushing a17(r340,l0)
      Pushing a16(r344,l0)
      Pushing a14(r354,l0)
      Pushing a19(r336,l0)(potential spill: pri=909, cost=20000)
      Pushing a31(r332,l0)
      Pushing a20(r333,l0)(potential spill: pri=1000, cost=20000)
      Pushing a27(r326,l0)
      Pushing a25(r327,l0)
      Pushing a23(r328,l0)
      Pushing a22(r329,l0)
      Pushing a21(r331,l0)
      Pushing a11(r372,l0)
      Pushing a9(r382,l0)
      Pushing a335(r166,l0: a295(r166,l2: a193(r166,l6)))(potential spill: pri=1052, cost=20000)
      Pushing a273(r137,l0: a151(r137,l2))(potential spill: pri=1333, cost=20000)
      Pushing a275(r142,l0: a153(r142,l2))(potential spill: pri=1428, cost=20000)
      Pushing a77(r169,l0)(potential spill: pri=1500, cost=30000)
      Pushing a84(r407,l0)(potential spill: pri=1578, cost=30000)
      Pushing a349(r245,l0: a347(r245,l2: a307(r245,l6: a219(r245,l8))))
      Pushing a326(r173,l0: a286(r173,l2: a175(r173,l7)))
      Pushing a277(r154,l0: a155(r154,l2))
      Pushing a24(r379,l0)(potential spill: pri=1666, cost=20000)
      Pushing a30(r349,l0)
      Pushing a29(r325,l0)
      Pushing a28(r359,l0)
      Pushing a26(r369,l0)
      Pushing a8(r330,l0)
      Pushing a6(r334,l0)
      Pushing a7(r186,l0)
      Pushing a331(r139,l0: a291(r139,l2: a189(r139,l6)))(potential spill: pri=2000, cost=30000)
      Pushing a337(r140,l0: a297(r140,l2: a195(r140,l6)))(potential spill: pri=2142, cost=30000)
      Pushing a336(r153,l0: a296(r153,l2: a194(r153,l6)))(potential spill: pri=3076, cost=40000)
      Pushing a82(r406,l0)(potential spill: pri=4166, cost=50000)
      Pushing a348(r172,l0: a346(r172,l2: a306(r172,l6: a218(r172,l8))))
      Pushing a333(r144,l0: a293(r144,l2: a191(r144,l6)))
      Pushing a83(r405,l0)
      Pushing a282(r168,l0: a160(r168,l2))
      Pushing a81(r404,l0)
      Pushing a79(r167,l0)
      Pushing a276(r148,l0: a154(r148,l2))
      Pushing a278(r145,l0: a156(r145,l2))
      Popping a278(r145,l0: a156(r145,l2))  -- assign reg 4
      Popping a276(r148,l0: a154(r148,l2))  -- assign reg 5
      Popping a79(r167,l0)  -- assign reg 6
      Popping a81(r404,l0)  -- assign reg 7
      Popping a282(r168,l0: a160(r168,l2))  -- assign reg 8
      Popping a83(r405,l0)  -- assign reg 10
      Popping a333(r144,l0: a293(r144,l2: a191(r144,l6)))  -- assign reg 9
      Popping a348(r172,l0: a346(r172,l2: a306(r172,l6: a218(r172,l8))))  -- assign reg 11
      Popping a82(r406,l0)  -- (memory is more profitable 50000 vs 60000) spill
      Popping a336(r153,l0: a296(r153,l2: a194(r153,l6)))  -- assign reg 3
      Popping a337(r140,l0: a297(r140,l2: a195(r140,l6)))  -- assign reg 2
      Popping a331(r139,l0: a291(r139,l2: a189(r139,l6)))  -- assign reg 12
      Popping a7(r186,l0)  -- assign reg 12
      Popping a6(r334,l0)  -- assign reg 14
      Popping a8(r330,l0)  -- assign reg 4
      Popping a26(r369,l0)  -- assign reg 5
      Popping a28(r359,l0)  -- assign reg 6
      Popping a29(r325,l0)  -- assign reg 7
      Popping a30(r349,l0)  -- assign reg 7
      Popping a24(r379,l0)  -- assign reg 8
      Popping a277(r154,l0: a155(r154,l2))  -- assign reg 8
      Popping a326(r173,l0: a286(r173,l2: a175(r173,l7)))  -- assign reg 9
      Popping a349(r245,l0: a347(r245,l2: a307(r245,l6: a219(r245,l8))))  -- assign reg 11
      Popping a84(r407,l0)  -- spill
      Popping a77(r169,l0)  -- spill
      Popping a275(r142,l0: a153(r142,l2))  -- assign reg 11
      Popping a273(r137,l0: a151(r137,l2))  -- assign reg 3
      Popping a335(r166,l0: a295(r166,l2: a193(r166,l6)))  -- spill
      Popping a9(r382,l0)  -- assign reg 8
      Popping a11(r372,l0)  -- assign reg 5
      Popping a21(r331,l0)  -- assign reg 6
      Popping a22(r329,l0)  -- assign reg 6
      Popping a23(r328,l0)  -- assign reg 6
      Popping a25(r327,l0)  -- assign reg 6
      Popping a27(r326,l0)  -- assign reg 6
      Popping a20(r333,l0)  -- assign reg 10
      Popping a31(r332,l0)  -- assign reg 10
      Popping a19(r336,l0)  -- assign reg 9
      Popping a14(r354,l0)  -- assign reg 6
      Popping a16(r344,l0)  -- assign reg 6
      Popping a17(r340,l0)  -- assign reg 6
      Popping a18(r339,l0)  -- assign reg 6
      Popping a13(r362,l0)  -- assign reg 7
      Popping a12(r364,l0)  -- assign reg 6
      Popping a32(r335,l0)  -- assign reg 9
      Popping a34(r375,l0)  -- assign reg 8
      Popping a36(r365,l0)  -- assign reg 5
      Popping a38(r355,l0)  -- assign reg 6
      Popping a40(r345,l0)  -- assign reg 7
      Popping a33(r381,l0)  -- assign reg 2
      Popping a35(r371,l0)  -- assign reg 1
      Popping a37(r361,l0)  -- assign reg 0
      Popping a39(r351,l0)  -- assign reg 10
      Popping a5(r187,l0)  -- assign reg 11
      Popping a10(r374,l0)  -- assign reg 5
      Popping a4(r337,l0)  -- spill
      Popping a3(r343,l0)  -- spill
      Popping a2(r353,l0)  -- spill
      Popping a1(r363,l0)  -- spill
      Popping a41(r376,l0)  -- assign reg 8
      Popping a0(r373,l0)  -- spill
      Popping a15(r352,l0)  -- spill
      Popping a53(r185,l0)  -- assign reg 4
      Popping a47(r319,l0)  -- assign reg 12
      Popping a48(r320,l0)  -- assign reg 12
      Popping a57(r157,l0)  -- assign reg 5
      Popping a93(r152,l0)  -- assign reg 4
      Popping a54(r184,l0)  -- assign reg 6
      Popping a94(r176,l0)  -- assign reg 5
      Popping a309(r151,l0: a227(r151,l1))  -- assign reg 6
      Popping a59(r384,l0)  -- assign reg 7
      Popping a62(r385,l0)  -- assign reg 8
      Popping a90(r413,l0)  -- assign reg 7
      Popping a49(r314,l0)  -- assign reg 1
      Popping a50(r158,l0)  -- assign reg 1
      Popping a51(r318,l0)  -- assign reg 12
      Popping a52(r159,l0)  -- assign reg 1
      Popping a88(r415,l0)  -- assign reg 8
      Popping a89(r414,l0)  -- assign reg 10
      Popping a74(r229,l0)  -- assign reg 4
      Popping a76(r192,l0)  -- assign reg 5
      Popping a314(r177,l0: a232(r177,l1))  -- assign reg 1
      Popping a80(r233,l0)  -- assign reg 3
      Popping a248(r180,l0: a104(r180,l4))  -- assign reg 1
      Popping a42(r366,l0)  -- assign reg 5
      Popping a43(r356,l0)  -- assign reg 6
      Popping a44(r346,l0)  -- assign reg 7
      Popping a45(r322,l0)  -- assign reg 12
      Popping a46(r321,l0)  -- assign reg 2
      Popping a55(r312,l0)  -- assign reg 1
      Popping a78(r232,l0)  -- assign reg 3
      Popping a249(r300,l0: a105(r300,l4))  -- assign reg 3
      Popping a250(r299,l0: a106(r299,l4))  -- assign reg 3
      Popping a251(r296,l0: a107(r296,l4))  -- assign reg 2
      Popping a252(r291,l0: a108(r291,l4))  -- assign reg 1
      Popping a253(r294,l0: a109(r294,l4))  -- assign reg 2
      Popping a327(r258,l0: a287(r258,l2: a176(r258,l7)))  -- assign reg 9
      Popping a259(r182,l0: a122(r182,l3))  -- assign reg 3
      Popping a72(r156,l0)  -- assign reg 2
      Popping a92(r175,l0)  -- assign reg 3
      Popping a315(r178,l0: a233(r178,l1))  -- assign reg 0
      Popping a64(r387,l0)  -- assign reg 1
      Popping a73(r183,l0)  -- assign reg 0
      Popping a58(r290,l0)  -- assign reg 3
      Popping a60(r288,l0)  -- assign reg 2
      Popping a65(r269,l0)  -- assign reg 3
      Popping a69(r189,l0)  -- assign reg 12
      Popping a255(r160,l0: a111(r160,l4))  -- assign reg 0
      Popping a262(r190,l0: a125(r190,l3))  -- assign reg 3
      Popping a264(r155,l0: a127(r155,l3))  -- assign reg 3
      Popping a266(r141,l0: a138(r141,l3))  -- assign reg 14
      Popping a283(r170,l0: a161(r170,l2))  -- assign reg 4
      Popping a321(r179,l0: a239(r179,l1))  -- assign reg 2
      Popping a322(r150,l0: a240(r150,l1))  -- assign reg 1
      Popping a340(r146,l0: a300(r146,l2: a198(r146,l6)))  -- assign reg 12
      Popping a341(r171,l0: a301(r171,l2: a199(r171,l6)))  -- assign reg 2
      Popping a56(r383,l0)  -- assign reg 3
      Popping a61(r289,l0)  -- assign reg 1
      Popping a63(r188,l0)  -- assign reg 5
      Popping a66(r274,l0)  -- assign reg 14
      Popping a67(r273,l0)  -- assign reg 14
      Popping a68(r272,l0)  -- assign reg 5
      Popping a70(r276,l0)  -- assign reg 12
      Popping a71(r270,l0)  -- assign reg 12
      Popping a75(r231,l0)  -- assign reg 0
      Popping a85(r193,l0)  -- assign reg 2
      Popping a86(r197,l0)  -- assign reg 1
      Popping a87(r196,l0)  -- assign reg 1
      Popping a91(r194,l0)  -- assign reg 2
      Popping a244(r307,l0: a100(r307,l4))  -- assign reg 3
      Popping a245(r136,l0: a101(r136,l4))  -- assign reg 2
      Popping a246(r308,l0: a102(r308,l4))  -- assign reg 3
      Popping a247(r306,l0: a103(r306,l4))  -- assign reg 1
      Popping a254(r292,l0: a110(r292,l4))  -- assign reg 1
      Popping a256(r295,l0: a112(r295,l4))  -- assign reg 2
      Popping a257(r181,l0: a120(r181,l3))  -- assign reg 7
      Popping a258(r283,l0: a121(r283,l3))  -- assign reg 7
      Popping a260(r279,l0: a123(r279,l3))  -- assign reg 3
      Popping a261(r281,l0: a124(r281,l3))  -- assign reg 7
      Popping a263(r282,l0: a126(r282,l3))  -- assign reg 7
      Popping a265(r163,l0: a137(r163,l3))  -- assign reg 14
      Popping a267(r162,l0: a139(r162,l3))  -- assign reg 8
      Popping a268(r165,l0: a140(r165,l3))  -- assign reg 8
      Popping a269(r267,l0: a147(r267,l2))  -- assign reg 3
      Popping a270(r268,l0: a148(r268,l2))  -- assign reg 3
      Popping a271(r266,l0: a149(r266,l2))  -- assign reg 2
      Popping a272(r262,l0: a150(r262,l2))  -- assign reg 3
      Popping a274(r261,l0: a152(r261,l2))  -- assign reg 5
      Popping a279(r149,l0: a157(r149,l2))  -- assign reg 4
      Popping a280(r236,l0: a158(r236,l2))  -- assign reg 4
      Popping a281(r237,l0: a159(r237,l2))  -- assign reg 4
      Popping a284(r234,l0: a162(r234,l2))  -- assign reg 5
      Popping a285(r235,l0: a163(r235,l2))  -- assign reg 5
      Popping a308(r228,l0: a226(r228,l1))  -- assign reg 2
      Popping a310(r224,l0: a228(r224,l1))  -- assign reg 3
      Popping a311(r225,l0: a229(r225,l1))  -- assign reg 3
      Popping a312(r223,l0: a230(r223,l1))  -- assign reg 3
      Popping a313(r220,l0: a231(r220,l1))  -- assign reg 3
      Popping a316(r212,l0: a234(r212,l1))  -- assign reg 0
      Popping a317(r217,l0: a235(r217,l1))  -- assign reg 1
      Popping a318(r213,l0: a236(r213,l1))  -- assign reg 0
      Popping a319(r216,l0: a237(r216,l1))  -- assign reg 1
      Popping a320(r211,l0: a238(r211,l1))  -- assign reg 0
      Popping a323(r201,l0: a241(r201,l1))  -- assign reg 1
      Popping a324(r174,l0: a242(r174,l1))  -- assign reg 1
      Popping a325(r200,l0: a243(r200,l1))  -- assign reg 1
      Popping a328(r254,l0: a288(r254,l2: a186(r254,l6)))  -- assign reg 3
      Popping a329(r255,l0: a289(r255,l2: a187(r255,l6)))  -- assign reg 3
      Popping a330(r253,l0: a290(r253,l2: a188(r253,l6)))  -- assign reg 2
      Popping a332(r249,l0: a292(r249,l2: a190(r249,l6)))  -- assign reg 9
      Popping a334(r248,l0: a294(r248,l2: a192(r248,l6)))  -- assign reg 4
      Popping a338(r138,l0: a298(r138,l2: a196(r138,l6)))  -- assign reg 2
      Popping a339(r147,l0: a299(r147,l2: a197(r147,l6)))  -- assign reg 2
      Popping a342(r241,l0: a302(r241,l2: a200(r241,l6)))  -- assign reg 12
      Popping a343(r242,l0: a303(r242,l2: a201(r242,l6)))  -- assign reg 12
      Popping a344(r239,l0: a304(r239,l2: a202(r239,l6)))  -- assign reg 12
      Popping a345(r240,l0: a305(r240,l2: a203(r240,l6)))  -- assign reg 12

  Loop 4 (parent 0, header bb42, depth 1)
    bbs: 42(->43:l0) 41
    all: 95r157 96r184 97r185 98r384 99r385 100r307 101r136 102r308 103r306 104r180 105r300 106r299 107r296 108r291 109r294 110r292 111r160 112r295
    modified regnos: 136 157 160 180 291 292 294 295 296 299 300 306 307 308
    border: 95r157 96r184 97r185 98r384 99r385
    Pressure: GENERAL_REGS=9
    Reg 157 of GENERAL_REGS has 3 regs less
    Reg 184 of GENERAL_REGS has 3 regs less
    Reg 185 of GENERAL_REGS has 3 regs less
    Reg 180 of GENERAL_REGS has 1 regs less
    Reg 300 of GENERAL_REGS has 1 regs less
    Reg 299 of GENERAL_REGS has 1 regs less
    Reg 296 of GENERAL_REGS has 1 regs less
    Reg 291 of GENERAL_REGS has 1 regs less
    Reg 294 of GENERAL_REGS has 1 regs less
      Pushing a112(r295,l4)
      Pushing a110(r292,l4)
      Pushing a103(r306,l4)
      Pushing a102(r308,l4)
      Pushing a101(r136,l4)
      Pushing a100(r307,l4)
      Pushing a111(r160,l4)
      Pushing a109(r294,l4)
      Pushing a108(r291,l4)
      Pushing a107(r296,l4)
      Pushing a106(r299,l4)
      Pushing a105(r300,l4)
      Pushing a104(r180,l4)
      Pushing a97(r185,l4)
      Pushing a96(r184,l4)
      Pushing a95(r157,l4)
      Popping a95(r157,l4)  -- assign reg 5
      Popping a96(r184,l4)  -- assign reg 6
      Popping a97(r185,l4)  -- assign reg 4
      Popping a104(r180,l4)  -- assign reg 1
      Popping a105(r300,l4)  -- assign reg 3
      Popping a106(r299,l4)  -- assign reg 3
      Popping a107(r296,l4)  -- assign reg 2
      Popping a108(r291,l4)  -- assign reg 1
      Popping a109(r294,l4)  -- assign reg 2
      Popping a111(r160,l4)  -- assign reg 0
      Popping a100(r307,l4)  -- assign reg 3
      Popping a101(r136,l4)  -- assign reg 2
      Popping a102(r308,l4)  -- assign reg 3
      Popping a103(r306,l4)  -- assign reg 1
      Popping a110(r292,l4)  -- assign reg 1
      Popping a112(r295,l4)  -- assign reg 2

  Loop 3 (parent 0, header bb39, depth 1)
    bbs: 39(->40:l0) 38 37 36 35 34 33 32 31 30 29
    all: 113r156 114r183 115r184 116r185 117r188 118r189 119r387 120r181 121r283 122r182 123r279 124r281 125r190 126r282 127r155 137r163 138r141 139r162 140r165
    modified regnos: 141 155 156 162 163 165 181 182 183 184 185 190 279 281 282 283
    border: 113r156 114r183 115r184 116r185 117r188 118r189 119r387
    Pressure: GENERAL_REGS=11
      Pushing a140(r165,l3)
      Pushing a139(r162,l3)
      Pushing a137(r163,l3)
      Pushing a126(r282,l3)
      Pushing a124(r281,l3)
      Pushing a119(r387,l3)
      Pushing a117(r188,l3)
      Pushing a123(r279,l3)
      Pushing a121(r283,l3)
      Pushing a120(r181,l3)
      Pushing a118(r189,l3)
      Pushing a116(r185,l3)
      Pushing a115(r184,l3)
      Pushing a138(r141,l3)
      Pushing a127(r155,l3)
      Pushing a125(r190,l3)
      Pushing a114(r183,l3)
      Pushing a113(r156,l3)
      Pushing a122(r182,l3)
      Popping a122(r182,l3)  -- assign reg 3
      Popping a113(r156,l3)  -- assign reg 2
      Popping a114(r183,l3)  -- assign reg 0
      Popping a125(r190,l3)  -- assign reg 3
      Popping a127(r155,l3)  -- assign reg 3
      Popping a138(r141,l3)  -- assign reg 14
      Popping a115(r184,l3)  -- assign reg 6
      Popping a116(r185,l3)  -- assign reg 4
      Popping a118(r189,l3)  -- assign reg 12
      Popping a120(r181,l3)  -- assign reg 7
      Popping a121(r283,l3)  -- assign reg 7
      Popping a123(r279,l3)  -- assign reg 3
      Popping a117(r188,l3)  -- assign reg 5
      Popping a119(r387,l3)  -- assign reg 1
      Popping a124(r281,l3)  -- assign reg 7
      Popping a126(r282,l3)  -- assign reg 7
      Popping a137(r163,l3)  -- assign reg 14
      Popping a139(r162,l3)  -- assign reg 8
      Popping a140(r165,l3)  -- assign reg 8

  Loop 2 (parent 0, header bb27, depth 1)
    bbs: 27(->28:l0) 26 25 22(->24:l7) 21 10(->20:l6) 9
    all: 141r167 142r169 143r404 144r405 145r406 146r407 147r267 148r268 149r266 150r262 151r137 152r261 153r142 154r148 155r154 156r145 157r149 158r236 159r237 160r168 161r170 162r234 163r235 286r173 287r258 288r254 289r255 290r253 291r139 292r249 293r144 294r248 295r166 296r153 297r140 298r138 299r147 300r146 301r171 302r241 303r242 304r239 305r240 346r172 347r245
    modified regnos: 137 138 139 140 142 144 145 146 147 148 149 153 154 166 167 168 170 171 172 173 234 235 236 237 239 240 241 242 245 248 249 253 254 255 258 261 262 266 267 268
    border: 141r167 142r169 143r404 144r405 145r406 146r407
    Pressure: GENERAL_REGS=18
    Reg 167 of GENERAL_REGS has 3 regs less
    Reg 169 of GENERAL_REGS has 3 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 154 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 3 regs less
    Reg 168 of GENERAL_REGS has 3 regs less
    Reg 173 of GENERAL_REGS has 3 regs less
    Reg 258 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 3 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 172 of GENERAL_REGS has 3 regs less
    Reg 245 of GENERAL_REGS has 1 regs less
      Pushing a305(r240,l2: a203(r240,l6))
      Pushing a304(r239,l2: a202(r239,l6))
      Pushing a303(r242,l2: a201(r242,l6))
      Pushing a302(r241,l2: a200(r241,l6))
      Pushing a299(r147,l2: a197(r147,l6))
      Pushing a298(r138,l2: a196(r138,l6))
      Pushing a294(r248,l2: a192(r248,l6))
      Pushing a292(r249,l2: a190(r249,l6))
      Pushing a290(r253,l2: a188(r253,l6))
      Pushing a289(r255,l2: a187(r255,l6))
      Pushing a288(r254,l2: a186(r254,l6))
      Pushing a163(r235,l2)
      Pushing a162(r234,l2)
      Pushing a159(r237,l2)
      Pushing a158(r236,l2)
      Pushing a157(r149,l2)
      Pushing a152(r261,l2)
      Pushing a150(r262,l2)
      Pushing a149(r266,l2)
      Pushing a148(r268,l2)
      Pushing a147(r267,l2)
      Pushing a301(r171,l2: a199(r171,l6))
      Pushing a300(r146,l2: a198(r146,l6))
      Pushing a161(r170,l2)
      Pushing a287(r258,l2: a176(r258,l7))
      Pushing a142(r169,l2)(potential spill: pri=-952, cost=-20000)
      Pushing a347(r245,l2: a307(r245,l6: a219(r245,l8)))
      Pushing a295(r166,l2: a193(r166,l6))(potential spill: pri=1333, cost=20000)
      Pushing a151(r137,l2)(potential spill: pri=1666, cost=20000)
      Pushing a153(r142,l2)
      Pushing a286(r173,l2: a175(r173,l7))
      Pushing a155(r154,l2)
      Pushing a291(r139,l2: a189(r139,l6))(potential spill: pri=2142, cost=30000)
      Pushing a297(r140,l2: a195(r140,l6))(potential spill: pri=2307, cost=30000)
      Pushing a296(r153,l2: a194(r153,l6))(potential spill: pri=3333, cost=40000)
      Pushing a346(r172,l2: a306(r172,l6: a218(r172,l8)))
      Pushing a293(r144,l2: a191(r144,l6))
      Pushing a141(r167,l2)
      Pushing a160(r168,l2)
      Pushing a154(r148,l2)
      Pushing a156(r145,l2)
      Popping a156(r145,l2)  -- assign reg 4
      Popping a154(r148,l2)  -- assign reg 5
      Popping a160(r168,l2)  -- assign reg 8
      Popping a141(r167,l2)  -- assign reg 6
      Popping a293(r144,l2: a191(r144,l6))  -- assign reg 9
      Popping a346(r172,l2: a306(r172,l6: a218(r172,l8)))  -- assign reg 11
      Popping a296(r153,l2: a194(r153,l6))  -- assign reg 3
      Popping a297(r140,l2: a195(r140,l6))  -- assign reg 2
      Popping a291(r139,l2: a189(r139,l6))  -- assign reg 12
      Popping a155(r154,l2)  -- assign reg 8
      Popping a286(r173,l2: a175(r173,l7))  -- assign reg 9
      Popping a153(r142,l2)  -- assign reg 11
      Popping a151(r137,l2)  -- assign reg 3
      Popping a295(r166,l2: a193(r166,l6))  -- spill
      Popping a347(r245,l2: a307(r245,l6: a219(r245,l8)))  -- assign reg 11
      Popping a142(r169,l2)  -- spill
      Popping a287(r258,l2: a176(r258,l7))  -- assign reg 9
      Popping a161(r170,l2)  -- assign reg 4
      Popping a300(r146,l2: a198(r146,l6))  -- assign reg 12
      Popping a301(r171,l2: a199(r171,l6))  -- assign reg 2
      Popping a147(r267,l2)  -- assign reg 3
      Popping a148(r268,l2)  -- assign reg 3
      Popping a149(r266,l2)  -- assign reg 2
      Popping a150(r262,l2)  -- assign reg 3
      Popping a152(r261,l2)  -- assign reg 5
      Popping a157(r149,l2)  -- assign reg 4
      Popping a158(r236,l2)  -- assign reg 4
      Popping a159(r237,l2)  -- assign reg 4
      Popping a162(r234,l2)  -- assign reg 5
      Popping a163(r235,l2)  -- assign reg 5
      Popping a288(r254,l2: a186(r254,l6))  -- assign reg 3
      Popping a289(r255,l2: a187(r255,l6))  -- assign reg 3
      Popping a290(r253,l2: a188(r253,l6))  -- assign reg 2
      Popping a292(r249,l2: a190(r249,l6))  -- assign reg 9
      Popping a294(r248,l2: a192(r248,l6))  -- assign reg 4
      Popping a298(r138,l2: a196(r138,l6))  -- assign reg 2
      Popping a299(r147,l2: a197(r147,l6))  -- assign reg 2
      Popping a302(r241,l2: a200(r241,l6))  -- assign reg 12
      Popping a303(r242,l2: a201(r242,l6))  -- assign reg 12
      Popping a304(r239,l2: a202(r239,l6))  -- assign reg 12
      Popping a305(r240,l2: a203(r240,l6))  -- assign reg 12

  Loop 7 (parent 2, header bb24, depth 2)
    bbs: 24(->25:l2) 23
    all: 164r137 165r142 166r145 167r148 168r154 169r167 170r169 171r404 172r405 173r406 174r407 175r173 176r258
    modified regnos: 145 154 173 258
    border: 164r137 165r142 166r145 167r148 168r154 169r167 170r169 171r404 172r405 173r406 174r407
    Pressure: GENERAL_REGS=15
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 154 of GENERAL_REGS has 3 regs less
    Reg 167 of GENERAL_REGS has 3 regs less
    Reg 169 of GENERAL_REGS has 3 regs less
    Reg 173 of GENERAL_REGS has 3 regs less
    Reg 258 of GENERAL_REGS has 1 regs less
      Pushing a176(r258,l7)
      Pushing a170(r169,l7)(potential spill: pri=-3076, cost=-40000)
      Pushing a164(r137,l7)(potential spill: pri=3000, cost=36000)
      Pushing a169(r167,l7)
      Pushing a165(r142,l7)
      Pushing a167(r148,l7)
      Pushing a168(r154,l7)
      Pushing a166(r145,l7)
      Pushing a175(r173,l7)
      Popping a175(r173,l7)  -- assign reg 9
      Popping a166(r145,l7)  -- assign reg 4
      Popping a168(r154,l7)  -- assign reg 8
      Popping a167(r148,l7)  -- assign reg 5
      Popping a165(r142,l7)  -- assign reg 11
      Popping a169(r167,l7)  -- assign reg 6
      Popping a164(r137,l7)  -- assign reg 3
      Popping a170(r169,l7)  -- (memory is more profitable -20000 vs 20000) spill
      Popping a176(r258,l7)  -- assign reg 9

  Loop 6 (parent 2, header bb20, depth 2)
    bbs: 20(->21:l2) 19 18 17(->26:l2) 16 13(->15:l8) 12 11
    all: 177r145 178r148 179r167 180r168 181r169 182r404 183r405 184r406 185r407 186r254 187r255 188r253 189r139 190r249 191r144 192r248 193r166 194r153 195r140 196r138 197r147 198r146 199r171 200r241 201r242 202r239 203r240 306r172 307r245
    modified regnos: 138 139 140 144 145 146 147 153 166 168 171 172 239 240 241 242 245 248 249 253 254 255
    border: 177r145 178r148 179r167 180r168 181r169 182r404 183r405 184r406 185r407
    Pressure: GENERAL_REGS=18
    Reg 145 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 167 of GENERAL_REGS has 3 regs less
    Reg 168 of GENERAL_REGS has 3 regs less
    Reg 169 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 3 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 172 of GENERAL_REGS has 3 regs less
    Reg 245 of GENERAL_REGS has 1 regs less
      Pushing a203(r240,l6)
      Pushing a202(r239,l6)
      Pushing a201(r242,l6)
      Pushing a200(r241,l6)
      Pushing a197(r147,l6)
      Pushing a196(r138,l6)
      Pushing a192(r248,l6)
      Pushing a190(r249,l6)
      Pushing a188(r253,l6)
      Pushing a187(r255,l6)
      Pushing a186(r254,l6)
      Pushing a199(r171,l6)
      Pushing a198(r146,l6)
      Pushing a181(r169,l6)(potential spill: pri=-2352, cost=-40000)
      Pushing a307(r245,l6: a219(r245,l8))
      Pushing a193(r166,l6)(potential spill: pri=1333, cost=20000)
      Pushing a189(r139,l6)(potential spill: pri=2142, cost=30000)
      Pushing a195(r140,l6)(potential spill: pri=2307, cost=30000)
      Pushing a179(r167,l6)(potential spill: pri=3333, cost=40000)
      Pushing a178(r148,l6)
      Pushing a306(r172,l6: a218(r172,l8))
      Pushing a194(r153,l6)
      Pushing a191(r144,l6)
      Pushing a180(r168,l6)
      Pushing a177(r145,l6)
      Popping a177(r145,l6)  -- assign reg 4
      Popping a180(r168,l6)  -- assign reg 8
      Popping a191(r144,l6)  -- assign reg 6
      Popping a194(r153,l6)  -- assign reg 9
      Popping a306(r172,l6: a218(r172,l8))  -- assign reg 11
      Popping a178(r148,l6)  -- assign reg 5
      Popping a179(r167,l6)  -- assign reg 3
      Popping a195(r140,l6)  -- assign reg 2
      Popping a189(r139,l6)  -- assign reg 12
      Popping a193(r166,l6)  -- spill
      Popping a307(r245,l6: a219(r245,l8))  -- assign reg 11
      Popping a181(r169,l6)  -- spill
      Popping a198(r146,l6)  -- assign reg 12
      Popping a199(r171,l6)  -- assign reg 2
      Popping a186(r254,l6)  -- assign reg 2
      Popping a187(r255,l6)  -- assign reg 2
      Popping a188(r253,l6)  -- assign reg 1
      Popping a190(r249,l6)  -- assign reg 6
      Popping a192(r248,l6)  -- assign reg 4
      Popping a196(r138,l6)  -- assign reg 2
      Popping a197(r147,l6)  -- assign reg 2
      Popping a200(r241,l6)  -- assign reg 12
      Popping a201(r242,l6)  -- assign reg 12
      Popping a202(r239,l6)  -- assign reg 12
      Popping a203(r240,l6)  -- assign reg 12

  Loop 8 (parent 6, header bb15, depth 3)
    bbs: 15(->16:l6) 14
    all: 204r139 205r140 206r144 207r145 208r148 209r153 210r166 211r167 212r168 213r169 214r404 215r405 216r406 217r407 218r172 219r245
    modified regnos: 144 153 172 245
    border: 204r139 205r140 206r144 207r145 208r148 209r153 210r166 211r167 212r168 213r169 214r404 215r405 216r406 217r407
    Pressure: GENERAL_REGS=18
    Reg 139 of GENERAL_REGS has 3 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
    Reg 144 of GENERAL_REGS has 3 regs less
    Reg 145 of GENERAL_REGS has 3 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 3 regs less
    Reg 166 of GENERAL_REGS has 3 regs less
    Reg 167 of GENERAL_REGS has 3 regs less
    Reg 168 of GENERAL_REGS has 3 regs less
    Reg 169 of GENERAL_REGS has 3 regs less
    Reg 172 of GENERAL_REGS has 3 regs less
    Reg 245 of GENERAL_REGS has 1 regs less
      Pushing a210(r166,l8)(potential spill: pri=-2352, cost=-40000)
      Pushing a219(r245,l8)
      Pushing a213(r169,l8)(potential spill: pri=-2666, cost=-40000)
      Pushing a204(r139,l8)(potential spill: pri=2571, cost=36000)
      Pushing a211(r167,l8)(potential spill: pri=2769, cost=36000)
      Pushing a207(r145,l8)(potential spill: pri=3333, cost=40000)
      Pushing a212(r168,l8)
      Pushing a208(r148,l8)
      Pushing a205(r140,l8)
      Pushing a209(r153,l8)
      Pushing a206(r144,l8)
      Pushing a218(r172,l8)
      Popping a218(r172,l8)  -- assign reg 4
      Popping a206(r144,l8)  -- assign reg 6
      Popping a209(r153,l8)  -- assign reg 9
      Popping a205(r140,l8)  -- assign reg 11
      Popping a208(r148,l8)  -- assign reg 5
      Popping a212(r168,l8)  -- assign reg 8
      Popping a207(r145,l8)  -- assign reg 3
      Popping a211(r167,l8)  -- assign reg 2
      Popping a204(r139,l8)  -- assign reg 12
      Popping a213(r169,l8)  -- spill
      Popping a219(r245,l8)  -- assign reg 4
      Popping a210(r166,l8)  -- spill

  Loop 1 (parent 0, header bb7, depth 1)
    bbs: 7(->8:l0) 6 5 4 3
    all: 220r152 221r175 222r176 223r413 224r414 225r415 226r228 227r151 228r224 229r225 230r223 231r220 232r177 233r178 234r212 235r217 236r213 237r216 238r211 239r179 240r150 241r201 242r174 243r200
    modified regnos: 150 151 152 174 175 176 177 178 179 200 201 211 212 213 216 217 220 223 224 225 228
    border: 220r152 221r175 222r176 223r413 224r414 225r415
    Pressure: GENERAL_REGS=9
    Reg 152 of GENERAL_REGS has 3 regs less
    Reg 176 of GENERAL_REGS has 3 regs less
    Reg 151 of GENERAL_REGS has 3 regs less
    Reg 177 of GENERAL_REGS has 1 regs less
      Pushing a243(r200,l1)
      Pushing a242(r174,l1)
      Pushing a241(r201,l1)
      Pushing a238(r211,l1)
      Pushing a237(r216,l1)
      Pushing a236(r213,l1)
      Pushing a235(r217,l1)
      Pushing a234(r212,l1)
      Pushing a231(r220,l1)
      Pushing a230(r223,l1)
      Pushing a229(r225,l1)
      Pushing a228(r224,l1)
      Pushing a226(r228,l1)
      Pushing a240(r150,l1)
      Pushing a239(r179,l1)
      Pushing a233(r178,l1)
      Pushing a221(r175,l1)
      Pushing a232(r177,l1)
      Pushing a222(r176,l1)
      Pushing a220(r152,l1)
      Pushing a227(r151,l1)
      Popping a227(r151,l1)  -- assign reg 6
      Popping a220(r152,l1)  -- assign reg 4
      Popping a222(r176,l1)  -- assign reg 5
      Popping a232(r177,l1)  -- assign reg 1
      Popping a221(r175,l1)  -- assign reg 3
      Popping a233(r178,l1)  -- assign reg 0
      Popping a239(r179,l1)  -- assign reg 2
      Popping a240(r150,l1)  -- assign reg 1
      Popping a226(r228,l1)  -- assign reg 2
      Popping a228(r224,l1)  -- assign reg 3
      Popping a229(r225,l1)  -- assign reg 3
      Popping a230(r223,l1)  -- assign reg 3
      Popping a231(r220,l1)  -- assign reg 3
      Popping a234(r212,l1)  -- assign reg 0
      Popping a235(r217,l1)  -- assign reg 1
      Popping a236(r213,l1)  -- assign reg 0
      Popping a237(r216,l1)  -- assign reg 1
      Popping a238(r211,l1)  -- assign reg 0
      Popping a241(r201,l1)  -- assign reg 1
      Popping a242(r174,l1)  -- assign reg 1
      Popping a243(r200,l1)  -- assign reg 1
Disposition:
  101:r136 l4     2  164:r137 l7     3  151:r137 l2     3  196:r138 l6     2
  204:r139 l8    12  189:r139 l6    12  205:r140 l8    11  195:r140 l6     2
  138:r141 l3    14  165:r142 l7    11  153:r142 l2    11  206:r144 l8     6
  191:r144 l6     6  207:r145 l8     3  177:r145 l6     4  166:r145 l7     4
  156:r145 l2     4  198:r146 l6    12  197:r147 l6     2  208:r148 l8     5
  178:r148 l6     5  167:r148 l7     5  154:r148 l2     5  157:r149 l2     4
  240:r150 l1     1  227:r151 l1     6  220:r152 l1     4   93:r152 l0     4
  209:r153 l8     9  194:r153 l6     9  168:r154 l7     8  155:r154 l2     8
  127:r155 l3     3  113:r156 l3     2   72:r156 l0     2   95:r157 l4     5
   57:r157 l0     5   50:r158 l0     1   52:r159 l0     1  111:r160 l4     0
  139:r162 l3     8  137:r163 l3    14  140:r165 l3     8  210:r166 l8   mem
  193:r166 l6   mem  211:r167 l8     2  179:r167 l6     3  169:r167 l7     6
  141:r167 l2     6   79:r167 l0     6  212:r168 l8     8  180:r168 l6     8
  160:r168 l2     8  213:r169 l8   mem  181:r169 l6   mem  170:r169 l7   mem
  142:r169 l2   mem   77:r169 l0   mem  161:r170 l2     4  199:r171 l6     2
  218:r172 l8     4  175:r173 l7     9  242:r174 l1     1  221:r175 l1     3
   92:r175 l0     3  222:r176 l1     5   94:r176 l0     5  232:r177 l1     1
  233:r178 l1     0  239:r179 l1     2  104:r180 l4     1  120:r181 l3     7
  122:r182 l3     3  114:r183 l3     0   73:r183 l0     0  115:r184 l3     6
   96:r184 l4     6   54:r184 l0     6  116:r185 l3     4   97:r185 l4     4
   53:r185 l0     4    7:r186 l0    12    5:r187 l0    11  117:r188 l3     5
   63:r188 l0     5  118:r189 l3    12   69:r189 l0    12  125:r190 l3     3
   76:r192 l0     5   85:r193 l0     2   91:r194 l0     2   87:r196 l0     1
   86:r197 l0     1  243:r200 l1     1  241:r201 l1     1  238:r211 l1     0
  234:r212 l1     0  236:r213 l1     0  237:r216 l1     1  235:r217 l1     1
  231:r220 l1     3  230:r223 l1     3  228:r224 l1     3  229:r225 l1     3
  226:r228 l1     2   74:r229 l0     4   75:r231 l0     0   78:r232 l0     3
   80:r233 l0     3  162:r234 l2     5  163:r235 l2     5  158:r236 l2     4
  159:r237 l2     4  202:r239 l6    12  203:r240 l6    12  200:r241 l6    12
  201:r242 l6    12  219:r245 l8     4  192:r248 l6     4  190:r249 l6     6
  188:r253 l6     1  186:r254 l6     2  187:r255 l6     2  176:r258 l7     9
  152:r261 l2     5  150:r262 l2     3  149:r266 l2     2  147:r267 l2     3
  148:r268 l2     3   65:r269 l0     3   71:r270 l0    12   68:r272 l0     5
   67:r273 l0    14   66:r274 l0    14   70:r276 l0    12  123:r279 l3     3
  124:r281 l3     7  126:r282 l3     7  121:r283 l3     7   60:r288 l0     2
   61:r289 l0     1   58:r290 l0     3  108:r291 l4     1  110:r292 l4     1
  109:r294 l4     2  112:r295 l4     2  107:r296 l4     2  106:r299 l4     3
  105:r300 l4     3  103:r306 l4     1  100:r307 l4     3  102:r308 l4     3
   55:r312 l0     1   49:r314 l0     1   51:r318 l0    12   47:r319 l0    12
   48:r320 l0    12   46:r321 l0     2   45:r322 l0    12   29:r325 l0     7
   27:r326 l0     6   25:r327 l0     6   23:r328 l0     6   22:r329 l0     6
    8:r330 l0     4   21:r331 l0     6   31:r332 l0    10   20:r333 l0    10
    6:r334 l0    14   32:r335 l0     9   19:r336 l0     9    4:r337 l0   mem
   18:r339 l0     6   17:r340 l0     6    3:r343 l0   mem   16:r344 l0     6
   40:r345 l0     7   44:r346 l0     7   30:r349 l0     7   39:r351 l0    10
   15:r352 l0   mem    2:r353 l0   mem   14:r354 l0     6   38:r355 l0     6
   43:r356 l0     6   28:r359 l0     6   37:r361 l0     0   13:r362 l0     7
    1:r363 l0   mem   12:r364 l0     6   36:r365 l0     5   42:r366 l0     5
   26:r369 l0     5   35:r371 l0     1   11:r372 l0     5    0:r373 l0   mem
   10:r374 l0     5   34:r375 l0     8   41:r376 l0     8   24:r379 l0     8
   33:r381 l0     2    9:r382 l0     8   56:r383 l0     3   98:r384 l4     7
   59:r384 l0     7   99:r385 l4     8   62:r385 l0     8  119:r387 l3     1
   64:r387 l0     1  214:r404 l8     7  182:r404 l6     7  171:r404 l7     7
  143:r404 l2     7   81:r404 l0     7  215:r405 l8    10  183:r405 l6    10
  172:r405 l7    10  144:r405 l2    10   83:r405 l0    10  216:r406 l8   mem
  184:r406 l6   mem  173:r406 l7   mem  145:r406 l2   mem   82:r406 l0   mem
  217:r407 l8   mem  185:r407 l6   mem  174:r407 l7   mem  146:r407 l2   mem
   84:r407 l0   mem  223:r413 l1     7   90:r413 l0     7  224:r414 l1    10
   89:r414 l0    10  225:r415 l1     8   88:r415 l0     8
New iteration of spill/restore move
      Moving spill/restore for a207r145 up from loop 8 - profit 4000
      Moving spill/restore for a211r167 up from loop 8 - profit 4000
New iteration of spill/restore move
      Moving spill/restore for a179r167 up from loop 6 - profit 4000
New iteration of spill/restore move
      Changing RTL for loop 4 (header bb42)
  5 vs parent 5:      Creating newreg=416 from oldreg=157
  6 vs parent 6:      Creating newreg=417 from oldreg=184
  4 vs parent 4:      Creating newreg=418 from oldreg=185
rescanning insn with uid = 332.
deleting insn with uid = 332.
rescanning insn with uid = 333.
deleting insn with uid = 333.
rescanning insn with uid = 312.
deleting insn with uid = 312.
rescanning insn with uid = 313.
deleting insn with uid = 313.
      Changing RTL for loop 3 (header bb39)
  2 vs parent 2:      Creating newreg=419 from oldreg=156
  0 vs parent 0:      Creating newreg=420 from oldreg=183
  6 vs parent 6:      Creating newreg=421 from oldreg=184
  4 vs parent 4:      Creating newreg=422 from oldreg=185
  5 vs parent 5:      Creating newreg=423 from oldreg=188
  12 vs parent 12:      Creating newreg=424 from oldreg=189
  1 vs parent 1:      Creating newreg=425 from oldreg=387
rescanning insn with uid = 298.
deleting insn with uid = 298.
rescanning insn with uid = 293.
deleting insn with uid = 293.
rescanning insn with uid = 294.
deleting insn with uid = 294.
rescanning insn with uid = 285.
deleting insn with uid = 285.
rescanning insn with uid = 262.
deleting insn with uid = 262.
rescanning insn with uid = 245.
deleting insn with uid = 245.
rescanning insn with uid = 249.
deleting insn with uid = 249.
rescanning insn with uid = 254.
deleting insn with uid = 254.
      Changing RTL for loop 2 (header bb27)
  6 vs parent 6:      Creating newreg=426 from oldreg=167
rescanning insn with uid = 222.
deleting insn with uid = 222.
rescanning insn with uid = 212.
deleting insn with uid = 212.
rescanning insn with uid = 93.
deleting insn with uid = 93.
rescanning insn with uid = 94.
deleting insn with uid = 94.
      Changing RTL for loop 7 (header bb24)
  3 vs parent 3:      Creating newreg=427 from oldreg=137
  11 vs parent 11:      Creating newreg=428 from oldreg=142
  4 vs parent 4:      Creating newreg=429 from oldreg=145
  5 vs parent 5:      Creating newreg=430 from oldreg=148
  8 vs parent 8:      Creating newreg=431 from oldreg=154
  6 vs parent 6:      Creating newreg=432 from oldreg=426
rescanning insn with uid = 203.
deleting insn with uid = 203.
rescanning insn with uid = 198.
deleting insn with uid = 198.
rescanning insn with uid = 189.
deleting insn with uid = 189.
rescanning insn with uid = 199.
deleting insn with uid = 199.
      Changing RTL for loop 6 (header bb20)
  4 vs parent 4:      Creating newreg=433 from oldreg=145
  5 vs parent 5:      Creating newreg=434 from oldreg=148
  -1 vs parent 6:      Creating newreg=435 from oldreg=426
  8 vs parent 8:      Creating newreg=436 from oldreg=168
rescanning insn with uid = 173.
deleting insn with uid = 173.
rescanning insn with uid = 163.
deleting insn with uid = 163.
rescanning insn with uid = 160.
deleting insn with uid = 160.
rescanning insn with uid = 157.
deleting insn with uid = 157.
rescanning insn with uid = 152.
deleting insn with uid = 152.
rescanning insn with uid = 127.
deleting insn with uid = 127.
rescanning insn with uid = 128.
deleting insn with uid = 128.
rescanning insn with uid = 121.
deleting insn with uid = 121.
rescanning insn with uid = 119.
deleting insn with uid = 119.
rescanning insn with uid = 120.
deleting insn with uid = 120.
rescanning insn with uid = 122.
deleting insn with uid = 122.
rescanning insn with uid = 109.
deleting insn with uid = 109.
rescanning insn with uid = 110.
deleting insn with uid = 110.
rescanning insn with uid = 115.
deleting insn with uid = 115.
      Changing RTL for loop 8 (header bb15)
  12 vs parent 12:      Creating newreg=437 from oldreg=139
  11 vs parent 2:      Creating newreg=438 from oldreg=140
  6 vs parent 6:      Creating newreg=439 from oldreg=144
  -1 vs parent 4:      Creating newreg=440 from oldreg=433
  5 vs parent 5:      Creating newreg=441 from oldreg=434
  9 vs parent 9:      Creating newreg=442 from oldreg=153
  8 vs parent 8:      Creating newreg=443 from oldreg=436
rescanning insn with uid = 148.
deleting insn with uid = 148.
rescanning insn with uid = 143.
deleting insn with uid = 143.
rescanning insn with uid = 134.
deleting insn with uid = 134.
rescanning insn with uid = 144.
deleting insn with uid = 144.
      Changing RTL for loop 1 (header bb7)
  4 vs parent 4:      Creating newreg=444 from oldreg=152
  3 vs parent 3:      Creating newreg=445 from oldreg=175
  5 vs parent 5:      Creating newreg=446 from oldreg=176
rescanning insn with uid = 22.
deleting insn with uid = 22.
rescanning insn with uid = 70.
deleting insn with uid = 70.
rescanning insn with uid = 76.
deleting insn with uid = 76.
rescanning insn with uid = 69.
deleting insn with uid = 69.
rescanning insn with uid = 551.
deleting insn with uid = 551.
rescanning insn with uid = 552.
deleting insn with uid = 552.
rescanning insn with uid = 42.
deleting insn with uid = 42.
rescanning insn with uid = 36.
deleting insn with uid = 36.
scanning new insn with uid = 599.
scanning new insn with uid = 600.
scanning new insn with uid = 601.
scanning new insn with uid = 602.
scanning new insn with uid = 603.
scanning new insn with uid = 605.
scanning new insn with uid = 606.
scanning new insn with uid = 607.
scanning new insn with uid = 614.
scanning new insn with uid = 615.
scanning new insn with uid = 616.
scanning new insn with uid = 617.
scanning new insn with uid = 625.
scanning new insn with uid = 626.
scanning new insn with uid = 630.
scanning new insn with uid = 631.
    Adding cp156:a93r152-a220r444
    Adding range [338..338] to allocno a93r152
    Adding cp157:a92r175-a221r445
    Adding range [338..340] to allocno a92r175
    Adding cp158:a94r176-a222r446
    Adding range [338..342] to allocno a94r176
    Adding range [339..343] to allocno a220r444
    Adding range [341..343] to allocno a221r445
    Adding range [343..343] to allocno a222r446
    Adding range [338..343] to live through  allocno a90r413
    Adding range [338..343] to live through  allocno a89r414
    Adding range [338..343] to live through  allocno a88r415
    Adding cp159:a79r167-a141r426
    Adding range [345..345] to allocno a79r167
    Adding range [346..346] to allocno a141r426
    Adding range [345..346] to live through  allocno a77r169
    Adding range [345..346] to live through  allocno a81r404
    Adding range [345..346] to live through  allocno a83r405
    Adding range [345..346] to live through  allocno a82r406
    Adding range [345..346] to live through  allocno a84r407
    Adding cp160:a156r145-a177r433
    Adding range [348..348] to allocno a156r145
    Adding cp161:a154r148-a178r434
    Adding range [348..350] to allocno a154r148
    Adding cp162:a141r426-a179r435
    Adding range [348..352] to allocno a141r426
    Adding cp163:a160r168-a180r436
    Adding range [348..354] to allocno a160r168
    Adding range [349..355] to allocno a177r433
    Adding range [351..355] to allocno a178r434
    Adding range [353..355] to allocno a179r435
    Adding range [355..355] to allocno a180r436
    Adding range [348..355] to live through  allocno a142r169
    Adding range [348..355] to live through  allocno a143r404
    Adding range [348..355] to live through  allocno a144r405
    Adding range [348..355] to live through  allocno a145r406
    Adding range [348..355] to live through  allocno a146r407
    Adding cp164:a189r139-a204r437
    Adding range [357..357] to allocno a189r139
    Adding cp165:a195r140-a205r438
    Adding range [357..359] to allocno a195r140
    Adding cp166:a191r144-a206r439
    Adding range [357..361] to allocno a191r144
    Adding cp167:a177r433-a207r440
    Adding range [357..363] to allocno a177r433
    Adding cp168:a178r434-a208r441
    Adding range [357..365] to allocno a178r434
    Adding cp169:a194r153-a209r442
    Adding range [357..367] to allocno a194r153
    Adding cp170:a180r436-a212r443
    Adding range [357..369] to allocno a180r436
    Adding range [358..370] to allocno a204r437
    Adding range [360..370] to allocno a205r438
    Adding range [362..370] to allocno a206r439
    Adding range [364..370] to allocno a207r440
    Adding range [366..370] to allocno a208r441
    Adding range [368..370] to allocno a209r442
    Adding range [370..370] to allocno a212r443
    Adding range [357..370] to live through  allocno a193r166
    Adding range [357..370] to live through  allocno a179r435
    Adding range [357..370] to live through  allocno a181r169
    Adding range [357..370] to live through  allocno a182r404
    Adding range [357..370] to live through  allocno a183r405
    Adding range [357..370] to live through  allocno a184r406
    Adding range [357..370] to live through  allocno a185r407
    Adding cp171:a189r139-a204r437
    Adding range [372..372] to allocno a204r437
    Adding cp172:a191r144-a206r439
    Adding range [372..374] to allocno a206r439
    Adding cp173:a177r433-a207r440
    Adding range [372..376] to allocno a207r440
    Adding cp174:a178r434-a208r441
    Adding range [372..378] to allocno a208r441
    Adding cp175:a180r436-a212r443
    Adding range [372..380] to allocno a212r443
    Adding range [373..381] to allocno a189r139
    Adding range [375..381] to allocno a191r144
    Adding range [377..381] to allocno a177r433
    Adding range [379..381] to allocno a178r434
    Adding range [381..381] to allocno a180r436
    Adding range [372..381] to live through  allocno a193r166
    Adding range [372..381] to live through  allocno a179r435
    Adding range [372..381] to live through  allocno a181r169
    Adding range [372..381] to live through  allocno a182r404
    Adding range [372..381] to live through  allocno a183r405
    Adding range [372..381] to live through  allocno a184r406
    Adding range [372..381] to live through  allocno a185r407
    Adding cp176:a141r426-a179r435
    Adding range [383..383] to allocno a179r435
    Adding range [384..384] to allocno a141r426
    Adding range [383..384] to live through  allocno a181r169
    Adding range [383..384] to live through  allocno a182r404
    Adding range [383..384] to live through  allocno a183r405
    Adding range [383..384] to live through  allocno a184r406
    Adding range [383..384] to live through  allocno a185r407
    Adding cp177:a156r145-a177r433
    Adding range [386..386] to allocno a177r433
    Adding cp178:a154r148-a178r434
    Adding range [386..388] to allocno a178r434
    Adding cp179:a141r426-a179r435
    Adding range [386..390] to allocno a179r435
    Adding range [387..391] to allocno a156r145
    Adding range [389..391] to allocno a154r148
    Adding range [391..391] to allocno a141r426
    Adding range [386..391] to live through  allocno a142r169
    Adding range [386..391] to live through  allocno a143r404
    Adding range [386..391] to live through  allocno a144r405
    Adding range [386..391] to live through  allocno a145r406
    Adding range [386..391] to live through  allocno a146r407
    Adding cp180:a151r137-a164r427
    Adding range [393..393] to allocno a151r137
    Adding cp181:a153r142-a165r428
    Adding range [393..395] to allocno a153r142
    Adding cp182:a156r145-a166r429
    Adding range [393..397] to allocno a156r145
    Adding cp183:a154r148-a167r430
    Adding range [393..399] to allocno a154r148
    Adding cp184:a155r154-a168r431
    Adding range [393..401] to allocno a155r154
    Adding cp185:a141r426-a169r432
    Adding range [393..403] to allocno a141r426
    Adding range [394..404] to allocno a164r427
    Adding range [396..404] to allocno a165r428
    Adding range [398..404] to allocno a166r429
    Adding range [400..404] to allocno a167r430
    Adding range [402..404] to allocno a168r431
    Adding range [404..404] to allocno a169r432
    Adding range [393..404] to live through  allocno a142r169
    Adding range [393..404] to live through  allocno a143r404
    Adding range [393..404] to live through  allocno a144r405
    Adding range [393..404] to live through  allocno a145r406
    Adding range [393..404] to live through  allocno a146r407
    Adding cp186:a151r137-a164r427
    Adding range [406..406] to allocno a164r427
    Adding cp187:a153r142-a165r428
    Adding range [406..408] to allocno a165r428
    Adding cp188:a154r148-a167r430
    Adding range [406..410] to allocno a167r430
    Adding cp189:a141r426-a169r432
    Adding range [406..412] to allocno a169r432
    Adding range [407..413] to allocno a151r137
    Adding range [409..413] to allocno a153r142
    Adding range [411..413] to allocno a154r148
    Adding range [413..413] to allocno a141r426
    Adding range [406..413] to live through  allocno a142r169
    Adding range [406..413] to live through  allocno a143r404
    Adding range [406..413] to live through  allocno a144r405
    Adding range [406..413] to live through  allocno a145r406
    Adding range [406..413] to live through  allocno a146r407
    Adding cp190:a72r156-a113r419
    Adding range [415..415] to allocno a72r156
    Adding cp191:a73r183-a114r420
    Adding range [415..417] to allocno a73r183
    Adding cp192:a54r184-a115r421
    Adding range [415..419] to allocno a54r184
    Adding cp193:a53r185-a116r422
    Adding range [415..421] to allocno a53r185
    Adding cp194:a63r188-a117r423
    Adding range [415..423] to allocno a63r188
    Adding cp195:a69r189-a118r424
    Adding range [415..425] to allocno a69r189
    Adding cp196:a64r387-a119r425
    Adding range [415..427] to allocno a64r387
    Adding range [416..428] to allocno a113r419
    Adding range [418..428] to allocno a114r420
    Adding range [420..428] to allocno a115r421
    Adding range [422..428] to allocno a116r422
    Adding range [424..428] to allocno a117r423
    Adding range [426..428] to allocno a118r424
    Adding range [428..428] to allocno a119r425
    Adding cp197:a54r184-a115r421
    Adding range [430..430] to allocno a115r421
    Adding cp198:a53r185-a116r422
    Adding range [430..432] to allocno a116r422
    Adding range [431..433] to allocno a54r184
    Adding range [433..433] to allocno a53r185
    Adding cp199:a57r157-a95r416
    Adding range [435..435] to allocno a57r157
    Adding cp200:a54r184-a96r417
    Adding range [435..437] to allocno a54r184
    Adding cp201:a53r185-a97r418
    Adding range [435..439] to allocno a53r185
    Adding range [436..440] to allocno a95r416
    Adding range [438..440] to allocno a96r417
    Adding range [440..440] to allocno a97r418
    Adding range [435..440] to live through  allocno a59r384
    Adding range [435..440] to live through  allocno a62r385
    Adding cp202:a54r184-a96r417
    Adding range [442..442] to allocno a96r417
    Adding cp203:a53r185-a97r418
    Adding range [442..444] to allocno a97r418
    Adding range [443..445] to allocno a54r184
    Adding range [445..445] to allocno a53r185
scanning new insn with uid = 584.
scanning new insn with uid = 585.
scanning new insn with uid = 586.
scanning new insn with uid = 587.
scanning new insn with uid = 588.
scanning new insn with uid = 589.
scanning new insn with uid = 590.
scanning new insn with uid = 591.
scanning new insn with uid = 592.
scanning new insn with uid = 593.
scanning new insn with uid = 594.
scanning new insn with uid = 595.
scanning new insn with uid = 596.
scanning new insn with uid = 597.
scanning new insn with uid = 598.
scanning new insn with uid = 632.
changing bb of uid 634
  unscanned insn
verify found no changes in insn with uid = 158.
Edge 17->26 redirected to 44
scanning new insn with uid = 604.
scanning new insn with uid = 608.
scanning new insn with uid = 609.
scanning new insn with uid = 610.
scanning new insn with uid = 611.
scanning new insn with uid = 612.
scanning new insn with uid = 613.
scanning new insn with uid = 618.
scanning new insn with uid = 619.
scanning new insn with uid = 620.
scanning new insn with uid = 621.
scanning new insn with uid = 622.
scanning new insn with uid = 623.
scanning new insn with uid = 624.
scanning new insn with uid = 627.
scanning new insn with uid = 628.
scanning new insn with uid = 629.
    New r416: setting preferred GENERAL_REGS, alternative NO_REGS
    New r417: setting preferred GENERAL_REGS, alternative NO_REGS
    New r418: setting preferred GENERAL_REGS, alternative NO_REGS
    New r419: setting preferred GENERAL_REGS, alternative NO_REGS
    New r420: setting preferred GENERAL_REGS, alternative NO_REGS
    New r421: setting preferred GENERAL_REGS, alternative NO_REGS
    New r422: setting preferred GENERAL_REGS, alternative NO_REGS
    New r423: setting preferred GENERAL_REGS, alternative NO_REGS
    New r424: setting preferred GENERAL_REGS, alternative NO_REGS
    New r425: setting preferred GENERAL_REGS, alternative NO_REGS
    New r426: setting preferred GENERAL_REGS, alternative NO_REGS
    New r427: setting preferred GENERAL_REGS, alternative NO_REGS
    New r428: setting preferred GENERAL_REGS, alternative NO_REGS
    New r429: setting preferred GENERAL_REGS, alternative NO_REGS
    New r430: setting preferred GENERAL_REGS, alternative NO_REGS
    New r431: setting preferred GENERAL_REGS, alternative NO_REGS
    New r432: setting preferred GENERAL_REGS, alternative NO_REGS
    New r433: setting preferred GENERAL_REGS, alternative NO_REGS
    New r434: setting preferred GENERAL_REGS, alternative NO_REGS
    New r435: setting preferred GENERAL_REGS, alternative NO_REGS
    New r436: setting preferred GENERAL_REGS, alternative NO_REGS
    New r437: setting preferred GENERAL_REGS, alternative NO_REGS
    New r438: setting preferred GENERAL_REGS, alternative NO_REGS
    New r439: setting preferred GENERAL_REGS, alternative NO_REGS
    New r440: setting preferred GENERAL_REGS, alternative NO_REGS
    New r441: setting preferred GENERAL_REGS, alternative NO_REGS
    New r442: setting preferred GENERAL_REGS, alternative NO_REGS
    New r443: setting preferred GENERAL_REGS, alternative NO_REGS
    New r444: setting preferred GENERAL_REGS, alternative NO_REGS
    New r445: setting preferred GENERAL_REGS, alternative NO_REGS
    New r446: setting preferred GENERAL_REGS, alternative NO_REGS
Flattening IR
      Moving ranges of a225r415 to a88r415:  [298..336]
      Moving ranges of a224r414 to a89r414:  [298..336]
      Moving ranges of a223r413 to a90r413:  [298..336]
      Moving ranges of a217r407 to a185r407:  [292..297]
      Moving ranges of a185r407 to a146r407:  [383..384] [372..381] [357..370] [256..297]
      Moving ranges of a174r407 to a146r407:  [250..255]
      Moving ranges of a146r407 to a84r407:  [406..413] [393..404] [386..391] [383..384] [372..381] [357..370] [348..355] [218..297]
      Moving ranges of a216r406 to a184r406:  [292..297]
      Moving ranges of a184r406 to a145r406:  [383..384] [372..381] [357..370] [256..297]
      Moving ranges of a173r406 to a145r406:  [250..255]
      Moving ranges of a145r406 to a82r406:  [406..413] [393..404] [386..391] [383..384] [372..381] [357..370] [348..355] [218..297]
      Moving ranges of a215r405 to a183r405:  [292..297]
      Moving ranges of a183r405 to a144r405:  [383..384] [372..381] [357..370] [256..297]
      Moving ranges of a172r405 to a144r405:  [250..255]
      Moving ranges of a144r405 to a83r405:  [406..413] [393..404] [386..391] [383..384] [372..381] [357..370] [348..355] [218..297]
      Moving ranges of a214r404 to a182r404:  [292..297]
      Moving ranges of a182r404 to a143r404:  [383..384] [372..381] [357..370] [256..297]
      Moving ranges of a171r404 to a143r404:  [250..255]
      Moving ranges of a143r404 to a81r404:  [406..413] [393..404] [386..391] [383..384] [372..381] [357..370] [348..355] [218..297]
      Moving ranges of a99r385 to a62r385:  [165..188]
      Moving ranges of a98r384 to a59r384:  [165..188]
      Moving ranges of a213r169 to a181r169:  [292..297]
      Moving ranges of a181r169 to a142r169:  [383..384] [372..381] [357..370] [256..297]
      Moving ranges of a170r169 to a142r169:  [250..255]
      Moving ranges of a142r169 to a77r169:  [406..413] [393..404] [386..391] [383..384] [372..381] [357..370] [348..355] [218..297]
      Moving ranges of a211r435 to a179r435:  [292..297]
      Moving ranges of a210r166 to a193r166:  [292..297]
      Remove cp82:c244r307-c246r308
      Remove cp83:c244r307-c247r306
      Remove cp84:c253r294-c256r295
      Remove cp85:c252r291-c255r160
      Remove cp86:c252r291-c254r292
      Remove cp87:c251r296-c253r294
      Remove cp88:c248r180-c251r296
      Remove cp89:c248r180-c252r291
      Remove cp90:c249r300-c250r299
      Remove cp91:c261r281-c263r282
      Remove cp92:c260r279-c262r190
      Remove cp93:c258r283-c261r281
      Remove cp94:c259r182-c260r279
      Remove cp95:c257r181-c258r283
      Remove cp96:c269r267-c270r268
      Remove cp97:c269r267-c271r266
      Remove cp98:c274r261-c276r148
      Remove cp99:c274r261-c275r142
      Remove cp100:c272r262-c274r261
      Remove cp101:c272r262-c273r137
      Remove cp102:c281r237-c283r170
      Remove cp103:c280r236-c281r237
      Remove cp104:c279r149-c280r236
      Remove cp105:c278r145-c279r149
      Remove cp106:c284r234-c285r235
      Remove cp107:c276r148-c284r234
      Remove cp108:c286r173-c287r258
      Remove cp109:c288r254-c289r255
      Remove cp110:c288r254-c290r253
      Remove cp111:c294r248-c295r166
      Remove cp112:a156r145-c294r248
      Remove cp113:c292r249-c294r248
      Remove cp114:c292r249-c293r144
      Remove cp115:c299r147-c301r171
      Remove cp116:c291r139-c300r146
      Remove cp117:c298r138-c299r147
      Remove cp118:c297r140-c298r138
      Remove cp119:c304r239-c305r240
      Remove cp120:c303r242-c304r239
      Remove cp121:c302r241-c303r242
      Remove cp122:c300r146-c302r241
      Remove cp123:c306r172-c307r245
      Remove cp124:c312r223-c313r220
      Remove cp125:c311r225-c312r223
      Remove cp126:c310r224-c311r225
      Remove cp127:a92r175-c310r224
      Remove cp128:a92r175-c320r211
      Remove cp129:c319r216-c321r179
      Remove cp130:c319r216-c322r150
      Remove cp131:c318r213-c320r211
      Remove cp132:c317r217-c319r216
      Remove cp133:c316r212-c318r213
      Remove cp134:c314r177-c317r217
      Remove cp135:c315r178-c316r212
      Remove cp136:c324r174-c325r200
      Remove cp137:c323r201-c324r174
      Remove cp138:c322r150-c323r201
      Remove cp139:c326r173-c327r258
      Remove cp140:c328r254-c329r255
      Remove cp141:c328r254-c330r253
      Remove cp142:c334r248-c335r166
      Remove cp143:c278r145-c334r248
      Remove cp144:c332r249-c334r248
      Remove cp145:c332r249-c333r144
      Remove cp146:c339r147-c341r171
      Remove cp147:c331r139-c340r146
      Remove cp148:c338r138-c339r147
      Remove cp149:c337r140-c338r138
      Remove cp150:c344r239-c345r240
      Remove cp151:c343r242-c344r239
      Remove cp152:c342r241-c343r242
      Remove cp153:c340r146-c342r241
      Remove cp154:c346r172-c347r245
      Remove cp155:c348r172-c349r245
      Remove a98r384
      Remove a99r385
      Remove a142r169
      Remove a143r404
      Remove a144r405
      Remove a145r406
      Remove a146r407
      Remove a170r169
      Remove a171r404
      Remove a172r405
      Remove a173r406
      Remove a174r407
      Remove a181r169
      Remove a182r404
      Remove a183r405
      Remove a184r406
      Remove a185r407
      Remove a210r166
      Remove a211r435
      Remove a213r169
      Remove a214r404
      Remove a215r405
      Remove a216r406
      Remove a217r407
      Remove a223r413
      Remove a224r414
      Remove a225r415
      Remove a244r307
      Remove a245r136
      Remove a246r308
      Remove a247r306
      Remove a248r180
      Remove a249r300
      Remove a250r299
      Remove a251r296
      Remove a252r291
      Remove a253r294
      Remove a254r292
      Remove a255r160
      Remove a256r295
      Remove a257r181
      Remove a258r283
      Remove a259r182
      Remove a260r279
      Remove a261r281
      Remove a262r190
      Remove a263r282
      Remove a264r155
      Remove a265r163
      Remove a266r141
      Remove a267r162
      Remove a268r165
      Remove a269r267
      Remove a270r268
      Remove a271r266
      Remove a272r262
      Remove a273r137
      Remove a274r261
      Remove a275r142
      Remove a276r148
      Remove a277r154
      Remove a278r145
      Remove a279r149
      Remove a280r236
      Remove a281r237
      Remove a282r168
      Remove a283r170
      Remove a284r234
      Remove a285r235
      Remove a286r173
      Remove a287r258
      Remove a288r254
      Remove a289r255
      Remove a290r253
      Remove a291r139
      Remove a292r249
      Remove a293r144
      Remove a294r248
      Remove a295r166
      Remove a296r153
      Remove a297r140
      Remove a298r138
      Remove a299r147
      Remove a300r146
      Remove a301r171
      Remove a302r241
      Remove a303r242
      Remove a304r239
      Remove a305r240
      Remove a306r172
      Remove a307r245
      Remove a308r228
      Remove a309r151
      Remove a310r224
      Remove a311r225
      Remove a312r223
      Remove a313r220
      Remove a314r177
      Remove a315r178
      Remove a316r212
      Remove a317r217
      Remove a318r213
      Remove a319r216
      Remove a320r211
      Remove a321r179
      Remove a322r150
      Remove a323r201
      Remove a324r174
      Remove a325r200
      Remove a326r173
      Remove a327r258
      Remove a328r254
      Remove a329r255
      Remove a330r253
      Remove a331r139
      Remove a332r249
      Remove a333r144
      Remove a334r248
      Remove a335r166
      Remove a336r153
      Remove a337r140
      Remove a338r138
      Remove a339r147
      Remove a340r146
      Remove a341r171
      Remove a342r241
      Remove a343r242
      Remove a344r239
      Remove a345r240
      Remove a346r172
      Remove a347r245
      Remove a348r172
      Remove a349r245
Compressing live ranges: from 446 to 433 - 97%
Ranges after the compression:
 a0(r373): [0..80]
 a1(r363): [1..82]
 a2(r353): [2..87]
 a3(r343): [3..89]
 a4(r337): [4..64]
 a5(r187): [5..83]
 a6(r334): [6..86]
 a7(r186): [7..77]
 a8(r330): [8..88]
 a9(r382): [9..33]
 a10(r374): [10..11]
 a11(r372): [12..37]
 a12(r364): [13..14]
 a13(r362): [15..41]
 a14(r354): [16..17]
 a15(r352): [18..45]
 a16(r344): [19..20]
 a17(r340): [21..22]
 a18(r339): [23..24]
 a19(r336): [25..49]
 a20(r333): [26..47]
 a21(r331): [27..28]
 a22(r329): [29..30]
 a23(r328): [31..32]
 a24(r379): [34..52]
 a25(r327): [35..36]
 a26(r369): [38..54]
 a27(r326): [39..40]
 a28(r359): [42..56]
 a29(r325): [43..44]
 a30(r349): [46..58]
 a31(r332): [48..51]
 a32(r335): [50..79]
 a33(r381): [53..60]
 a34(r375): [53..65]
 a35(r371): [55..61]
 a36(r365): [55..68]
 a37(r361): [57..62]
 a38(r355): [57..71]
 a39(r351): [59..63]
 a40(r345): [59..74]
 a41(r376): [66..67]
 a42(r366): [69..70]
 a43(r356): [72..73]
 a44(r346): [75..76]
 a45(r322): [78..81]
 a46(r321): [84..85]
 a47(r319): [90..91]
 a48(r320): [92..96]
 a49(r314): [93..94]
 a50(r158): [95..99]
 a51(r318): [97..98]
 a52(r159): [100..101]
 a53(r185): [432..432] [423..427] [422..422] [405..411] [102..129]
 a54(r184): [430..432] [423..425] [420..422] [405..409] [103..130]
 a55(r312): [104..105]
 a56(r383): [106..107]
 a57(r157): [423..423] [108..109]
 a58(r290): [110..115]
 a59(r384): [423..428] [165..188] [108..111]
 a60(r288): [112..116]
 a61(r289): [112..113]
 a62(r385): [423..428] [165..188] [108..114]
 a63(r188): [405..413] [117..118]
 a64(r387): [405..417] [117..131]
 a65(r269): [119..134]
 a66(r274): [119..120]
 a67(r273): [121..125]
 a68(r272): [121..126]
 a69(r189): [405..415] [117..122]
 a70(r276): [123..124]
 a71(r270): [127..128]
 a72(r156): [405..405] [117..133]
 a73(r183): [405..407] [117..132]
 a74(r229): [136..150]
 a75(r231): [136..137]
 a76(r192): [138..146]
 a77(r169): [397..404] [385..396] [379..384] [377..378] [367..376] [353..366] [345..352] [343..344] [218..297] [135..139]
 a78(r232): [140..141]
 a79(r167): [343..343] [135..142]
 a80(r233): [143..145]
 a81(r404): [397..404] [385..396] [379..384] [377..378] [367..376] [353..366] [345..352] [343..344] [218..297] [135..144]
 a82(r406): [397..404] [385..396] [379..384] [377..378] [367..376] [353..366] [345..352] [343..344] [218..297] [135..147]
 a83(r405): [397..404] [385..396] [379..384] [377..378] [367..376] [353..366] [345..352] [343..344] [218..297] [135..148]
 a84(r407): [397..404] [385..396] [379..384] [377..378] [367..376] [353..366] [345..352] [343..344] [218..297] [135..149]
 a85(r193): [152..153]
 a86(r197): [152..154]
 a87(r196): [155..158]
 a88(r415): [337..342] [298..336] [151..156]
 a89(r414): [337..342] [298..336] [151..157]
 a90(r413): [337..342] [298..336] [151..162]
 a91(r194): [159..160]
 a92(r175): [337..339] [151..161]
 a93(r152): [337..337] [151..164]
 a94(r176): [337..341] [151..163]
 a95(r416): [424..428] [165..188]
 a96(r417): [429..429] [426..428] [165..188]
 a97(r418): [429..431] [428..428] [165..188]
 a100(r307): [166..167]
 a101(r136): [166..170]
 a102(r308): [168..169]
 a103(r306): [168..171]
 a104(r180): [172..176]
 a105(r300): [173..174]
 a106(r299): [175..184]
 a107(r296): [177..178]
 a108(r291): [177..180]
 a109(r294): [179..182]
 a110(r292): [181..186]
 a111(r160): [181..187]
 a112(r295): [183..185]
 a113(r419): [406..418] [189..217]
 a114(r420): [408..418] [189..217]
 a115(r421): [419..419] [410..418] [189..217]
 a116(r422): [419..421] [412..418] [189..217]
 a117(r423): [414..418] [189..217]
 a118(r424): [416..418] [189..217]
 a119(r425): [418..418] [189..217]
 a120(r181): [204..217] [190..190]
 a121(r283): [191..194]
 a122(r182): [204..217] [190..192]
 a123(r279): [193..196]
 a124(r281): [195..198]
 a125(r190): [197..200]
 a126(r282): [199..202]
 a127(r155): [201..203]
 a137(r163): [205..206]
 a138(r141): [213..215] [209..212] [207..208]
 a139(r162): [210..211]
 a140(r165): [214..216]
 a141(r426): [404..404] [385..395] [384..384] [378..378] [345..349] [344..344] [218..249]
 a147(r267): [219..220]
 a148(r268): [221..222]
 a149(r266): [221..223]
 a150(r262): [224..225]
 a151(r137): [398..404] [385..385] [226..232]
 a152(r261): [226..227]
 a153(r142): [400..404] [385..387] [228..231]
 a154(r148): [402..404] [385..391] [382..384] [345..347] [228..243]
 a155(r154): [385..393] [229..230]
 a156(r145): [385..389] [380..384] [345..345] [229..234]
 a157(r149): [235..236]
 a158(r236): [237..238]
 a159(r237): [239..241]
 a160(r168): [345..351] [233..240]
 a161(r170): [242..248]
 a162(r234): [244..245]
 a163(r235): [246..247]
 a164(r427): [397..397] [386..396] [250..255]
 a165(r428): [397..399] [388..396] [250..255]
 a166(r429): [390..396] [250..255]
 a167(r430): [397..401] [392..396] [250..255]
 a168(r431): [394..396] [250..255]
 a169(r432): [397..403] [396..396] [250..255]
 a175(r173): [251..252]
 a176(r258): [253..254]
 a177(r433): [379..379] [372..376] [353..359] [346..352] [268..291] [256..262]
 a178(r434): [379..381] [374..376] [353..361] [348..352] [256..291]
 a179(r435): [379..383] [377..377] [367..376] [353..366] [350..352] [256..297]
 a180(r436): [376..376] [353..365] [352..352] [256..291]
 a186(r254): [257..258]
 a187(r255): [259..260]
 a188(r253): [259..261]
 a189(r139): [368..376] [353..353] [263..277]
 a190(r249): [264..265]
 a191(r144): [370..376] [353..357] [266..270]
 a192(r248): [266..267]
 a193(r166): [367..376] [353..366] [292..297] [268..272]
 a194(r153): [353..363] [269..271]
 a195(r140): [353..355] [269..273]
 a196(r138): [274..275]
 a197(r147): [276..279]
 a198(r146): [278..281]
 a199(r171): [280..290]
 a200(r241): [282..283]
 a201(r242): [284..285]
 a202(r239): [286..287]
 a203(r240): [288..289]
 a204(r437): [367..367] [354..366] [292..297]
 a205(r438): [356..366] [292..297]
 a206(r439): [367..369] [358..366] [292..297]
 a207(r440): [367..371] [360..366] [292..297]
 a208(r441): [367..373] [362..366] [292..297]
 a209(r442): [364..366] [292..297]
 a212(r443): [367..375] [366..366] [292..297]
 a218(r172): [293..294]
 a219(r245): [295..296]
 a220(r444): [338..342] [298..336]
 a221(r445): [340..342] [327..336] [298..302]
 a222(r446): [342..342] [298..336]
 a226(r228): [299..300]
 a227(r151): [311..336] [298..301]
 a228(r224): [303..304]
 a229(r225): [305..306]
 a230(r223): [307..308]
 a231(r220): [309..310]
 a232(r177): [312..316]
 a233(r178): [313..314]
 a234(r212): [315..318]
 a235(r217): [317..320]
 a236(r213): [319..322]
 a237(r216): [321..324]
 a238(r211): [323..326]
 a239(r179): [325..328]
 a240(r150): [325..329]
 a241(r201): [330..331]
 a242(r174): [332..333]
 a243(r200): [334..335]
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 62 count 123 (  2.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 45 n_edges 62 count 142 (  3.2)
      Secondary allocation: assign hard reg 3 to reg 435
      Secondary allocation: assign hard reg 2 to reg 440
+++Costs: overall 374750, reg 74750, mem 300000, ld 30000, st 20000, move 86000
+++       move loops 0, new jumps 8
insn=14, live_throughout: 13, dead_or_set: 152
insn=15, live_throughout: 13, 152, dead_or_set: 176
insn=74, live_throughout: 13, 152, 176, dead_or_set: 413
insn=16, live_throughout: 13, 152, 176, 413, dead_or_set: 175
insn=583, live_throughout: 13, 152, 175, 176, 413, dead_or_set: 194
insn=10, live_throughout: 13, 152, 175, 176, 413, dead_or_set: 194, 196
insn=21, live_throughout: 13, 152, 175, 176, 196, 413, dead_or_set: 414
insn=39, live_throughout: 13, 152, 175, 176, 196, 413, 414, dead_or_set: 415
insn=12, live_throughout: 13, 152, 175, 176, 413, 414, 415, dead_or_set: 196, 197
insn=582, live_throughout: 13, 152, 175, 176, 197, 413, 414, 415, dead_or_set: 193
insn=13, live_throughout: 13, 152, 175, 176, 413, 414, 415, dead_or_set: 193, 197
insn=584, live_throughout: 13, 175, 176, 413, 414, 415, dead_or_set: 152, 444
insn=585, live_throughout: 13, 176, 413, 414, 415, 444, dead_or_set: 175, 445
insn=586, live_throughout: 13, 413, 414, 415, 444, 445, dead_or_set: 176, 446
insn=525, live_throughout: 13, 413, 414, 415, 444, 445, 446, dead_or_set: 
insn=73, live_throughout: 13, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 
insn=23, live_throughout: 13, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 200
insn=24, live_throughout: 13, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 174, 200
insn=25, live_throughout: 13, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 174, 201
insn=26, live_throughout: 13, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 150, 201
insn=36, live_throughout: 13, 150, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 
insn=37, live_throughout: 13, 150, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 
insn=40, live_throughout: 13, 150, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 179
insn=42, live_throughout: 13, 150, 151, 179, 413, 414, 415, 444, 446, dead_or_set: 211, 445
insn=48, live_throughout: 13, 151, 211, 413, 414, 415, 444, 446, dead_or_set: 150, 179, 216
insn=43, live_throughout: 13, 151, 216, 413, 414, 415, 444, 446, dead_or_set: 211, 213
insn=49, live_throughout: 13, 151, 213, 413, 414, 415, 444, 446, dead_or_set: 216, 217
insn=44, live_throughout: 13, 151, 217, 413, 414, 415, 444, 446, dead_or_set: 212, 213
insn=555, live_throughout: 13, 151, 212, 413, 414, 415, 444, 446, dead_or_set: 177, 217
insn=553, live_throughout: 13, 151, 177, 413, 414, 415, 444, 446, dead_or_set: 178, 212
insn=556, live_throughout: 13, 151, 178, 413, 414, 415, 444, 446, dead_or_set: 177
insn=554, live_throughout: 13, 151, 177, 413, 414, 415, 444, 446, dead_or_set: 178
insn=52, live_throughout: 13, 151, 177, 178, 413, 414, 415, 444, 446, dead_or_set: 
insn=53, live_throughout: 13, 151, 177, 178, 413, 414, 415, 444, 446, dead_or_set: 
insn=56, live_throughout: 13, 151, 177, 413, 414, 415, 444, 446, dead_or_set: 0, 178
insn=57, live_throughout: 0, 13, 151, 413, 414, 415, 444, 446, dead_or_set: 1, 177
insn=58, live_throughout: 13, 151, 413, 414, 415, 444, 446, dead_or_set: 0, 1, 14
insn=59, live_throughout: 13, 151, 413, 414, 415, 444, 446, dead_or_set: 
insn=63, live_throughout: 13, 413, 414, 415, 444, 446, dead_or_set: 151, 220
insn=64, live_throughout: 13, 413, 414, 415, 444, 446, dead_or_set: 220, 223
insn=65, live_throughout: 13, 413, 414, 415, 444, 446, dead_or_set: 223, 225
insn=66, live_throughout: 13, 413, 414, 415, 444, 446, dead_or_set: 224, 225
insn=551, live_throughout: 13, 413, 414, 415, 444, 446, dead_or_set: 224, 445
insn=552, live_throughout: 13, 413, 414, 415, 444, 446, dead_or_set: 445
insn=71, live_throughout: 13, 413, 414, 415, 444, 445, 446, dead_or_set: 
insn=22, live_throughout: 13, 413, 414, 415, 444, 445, 446, dead_or_set: 151
insn=75, live_throughout: 13, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 228
insn=70, live_throughout: 13, 151, 228, 413, 414, 415, 445, 446, dead_or_set: 444
insn=76, live_throughout: 13, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 228
insn=69, live_throughout: 13, 24, 151, 413, 414, 415, 444, 445, dead_or_set: 446
insn=77, live_throughout: 13, 151, 413, 414, 415, 444, 445, 446, dead_or_set: 
insn=79, live_throughout: 13, dead_or_set: 229
insn=138, live_throughout: 13, 229, dead_or_set: 407
insn=125, live_throughout: 13, 229, 407, dead_or_set: 405
insn=132, live_throughout: 13, 229, 405, 407, dead_or_set: 406
insn=80, live_throughout: 13, 229, 405, 406, 407, dead_or_set: 192
insn=81, live_throughout: 13, 192, 229, 405, 406, 407, dead_or_set: 0, 14
insn=88, live_throughout: 0, 13, 192, 229, 405, 406, 407, dead_or_set: 233
insn=216, live_throughout: 0, 13, 192, 229, 233, 405, 406, 407, dead_or_set: 404
insn=89, live_throughout: 0, 13, 192, 229, 404, 405, 406, 407, dead_or_set: 167, 233
insn=581, live_throughout: 0, 13, 167, 192, 229, 404, 405, 406, 407, dead_or_set: 232
insn=87, live_throughout: 0, 13, 167, 192, 229, 404, 405, 406, 407, dead_or_set: 169, 232
insn=84, live_throughout: 13, 167, 169, 229, 404, 405, 406, 407, dead_or_set: 0, 192, 231
insn=85, live_throughout: 13, 167, 169, 404, 405, 406, 407, dead_or_set: 229, 231
insn=587, live_throughout: 13, 169, 404, 405, 406, 407, dead_or_set: 167, 426
insn=527, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 
insn=215, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 
insn=93, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 170
insn=94, live_throughout: 13, 169, 170, 404, 405, 406, 407, 426, dead_or_set: 235
insn=95, live_throughout: 13, 169, 170, 404, 405, 406, 407, 426, dead_or_set: 234, 235
insn=96, live_throughout: 13, 169, 170, 404, 405, 406, 407, 426, dead_or_set: 148, 234
insn=97, live_throughout: 13, 148, 169, 170, 404, 405, 406, 407, 426, dead_or_set: 
insn=98, live_throughout: 13, 148, 169, 170, 404, 405, 406, 407, 426, dead_or_set: 
insn=100, live_throughout: 13, 148, 169, 404, 405, 406, 407, 426, dead_or_set: 170, 237
insn=105, live_throughout: 13, 148, 169, 237, 404, 405, 406, 407, 426, dead_or_set: 168
insn=101, live_throughout: 13, 148, 168, 169, 404, 405, 406, 407, 426, dead_or_set: 236, 237
insn=102, live_throughout: 13, 148, 168, 169, 404, 405, 406, 407, 426, dead_or_set: 149, 236
insn=103, live_throughout: 13, 148, 168, 169, 404, 405, 406, 407, 426, dead_or_set: 145, 149
insn=588, live_throughout: 13, 148, 168, 169, 404, 405, 406, 407, 426, dead_or_set: 145, 433
insn=589, live_throughout: 13, 168, 169, 404, 405, 406, 407, 426, 433, dead_or_set: 148, 434
insn=590, live_throughout: 13, 168, 169, 404, 405, 406, 407, 433, 434, dead_or_set: 426, 435
insn=591, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, dead_or_set: 168, 436
insn=529, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 
insn=166, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 
insn=109, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 171
insn=110, live_throughout: 13, 169, 171, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 240
insn=111, live_throughout: 13, 169, 171, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 239, 240
insn=112, live_throughout: 13, 169, 171, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 239, 242
insn=113, live_throughout: 13, 169, 171, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 241, 242
insn=114, live_throughout: 13, 169, 171, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 146, 241
insn=115, live_throughout: 13, 146, 169, 171, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 
insn=116, live_throughout: 13, 146, 169, 171, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 
insn=118, live_throughout: 13, 146, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 147, 171
insn=121, live_throughout: 13, 147, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 139, 146
insn=119, live_throughout: 13, 139, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 138, 147
insn=120, live_throughout: 13, 139, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 138, 140
insn=122, live_throughout: 13, 139, 140, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 
insn=123, live_throughout: 13, 139, 140, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 
insn=126, live_throughout: 13, 139, 140, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 166
insn=127, live_throughout: 13, 139, 140, 166, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 153
insn=128, live_throughout: 13, 139, 140, 153, 166, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 144
insn=592, live_throughout: 13, 140, 144, 153, 166, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 139, 437
insn=593, live_throughout: 13, 144, 153, 166, 169, 404, 405, 406, 407, 433, 434, 435, 436, 437, dead_or_set: 140, 438
insn=594, live_throughout: 13, 153, 166, 169, 404, 405, 406, 407, 433, 434, 435, 436, 437, 438, dead_or_set: 144, 439
insn=595, live_throughout: 13, 153, 166, 169, 404, 405, 406, 407, 434, 435, 436, 437, 438, 439, dead_or_set: 433, 440
insn=596, live_throughout: 13, 153, 166, 169, 404, 405, 406, 407, 435, 436, 437, 438, 439, 440, dead_or_set: 434, 441
insn=597, live_throughout: 13, 166, 169, 404, 405, 406, 407, 435, 436, 437, 438, 439, 440, 441, dead_or_set: 153, 442
insn=598, live_throughout: 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, dead_or_set: 436, 443
insn=531, live_throughout: 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 
insn=147, live_throughout: 0, 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 
insn=133, live_throughout: 0, 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 245
insn=143, live_throughout: 0, 13, 166, 169, 245, 404, 405, 406, 407, 435, 437, 438, 440, 441, 442, 443, dead_or_set: 439
insn=134, live_throughout: 0, 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 172, 245
insn=144, live_throughout: 0, 13, 166, 169, 172, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 443, dead_or_set: 442
insn=136, live_throughout: 0, 13, 166, 169, 172, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 1
insn=137, live_throughout: 13, 166, 169, 172, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 0, 1, 14
insn=139, live_throughout: 13, 166, 169, 172, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 
insn=140, live_throughout: 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 0, 172
insn=493, live_throughout: 0, 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 1
insn=142, live_throughout: 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 0, 1, 14
insn=145, live_throughout: 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 
insn=491, live_throughout: 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 0
insn=148, live_throughout: 0, 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 
insn=149, live_throughout: 0, 13, 166, 169, 404, 405, 406, 407, 435, 437, 438, 439, 440, 441, 442, 443, dead_or_set: 
insn=599, live_throughout: 13, 166, 169, 404, 405, 406, 407, 435, 439, 440, 441, 443, dead_or_set: 139, 437
insn=600, live_throughout: 13, 139, 166, 169, 404, 405, 406, 407, 435, 440, 441, 443, dead_or_set: 144, 439
insn=601, live_throughout: 13, 139, 144, 166, 169, 404, 405, 406, 407, 435, 441, 443, dead_or_set: 433, 440
insn=602, live_throughout: 13, 139, 144, 166, 169, 404, 405, 406, 407, 433, 435, 443, dead_or_set: 434, 441
insn=603, live_throughout: 13, 139, 144, 166, 169, 404, 405, 406, 407, 433, 434, 435, dead_or_set: 436, 443
insn=152, live_throughout: 13, 139, 144, 169, 404, 405, 406, 407, 434, 435, 436, dead_or_set: 166, 248, 433
insn=153, live_throughout: 13, 139, 169, 404, 405, 406, 407, 434, 435, 436, dead_or_set: 144, 248, 249
insn=154, live_throughout: 13, 139, 169, 404, 405, 406, 407, 434, 435, 436, dead_or_set: 249
insn=155, live_throughout: 13, 139, 169, 404, 405, 406, 407, 434, 435, 436, dead_or_set: 
insn=157, live_throughout: 13, 139, 169, 404, 405, 406, 407, 434, 435, 436, dead_or_set: 
insn=158, live_throughout: 13, 139, 169, 404, 405, 406, 407, 434, 435, 436, dead_or_set: 
insn=160, live_throughout: 13, 169, 404, 405, 406, 407, 434, 435, 436, dead_or_set: 139, 433
insn=161, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 
insn=163, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, dead_or_set: 436
insn=164, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 
insn=169, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 253
insn=171, live_throughout: 13, 169, 253, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 255
insn=172, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 253, 254, 255
insn=173, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 254
insn=174, live_throughout: 13, 169, 404, 405, 406, 407, 433, 434, 435, 436, dead_or_set: 
insn=605, live_throughout: 13, 169, 404, 405, 406, 407, 434, 435, dead_or_set: 145, 433
insn=606, live_throughout: 13, 145, 169, 404, 405, 406, 407, 435, dead_or_set: 148, 434
insn=607, live_throughout: 13, 145, 148, 169, 404, 405, 406, 407, dead_or_set: 426, 435
insn=178, live_throughout: 13, 145, 148, 169, 404, 405, 406, 407, 426, dead_or_set: 
insn=176, live_throughout: 13, 24, 145, 148, 169, 404, 405, 406, 407, 426, dead_or_set: 137
insn=179, live_throughout: 13, 137, 145, 148, 169, 404, 405, 406, 407, 426, dead_or_set: 
insn=182, live_throughout: 13, 137, 145, 148, 169, 404, 405, 406, 407, 426, dead_or_set: 142
insn=183, live_throughout: 13, 137, 142, 145, 148, 169, 404, 405, 406, 407, 426, dead_or_set: 154
insn=608, live_throughout: 13, 142, 145, 148, 154, 169, 404, 405, 406, 407, 426, dead_or_set: 137, 427
insn=609, live_throughout: 13, 145, 148, 154, 169, 404, 405, 406, 407, 426, 427, dead_or_set: 142, 428
insn=610, live_throughout: 13, 148, 154, 169, 404, 405, 406, 407, 426, 427, 428, dead_or_set: 145, 429
insn=611, live_throughout: 13, 154, 169, 404, 405, 406, 407, 426, 427, 428, 429, dead_or_set: 148, 430
insn=612, live_throughout: 13, 169, 404, 405, 406, 407, 426, 427, 428, 429, 430, dead_or_set: 154, 431
insn=613, live_throughout: 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, dead_or_set: 426, 432
insn=533, live_throughout: 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 
insn=202, live_throughout: 0, 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 
insn=188, live_throughout: 0, 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 258
insn=189, live_throughout: 0, 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 173, 258
insn=199, live_throughout: 0, 13, 169, 173, 404, 405, 406, 407, 427, 428, 429, 430, 432, dead_or_set: 431
insn=191, live_throughout: 0, 13, 169, 173, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 1
insn=192, live_throughout: 13, 169, 173, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 0, 1, 14
insn=194, live_throughout: 13, 169, 173, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 
insn=195, live_throughout: 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 0, 173
insn=489, live_throughout: 0, 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 1
insn=197, live_throughout: 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 0, 1, 14
insn=200, live_throughout: 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 
insn=487, live_throughout: 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 0
insn=203, live_throughout: 0, 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 
insn=198, live_throughout: 0, 13, 24, 169, 404, 405, 406, 407, 427, 428, 430, 431, 432, dead_or_set: 429
insn=204, live_throughout: 0, 13, 169, 404, 405, 406, 407, 427, 428, 429, 430, 431, 432, dead_or_set: 
insn=614, live_throughout: 13, 169, 404, 405, 406, 407, 428, 430, 432, dead_or_set: 137, 427
insn=615, live_throughout: 13, 137, 169, 404, 405, 406, 407, 430, 432, dead_or_set: 142, 428
insn=616, live_throughout: 13, 137, 142, 169, 404, 405, 406, 407, 432, dead_or_set: 148, 430
insn=617, live_throughout: 13, 137, 142, 148, 169, 404, 405, 406, 407, dead_or_set: 426, 432
insn=207, live_throughout: 13, 137, 169, 404, 405, 406, 407, 426, dead_or_set: 142, 148, 261
insn=208, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 137, 261, 262
insn=209, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 262
insn=632, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 
insn=635, live_throughout: 13, 169, 404, 405, 406, 407, 435, dead_or_set: 
insn=604, live_throughout: 13, 169, 404, 405, 406, 407, dead_or_set: 426, 435
insn=210, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 
insn=212, live_throughout: 13, 169, 404, 405, 406, 407, dead_or_set: 426
insn=213, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 
insn=218, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 266
insn=220, live_throughout: 13, 169, 266, 404, 405, 406, 407, 426, dead_or_set: 268
insn=221, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 266, 267, 268
insn=222, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 267
insn=223, live_throughout: 13, 169, 404, 405, 406, 407, 426, dead_or_set: 
insn=225, live_throughout: 13, dead_or_set: 269
insn=236, live_throughout: 13, 269, dead_or_set: 156
insn=237, live_throughout: 13, 156, 269, dead_or_set: 183
insn=524, live_throughout: 13, 156, 183, 269, dead_or_set: 387
insn=238, live_throughout: 13, 156, 183, 269, 387, dead_or_set: 184
insn=239, live_throughout: 13, 156, 183, 184, 269, 387, dead_or_set: 185
insn=580, live_throughout: 13, 156, 183, 184, 185, 269, 387, dead_or_set: 270
insn=228, live_throughout: 13, 156, 183, 184, 185, 269, 387, dead_or_set: 270, 272
insn=229, live_throughout: 13, 156, 183, 184, 185, 269, 272, 387, dead_or_set: 273
insn=579, live_throughout: 13, 156, 183, 184, 185, 269, 272, 273, 387, dead_or_set: 276
insn=235, live_throughout: 13, 156, 183, 184, 185, 269, 272, 273, 387, dead_or_set: 189, 276
insn=230, live_throughout: 13, 156, 183, 184, 185, 189, 269, 387, dead_or_set: 272, 273, 274
insn=231, live_throughout: 13, 156, 183, 184, 185, 189, 387, dead_or_set: 269, 274
insn=233, live_throughout: 13, 156, 183, 184, 185, 189, dead_or_set: 188, 387
insn=618, live_throughout: 13, 183, 184, 185, 188, 189, 387, dead_or_set: 156, 419
insn=619, live_throughout: 13, 184, 185, 188, 189, 387, 419, dead_or_set: 183, 420
insn=620, live_throughout: 13, 185, 188, 189, 387, 419, 420, dead_or_set: 184, 421
insn=621, live_throughout: 13, 188, 189, 387, 419, 420, 421, dead_or_set: 185, 422
insn=622, live_throughout: 13, 189, 387, 419, 420, 421, 422, dead_or_set: 188, 423
insn=623, live_throughout: 13, 387, 419, 420, 421, 422, 423, dead_or_set: 189, 424
insn=624, live_throughout: 13, 419, 420, 421, 422, 423, 424, dead_or_set: 387, 425
insn=535, live_throughout: 13, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=297, live_throughout: 13, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=245, live_throughout: 13, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 155
insn=250, live_throughout: 13, 155, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 282
insn=246, live_throughout: 13, 282, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 155, 190
insn=251, live_throughout: 13, 190, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 281, 282
insn=247, live_throughout: 13, 281, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 190, 279
insn=252, live_throughout: 13, 279, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 281, 283
insn=249, live_throughout: 13, 283, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 182, 279
insn=254, live_throughout: 13, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 181, 283
insn=289, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=257, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 165
insn=272, live_throughout: 13, 165, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 141
insn=259, live_throughout: 13, 141, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 165
insn=260, live_throughout: 13, 141, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=262, live_throughout: 13, 181, 182, 419, 420, 421, 423, 424, 425, dead_or_set: 422
insn=537, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=265, live_throughout: 13, 141, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=267, live_throughout: 13, 141, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 162
insn=269, live_throughout: 13, 141, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 162
insn=270, live_throughout: 13, 141, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=539, live_throughout: 13, 141, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=275, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=277, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 141
insn=278, live_throughout: 13, 141, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=281, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 141, 163
insn=282, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 163
insn=283, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=285, live_throughout: 13, 181, 182, 419, 420, 422, 423, 424, 425, dead_or_set: 421
insn=286, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=288, live_throughout: 13, 181, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 182
insn=290, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=291, live_throughout: 13, 181, 182, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=293, live_throughout: 13, 419, 421, 422, 423, 424, 425, dead_or_set: 420
insn=294, live_throughout: 13, 420, 421, 422, 423, 424, 425, dead_or_set: 419
insn=295, live_throughout: 13, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=298, live_throughout: 13, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=299, live_throughout: 13, 419, 420, 421, 422, 423, 424, 425, dead_or_set: 
insn=625, live_throughout: 13, 422, dead_or_set: 184, 421
insn=626, live_throughout: 13, 184, dead_or_set: 185, 422
insn=302, live_throughout: 13, 184, 185, dead_or_set: 0
insn=303, live_throughout: 13, 184, 185, dead_or_set: 0, 14
insn=304, live_throughout: 13, 184, 185, dead_or_set: 288
insn=307, live_throughout: 13, 184, 185, 288, dead_or_set: 290
insn=478, live_throughout: 13, 184, 185, 288, 290, dead_or_set: 385
insn=578, live_throughout: 13, 184, 185, 288, 290, 385, dead_or_set: 289
insn=306, live_throughout: 13, 184, 185, 290, 385, dead_or_set: 288, 289
insn=335, live_throughout: 13, 184, 185, 290, 385, dead_or_set: 384
insn=308, live_throughout: 13, 184, 185, 384, 385, dead_or_set: 157, 290
insn=627, live_throughout: 13, 184, 185, 384, 385, dead_or_set: 157, 416
insn=628, live_throughout: 13, 185, 384, 385, 416, dead_or_set: 184, 417
insn=629, live_throughout: 13, 384, 385, 416, 417, dead_or_set: 185, 418
insn=541, live_throughout: 13, 384, 385, 416, 417, 418, dead_or_set: 
insn=334, live_throughout: 13, 384, 385, 416, 417, 418, dead_or_set: 
insn=312, live_throughout: 13, 384, 385, 416, 417, 418, dead_or_set: 160
insn=313, live_throughout: 13, 160, 384, 385, 416, 417, 418, dead_or_set: 292
insn=316, live_throughout: 13, 160, 292, 384, 385, 416, 417, 418, dead_or_set: 295
insn=322, live_throughout: 13, 160, 292, 295, 384, 385, 416, 417, 418, dead_or_set: 299
insn=317, live_throughout: 13, 160, 292, 299, 384, 385, 416, 417, 418, dead_or_set: 294, 295
insn=314, live_throughout: 13, 294, 299, 384, 385, 416, 417, 418, dead_or_set: 160, 291, 292
insn=484, live_throughout: 13, 291, 294, 299, 384, 385, 416, 417, 418, dead_or_set: 0
insn=318, live_throughout: 0, 13, 291, 299, 384, 385, 416, 417, 418, dead_or_set: 294, 296
insn=319, live_throughout: 0, 13, 299, 384, 385, 416, 417, 418, dead_or_set: 180, 291, 296
insn=323, live_throughout: 0, 13, 180, 384, 385, 416, 417, 418, dead_or_set: 299, 300
insn=324, live_throughout: 0, 13, 180, 384, 385, 416, 417, 418, dead_or_set: 300
insn=328, live_throughout: 0, 13, 384, 385, 416, 417, 418, dead_or_set: 1, 180
insn=329, live_throughout: 13, 384, 385, 416, 417, 418, dead_or_set: 0, 1, 14
insn=330, live_throughout: 13, 384, 385, 416, 417, 418, dead_or_set: 
insn=337, live_throughout: 13, 384, 385, 416, 417, 418, dead_or_set: 306
insn=332, live_throughout: 13, 306, 384, 385, 416, 417, 418, dead_or_set: 136
insn=339, live_throughout: 13, 136, 306, 384, 385, 416, 417, 418, dead_or_set: 308
insn=333, live_throughout: 13, 136, 306, 308, 384, 385, 417, 418, dead_or_set: 416
insn=340, live_throughout: 13, 136, 384, 385, 416, 417, 418, dead_or_set: 306, 307, 308
insn=341, live_throughout: 13, 384, 385, 416, 417, 418, dead_or_set: 136, 307
insn=342, live_throughout: 13, 384, 385, 416, 417, 418, dead_or_set: 
insn=630, live_throughout: 13, 418, dead_or_set: 184, 417
insn=631, live_throughout: 13, 184, dead_or_set: 185, 418
insn=577, live_throughout: 13, 184, 185, dead_or_set: 383
insn=346, live_throughout: 13, 184, 185, dead_or_set: 312, 383
insn=348, live_throughout: 13, 184, 185, 312, dead_or_set: 0
insn=349, live_throughout: 0, 13, 184, 185, dead_or_set: 1, 312
insn=350, live_throughout: 13, 184, 185, dead_or_set: 0, 1, 14
insn=364, live_throughout: 13, 185, dead_or_set: 2, 184
insn=365, live_throughout: 2, 13, dead_or_set: 3, 185
insn=362, live_throughout: 2, 3, 13, dead_or_set: 0
insn=576, live_throughout: 0, 2, 3, 13, dead_or_set: 159
insn=352, live_throughout: 0, 2, 3, 13, dead_or_set: 158, 159
insn=575, live_throughout: 0, 2, 3, 13, 158, dead_or_set: 318
insn=359, live_throughout: 0, 2, 3, 13, 158, dead_or_set: 318, 320
insn=354, live_throughout: 0, 2, 3, 13, 320, dead_or_set: 158, 314
insn=363, live_throughout: 0, 2, 3, 13, 320, dead_or_set: 1, 314
insn=360, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 319, 320
insn=361, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 319
insn=366, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=468, live_throughout: 13, dead_or_set: 3
insn=409, live_throughout: 3, 13, dead_or_set: 343
insn=383, live_throughout: 3, 13, 343, dead_or_set: 330
insn=423, live_throughout: 3, 13, 330, 343, dead_or_set: 353
insn=391, live_throughout: 3, 13, 330, 343, 353, dead_or_set: 334
insn=574, live_throughout: 3, 13, 330, 334, 343, 353, dead_or_set: 321
insn=368, live_throughout: 3, 13, 330, 334, 343, 353, dead_or_set: 187, 321
insn=437, live_throughout: 3, 13, 187, 330, 334, 343, 353, dead_or_set: 363
insn=369, live_throughout: 3, 13, 187, 330, 334, 343, 353, 363, dead_or_set: 322
insn=451, live_throughout: 3, 13, 187, 322, 330, 334, 343, 353, 363, dead_or_set: 373
insn=394, live_throughout: 3, 13, 187, 322, 330, 334, 343, 353, 363, 373, dead_or_set: 335
insn=543, live_throughout: 3, 13, 187, 330, 334, 335, 343, 353, 363, 373, dead_or_set: 186, 322
insn=573, live_throughout: 3, 13, 186, 187, 330, 334, 335, 343, 353, 363, 373, dead_or_set: 346
insn=415, live_throughout: 3, 13, 186, 187, 330, 334, 335, 343, 353, 363, 373, dead_or_set: 345, 346
insn=572, live_throughout: 3, 13, 186, 187, 330, 334, 335, 343, 345, 353, 363, 373, dead_or_set: 356
insn=429, live_throughout: 3, 13, 186, 187, 330, 334, 335, 343, 345, 353, 363, 373, dead_or_set: 355, 356
insn=571, live_throughout: 3, 13, 186, 187, 330, 334, 335, 343, 345, 353, 355, 363, 373, dead_or_set: 366
insn=443, live_throughout: 3, 13, 186, 187, 330, 334, 335, 343, 345, 353, 355, 363, 373, dead_or_set: 365, 366
insn=544, live_throughout: 3, 13, 187, 330, 334, 335, 343, 345, 353, 355, 363, 365, 373, dead_or_set: 186
insn=570, live_throughout: 3, 13, 186, 187, 330, 334, 335, 343, 345, 353, 355, 363, 365, 373, dead_or_set: 376
insn=457, live_throughout: 3, 13, 186, 187, 330, 334, 335, 343, 345, 353, 355, 363, 365, 373, dead_or_set: 375, 376
insn=397, live_throughout: 3, 13, 186, 187, 330, 334, 335, 343, 345, 353, 355, 363, 365, 373, 375, dead_or_set: 337
insn=417, live_throughout: 3, 13, 186, 187, 330, 334, 335, 337, 343, 345, 353, 355, 363, 365, 373, 375, dead_or_set: 351
insn=431, live_throughout: 3, 13, 186, 187, 330, 334, 335, 337, 343, 345, 351, 353, 355, 363, 365, 373, 375, dead_or_set: 361
insn=445, live_throughout: 3, 13, 186, 187, 330, 334, 335, 337, 343, 345, 351, 353, 355, 361, 363, 365, 373, 375, dead_or_set: 371
insn=459, live_throughout: 3, 13, 186, 187, 330, 334, 335, 337, 343, 345, 351, 353, 355, 361, 363, 365, 371, 373, 375, dead_or_set: 381
insn=420, live_throughout: 3, 13, 186, 187, 330, 334, 335, 337, 343, 353, 355, 361, 363, 365, 371, 373, 375, 381, dead_or_set: 345, 349, 351
insn=434, live_throughout: 3, 13, 186, 187, 330, 334, 335, 337, 343, 349, 353, 363, 365, 371, 373, 375, 381, dead_or_set: 355, 359, 361
insn=448, live_throughout: 3, 13, 186, 187, 330, 334, 335, 337, 343, 349, 353, 359, 363, 373, 375, 381, dead_or_set: 365, 369, 371
insn=462, live_throughout: 3, 13, 186, 187, 330, 334, 335, 337, 343, 349, 353, 359, 363, 369, 373, dead_or_set: 375, 379, 381
insn=388, live_throughout: 3, 13, 186, 187, 330, 334, 335, 337, 343, 349, 353, 359, 363, 369, 373, 379, dead_or_set: 332
insn=465, live_throughout: 3, 13, 186, 187, 330, 332, 334, 335, 337, 343, 349, 353, 359, 363, 369, 373, 379, dead_or_set: 0
insn=395, live_throughout: 0, 3, 13, 186, 187, 330, 332, 334, 337, 343, 349, 353, 359, 363, 369, 373, 379, dead_or_set: 335, 336
insn=466, live_throughout: 0, 3, 13, 186, 187, 330, 332, 334, 336, 337, 343, 349, 353, 359, 363, 369, 373, 379, dead_or_set: 1
insn=389, live_throughout: 0, 1, 3, 13, 186, 187, 330, 334, 336, 337, 343, 349, 353, 359, 363, 369, 373, 379, dead_or_set: 332, 333
insn=467, live_throughout: 0, 1, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 349, 353, 359, 363, 369, 373, 379, dead_or_set: 2
insn=421, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 353, 359, 363, 369, 373, 379, dead_or_set: 349, 352
insn=569, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 359, 363, 369, 373, 379, dead_or_set: 325
insn=374, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 359, 363, 369, 373, 379, dead_or_set: 325
insn=435, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 363, 369, 373, 379, dead_or_set: 359, 362
insn=568, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 369, 373, 379, dead_or_set: 326
insn=376, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 369, 373, 379, dead_or_set: 326
insn=449, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 373, 379, dead_or_set: 369, 372
insn=567, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, 379, dead_or_set: 327
insn=378, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, 379, dead_or_set: 327
insn=463, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, dead_or_set: 379, 382
insn=566, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 328
insn=380, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 328
insn=565, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 329
insn=382, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 329
insn=564, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 331
insn=387, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 333, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 331
insn=390, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 336, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 333
insn=396, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 336
insn=400, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 
insn=563, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 339
insn=402, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 339
insn=562, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 340
insn=404, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 340
insn=406, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 
insn=408, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 
insn=561, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 344
insn=412, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 352, 353, 362, 363, 372, 373, 382, dead_or_set: 344
insn=422, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 362, 363, 372, 373, 382, dead_or_set: 352
insn=560, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 362, 363, 372, 373, 382, dead_or_set: 354
insn=426, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 362, 363, 372, 373, 382, dead_or_set: 354
insn=436, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 363, 372, 373, 382, dead_or_set: 362
insn=559, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 363, 372, 373, 382, dead_or_set: 364
insn=440, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 363, 372, 373, 382, dead_or_set: 364
insn=450, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 363, 373, 382, dead_or_set: 372
insn=558, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 363, 373, 382, dead_or_set: 374
insn=454, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 363, 373, 382, dead_or_set: 374
insn=464, live_throughout: 0, 1, 2, 3, 13, 186, 187, 330, 334, 337, 343, 353, 363, 373, dead_or_set: 382
insn=384, live_throughout: 0, 1, 2, 3, 13, 186, 187, 334, 337, 343, 353, 363, 373, dead_or_set: 330
insn=385, live_throughout: 0, 1, 2, 3, 13, 187, 334, 337, 343, 353, 363, 373, dead_or_set: 186
insn=392, live_throughout: 0, 1, 2, 3, 13, 187, 337, 343, 353, 363, 373, dead_or_set: 334
insn=393, live_throughout: 0, 1, 2, 3, 13, 337, 343, 353, 363, 373, dead_or_set: 187
insn=398, live_throughout: 0, 1, 2, 3, 13, 343, 353, 363, 373, dead_or_set: 337
insn=410, live_throughout: 0, 1, 2, 3, 13, 353, 363, 373, dead_or_set: 343
insn=424, live_throughout: 0, 1, 2, 3, 13, 363, 373, dead_or_set: 353
insn=438, live_throughout: 0, 1, 2, 3, 13, 373, dead_or_set: 363
insn=452, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 373
insn=469, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
init_insns for 159: (insn_list:REG_DEP_TRUE 576 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 312 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 40 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 393 (nil))
init_insns for 193: (insn_list:REG_DEP_TRUE 582 (nil))
init_insns for 194: (insn_list:REG_DEP_TRUE 583 (nil))
init_insns for 200: (insn_list:REG_DEP_TRUE 23 (nil))
init_insns for 228: (insn_list:REG_DEP_TRUE 75 (nil))
init_insns for 229: (insn_list:REG_DEP_TRUE 79 (nil))
init_insns for 231: (insn_list:REG_DEP_TRUE 85 (nil))
init_insns for 232: (insn_list:REG_DEP_TRUE 581 (nil))
init_insns for 233: (insn_list:REG_DEP_TRUE 88 (nil))
init_insns for 235: (insn_list:REG_DEP_TRUE 94 (nil))
init_insns for 240: (insn_list:REG_DEP_TRUE 110 (nil))
init_insns for 245: (insn_list:REG_DEP_TRUE 133 (nil))
init_insns for 249: (insn_list:REG_DEP_TRUE 154 (nil))
init_insns for 253: (insn_list:REG_DEP_TRUE 169 (nil))
init_insns for 255: (insn_list:REG_DEP_TRUE 171 (nil))
init_insns for 258: (insn_list:REG_DEP_TRUE 188 (nil))
init_insns for 262: (insn_list:REG_DEP_TRUE 209 (nil))
init_insns for 266: (insn_list:REG_DEP_TRUE 218 (nil))
init_insns for 268: (insn_list:REG_DEP_TRUE 220 (nil))
init_insns for 269: (insn_list:REG_DEP_TRUE 225 (nil))
init_insns for 270: (insn_list:REG_DEP_TRUE 580 (nil))
init_insns for 273: (insn_list:REG_DEP_TRUE 229 (nil))
init_insns for 274: (insn_list:REG_DEP_TRUE 231 (nil))
init_insns for 276: (insn_list:REG_DEP_TRUE 579 (nil))
init_insns for 288: (insn_list:REG_DEP_TRUE 304 (nil))
init_insns for 289: (insn_list:REG_DEP_TRUE 578 (nil))
init_insns for 290: (insn_list:REG_DEP_TRUE 307 (nil))
init_insns for 292: (insn_list:REG_DEP_TRUE 313 (nil))
init_insns for 299: (insn_list:REG_DEP_TRUE 322 (nil))
init_insns for 300: (insn_list:REG_DEP_TRUE 324 (nil))
init_insns for 306: (insn_list:REG_DEP_TRUE 337 (nil))
init_insns for 308: (insn_list:REG_DEP_TRUE 339 (nil))
init_insns for 318: (insn_list:REG_DEP_TRUE 575 (nil))
init_insns for 319: (insn_list:REG_DEP_TRUE 361 (nil))
init_insns for 321: (insn_list:REG_DEP_TRUE 574 (nil))
init_insns for 325: (insn_list:REG_DEP_TRUE 569 (nil))
init_insns for 326: (insn_list:REG_DEP_TRUE 568 (nil))
init_insns for 327: (insn_list:REG_DEP_TRUE 567 (nil))
init_insns for 328: (insn_list:REG_DEP_TRUE 566 (nil))
init_insns for 329: (insn_list:REG_DEP_TRUE 565 (nil))
init_insns for 330: (insn_list:REG_DEP_TRUE 383 (nil))
init_insns for 331: (insn_list:REG_DEP_TRUE 564 (nil))
init_insns for 333: (insn_list:REG_DEP_TRUE 390 (nil))
init_insns for 334: (insn_list:REG_DEP_TRUE 391 (nil))
init_insns for 336: (insn_list:REG_DEP_TRUE 396 (nil))
init_insns for 337: (insn_list:REG_DEP_TRUE 397 (nil))
init_insns for 339: (insn_list:REG_DEP_TRUE 563 (nil))
init_insns for 340: (insn_list:REG_DEP_TRUE 562 (nil))
init_insns for 343: (insn_list:REG_DEP_TRUE 409 (nil))
init_insns for 344: (insn_list:REG_DEP_TRUE 561 (nil))
init_insns for 346: (insn_list:REG_DEP_TRUE 573 (nil))
init_insns for 352: (insn_list:REG_DEP_TRUE 422 (nil))
init_insns for 353: (insn_list:REG_DEP_TRUE 423 (nil))
init_insns for 354: (insn_list:REG_DEP_TRUE 560 (nil))
init_insns for 356: (insn_list:REG_DEP_TRUE 572 (nil))
init_insns for 362: (insn_list:REG_DEP_TRUE 436 (nil))
init_insns for 363: (insn_list:REG_DEP_TRUE 437 (nil))
init_insns for 364: (insn_list:REG_DEP_TRUE 559 (nil))
init_insns for 366: (insn_list:REG_DEP_TRUE 571 (nil))
init_insns for 372: (insn_list:REG_DEP_TRUE 450 (nil))
init_insns for 373: (insn_list:REG_DEP_TRUE 451 (nil))
init_insns for 374: (insn_list:REG_DEP_TRUE 558 (nil))
init_insns for 376: (insn_list:REG_DEP_TRUE 570 (nil))
init_insns for 382: (insn_list:REG_DEP_TRUE 464 (nil))
init_insns for 383: (insn_list:REG_DEP_TRUE 577 (nil))
init_insns for 384: (insn_list:REG_DEP_TRUE 335 (nil))
init_insns for 385: (insn_list:REG_DEP_TRUE 478 (nil))
init_insns for 404: (insn_list:REG_DEP_TRUE 216 (nil))
init_insns for 405: (insn_list:REG_DEP_TRUE 125 (nil))
init_insns for 406: (insn_list:REG_DEP_TRUE 132 (nil))
init_insns for 407: (insn_list:REG_DEP_TRUE 138 (nil))
init_insns for 413: (insn_list:REG_DEP_TRUE 74 (nil))
init_insns for 414: (insn_list:REG_DEP_TRUE 21 (nil))
init_insns for 415: (insn_list:REG_DEP_TRUE 39 (nil))
      Coalescing spilled allocnos a15r352->a77r169
      Slot 1 (freq,size): a15r352(2000,4) a77r169(3000,4)
      Slot 2 (freq,size): a193r166(2000,4)
      Assigning 166(freq=2000) a new slot 1
      Assigning 169(freq=3000) a new slot 0
changing reg in insn 332
changing reg in insn 341
changing reg in insn 614
changing reg in insn 176
changing reg in insn 608
changing reg in insn 208
changing reg in insn 119
changing reg in insn 120
changing reg in insn 599
changing reg in insn 121
changing reg in insn 592
changing reg in insn 157
changing reg in insn 160
changing reg in insn 120
changing reg in insn 593
changing reg in insn 122
changing reg in insn 277
changing reg in insn 272
changing reg in insn 281
changing reg in insn 615
changing reg in insn 182
changing reg in insn 609
changing reg in insn 207
changing reg in insn 600
changing reg in insn 128
changing reg in insn 594
changing reg in insn 153
changing reg in insn 605
changing reg in insn 103
changing reg in insn 610
changing reg in insn 588
changing reg in insn 183
changing reg in insn 178
changing reg in insn 176
changing reg in insn 114
changing reg in insn 115
changing reg in insn 121
changing reg in insn 118
changing reg in insn 119
changing reg in insn 616
changing reg in insn 606
changing reg in insn 96
changing reg in insn 611
changing reg in insn 589
changing reg in insn 178
changing reg in insn 207
changing reg in insn 97
changing reg in insn 102
changing reg in insn 103
changing reg in insn 26
changing reg in insn 36
changing reg in insn 48
changing reg in insn 22
changing reg in insn 63
changing reg in insn 63
changing reg in insn 23
changing reg in insn 23
changing reg in insn 14
changing reg in insn 584
changing reg in insn 16
changing reg in insn 15
changing reg in insn 127
changing reg in insn 597
changing reg in insn 183
changing reg in insn 612
changing reg in insn 245
changing reg in insn 250
changing reg in insn 246
changing reg in insn 236
changing reg in insn 618
changing reg in insn 239
changing reg in insn 238
changing reg in insn 237
changing reg in insn 308
changing reg in insn 627
changing reg in insn 352
changing reg in insn 354
changing reg in insn 576
changing reg in insn 352
changing reg in insn 312
changing reg in insn 316
changing reg in insn 314
changing reg in insn 317
changing reg in insn 267
changing reg in insn 269
changing reg in insn 281
changing reg in insn 282
changing reg in insn 257
changing reg in insn 259
changing reg in insn 89
changing reg in insn 587
changing reg in insn 105
changing reg in insn 591
changing reg in insn 93
changing reg in insn 100
changing reg in insn 95
changing reg in insn 101
changing reg in insn 109
changing reg in insn 118
changing reg in insn 111
changing reg in insn 134
changing reg in insn 139
changing reg in insn 140
changing reg in insn 136
changing reg in insn 189
changing reg in insn 194
changing reg in insn 195
changing reg in insn 191
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 16
changing reg in insn 585
changing reg in insn 15
changing reg in insn 586
changing reg in insn 556
changing reg in insn 555
changing reg in insn 556
changing reg in insn 57
changing reg in insn 52
changing reg in insn 554
changing reg in insn 553
changing reg in insn 554
changing reg in insn 56
changing reg in insn 52
changing reg in insn 40
changing reg in insn 42
changing reg in insn 48
changing reg in insn 319
changing reg in insn 328
changing reg in insn 323
changing reg in insn 254
changing reg in insn 290
changing reg in insn 249
changing reg in insn 288
changing reg in insn 267
changing reg in insn 257
changing reg in insn 290
changing reg in insn 288
changing reg in insn 277
changing reg in insn 272
changing reg in insn 237
changing reg in insn 619
changing reg in insn 630
changing reg in insn 625
changing reg in insn 238
changing reg in insn 628
changing reg in insn 620
changing reg in insn 364
changing reg in insn 631
changing reg in insn 626
changing reg in insn 239
changing reg in insn 629
changing reg in insn 621
changing reg in insn 365
changing reg in insn 544
changing reg in insn 543
changing reg in insn 544
changing reg in insn 388
changing reg in insn 385
changing reg in insn 368
changing reg in insn 394
changing reg in insn 393
changing reg in insn 369
changing reg in insn 233
changing reg in insn 622
changing reg in insn 235
changing reg in insn 623
changing reg in insn 246
changing reg in insn 251
changing reg in insn 247
changing reg in insn 80
changing reg in insn 84
changing reg in insn 582
changing reg in insn 13
changing reg in insn 583
changing reg in insn 10
changing reg in insn 10
changing reg in insn 12
changing reg in insn 12
changing reg in insn 13
changing reg in insn 23
changing reg in insn 24
changing reg in insn 25
changing reg in insn 26
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
changing reg in insn 44
changing reg in insn 553
changing reg in insn 43
changing reg in insn 44
changing reg in insn 48
changing reg in insn 49
changing reg in insn 49
changing reg in insn 555
changing reg in insn 63
changing reg in insn 64
changing reg in insn 64
changing reg in insn 65
changing reg in insn 66
changing reg in insn 66
changing reg in insn 551
changing reg in insn 65
changing reg in insn 66
changing reg in insn 75
changing reg in insn 76
changing reg in insn 79
changing reg in insn 85
changing reg in insn 80
changing reg in insn 84
changing reg in insn 84
changing reg in insn 85
changing reg in insn 581
changing reg in insn 87
changing reg in insn 88
changing reg in insn 216
changing reg in insn 89
changing reg in insn 95
changing reg in insn 96
changing reg in insn 94
changing reg in insn 95
changing reg in insn 101
changing reg in insn 102
changing reg in insn 100
changing reg in insn 101
changing reg in insn 111
changing reg in insn 112
changing reg in insn 113
changing reg in insn 110
changing reg in insn 111
changing reg in insn 113
changing reg in insn 114
changing reg in insn 112
changing reg in insn 113
changing reg in insn 133
changing reg in insn 134
changing reg in insn 152
changing reg in insn 153
changing reg in insn 153
changing reg in insn 154
changing reg in insn 169
changing reg in insn 172
changing reg in insn 172
changing reg in insn 173
changing reg in insn 171
changing reg in insn 172
changing reg in insn 188
changing reg in insn 189
changing reg in insn 207
changing reg in insn 208
changing reg in insn 208
changing reg in insn 209
changing reg in insn 218
changing reg in insn 221
changing reg in insn 221
changing reg in insn 222
changing reg in insn 220
changing reg in insn 221
changing reg in insn 225
changing reg in insn 229
changing reg in insn 231
changing reg in insn 230
changing reg in insn 229
changing reg in insn 580
changing reg in insn 228
changing reg in insn 228
changing reg in insn 230
changing reg in insn 229
changing reg in insn 230
changing reg in insn 230
changing reg in insn 231
changing reg in insn 579
changing reg in insn 235
changing reg in insn 247
changing reg in insn 249
changing reg in insn 251
changing reg in insn 252
changing reg in insn 250
changing reg in insn 251
changing reg in insn 252
changing reg in insn 254
changing reg in insn 304
changing reg in insn 478
changing reg in insn 306
changing reg in insn 578
changing reg in insn 306
changing reg in insn 307
changing reg in insn 335
changing reg in insn 308
changing reg in insn 314
changing reg in insn 319
changing reg in insn 313
changing reg in insn 314
changing reg in insn 317
changing reg in insn 318
changing reg in insn 316
changing reg in insn 317
changing reg in insn 318
changing reg in insn 319
changing reg in insn 322
changing reg in insn 323
changing reg in insn 323
changing reg in insn 324
changing reg in insn 337
changing reg in insn 340
changing reg in insn 340
changing reg in insn 341
changing reg in insn 339
changing reg in insn 340
changing reg in insn 346
changing reg in insn 349
changing reg in insn 354
changing reg in insn 363
changing reg in insn 575
changing reg in insn 359
changing reg in insn 360
changing reg in insn 361
changing reg in insn 359
changing reg in insn 360
changing reg in insn 574
changing reg in insn 368
changing reg in insn 369
changing reg in insn 543
changing reg in insn 569
changing reg in insn 374
changing reg in insn 568
changing reg in insn 376
changing reg in insn 567
changing reg in insn 378
changing reg in insn 566
changing reg in insn 380
changing reg in insn 565
changing reg in insn 382
changing reg in insn 383
changing reg in insn 408
changing reg in insn 384
changing reg in insn 564
changing reg in insn 387
changing reg in insn 388
changing reg in insn 389
changing reg in insn 389
changing reg in insn 390
changing reg in insn 391
changing reg in insn 400
changing reg in insn 392
changing reg in insn 394
changing reg in insn 395
changing reg in insn 395
changing reg in insn 396
changing reg in insn 563
changing reg in insn 402
changing reg in insn 562
changing reg in insn 404
changing reg in insn 561
changing reg in insn 412
changing reg in insn 415
changing reg in insn 420
changing reg in insn 420
changing reg in insn 417
changing reg in insn 421
changing reg in insn 573
changing reg in insn 415
changing reg in insn 420
changing reg in insn 421
changing reg in insn 417
changing reg in insn 420
changing reg in insn 560
changing reg in insn 426
changing reg in insn 429
changing reg in insn 434
changing reg in insn 434
changing reg in insn 431
changing reg in insn 435
changing reg in insn 572
changing reg in insn 429
changing reg in insn 434
changing reg in insn 435
changing reg in insn 431
changing reg in insn 434
changing reg in insn 435
changing reg in insn 436
changing reg in insn 559
changing reg in insn 440
changing reg in insn 443
changing reg in insn 448
changing reg in insn 448
changing reg in insn 445
changing reg in insn 449
changing reg in insn 571
changing reg in insn 443
changing reg in insn 448
changing reg in insn 449
changing reg in insn 445
changing reg in insn 448
changing reg in insn 449
changing reg in insn 450
changing reg in insn 558
changing reg in insn 454
changing reg in insn 457
changing reg in insn 462
changing reg in insn 462
changing reg in insn 459
changing reg in insn 463
changing reg in insn 570
changing reg in insn 457
changing reg in insn 462
changing reg in insn 463
changing reg in insn 459
changing reg in insn 462
changing reg in insn 463
changing reg in insn 464
changing reg in insn 577
changing reg in insn 346
changing reg in insn 335
changing reg in insn 339
changing reg in insn 337
changing reg in insn 339
changing reg in insn 337
changing reg in insn 478
changing reg in insn 324
changing reg in insn 322
changing reg in insn 323
changing reg in insn 322
changing reg in insn 524
changing reg in insn 233
changing reg in insn 624
changing reg in insn 233
changing reg in insn 216
changing reg in insn 220
changing reg in insn 218
changing reg in insn 171
changing reg in insn 169
changing reg in insn 105
changing reg in insn 220
changing reg in insn 218
changing reg in insn 171
changing reg in insn 169
changing reg in insn 125
changing reg in insn 209
changing reg in insn 182
changing reg in insn 154
changing reg in insn 126
changing reg in insn 208
changing reg in insn 153
changing reg in insn 74
changing reg in insn 21
changing reg in insn 75
changing reg in insn 75
changing reg in insn 21
changing reg in insn 22
changing reg in insn 39
changing reg in insn 40
changing reg in insn 40
changing reg in insn 627
changing reg in insn 333
changing reg in insn 313
changing reg in insn 312
changing reg in insn 333
changing reg in insn 332
changing reg in insn 313
changing reg in insn 312
changing reg in insn 628
changing reg in insn 630
changing reg in insn 629
changing reg in insn 631
changing reg in insn 618
changing reg in insn 294
changing reg in insn 245
changing reg in insn 294
changing reg in insn 245
changing reg in insn 619
changing reg in insn 293
changing reg in insn 293
changing reg in insn 298
changing reg in insn 620
changing reg in insn 285
changing reg in insn 625
changing reg in insn 285
changing reg in insn 621
changing reg in insn 262
changing reg in insn 626
changing reg in insn 262
changing reg in insn 622
changing reg in insn 298
changing reg in insn 623
changing reg in insn 254
changing reg in insn 249
changing reg in insn 624
changing reg in insn 245
changing reg in insn 604
changing reg in insn 587
changing reg in insn 617
changing reg in insn 607
changing reg in insn 212
changing reg in insn 613
changing reg in insn 590
changing reg in insn 94
changing reg in insn 93
changing reg in insn 212
changing reg in insn 222
changing reg in insn 94
changing reg in insn 608
changing reg in insn 614
changing reg in insn 609
changing reg in insn 615
changing reg in insn 610
changing reg in insn 198
changing reg in insn 198
changing reg in insn 203
changing reg in insn 611
changing reg in insn 616
changing reg in insn 203
changing reg in insn 612
changing reg in insn 199
changing reg in insn 199
changing reg in insn 189
changing reg in insn 613
changing reg in insn 617
changing reg in insn 588
changing reg in insn 601
changing reg in insn 160
changing reg in insn 595
changing reg in insn 605
changing reg in insn 115
changing reg in insn 122
changing reg in insn 119
changing reg in insn 128
changing reg in insn 127
changing reg in insn 152
changing reg in insn 589
changing reg in insn 602
changing reg in insn 596
changing reg in insn 606
changing reg in insn 120
changing reg in insn 121
changing reg in insn 157
changing reg in insn 590
changing reg in insn 604
changing reg in insn 607
changing reg in insn 591
changing reg in insn 603
changing reg in insn 163
changing reg in insn 598
changing reg in insn 110
changing reg in insn 109
changing reg in insn 163
changing reg in insn 173
changing reg in insn 110
changing reg in insn 592
changing reg in insn 599
changing reg in insn 593
changing reg in insn 148
changing reg in insn 594
changing reg in insn 143
changing reg in insn 600
changing reg in insn 143
changing reg in insn 148
changing reg in insn 595
changing reg in insn 601
changing reg in insn 596
changing reg in insn 602
changing reg in insn 597
changing reg in insn 144
changing reg in insn 144
changing reg in insn 134
changing reg in insn 598
changing reg in insn 603
changing reg in insn 584
changing reg in insn 70
changing reg in insn 70
changing reg in insn 22
changing reg in insn 22
changing reg in insn 585
changing reg in insn 552
changing reg in insn 551
changing reg in insn 36
changing reg in insn 36
changing reg in insn 42
changing reg in insn 552
changing reg in insn 586
changing reg in insn 69
changing reg in insn 69
changing reg in insn 76
12 uses a new slot
2 uses a new slot
3 uses a new slot
12 uses a slot from prev iteration
2 uses a slot from prev iteration
3 uses a slot from prev iteration
12 uses a slot from prev iteration
2 uses a slot from prev iteration
3 uses a slot from prev iteration
Spilling for insn 13.
Spilling for insn 63.
Using reg 2 for reload 0
Spilling for insn 87.
Spilling for insn 85.
Spilling for insn 97.
Using reg 3 for reload 0
Spilling for insn 103.
Using reg 3 for reload 0
Spilling for insn 126.
Using reg 1 for reload 0
Spilling for insn 133.
Using reg 1 for reload 0
Spilling for insn 637.
Spilling for insn 638.
Spilling for insn 639.
Spilling for insn 139.
Using reg 1 for reload 1
Spilling for insn 152.
Using reg 2 for reload 0
Spilling for insn 154.
Spilling for insn 188.
Using reg 2 for reload 0
Spilling for insn 643.
Spilling for insn 194.
Using reg 2 for reload 1
Spilling for insn 209.
Spilling for insn 231.
Spilling for insn 306.
Spilling for insn 324.
Spilling for insn 361.
Spilling for insn 415.
Using reg 2 for reload 0
Spilling for insn 429.
Using reg 2 for reload 0
Spilling for insn 443.
Using reg 2 for reload 0
Spilling for insn 457.
Using reg 2 for reload 0
Spilling for insn 421.
Spilling for insn 374.
Spilling for insn 376.
Spilling for insn 378.
Spilling for insn 380.
Spilling for insn 382.
Spilling for insn 387.
Spilling for insn 390.
Spilling for insn 396.
Spilling for insn 400.
Spilling for insn 402.
Spilling for insn 404.
Spilling for insn 406.
Using reg 6 for reload 1
Spilling for insn 408.
Spilling for insn 412.
Spilling for insn 422.
Using reg 6 for reload 1
Spilling for insn 426.
Spilling for insn 436.
Spilling for insn 440.
Spilling for insn 450.
Spilling for insn 454.
Spilling for insn 464.
Spilling for insn 384.
Spilling for insn 385.
Spilling for insn 392.
Spilling for insn 393.
Spilling for insn 398.
Using reg 12 for reload 1
Spilling for insn 410.
Using reg 12 for reload 1
Spilling for insn 424.
Using reg 12 for reload 1
Spilling for insn 438.
Using reg 12 for reload 1
Spilling for insn 452.
Using reg 12 for reload 1
deleting insn with uid = 397.
deleting insn with uid = 409.
deleting insn with uid = 422.
deleting insn with uid = 423.
deleting insn with uid = 437.
deleting insn with uid = 451.
deleting insn with uid = 132.
deleting insn with uid = 138.

Reloads for insn # 13
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 2 r2 [193]) [0 max_mapnr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 2 r2 [193]) [0 max_mapnr+0 S4 A32])

Reloads for insn # 63
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 4)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 87
Reload 0: reload_out (SI) = (reg/v:SI 169 [ start ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg/v:SI 169 [ start ])
	reload_reg_rtx: (reg:SI 3 r3)

Reloads for insn # 85
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 4 r4 [229]) [0 totalram_pages+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 4 r4 [229]) [0 totalram_pages+0 S4 A32])

Reloads for insn # 97
Reload 0: reload_in (SI) = (reg/v:SI 169 [ start ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/v:SI 169 [ start ])
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 103
Reload 0: reload_in (SI) = (reg/v:SI 169 [ start ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2)
	reload_in_reg: (reg/v:SI 169 [ start ])
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 126
Reload 0: reload_out (SI) = (reg:SI 166 [ totalhigh_pages.382 ])
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 166 [ totalhigh_pages.382 ])
	reload_reg_rtx: (reg:SI 6 r6)

Reloads for insn # 133
Reload 0: reload_in (SI) = (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
	CORE_REGS, RELOAD_FOR_OPERAND_ADDRESS (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 406)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 637
Reload 0: reload_out (SI) = (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 128 [0x80])) [0 S4 A32])

Reloads for insn # 638
Reload 0: reload_out (SI) = (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 124 [0x7c])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 124 [0x7c])) [0 S4 A32])

Reloads for insn # 639
Reload 0: reload_out (SI) = (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 132 [0x84])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 132 [0x84])) [0 S4 A32])

Reloads for insn # 139
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:172 page ] [172])
                                                        (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:172 page ] [172])
                                                        (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
Reload 1: reload_in (SI) = (const_int 1 [0x1])
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg:SI 407)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 152
Reload 0: reload_in (SI) = (reg:SI 166 [ totalhigh_pages.382 ])
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg:SI 166 [ totalhigh_pages.382 ])
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 154
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])

Reloads for insn # 188
Reload 0: reload_in (SI) = (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
	CORE_REGS, RELOAD_FOR_OPERAND_ADDRESS (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 406)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 643
Reload 0: reload_out (SI) = (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 124 [0x7c])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 124 [0x7c])) [0 S4 A32])

Reloads for insn # 194
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 9 r9 [orig:173 page ] [173])
                                                        (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 9 r9 [orig:173 page ] [173])
                                                        (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
Reload 1: reload_in (SI) = (const_int 1 [0x1])
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg:SI 407)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 209
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])

Reloads for insn # 231
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])

Reloads for insn # 306
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 2 r2 [288]) [0 num_physpages+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 2 r2 [288]) [0 num_physpages+0 S4 A32])

Reloads for insn # 324
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])

Reloads for insn # 361
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 415
Reload 0: reload_in (SI) = (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg/f:SI 343)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 429
Reload 0: reload_in (SI) = (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg/f:SI 353)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 443
Reload 0: reload_in (SI) = (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg/f:SI 363)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 457
Reload 0: reload_in (SI) = (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 2), can't combine
	reload_in_reg: (reg/f:SI 373)
	reload_reg_rtx: (reg:SI 1 r1)

Reloads for insn # 421
Reload 0: reload_out (SI) = (reg:SI 352)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 0)
	reload_out_reg: (reg:SI 352)
	reload_reg_rtx: (reg:SI 7 r7)

Reloads for insn # 374
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 376
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 378
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])

Reloads for insn # 380
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])

Reloads for insn # 382
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])

Reloads for insn # 387
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])

Reloads for insn # 390
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 S4 A32])

Reloads for insn # 396
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 44 [0x2c])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 44 [0x2c])) [0 S4 A32])

Reloads for insn # 400
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 52 [0x34])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 52 [0x34])) [0 S4 A32])

Reloads for insn # 402
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 56 [0x38])) [0 S4 A32])

Reloads for insn # 404
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 60 [0x3c])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 60 [0x3c])) [0 S4 A32])

Reloads for insn # 406
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 64 [0x40])) [0 S4 A32])
Reload 1: reload_in (SI) = (const_int -1075838976 [0xffffffffbfe00000])
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg:SI 337)
	reload_reg_rtx: (reg:SI 6 r6)

Reloads for insn # 408
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 68 [0x44])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 68 [0x44])) [0 S4 A32])

Reloads for insn # 412
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 76 [0x4c])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 76 [0x4c])) [0 S4 A32])

Reloads for insn # 426
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 88 [0x58])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 88 [0x58])) [0 S4 A32])

Reloads for insn # 436
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 92 [0x5c])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 92 [0x5c])) [0 S4 A32])

Reloads for insn # 440
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 100 [0x64])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 100 [0x64])) [0 S4 A32])

Reloads for insn # 450
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 104 [0x68])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 104 [0x68])) [0 S4 A32])

Reloads for insn # 454
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 112 [0x70])) [0 S4 A32])

Reloads for insn # 464
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 116 [0x74])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 116 [0x74])) [0 S4 A32])

Reloads for insn # 384
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])

Reloads for insn # 385
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])

Reloads for insn # 392
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 36 [0x24])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 36 [0x24])) [0 S4 A32])

Reloads for insn # 393
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 40 [0x28])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 40 [0x28])) [0 S4 A32])

Reloads for insn # 398
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 48 [0x30])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 48 [0x30])) [0 S4 A32])
Reload 1: reload_in (SI) = (const_int -1075838976 [0xffffffffbfe00000])
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg:SI 337)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 410
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 72 [0x48])) [0 S4 A32])
Reload 1: reload_in (SI) = (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 343)
	reload_reg_rtx: (reg:SI 6 r6)

Reloads for insn # 424
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 84 [0x54])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 84 [0x54])) [0 S4 A32])
Reload 1: reload_in (SI) = (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 353)
	reload_reg_rtx: (reg:SI 12 ip)

Reloads for insn # 438
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 96 [0x60])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 96 [0x60])) [0 S4 A32])
Reload 1: reload_in (SI) = (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 363)
	reload_reg_rtx: (reg:SI 6 r6)

Reloads for insn # 452
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 108 [0x6c])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 108 [0x6c])) [0 S4 A32])
Reload 1: reload_in (SI) = (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)
	CORE_REGS, RELOAD_FOR_INPUT (opnum = 1), can't combine
	reload_in_reg: (reg/f:SI 373)
	reload_reg_rtx: (reg:SI 12 ip)
deleting insn with uid = 584.
deleting insn with uid = 585.
deleting insn with uid = 586.
deleting insn with uid = 56.
deleting insn with uid = 587.
deleting insn with uid = 588.
deleting insn with uid = 589.
deleting insn with uid = 591.
deleting insn with uid = 592.
deleting insn with uid = 594.
deleting insn with uid = 596.
deleting insn with uid = 597.
deleting insn with uid = 598.
deleting insn with uid = 599.
deleting insn with uid = 600.
deleting insn with uid = 602.
deleting insn with uid = 603.
deleting insn with uid = 605.
deleting insn with uid = 606.
deleting insn with uid = 608.
deleting insn with uid = 609.
deleting insn with uid = 610.
deleting insn with uid = 611.
deleting insn with uid = 612.
deleting insn with uid = 613.
deleting insn with uid = 614.
deleting insn with uid = 615.
deleting insn with uid = 616.
deleting insn with uid = 617.
deleting insn with uid = 618.
deleting insn with uid = 619.
deleting insn with uid = 620.
deleting insn with uid = 621.
deleting insn with uid = 622.
deleting insn with uid = 623.
deleting insn with uid = 624.
deleting insn with uid = 625.
deleting insn with uid = 626.
deleting insn with uid = 627.
deleting insn with uid = 628.
deleting insn with uid = 629.
deleting insn with uid = 630.
deleting insn with uid = 631.


try_optimize_cfg iteration 1

Simplifying condjump 270 around jump 539
deleting insn with uid = 271.
deleting insn with uid = 539.
deleting insn with uid = 540.
deleting block 34
deleting insn with uid = 275.
Deleted label in block 35.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 137.
verify found no changes in insn with uid = 142.
verify found no changes in insn with uid = 192.
verify found no changes in insn with uid = 197.
verify found no changes in insn with uid = 303.
verify found no changes in insn with uid = 329.
verify found no changes in insn with uid = 350.
verify found no changes in insn with uid = 366.
verify found no changes in insn with uid = 469.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 44 n_edges 61 count 108 (  2.5)
df_worklist_dataflow_doublequeue:n_basic_blocks 44 n_edges 61 count 137 (  3.1)


mem_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={31d,23u,2d} r1={50d,40u,1d} r2={40d,36u,1d} r3={43d,42u,3d} r4={17d,32u,3d} r5={16d,26u,3d} r6={27d,33u,3d} r7={13d,21u,8d} r8={12d,17u,5d} r9={6d,8u} r10={5d,8u,2d} r11={3d,5u} r12={32d,24u,1d} r13={1d,97u,8d} r14={18d,7u} r15={11d} r16={11d} r17={11d} r18={11d} r19={11d} r20={11d} r21={11d} r22={11d} r23={11d} r24={37d,18u} r27={11d} r28={11d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={11d} r38={11d} r39={11d} r40={11d} r41={11d} r42={11d} r43={11d} r44={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} r81={11d} r82={11d} r83={11d} r84={11d} r85={11d} r86={11d} r87={11d} r88={11d} r89={11d} r90={11d} r91={11d} r92={11d} r93={11d} r94={11d} r95={11d} r96={11d} r97={11d} r98={11d} r99={11d} r100={11d} r101={11d} r102={11d} r103={11d} r104={11d} r105={11d} r106={11d} r107={11d} r108={11d} r109={11d} r110={11d} r111={11d} r112={11d} r113={11d} r114={11d} r115={11d} r116={11d} r117={11d} r118={11d} r119={11d} r120={11d} r121={11d} r122={11d} r123={11d} r124={11d} r125={11d} r126={11d} r127={11d} r406={2d} 
;;    total ref usage 2040{1561d,437u,42e} in 341{330 regular + 11 call} insns.
(note 4 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl]
;; live  in  	 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 4 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 5 14 2 NOTE_INSN_DELETED)

(insn 14 11 15 2 arch/arm/mm/init.c:595 (set (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 15 14 74 2 arch/arm/mm/init.c:487 (set (reg/v:SI 5 r5 [orig:176 i ] [176])
        (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 74 15 16 2 arch/arm/mm/init.c:487 discrim 1 (set (reg/f:SI 7 r7 [413])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 16 74 583 2 arch/arm/mm/init.c:480 (set (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
        (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 583 16 10 2 arch/arm/mm/init.c:595 (set (reg/f:SI 2 r2 [194])
        (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>)
        (nil)))

(insn 10 583 21 2 arch/arm/mm/init.c:595 (set (reg:SI 1 r1 [orig:196 max_pfn ] [196])
        (mem/c/i:SI (reg/f:SI 2 r2 [194]) [0 max_pfn+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>) [0 max_pfn+0 S4 A32])
        (nil)))

(insn 21 10 39 2 arch/arm/mm/init.c:584 (set (reg/f:SI 10 sl [414])
        (plus:SI (reg/f:SI 7 r7 [413])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 4 [0x4])))
        (nil)))

(insn 39 21 12 2 arch/arm/mm/init.c:457 (set (reg/f:SI 8 r8 [415])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(insn 12 39 582 2 arch/arm/mm/init.c:595 (set (reg:SI 1 r1 [197])
        (sign_extract:SI (reg:SI 1 r1 [orig:196 max_pfn ] [196])
            (const_int 27 [0x1b])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn 582 12 13 2 arch/arm/mm/init.c:595 (set (reg/f:SI 2 r2 [193])
        (symbol_ref:SI ("max_mapnr") [flags 0xc0] <var_decl 0x110aed20 max_mapnr>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_mapnr") [flags 0xc0] <var_decl 0x110aed20 max_mapnr>)
        (nil)))

(insn 13 582 525 2 arch/arm/mm/init.c:595 (set (mem/c/i:SI (reg/f:SI 2 r2 [193]) [0 max_mapnr+0 S4 A32])
        (reg:SI 1 r1 [197])) 167 {*arm_movsi_insn} (nil))

(jump_insn 525 13 526 2 (set (pc)
        (label_ref 71)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 7)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 526 525 73)

;; Start of basic block ( 7) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  7 [88.9%] 
(code_label 73 526 19 3 45 "" [1 uses])

(note 19 73 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 27 19 28 3 NOTE_INSN_DELETED)

(note 28 27 30 3 NOTE_INSN_DELETED)

(note 30 28 31 3 NOTE_INSN_DELETED)

(note 31 30 33 3 NOTE_INSN_DELETED)

(note 33 31 34 3 NOTE_INSN_DELETED)

(note 34 33 35 3 NOTE_INSN_DELETED)

(note 35 34 23 3 NOTE_INSN_DELETED)

(insn 23 35 24 3 arch/arm/mm/init.c:490 (set (reg:SI 1 r1 [orig:200 <variable>.start ] [200])
        (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])
        (nil)))

(insn 24 23 25 3 arch/arm/mm/init.c:490 (set (reg/v:SI 1 r1 [orig:174 bank_start ] [174])
        (lshiftrt:SI (reg:SI 1 r1 [orig:200 <variable>.start ] [200])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 25 24 26 3 arch/arm/mm/init.c:505 (set (reg:SI 1 r1 [201])
        (and:SI (reg/v:SI 1 r1 [orig:174 bank_start ] [174])
            (const_int -1021 [0xfffffffffffffc03]))) 67 {*arm_andsi3_insn} (nil))

(insn 26 25 36 3 arch/arm/mm/init.c:505 (set (reg/v:SI 1 r1 [orig:150 bank_start.756 ] [150])
        (and:SI (reg:SI 1 r1 [201])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg/v:SI 1 r1 [orig:174 bank_start ] [174])
            (const_int -1024 [0xfffffffffffffc00]))
        (nil)))

(insn 36 26 37 3 arch/arm/mm/init.c:511 (set (reg:CC_DLTU 24 cc)
        (compare:CC_DLTU (and:SI (ltu:SI (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
                    (reg/v:SI 1 r1 [orig:150 bank_start.756 ] [150]))
                (ne:SI (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(jump_insn 37 36 38 3 arch/arm/mm/init.c:511 (set (pc)
        (if_then_else (eq (reg:CC_DLTU 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 6)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 38 37 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 41 38 45 4 NOTE_INSN_DELETED)

(note 45 41 47 4 NOTE_INSN_DELETED)

(note 47 45 50 4 NOTE_INSN_DELETED)

(note 50 47 40 4 NOTE_INSN_DELETED)

(insn 40 50 42 4 arch/arm/mm/init.c:457 (set (reg/f:SI 2 r2 [orig:179 mem_map.375 ] [179])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [415]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [415]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 42 40 48 4 arch/arm/mm/init.c:464 (set (reg:SI 0 r0 [211])
        (plus:SI (mult:SI (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
                (const_int 32 [0x20]))
            (reg/f:SI 2 r2 [orig:179 mem_map.375 ] [179]))) 270 {*arith_shiftsi} (nil))

(insn 48 42 43 4 arch/arm/mm/init.c:465 (set (reg:SI 1 r1 [216])
        (plus:SI (mult:SI (reg/v:SI 1 r1 [orig:150 bank_start.756 ] [150])
                (const_int 32 [0x20]))
            (reg/f:SI 2 r2 [orig:179 mem_map.375 ] [179]))) 270 {*arith_shiftsi} (nil))

(insn 43 48 49 4 arch/arm/mm/init.c:464 (set (reg:SI 0 r0 [213])
        (plus:SI (reg:SI 0 r0 [211])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 49 43 44 4 arch/arm/mm/init.c:465 (set (reg:SI 1 r1 [217])
        (plus:SI (reg:SI 1 r1 [216])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 44 49 555 4 arch/arm/mm/init.c:464 (set (reg:SI 0 r0 [212])
        (plus:SI (reg:SI 0 r0 [213])
            (const_int 1073741839 [0x4000000f]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 0 r0 [211])
            (const_int 1073745919 [0x40000fff]))
        (nil)))

(insn 555 44 553 4 arch/arm/mm/init.c:465 (set (reg/v:SI 1 r1 [orig:177 pgend ] [177])
        (and:SI (reg:SI 1 r1 [217])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 553 555 556 4 arch/arm/mm/init.c:464 (set (reg/v:SI 0 r0 [orig:178 pg ] [178])
        (and:SI (reg:SI 0 r0 [212])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 556 553 554 4 arch/arm/mm/init.c:465 (set (reg/v:SI 1 r1 [orig:177 pgend ] [177])
        (and:SI (reg/v:SI 1 r1 [orig:177 pgend ] [177])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 554 556 52 4 arch/arm/mm/init.c:464 (set (reg/v:SI 0 r0 [orig:178 pg ] [178])
        (and:SI (reg/v:SI 0 r0 [orig:178 pg ] [178])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 52 554 53 4 arch/arm/mm/init.c:471 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:178 pg ] [178])
            (reg/v:SI 1 r1 [orig:177 pgend ] [177]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 53 52 54 4 arch/arm/mm/init.c:471 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  5 [29.0%]  (fallthru)
;; Succ edge  6 [71.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  4 [29.0%]  (fallthru)
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 55 54 57 5 NOTE_INSN_DELETED)

(insn 57 55 58 5 arch/arm/mm/init.c:472 (set (reg:SI 1 r1)
        (minus:SI (reg/v:SI 1 r1 [orig:177 pgend ] [177])
            (reg:SI 0 r0))) 28 {*arm_subsi3_insn} (nil))

(call_insn 58 57 59 5 arch/arm/mm/init.c:472 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_bootmem") [flags 0x41] <function_decl 0x11095600 free_bootmem>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 3 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	 1 [r1]

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [71.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 59 58 60 6 44 "" [2 uses])

(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 6 NOTE_INSN_DELETED)

(note 62 61 67 6 NOTE_INSN_DELETED)

(note 67 62 63 6 NOTE_INSN_DELETED)

(insn 63 67 64 6 arch/arm/mm/init.c:519 (parallel [
            (set (reg:SI 3 r3 [220])
                (plus:SI (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
                            (const_int 8 [0x8])) [0 <variable>.size+0 S4 A32])
                    (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
                            (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])))
            (clobber (reg:SI 1 r1))
        ]) 321 {*arith_adjacentmem} (nil))

(insn 64 63 65 6 arch/arm/mm/init.c:519 (set (reg:SI 3 r3 [223])
        (lshiftrt:SI (reg:SI 3 r3 [220])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 65 64 66 6 arch/arm/mm/init.c:519 (set (reg:SI 3 r3 [225])
        (plus:SI (reg:SI 3 r3 [223])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn 66 65 551 6 arch/arm/mm/init.c:519 (set (reg:SI 3 r3 [224])
        (plus:SI (reg:SI 3 r3 [225])
            (const_int 3 [0x3]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 3 r3 [223])
            (const_int 1023 [0x3ff]))
        (nil)))

(insn 551 66 552 6 arch/arm/mm/init.c:519 (set (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
        (and:SI (reg:SI 3 r3 [224])
            (const_int -1021 [0xfffffffffffffc03]))) 67 {*arm_andsi3_insn} (nil))

(insn 552 551 71 6 arch/arm/mm/init.c:519 (set (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
        (and:SI (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 71 552 72 7 43 "" [1 uses])

(note 72 71 22 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 22 72 75 7 arch/arm/mm/init.c:584 (set (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
        (plus:SI (reg/f:SI 10 sl [414])
            (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))))
        (nil)))

(insn 75 22 70 7 arch/arm/mm/init.c:487 discrim 1 (set (reg:SI 2 r2 [orig:228 meminfo.nr_banks ] [228])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [413])
                (const_int 4 [0x4])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [413])
                (const_int 4 [0x4])) [0 meminfo.nr_banks+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
            (nil))))

(insn 70 75 76 7 arch/arm/mm/init.c:487 (set (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])
        (plus:SI (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn 76 70 69 7 arch/arm/mm/init.c:487 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:176 i ] [176])
            (reg:SI 2 r2 [orig:228 meminfo.nr_banks ] [228]))) 219 {*arm_cmpsi_insn} (nil))

(insn 69 76 77 7 arch/arm/mm/init.c:487 (set (reg/v:SI 5 r5 [orig:176 i ] [176])
        (plus:SI (reg/v:SI 5 r5 [orig:176 i ] [176])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 77 69 78 7 arch/arm/mm/init.c:487 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8889 [0x22b9])
        (nil)))
;; End of basic block 7 -> ( 3 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  3 [88.9%] 
;; Succ edge  8 [11.1%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  7 [11.1%]  (fallthru,loop_exit)
(note 78 77 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 82 78 79 8 NOTE_INSN_DELETED)

(insn 79 82 138 8 arch/arm/mm/init.c:600 (set (reg/f:SI 4 r4 [229])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(note 138 79 125 8 NOTE_INSN_DELETED)

(insn 125 138 132 8 arch/arm/mm/init.c:564 (set (reg/f:SI 10 sl [405])
        (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)
        (nil)))

(note 132 125 80 8 NOTE_INSN_DELETED)

(insn 80 132 81 8 arch/arm/mm/init.c:600 (set (reg:SI 5 r5 [orig:192 totalram_pages.389 ] [192])
        (mem/c/i:SI (reg/f:SI 4 r4 [229]) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>) [0 totalram_pages+0 S4 A32])
        (nil)))

(call_insn 81 80 88 8 arch/arm/mm/init.c:600 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("free_all_bootmem") [flags 0x41] <function_decl 0x11095500 free_all_bootmem>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 88 81 216 8 arch/arm/mm/init.c:536 (set (reg/f:SI 3 r3 [233])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 216 88 89 8 arch/arm/mm/init.c:536 discrim 1 (set (reg/f:SI 7 r7 [404])
        (reg/f:SI 3 r3 [233])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 89 216 581 8 arch/arm/mm/init.c:536 (set (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
        (nil)))

(insn 581 89 87 8 arch/arm/mm/init.c:532 (set (reg/f:SI 3 r3 [232])
        (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>)
        (nil)))

(insn 87 581 645 8 arch/arm/mm/init.c:532 (set (reg:SI 3 r3)
        (mem/c/i:SI (reg/f:SI 3 r3 [232]) [0 max_low_pfn+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>) [0 max_low_pfn+0 S4 A32])
        (nil)))

(insn 645 87 84 8 arch/arm/mm/init.c:532 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 %sfp+-8 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 84 645 85 8 arch/arm/mm/init.c:600 (set (reg:SI 0 r0 [231])
        (plus:SI (reg:SI 0 r0)
            (reg:SI 5 r5 [orig:192 totalram_pages.389 ] [192]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 4 r4 [229]) [0 totalram_pages+0 S4 A32])
        (nil)))

(insn 85 84 527 8 arch/arm/mm/init.c:600 (set (mem/c/i:SI (reg/f:SI 4 r4 [229]) [0 totalram_pages+0 S4 A32])
        (reg:SI 0 r0 [231])) 167 {*arm_movsi_insn} (nil))

(jump_insn 527 85 528 8 (set (pc)
        (label_ref 213)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 28)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 528 527 215)

;; Start of basic block ( 28) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  28 [91.0%] 
(code_label 215 528 92 9 56 "" [1 uses])

(note 92 215 93 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 93 92 94 9 include/linux/memblock.h:120 (set (reg:SI 4 r4 [orig:170 D.25753 ] [170])
        (mem/s/j:SI (reg/v/f:SI 6 r6 [orig:167 mem ] [167]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 94 93 95 9 include/linux/memblock.h:129 (set (reg:SI 5 r5 [orig:235 <variable>.size ] [235])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])
        (nil)))

(insn 95 94 96 9 include/linux/memblock.h:129 (set (reg:SI 5 r5 [234])
        (plus:SI (reg:SI 4 r4 [orig:170 D.25753 ] [170])
            (reg:SI 5 r5 [orig:235 <variable>.size ] [235]))) 4 {*arm_addsi3} (nil))

(insn 96 95 646 9 include/linux/memblock.h:129 (set (reg/v:SI 5 r5 [orig:148 start.759 ] [148])
        (lshiftrt:SI (reg:SI 5 r5 [234])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 646 96 97 9 arch/arm/mm/init.c:541 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 %sfp+-8 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 97 646 98 9 arch/arm/mm/init.c:541 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:148 start.759 ] [148])
            (reg:SI 2 r2))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 98 97 99 9 arch/arm/mm/init.c:541 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 210)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 9 -> ( 27 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  27 [50.0%] 
;; Succ edge  10 [50.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 8 [r8] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 8 [r8]
;; live  kill	 24 [cc]

;; Pred edge  9 [50.0%]  (fallthru)
(note 99 98 100 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 100 99 105 10 include/linux/memblock.h:120 (set (reg:SI 4 r4 [237])
        (plus:SI (reg:SI 4 r4 [orig:170 D.25753 ] [170])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 105 100 101 10 arch/arm/mm/init.c:549 (set (reg/v/f:SI 8 r8 [orig:168 res ] [168])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 28 [0x1c]))) [0 memblock.reserved.regions+0 S4 A32])
        (nil)))

(insn 101 105 102 10 include/linux/memblock.h:120 (set (reg:SI 4 r4 [236])
        (plus:SI (reg:SI 4 r4 [237])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 4 r4 [orig:170 D.25753 ] [170])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 102 101 103 10 include/linux/memblock.h:120 (set (reg/v:SI 4 r4 [orig:149 start.758 ] [149])
        (lshiftrt:SI (reg:SI 4 r4 [236])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 103 102 590 10 include/linux/memblock.h:120 (parallel [
            (set (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
                (umax:SI (reg/v:SI 4 r4 [orig:149 start.758 ] [149])
                    (reg:SI 2 r2)))
            (clobber (reg:CC 24 cc))
        ]) 106 {*arm_umaxsi3} (nil))

(insn 590 103 529 10 (set (reg/v/f:SI 3 r3 [orig:167 mem ] [167])
        (reg/v/f:SI 6 r6 [orig:167 mem ] [167])) 167 {*arm_movsi_insn} (nil))

(jump_insn 529 590 530 10 (set (pc)
        (label_ref 164)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  20 [100.0%] 

(barrier 530 529 166)

;; Start of basic block ( 20) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  20 [95.5%] 
(code_label 166 530 108 11 53 "" [1 uses])

(note 108 166 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 11 include/linux/memblock.h:138 (set (reg:SI 2 r2 [orig:171 D.25749 ] [171])
        (mem/s/j:SI (reg/v/f:SI 8 r8 [orig:168 res ] [168]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 110 109 111 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [orig:240 <variable>.size ] [240])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 8 r8 [orig:168 res ] [168])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 8 r8 [orig:168 res ] [168])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])
        (nil)))

(insn 111 110 112 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [239])
        (plus:SI (reg:SI 2 r2 [orig:171 D.25749 ] [171])
            (reg:SI 12 ip [orig:240 <variable>.size ] [240]))) 4 {*arm_addsi3} (nil))

(insn 112 111 113 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [242])
        (plus:SI (reg:SI 12 ip [239])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 113 112 114 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [241])
        (plus:SI (reg:SI 12 ip [242])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 12 ip [239])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 114 113 115 11 include/linux/memblock.h:147 (set (reg/v:SI 12 ip [orig:146 start.761 ] [146])
        (lshiftrt:SI (reg:SI 12 ip [241])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 115 114 116 11 arch/arm/mm/init.c:555 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:146 start.761 ] [146])
            (reg/v:SI 4 r4 [orig:145 start.762 ] [145]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 116 115 117 11 arch/arm/mm/init.c:555 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 161)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 19 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  19 [50.0%] 
;; Succ edge  12 [50.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  11 [50.0%]  (fallthru)
(note 117 116 118 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 121 12 include/linux/memblock.h:138 (set (reg/v:SI 2 r2 [orig:147 start.760 ] [147])
        (lshiftrt:SI (reg:SI 2 r2 [orig:171 D.25749 ] [171])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 121 118 119 12 include/linux/memblock.h:138 (parallel [
            (set (reg/v:SI 12 ip [orig:139 start.769 ] [139])
                (umin:SI (reg/v:SI 12 ip [orig:146 start.761 ] [146])
                    (reg/v:SI 5 r5 [orig:148 start.759 ] [148])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 119 121 120 12 include/linux/memblock.h:138 (parallel [
            (set (reg/v:SI 2 r2 [orig:138 start.770 ] [138])
                (umax:SI (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
                    (reg/v:SI 2 r2 [orig:147 start.760 ] [147])))
            (clobber (reg:CC 24 cc))
        ]) 106 {*arm_umaxsi3} (nil))

(insn 120 119 122 12 include/linux/memblock.h:138 (parallel [
            (set (reg/v:SI 2 r2 [orig:140 start.768 ] [140])
                (umin:SI (reg/v:SI 2 r2 [orig:138 start.770 ] [138])
                    (reg/v:SI 5 r5 [orig:148 start.759 ] [148])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 122 120 123 12 arch/arm/mm/init.c:563 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:140 start.768 ] [140])
            (reg/v:SI 4 r4 [orig:145 start.762 ] [145]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 123 122 124 12 arch/arm/mm/init.c:563 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 155)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 12 -> ( 13 17)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  13 [72.0%]  (fallthru)
;; Succ edge  17 [28.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 6 [r6] 9 [r9] 11 [fp]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 6 [r6] 9 [r9] 11 [fp]
;; live  kill	

;; Pred edge  12 [72.0%]  (fallthru)
(note 124 123 126 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 126 124 647 13 arch/arm/mm/init.c:564 (set (reg:SI 6 r6)
        (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>) [0 totalhigh_pages+0 S4 A32])
        (nil)))

(insn 647 126 127 13 arch/arm/mm/init.c:564 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 140 [0x8c])) [0 %sfp+-4 S4 A32])
        (reg:SI 6 r6)) 167 {*arm_movsi_insn} (nil))

(insn 127 647 128 13 arch/arm/mm/init.c:564 (set (reg:SI 9 r9 [orig:153 ivtmp.734 ] [153])
        (ashift:SI (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn 128 127 593 13 arch/arm/mm/init.c:564 (set (reg/v:SI 6 r6 [orig:144 start.763 ] [144])
        (reg/v:SI 4 r4 [orig:145 start.762 ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 593 128 595 13 (set (reg/v:SI 11 fp [orig:140 start.768 ] [140])
        (reg/v:SI 2 r2 [orig:140 start.768 ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 595 593 531 13 (set (reg/v:SI 2 r2 [orig:145 start.762 ] [145])
        (reg/v:SI 4 r4 [orig:145 start.762 ] [145])) 167 {*arm_movsi_insn} (nil))

(jump_insn 531 595 532 13 (set (pc)
        (label_ref 145)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 15)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 532 531 147)

;; Start of basic block ( 15) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 9 [r9] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 9 [r9] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  15 [91.0%] 
(code_label 147 532 131 14 52 "" [1 uses])

(note 131 147 648 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 648 131 133 14 arch/arm/mm/init.c:424 (set (reg:SI 1 r1)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn 133 648 143 14 arch/arm/mm/init.c:424 (set (reg/f:SI 4 r4 [orig:245 mem_map ] [245])
        (mem/f/c/i:SI (reg:SI 1 r1) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 406) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 143 133 134 14 arch/arm/mm/init.c:423 discrim 2 (set (reg/v:SI 6 r6 [orig:144 start.763 ] [144])
        (plus:SI (reg/v:SI 6 r6 [orig:144 start.763 ] [144])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 134 143 144 14 arch/arm/mm/init.c:424 (set (reg/v/f:SI 4 r4 [orig:172 page ] [172])
        (plus:SI (reg/f:SI 4 r4 [orig:245 mem_map ] [245])
            (reg:SI 9 r9 [orig:153 ivtmp.734 ] [153]))) 4 {*arm_addsi3} (nil))

(insn 144 134 136 14 arch/arm/mm/init.c:423 discrim 2 (set (reg:SI 9 r9 [orig:153 ivtmp.734 ] [153])
        (plus:SI (reg:SI 9 r9 [orig:153 ivtmp.734 ] [153])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 136 144 637 14 include/linux/page-flags.h:207 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:172 page ] [172])) 167 {*arm_movsi_insn} (nil))

(insn 637 136 638 14 include/linux/page-flags.h:207 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (nil))

(insn 638 637 639 14 include/linux/page-flags.h:207 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(insn 639 638 137 14 include/linux/page-flags.h:207 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 132 [0x84])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (nil))

(call_insn 137 639 649 14 include/linux/page-flags.h:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 649 137 139 14 include/linux/mm.h:417 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 139 649 140 14 include/linux/mm.h:417 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:172 page ] [172])
                (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 140 139 493 14 arch/arm/mm/init.c:427 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:172 page ] [172])) 167 {*arm_movsi_insn} (nil))

(insn 493 140 142 14 arch/arm/mm/init.c:427 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 142 493 642 14 arch/arm/mm/init.c:427 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10f4c580 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 642 142 641 14 arch/arm/mm/init.c:427 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 132 [0x84])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 641 642 640 14 arch/arm/mm/init.c:427 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 640 641 145 14 arch/arm/mm/init.c:427 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 14 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru,dfs_back)
;; Pred edge  13 [100.0%] 
(code_label 145 640 146 15 51 "" [1 uses])

(note 146 145 491 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 491 146 148 15 include/linux/page-flags.h:207 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn 148 491 149 15 arch/arm/mm/init.c:423 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:144 start.763 ] [144])
            (reg/v:SI 11 fp [orig:140 start.768 ] [140]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 149 148 150 15 arch/arm/mm/init.c:423 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 147)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 15 -> ( 14 16)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  14 [91.0%] 
;; Succ edge  16 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 6 [r6]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 6 [r6]
;; live  kill	

;; Pred edge  15 [9.0%]  (fallthru,loop_exit)
(note 150 149 601 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 601 150 650 16 (set (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
        (reg/v:SI 2 r2 [orig:145 start.762 ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 650 601 152 16 arch/arm/mm/init.c:564 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 140 [0x8c])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 152 650 153 16 arch/arm/mm/init.c:564 (set (reg:SI 4 r4 [248])
        (minus:SI (reg:SI 2 r2)
            (reg/v:SI 4 r4 [orig:145 start.762 ] [145]))) 28 {*arm_subsi3_insn} (nil))

(insn 153 152 154 16 arch/arm/mm/init.c:564 (set (reg:SI 6 r6 [249])
        (plus:SI (reg:SI 4 r4 [248])
            (reg/v:SI 6 r6 [orig:144 start.763 ] [144]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
        (nil)))

(insn 154 153 155 16 arch/arm/mm/init.c:564 (set (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
        (reg:SI 6 r6 [249])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 12 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [28.0%] 
;; Pred edge  16 [100.0%]  (fallthru)
(code_label 155 154 156 17 50 "" [1 uses])

(note 156 155 157 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 157 156 158 17 arch/arm/mm/init.c:567 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:139 start.769 ] [139])
            (reg/v:SI 5 r5 [orig:148 start.759 ] [148]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 158 157 159 17 arch/arm/mm/init.c:567 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 635)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
        (nil)))
;; End of basic block 17 -> ( 26 18)
;; lr  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]


;; Succ edge  26 [4.5%]  (loop_exit)
;; Succ edge  18 [95.5%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  17 [95.5%]  (fallthru)
(note 159 158 160 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 160 159 161 18 arch/arm/mm/init.c:567 (set (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
        (reg/v:SI 12 ip [orig:139 start.769 ] [139])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 18 -> ( 19)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 11 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 8 [r8]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 8 [r8]
;; live  kill	

;; Pred edge  11 [50.0%] 
;; Pred edge  18 [100.0%]  (fallthru)
(code_label 161 160 162 19 49 "" [1 uses])

(note 162 161 163 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 163 162 164 19 arch/arm/mm/init.c:549 (set (reg/v/f:SI 8 r8 [orig:168 res ] [168])
        (plus:SI (reg/v/f:SI 8 r8 [orig:168 res ] [168])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))
;; End of basic block 19 -> ( 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  20 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 19 10) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru,dfs_back)
;; Pred edge  10 [100.0%] 
(code_label 164 163 165 20 48 "" [1 uses])

(note 165 164 170 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 170 165 169 20 NOTE_INSN_DELETED)

(insn 169 170 171 20 arch/arm/mm/init.c:549 discrim 1 (set (reg:SI 1 r1 [orig:253 memblock.reserved.cnt ] [253])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 20 [0x14])) [0 memblock.reserved.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 20 [0x14])) [0 memblock.reserved.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 20 [0x14]))) [0 memblock.reserved.cnt+0 S4 A32])
            (nil))))

(insn 171 169 172 20 arch/arm/mm/init.c:549 discrim 1 (set (reg/f:SI 2 r2 [orig:255 memblock.reserved.regions ] [255])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 28 [0x1c]))) [0 memblock.reserved.regions+0 S4 A32])
            (nil))))

(insn 172 171 173 20 arch/arm/mm/init.c:549 discrim 1 (set (reg:SI 2 r2 [254])
        (plus:SI (mult:SI (reg:SI 1 r1 [orig:253 memblock.reserved.cnt ] [253])
                (const_int 8 [0x8]))
            (reg/f:SI 2 r2 [orig:255 memblock.reserved.regions ] [255]))) 270 {*arith_shiftsi} (nil))

(insn 173 172 174 20 arch/arm/mm/init.c:549 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:168 res ] [168])
            (reg:SI 2 r2 [254]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 174 173 175 20 arch/arm/mm/init.c:549 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 166)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 20 -> ( 11 21)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  11 [95.5%] 
;; Succ edge  21 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  20 [4.5%]  (fallthru,loop_exit)
(note 175 174 607 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 607 175 178 21 (set (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
        (reg/v/f:SI 3 r3 [orig:167 mem ] [167])) 167 {*arm_movsi_insn} (nil))

(insn 178 607 176 21 arch/arm/mm/init.c:572 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
            (reg/v:SI 5 r5 [orig:148 start.759 ] [148]))) 219 {*arm_cmpsi_insn} (nil))

(insn 176 178 179 21 arch/arm/mm/init.c:549 discrim 1 (set (reg/v:SI 3 r3 [orig:137 start.772 ] [137])
        (reg/v:SI 4 r4 [orig:145 start.762 ] [145])) 167 {*arm_movsi_insn} (nil))

(jump_insn 179 176 180 21 arch/arm/mm/init.c:572 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 210)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2628 [0xa44])
        (nil)))
;; End of basic block 21 -> ( 22 27)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  22 [73.7%]  (fallthru)
;; Succ edge  27 [26.3%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 8 [r8] 11 [fp]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 8 [r8] 11 [fp]
;; live  kill	

;; Pred edge  21 [73.7%]  (fallthru)
(note 180 179 182 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 182 180 183 22 arch/arm/mm/init.c:573 (set (reg:SI 11 fp [orig:142 totalhigh_pages.765 ] [142])
        (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>) [0 totalhigh_pages+0 S4 A32])
        (nil)))

(insn 183 182 533 22 arch/arm/mm/init.c:573 (set (reg:SI 8 r8 [orig:154 ivtmp.722 ] [154])
        (ashift:SI (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 533 183 534 22 (set (pc)
        (label_ref 200)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 24)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [100.0%] 

(barrier 534 533 202)

;; Start of basic block ( 24) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 9 [r9] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  24 [91.0%] 
(code_label 202 534 186 23 55 "" [1 uses])

(note 186 202 651 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 651 186 188 23 arch/arm/mm/init.c:424 (set (reg:SI 12 ip)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn 188 651 189 23 arch/arm/mm/init.c:424 (set (reg/f:SI 9 r9 [orig:258 mem_map ] [258])
        (mem/f/c/i:SI (reg:SI 12 ip) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 406) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 189 188 199 23 arch/arm/mm/init.c:424 (set (reg/v/f:SI 9 r9 [orig:173 page ] [173])
        (plus:SI (reg/f:SI 9 r9 [orig:258 mem_map ] [258])
            (reg:SI 8 r8 [orig:154 ivtmp.722 ] [154]))) 4 {*arm_addsi3} (nil))

(insn 199 189 191 23 arch/arm/mm/init.c:423 discrim 2 (set (reg:SI 8 r8 [orig:154 ivtmp.722 ] [154])
        (plus:SI (reg:SI 8 r8 [orig:154 ivtmp.722 ] [154])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 191 199 643 23 include/linux/page-flags.h:207 (set (reg:SI 1 r1)
        (reg/v/f:SI 9 r9 [orig:173 page ] [173])) 167 {*arm_movsi_insn} (nil))

(insn 643 191 192 23 include/linux/page-flags.h:207 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (nil))

(call_insn 192 643 652 23 include/linux/page-flags.h:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 652 192 194 23 include/linux/mm.h:417 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 194 652 195 23 include/linux/mm.h:417 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 9 r9 [orig:173 page ] [173])
                (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 195 194 489 23 arch/arm/mm/init.c:427 (set (reg:SI 0 r0)
        (reg/v/f:SI 9 r9 [orig:173 page ] [173])) 167 {*arm_movsi_insn} (nil))

(insn 489 195 197 23 arch/arm/mm/init.c:427 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 197 489 644 23 arch/arm/mm/init.c:427 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10f4c580 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 644 197 200 23 arch/arm/mm/init.c:427 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 23 -> ( 24)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 23 22) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  23 [100.0%]  (fallthru,dfs_back)
;; Pred edge  22 [100.0%] 
(code_label 200 644 201 24 54 "" [1 uses])

(note 201 200 487 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 487 201 203 24 include/linux/page-flags.h:207 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn 203 487 198 24 arch/arm/mm/init.c:423 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
            (reg/v:SI 5 r5 [orig:148 start.759 ] [148]))) 219 {*arm_cmpsi_insn} (nil))

(insn 198 203 204 24 arch/arm/mm/init.c:423 discrim 2 (set (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
        (plus:SI (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 204 198 205 24 arch/arm/mm/init.c:423 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 202)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 24 -> ( 23 25)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [91.0%] 
;; Succ edge  25 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 5 [r5] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  24 [9.0%]  (fallthru,loop_exit)
(note 205 204 207 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 207 205 208 25 arch/arm/mm/init.c:573 (set (reg:SI 5 r5 [261])
        (plus:SI (reg/v:SI 5 r5 [orig:148 start.759 ] [148])
            (reg:SI 11 fp [orig:142 totalhigh_pages.765 ] [142]))) 4 {*arm_addsi3} (nil))

(insn 208 207 209 25 arch/arm/mm/init.c:573 (set (reg:SI 3 r3 [262])
        (minus:SI (reg:SI 5 r5 [261])
            (reg/v:SI 3 r3 [orig:137 start.772 ] [137]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
        (nil)))

(insn 209 208 632 25 arch/arm/mm/init.c:573 (set (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
        (reg:SI 3 r3 [262])) 167 {*arm_movsi_insn} (nil))

(jump_insn 632 209 633 25 (set (pc)
        (label_ref 210)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 27)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  27 [100.0%] 

(barrier 633 632 635)

;; Start of basic block ( 17) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 3 [r3] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  17 [4.5%]  (loop_exit)
(code_label 635 633 634 26 68 "" [1 uses])

(note 634 635 604 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 604 634 210 26 (set (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
        (reg/v/f:SI 3 r3 [orig:167 mem ] [167])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 26 -> ( 27)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  27 [100.0%]  (fallthru)

;; Start of basic block ( 9 21 26 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  9 [50.0%] 
;; Pred edge  21 [26.3%] 
;; Pred edge  26 [100.0%]  (fallthru)
;; Pred edge  25 [100.0%] 
(code_label 210 604 211 27 47 "" [3 uses])

(note 211 210 212 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 212 211 213 27 arch/arm/mm/init.c:536 (set (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
        (plus:SI (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))
;; End of basic block 27 -> ( 28)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 27 8) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  27 [100.0%]  (fallthru,dfs_back)
;; Pred edge  8 [100.0%] 
(code_label 213 212 214 28 46 "" [1 uses])

(note 214 213 219 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 219 214 218 28 NOTE_INSN_DELETED)

(insn 218 219 220 28 arch/arm/mm/init.c:536 discrim 1 (set (reg:SI 2 r2 [orig:266 memblock.memory.cnt ] [266])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 8 [0x8]))) [0 memblock.memory.cnt+0 S4 A32])
            (nil))))

(insn 220 218 221 28 arch/arm/mm/init.c:536 discrim 1 (set (reg/f:SI 3 r3 [orig:268 memblock.memory.regions ] [268])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
            (nil))))

(insn 221 220 222 28 arch/arm/mm/init.c:536 discrim 1 (set (reg:SI 3 r3 [267])
        (plus:SI (mult:SI (reg:SI 2 r2 [orig:266 memblock.memory.cnt ] [266])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [orig:268 memblock.memory.regions ] [268]))) 270 {*arith_shiftsi} (nil))

(insn 222 221 223 28 arch/arm/mm/init.c:536 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
            (reg:SI 3 r3 [267]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 223 222 224 28 arch/arm/mm/init.c:536 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 215)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 28 -> ( 9 29)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  9 [91.0%] 
;; Succ edge  29 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr]
;; live  kill	

;; Pred edge  28 [9.0%]  (fallthru,loop_exit)
(note 224 223 232 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 232 224 225 29 NOTE_INSN_DELETED)

(insn 225 232 236 29 arch/arm/mm/init.c:575 (set (reg/f:SI 3 r3 [269])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn 236 225 237 29 arch/arm/mm/init.c:620 (set (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 237 236 524 29 arch/arm/mm/init.c:612 (set (reg/v:SI 0 r0 [orig:183 i ] [183])
        (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 524 237 238 29 arch/arm/mm/init.c:612 discrim 1 (set (reg/f:SI 1 r1 [387])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 238 524 239 29 arch/arm/mm/init.c:610 (set (reg/v:SI 6 r6 [orig:184 free_pages ] [184])
        (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 239 238 580 29 arch/arm/mm/init.c:610 (set (reg/v:SI 4 r4 [orig:185 reserved_pages ] [185])
        (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 580 239 228 29 arch/arm/mm/init.c:575 (set (reg/f:SI 12 ip [270])
        (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)
        (nil)))

(insn 228 580 229 29 arch/arm/mm/init.c:575 (set (reg:SI 5 r5 [orig:272 totalhigh_pages ] [272])
        (mem/c/i:SI (reg/f:SI 12 ip [270]) [0 totalhigh_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>) [0 totalhigh_pages+0 S4 A32])
        (nil)))

(insn 229 228 579 29 arch/arm/mm/init.c:575 (set (reg:SI 14 lr [orig:273 totalram_pages ] [273])
        (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>) [0 totalram_pages+0 S4 A32])
            (nil))))

(insn 579 229 235 29 arch/arm/mm/init.c:620 (set (reg/f:SI 12 ip [276])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(insn 235 579 230 29 arch/arm/mm/init.c:620 (set (reg/f:SI 12 ip [orig:189 mem_map.392 ] [189])
        (mem/f/c/i:SI (reg/f:SI 12 ip [276]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 230 235 231 29 arch/arm/mm/init.c:575 (set (reg:SI 14 lr [274])
        (plus:SI (reg:SI 5 r5 [orig:272 totalhigh_pages ] [272])
            (reg:SI 14 lr [orig:273 totalram_pages ] [273]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])
        (nil)))

(insn 231 230 233 29 arch/arm/mm/init.c:575 (set (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])
        (reg:SI 14 lr [274])) 167 {*arm_movsi_insn} (nil))

(insn 233 231 535 29 arch/arm/mm/init.c:612 discrim 1 (set (reg:SI 5 r5 [orig:188 D.25389 ] [188])
        (mem/s/j/c:SI (pre_inc:SI (reg/f:SI 1 r1 [387])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 1 r1 [387])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
            (nil))))

(jump_insn 535 233 536 29 arch/arm/mm/init.c:612 (set (pc)
        (label_ref 295)) 242 {*arm_jump} (nil))
;; End of basic block 29 -> ( 40)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  40 [100.0%] 

(barrier 536 535 297)

;; Start of basic block ( 40) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  40 [91.0%] 
(code_label 297 536 242 30 63 "" [1 uses])

(note 242 297 248 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(note 248 242 253 30 NOTE_INSN_DELETED)

(note 253 248 245 30 NOTE_INSN_DELETED)

(insn 245 253 250 30 arch/arm/mm/init.c:584 (set (reg/f:SI 3 r3 [orig:155 D.26304 ] [155])
        (plus:SI (reg/f:SI 1 r1 [387])
            (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))))
        (nil)))

(insn 250 245 246 30 arch/arm/mm/init.c:621 (set (reg:SI 7 r7 [orig:282 <variable>.size ] [282])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:155 D.26304 ] [155])
                (const_int 8 [0x8])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 246 250 251 30 arch/arm/mm/init.c:617 (set (reg:SI 3 r3 [orig:190 D.25376 ] [190])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:155 D.26304 ] [155])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 251 246 247 30 arch/arm/mm/init.c:621 (set (reg:SI 7 r7 [281])
        (plus:SI (reg:SI 3 r3 [orig:190 D.25376 ] [190])
            (reg:SI 7 r7 [orig:282 <variable>.size ] [282]))) 4 {*arm_addsi3} (nil))

(insn 247 251 252 30 arch/arm/mm/init.c:620 (set (reg:SI 3 r3 [279])
        (lshiftrt:SI (reg:SI 3 r3 [orig:190 D.25376 ] [190])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 252 247 249 30 arch/arm/mm/init.c:621 (set (reg:SI 7 r7 [283])
        (lshiftrt:SI (reg:SI 7 r7 [281])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 249 252 254 30 arch/arm/mm/init.c:620 (set (reg/v/f:SI 3 r3 [orig:182 page ] [182])
        (plus:SI (mult:SI (reg:SI 3 r3 [279])
                (const_int 32 [0x20]))
            (reg/f:SI 12 ip [orig:189 mem_map.392 ] [189]))) 270 {*arith_shiftsi} (nil))

(insn 254 249 289 30 arch/arm/mm/init.c:621 (set (reg/v/f:SI 7 r7 [orig:181 end ] [181])
        (plus:SI (mult:SI (reg:SI 7 r7 [283])
                (const_int 32 [0x20]))
            (reg/f:SI 12 ip [orig:189 mem_map.392 ] [189]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 30 -> ( 31)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  31 [100.0%]  (fallthru)

;; Start of basic block ( 30 38) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 8 [r8] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 8 [r8] 14 [lr] 24 [cc]
;; live  kill	

;; Pred edge  30 [100.0%]  (fallthru)
;; Pred edge  38 [86.0%]  (dfs_back)
(code_label 289 254 255 31 62 "" [1 uses])

(note 255 289 258 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 258 255 257 31 NOTE_INSN_DELETED)

(insn 257 258 272 31 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:165 D.25775 ] [165])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:182 page ] [182]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 272 257 259 31 include/linux/mm.h:356 (set (reg/v/f:SI 14 lr [orig:141 page.767 ] [141])
        (reg/v/f:SI 3 r3 [orig:182 page ] [182])) 167 {*arm_movsi_insn} (nil))

(insn 259 272 260 31 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:165 D.25775 ] [165])
                (const_int 1 [0x1])
                (const_int 10 [0xa]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 260 259 261 31 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 265)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 31 -> ( 32 33)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  32 [50.0%]  (fallthru)
;; Succ edge  33 [50.0%] 

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  31 [50.0%]  (fallthru)
(note 261 260 262 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 262 261 537 32 arch/arm/mm/init.c:625 (set (reg/v:SI 4 r4 [orig:185 reserved_pages ] [185])
        (plus:SI (reg/v:SI 4 r4 [orig:185 reserved_pages ] [185])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 537 262 538 32 (set (pc)
        (label_ref 286)) 242 {*arm_jump} (nil))
;; End of basic block 32 -> ( 38)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  38 [100.0%] 

(barrier 538 537 265)

;; Start of basic block ( 31) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  31 [50.0%] 
(code_label 265 538 266 33 58 "" [1 uses])

(note 266 265 268 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(note 268 266 267 33 NOTE_INSN_DELETED)

(insn 267 268 269 33 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:162 D.25790 ] [162])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:182 page ] [182]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 269 267 270 33 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:162 D.25790 ] [162])
                (const_int 1 [0x1])
                (const_int 15 [0xf]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 270 269 276 33 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 278)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 33 -> ( 35 36)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  35 [0.0%]  (fallthru)
;; Succ edge  36 [100.0%] 

;; Start of basic block ( 33) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 14 [lr]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 14 [lr]
;; live  kill	

;; Pred edge  33 [0.0%]  (fallthru)
(note 276 270 277 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 277 276 278 35 include/linux/mm.h:355 (set (reg/v/f:SI 14 lr [orig:141 page.767 ] [141])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:182 page ] [182])
                (const_int 28 [0x1c])) [0 <variable>.D.8040.first_page+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 35 -> ( 36)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  36 [100.0%]  (fallthru)

;; Start of basic block ( 35 33) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp] 14 [lr]
;; lr  def 	 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 14 [lr] 24 [cc]
;; live  kill	

;; Pred edge  35 [100.0%]  (fallthru)
;; Pred edge  33 [100.0%] 
(code_label 278 277 279 36 61 "" [1 uses])

(note 279 278 281 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 281 279 282 36 include/linux/mm.h:376 (set (reg:SI 14 lr [orig:163 D.25786 ] [163])
        (mem/v:SI (plus:SI (reg/v/f:SI 14 lr [orig:141 page.767 ] [141])
                (const_int 16 [0x10])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 282 281 283 36 arch/arm/mm/init.c:626 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 14 lr [orig:163 D.25786 ] [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 283 282 284 36 arch/arm/mm/init.c:626 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 286)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 36 -> ( 37 38)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  37 [50.0%]  (fallthru)
;; Succ edge  38 [50.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  36 [50.0%]  (fallthru)
(note 284 283 285 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 285 284 286 37 arch/arm/mm/init.c:627 (set (reg/v:SI 6 r6 [orig:184 free_pages ] [184])
        (plus:SI (reg/v:SI 6 r6 [orig:184 free_pages ] [184])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))
;; End of basic block 37 -> ( 38)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  38 [100.0%]  (fallthru)

;; Start of basic block ( 37 36 32) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  37 [100.0%]  (fallthru)
;; Pred edge  36 [50.0%] 
;; Pred edge  32 [100.0%] 
(code_label 286 285 287 38 59 "" [2 uses])

(note 287 286 288 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 288 287 290 38 arch/arm/mm/init.c:628 (set (reg/v/f:SI 3 r3 [orig:182 page ] [182])
        (plus:SI (reg/v/f:SI 3 r3 [orig:182 page ] [182])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 290 288 291 38 arch/arm/mm/init.c:629 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:182 page ] [182])
            (reg/v/f:SI 7 r7 [orig:181 end ] [181]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 291 290 292 38 arch/arm/mm/init.c:629 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 289)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 38 -> ( 31 39)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  31 [86.0%]  (dfs_back)
;; Succ edge  39 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	

;; Pred edge  38 [14.0%]  (fallthru,loop_exit)
(note 292 291 293 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 293 292 294 39 arch/arm/mm/init.c:612 (set (reg/v:SI 0 r0 [orig:183 i ] [183])
        (plus:SI (reg/v:SI 0 r0 [orig:183 i ] [183])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 294 293 295 39 arch/arm/mm/init.c:612 (set (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])
        (plus:SI (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))
;; End of basic block 39 -> ( 40)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  40 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 39 29) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  39 [100.0%]  (fallthru,dfs_back)
;; Pred edge  29 [100.0%] 
(code_label 295 294 296 40 57 "" [1 uses])

(note 296 295 298 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 298 296 299 40 arch/arm/mm/init.c:612 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:183 i ] [183])
            (reg:SI 5 r5 [orig:188 D.25389 ] [188]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 299 298 300 40 arch/arm/mm/init.c:612 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 297)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 40 -> ( 30 41)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  30 [91.0%] 
;; Succ edge  41 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 40) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  40 [9.0%]  (fallthru,loop_exit)
(note 300 299 302 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 302 300 303 41 arch/arm/mm/init.c:636 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x116e6fc0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x116e6fc0>)
        (nil)))

(call_insn 303 302 304 41 arch/arm/mm/init.c:636 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 304 303 307 41 arch/arm/mm/init.c:637 (set (reg/f:SI 2 r2 [288])
        (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)
        (nil)))

(insn 307 304 478 41 arch/arm/mm/init.c:637 (set (reg/f:SI 3 r3 [290])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 478 307 578 41 (set (reg/f:SI 8 r8 [385])
        (reg/f:SI 2 r2 [288])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)
        (nil)))

(insn 578 478 306 41 arch/arm/mm/init.c:637 (set (reg:SI 1 r1 [289])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 306 578 335 41 arch/arm/mm/init.c:637 (set (mem/c/i:SI (reg/f:SI 2 r2 [288]) [0 num_physpages+0 S4 A32])
        (reg:SI 1 r1 [289])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 335 306 308 41 arch/arm/mm/init.c:638 discrim 1 (set (reg/f:SI 7 r7 [384])
        (reg/f:SI 3 r3 [290])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 308 335 541 41 arch/arm/mm/init.c:637 (set (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [290])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
        (nil)))

(jump_insn 541 308 542 41 arch/arm/mm/init.c:638 (set (pc)
        (label_ref 330)) 242 {*arm_jump} (nil))
;; End of basic block 41 -> ( 43)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  43 [100.0%] 

(barrier 542 541 334)

;; Start of basic block ( 43) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  43 [0.0%] 
(code_label 334 542 311 42 65 "" [1 uses])

(note 311 334 315 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(note 315 311 326 42 NOTE_INSN_DELETED)

(note 326 315 312 42 NOTE_INSN_DELETED)

(insn 312 326 313 42 include/linux/memblock.h:129 (set (reg:SI 0 r0 [orig:160 D.25802 ] [160])
        (mem/s/j:SI (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.base+0 S4 A32])
        (nil)))

(insn 313 312 316 42 arch/arm/mm/init.c:640 (set (reg:SI 1 r1 [orig:292 <variable>.size ] [292])
        (mem/s/j:SI (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
                (const_int -4 [0xfffffffffffffffc])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
                (const_int -4 [0xfffffffffffffffc])) [0 <variable>.size+0 S4 A32])
        (nil)))

(insn 316 313 322 42 arch/arm/mm/init.c:640 (set (reg:SI 2 r2 [295])
        (plus:SI (reg:SI 0 r0 [orig:160 D.25802 ] [160])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 322 316 317 42 arch/arm/mm/init.c:641 (set (reg:SI 3 r3 [orig:299 num_physpages ] [299])
        (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>) [0 num_physpages+0 S4 A32])
            (nil))))

(insn 317 322 314 42 arch/arm/mm/init.c:640 (set (reg:SI 2 r2 [294])
        (plus:SI (reg:SI 2 r2 [295])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 0 r0 [orig:160 D.25802 ] [160])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 314 317 484 42 arch/arm/mm/init.c:640 (set (reg:SI 1 r1 [291])
        (plus:SI (reg:SI 0 r0 [orig:160 D.25802 ] [160])
            (reg:SI 1 r1 [orig:292 <variable>.size ] [292]))) 4 {*arm_addsi3} (nil))

(insn 484 314 318 42 arch/arm/mm/init.c:642 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x116e5440>)) 167 {*arm_movsi_insn} (nil))

(insn 318 484 319 42 arch/arm/mm/init.c:640 (set (reg:SI 2 r2 [296])
        (lshiftrt:SI (reg:SI 2 r2 [294])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 319 318 323 42 arch/arm/mm/init.c:640 (set (reg/v:SI 1 r1 [orig:180 pages ] [180])
        (minus:SI (lshiftrt:SI (reg:SI 1 r1 [291])
                (const_int 12 [0xc]))
            (reg:SI 2 r2 [296]))) 270 {*arith_shiftsi} (nil))

(insn 323 319 324 42 arch/arm/mm/init.c:641 (set (reg:SI 3 r3 [300])
        (plus:SI (reg/v:SI 1 r1 [orig:180 pages ] [180])
            (reg:SI 3 r3 [orig:299 num_physpages ] [299]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])
        (nil)))

(insn 324 323 328 42 arch/arm/mm/init.c:641 (set (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])
        (reg:SI 3 r3 [300])) 167 {*arm_movsi_insn} (nil))

(insn 328 324 329 42 arch/arm/mm/init.c:642 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg/v:SI 1 r1 [orig:180 pages ] [180])
            (const_int 8 [0x8]))) 117 {*arm_shiftsi3} (nil))

(call_insn 329 328 330 42 arch/arm/mm/init.c:642 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 42 -> ( 43)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  43 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 42 41) -> 43
;; bb 43 artificial_defs: { }
;; bb 43 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  42 [100.0%]  (fallthru,dfs_back)
;; Pred edge  41 [100.0%] 
(code_label 330 329 331 43 64 "" [1 uses])

(note 331 330 338 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(note 338 331 337 43 NOTE_INSN_DELETED)

(insn 337 338 332 43 arch/arm/mm/init.c:638 discrim 1 (set (reg:SI 1 r1 [orig:306 memblock.memory.cnt ] [306])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [384])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [384])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 8 [0x8]))) [0 memblock.memory.cnt+0 S4 A32])
            (nil))))

(insn 332 337 339 43 arch/arm/mm/init.c:642 (set (reg/v/f:SI 2 r2 [orig:136 reg.773 ] [136])
        (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 339 332 333 43 arch/arm/mm/init.c:638 discrim 1 (set (reg/f:SI 3 r3 [orig:308 memblock.memory.regions ] [308])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [384])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [384])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
            (nil))))

(insn 333 339 340 43 arch/arm/mm/init.c:642 (set (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
        (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 340 333 341 43 arch/arm/mm/init.c:638 discrim 1 (set (reg:SI 3 r3 [307])
        (plus:SI (mult:SI (reg:SI 1 r1 [orig:306 memblock.memory.cnt ] [306])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [orig:308 memblock.memory.regions ] [308]))) 270 {*arith_shiftsi} (nil))

(insn 341 340 342 43 arch/arm/mm/init.c:638 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 2 r2 [orig:136 reg.773 ] [136])
            (reg:SI 3 r3 [307]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 342 341 343 43 arch/arm/mm/init.c:638 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 334)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 43 -> ( 42 44)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  42 [0.0%] 
;; Succ edge  44 [100.0%]  (fallthru,loop_exit)

;; Start of basic block ( 43) -> 44
;; bb 44 artificial_defs: { }
;; bb 44 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  43 [100.0%]  (fallthru,loop_exit)
(note 343 342 347 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(note 347 343 355 44 NOTE_INSN_DELETED)

(note 355 347 356 44 NOTE_INSN_DELETED)

(note 356 355 357 44 NOTE_INSN_DELETED)

(note 357 356 370 44 NOTE_INSN_DELETED)

(note 370 357 418 44 NOTE_INSN_DELETED)

(note 418 370 419 44 NOTE_INSN_DELETED)

(note 419 418 432 44 NOTE_INSN_DELETED)

(note 432 419 433 44 NOTE_INSN_DELETED)

(note 433 432 446 44 NOTE_INSN_DELETED)

(note 446 433 447 44 NOTE_INSN_DELETED)

(note 447 446 460 44 NOTE_INSN_DELETED)

(note 460 447 461 44 NOTE_INSN_DELETED)

(note 461 460 577 44 NOTE_INSN_DELETED)

(insn 577 461 346 44 arch/arm/mm/init.c:644 (set (reg/f:SI 3 r3 [383])
        (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)
        (nil)))

(insn 346 577 348 44 arch/arm/mm/init.c:644 (set (reg:SI 1 r1 [orig:312 num_physpages ] [312])
        (mem/c/i:SI (reg/f:SI 3 r3 [383]) [0 num_physpages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>) [0 num_physpages+0 S4 A32])
        (nil)))

(insn 348 346 349 44 arch/arm/mm/init.c:644 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x116e82a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x116e82a0>)
        (nil)))

(insn 349 348 350 44 arch/arm/mm/init.c:644 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg:SI 1 r1 [orig:312 num_physpages ] [312])
            (const_int 8 [0x8]))) 117 {*arm_shiftsi3} (nil))

(call_insn 350 349 364 44 arch/arm/mm/init.c:644 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 364 350 365 44 arch/arm/mm/init.c:646 (set (reg:SI 2 r2)
        (ashift:SI (reg/v:SI 6 r6 [orig:184 free_pages ] [184])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 365 364 362 44 arch/arm/mm/init.c:646 (set (reg:SI 3 r3)
        (ashift:SI (reg/v:SI 4 r4 [orig:185 reserved_pages ] [185])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 362 365 576 44 arch/arm/mm/init.c:646 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x110f07e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x110f07e0>)
        (nil)))

(insn 576 362 352 44 include/asm-generic/atomic-long.h:148 (set (reg/f:SI 1 r1 [orig:159 D.25815 ] [159])
        (symbol_ref:SI ("vm_stat") [flags 0xc0] <var_decl 0x1119ef00 vm_stat>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("vm_stat") [flags 0xc0] <var_decl 0x1119ef00 vm_stat>)
        (nil)))

(insn 352 576 575 44 include/asm-generic/atomic-long.h:148 (set (reg/v:SI 1 r1 [orig:158 x ] [158])
        (mem/v:SI (reg/f:SI 1 r1 [orig:159 D.25815 ] [159]) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (symbol_ref:SI ("vm_stat") [flags 0xc0] <var_decl 0x1119ef00 vm_stat>) [0 S4 A32])
        (nil)))

(insn 575 352 359 44 arch/arm/mm/init.c:646 (set (reg/f:SI 12 ip [318])
        (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)
        (nil)))

(insn 359 575 354 44 arch/arm/mm/init.c:646 (set (reg:SI 12 ip [orig:320 totalhigh_pages ] [320])
        (mem/c/i:SI (reg/f:SI 12 ip [318]) [0 totalhigh_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>) [0 totalhigh_pages+0 S4 A32])
        (nil)))

(insn 354 359 363 44 arch/arm/mm/init.c:646 (set (reg:SI 1 r1 [314])
        (smax:SI (reg/v:SI 1 r1 [orig:158 x ] [158])
            (const_int 0 [0x0]))) 101 {*smax_0} (nil))

(insn 363 354 360 44 arch/arm/mm/init.c:646 (set (reg:SI 1 r1)
        (ashift:SI (reg:SI 1 r1 [314])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 360 363 361 44 arch/arm/mm/init.c:646 (set (reg:SI 12 ip [319])
        (ashift:SI (reg:SI 12 ip [orig:320 totalhigh_pages ] [320])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (nil)))

(insn 361 360 366 44 arch/arm/mm/init.c:646 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [319])) 167 {*arm_movsi_insn} (nil))

(call_insn 366 361 468 44 arch/arm/mm/init.c:646 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 468 366 409 44 arch/arm/mm/init.c:656 (set (reg:SI 3 r3)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(note 409 468 383 44 NOTE_INSN_DELETED)

(insn 383 409 423 44 arch/arm/mm/init.c:656 (set (reg:SI 4 r4 [330])
        (const_int 14 [0xe])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 14 [0xe])
        (nil)))

(note 423 383 391 44 NOTE_INSN_DELETED)

(insn 391 423 574 44 arch/arm/mm/init.c:656 (set (reg:SI 14 lr [334])
        (const_int -1073741824 [0xffffffffc0000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1073741824 [0xffffffffc0000000])
        (nil)))

(insn 574 391 368 44 arch/arm/mm/init.c:687 (set (reg/f:SI 2 r2 [321])
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>)
        (nil)))

(insn 368 574 437 44 arch/arm/mm/init.c:687 (set (reg:SI 11 fp [orig:187 high_memory.397 ] [187])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [321]) [0 high_memory+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>) [0 high_memory+0 S4 A32])
            (nil))))

(note 437 368 369 44 NOTE_INSN_DELETED)

(insn 369 437 451 44 arch/arm/mm/init.c:687 (set (reg:SI 12 ip [322])
        (plus:SI (reg:SI 11 fp [orig:187 high_memory.397 ] [187])
            (const_int 8388608 [0x800000]))) 4 {*arm_addsi3} (nil))

(note 451 369 394 44 NOTE_INSN_DELETED)

(insn 394 451 543 44 arch/arm/mm/init.c:656 (set (reg:SI 9 r9 [335])
        (plus:SI (reg:SI 11 fp [orig:187 high_memory.397 ] [187])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 543 394 573 44 arch/arm/mm/init.c:687 (set (reg:SI 12 ip [orig:186 D.25409 ] [186])
        (lshiftrt:SI (reg:SI 12 ip [322])
            (const_int 23 [0x17]))) 117 {*arm_shiftsi3} (nil))

(insn 573 543 653 44 arch/arm/mm/init.c:656 (set (reg/f:SI 7 r7 [346])
        (const:SI (plus:SI (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
                (const_int 1023 [0x3ff])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
                (const_int 1023 [0x3ff])))
        (nil)))

(insn 653 573 415 44 arch/arm/mm/init.c:656 (set (reg:SI 2 r2)
        (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)) 167 {*arm_movsi_insn} (nil))

(insn 415 653 572 44 arch/arm/mm/init.c:656 (set (reg:SI 7 r7 [345])
        (minus:SI (reg/f:SI 7 r7 [346])
            (reg:SI 2 r2))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
            (const:SI (plus:SI (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)
                    (const_int -1023 [0xfffffffffffffc01]))))
        (nil)))

(insn 572 415 654 44 arch/arm/mm/init.c:656 (set (reg/f:SI 6 r6 [356])
        (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (const_int 1023 [0x3ff])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (const_int 1023 [0x3ff])))
        (nil)))

(insn 654 572 429 44 arch/arm/mm/init.c:656 (set (reg:SI 1 r1)
        (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)) 167 {*arm_movsi_insn} (nil))

(insn 429 654 571 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [355])
        (minus:SI (reg/f:SI 6 r6 [356])
            (reg:SI 1 r1))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
            (const:SI (plus:SI (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
                    (const_int -1023 [0xfffffffffffffc01]))))
        (nil)))

(insn 571 429 655 44 arch/arm/mm/init.c:656 (set (reg/f:SI 5 r5 [366])
        (const:SI (plus:SI (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
                (const_int 1023 [0x3ff])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
                (const_int 1023 [0x3ff])))
        (nil)))

(insn 655 571 443 44 arch/arm/mm/init.c:656 (set (reg:SI 2 r2)
        (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)) 167 {*arm_movsi_insn} (nil))

(insn 443 655 544 44 arch/arm/mm/init.c:656 (set (reg:SI 5 r5 [365])
        (minus:SI (reg/f:SI 5 r5 [366])
            (reg:SI 2 r2))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
            (const:SI (plus:SI (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)
                    (const_int -1023 [0xfffffffffffffc01]))))
        (nil)))

(insn 544 443 570 44 arch/arm/mm/init.c:687 (set (reg:SI 12 ip [orig:186 D.25409 ] [186])
        (ashift:SI (reg:SI 12 ip [orig:186 D.25409 ] [186])
            (const_int 23 [0x17]))) 117 {*arm_shiftsi3} (nil))

(insn 570 544 656 44 arch/arm/mm/init.c:656 (set (reg/f:SI 8 r8 [376])
        (const:SI (plus:SI (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
                (const_int 1023 [0x3ff])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
                (const_int 1023 [0x3ff])))
        (nil)))

(insn 656 570 457 44 arch/arm/mm/init.c:656 (set (reg:SI 1 r1)
        (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)) 167 {*arm_movsi_insn} (nil))

(insn 457 656 397 44 arch/arm/mm/init.c:656 (set (reg:SI 8 r8 [375])
        (minus:SI (reg/f:SI 8 r8 [376])
            (reg:SI 1 r1))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
            (const:SI (plus:SI (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)
                    (const_int -1023 [0xfffffffffffffc01]))))
        (nil)))

(note 397 457 417 44 NOTE_INSN_DELETED)

(insn 417 397 431 44 arch/arm/mm/init.c:656 (set (reg:SI 10 sl [351])
        (plus:SI (reg:SI 7 r7 [345])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn 431 417 445 44 arch/arm/mm/init.c:656 (set (reg:SI 0 r0 [361])
        (plus:SI (reg:SI 6 r6 [355])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn 445 431 459 44 arch/arm/mm/init.c:656 (set (reg:SI 1 r1 [371])
        (plus:SI (reg:SI 5 r5 [365])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn 459 445 420 44 arch/arm/mm/init.c:656 (set (reg:SI 2 r2 [381])
        (plus:SI (reg:SI 8 r8 [375])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn 420 459 434 44 arch/arm/mm/init.c:656 (parallel [
            (set (reg:SI 7 r7 [349])
                (if_then_else:SI (ge (reg:SI 7 r7 [345])
                        (const_int 0 [0x0]))
                    (reg:SI 7 r7 [345])
                    (plus:SI (reg:SI 10 sl [351])
                        (const_int 3 [0x3]))))
            (clobber (reg:CC 24 cc))
        ]) 295 {*ifcompare_move_plus} (nil))

(insn 434 420 448 44 arch/arm/mm/init.c:656 (parallel [
            (set (reg:SI 6 r6 [359])
                (if_then_else:SI (ge (reg:SI 6 r6 [355])
                        (const_int 0 [0x0]))
                    (reg:SI 6 r6 [355])
                    (plus:SI (reg:SI 0 r0 [361])
                        (const_int 3 [0x3]))))
            (clobber (reg:CC 24 cc))
        ]) 295 {*ifcompare_move_plus} (nil))

(insn 448 434 462 44 arch/arm/mm/init.c:656 (parallel [
            (set (reg:SI 5 r5 [369])
                (if_then_else:SI (ge (reg:SI 5 r5 [365])
                        (const_int 0 [0x0]))
                    (reg:SI 5 r5 [365])
                    (plus:SI (reg:SI 1 r1 [371])
                        (const_int 3 [0x3]))))
            (clobber (reg:CC 24 cc))
        ]) 295 {*ifcompare_move_plus} (nil))

(insn 462 448 388 44 arch/arm/mm/init.c:656 (parallel [
            (set (reg:SI 8 r8 [379])
                (if_then_else:SI (ge (reg:SI 8 r8 [375])
                        (const_int 0 [0x0]))
                    (reg:SI 8 r8 [375])
                    (plus:SI (reg:SI 2 r2 [381])
                        (const_int 3 [0x3]))))
            (clobber (reg:CC 24 cc))
        ]) 295 {*ifcompare_move_plus} (nil))

(insn 388 462 465 44 arch/arm/mm/init.c:656 (set (reg:SI 10 sl [332])
        (minus:SI (const_int -134217728 [0xfffffffff8000000])
            (reg:SI 12 ip [orig:186 D.25409 ] [186]))) 28 {*arm_subsi3_insn} (nil))

(insn 465 388 395 44 arch/arm/mm/init.c:656 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x1161bc00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x1161bc00>)
        (nil)))

(insn 395 465 466 44 arch/arm/mm/init.c:656 (set (reg:SI 9 r9 [336])
        (lshiftrt:SI (reg:SI 9 r9 [335])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 S4 A32])
        (nil)))

(insn 466 395 389 44 arch/arm/mm/init.c:656 (set (reg:SI 1 r1)
        (const_int -65536 [0xffffffffffff0000])) 167 {*arm_movsi_insn} (nil))

(insn 389 466 467 44 arch/arm/mm/init.c:656 (set (reg:SI 10 sl [333])
        (lshiftrt:SI (reg:SI 10 sl [332])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 S4 A32])
        (nil)))

(insn 467 389 421 44 arch/arm/mm/init.c:656 (set (reg:SI 2 r2)
        (const_int -61440 [0xffffffffffff1000])) 167 {*arm_movsi_insn} (nil))

(insn 421 467 657 44 arch/arm/mm/init.c:656 (set (reg:SI 7 r7)
        (ashiftrt:SI (reg:SI 7 r7 [349])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 S4 A32])
        (expr_list:REG_EQUAL (div:SI (reg:SI 7 r7 [345])
                (const_int 1024 [0x400]))
            (nil))))

(insn 657 421 569 44 arch/arm/mm/init.c:656 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 S4 A32])
        (reg:SI 7 r7)) 167 {*arm_movsi_insn} (nil))

(insn 569 657 374 44 arch/arm/mm/init.c:656 (set (reg:SI 7 r7 [325])
        (const_int -1048576 [0xfffffffffff00000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1048576 [0xfffffffffff00000])
        (nil)))

(insn 374 569 435 44 arch/arm/mm/init.c:656 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 7 r7 [325])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1048576 [0xfffffffffff00000])
        (nil)))

(insn 435 374 568 44 arch/arm/mm/init.c:656 (set (reg:SI 7 r7 [362])
        (ashiftrt:SI (reg:SI 6 r6 [359])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 92 [0x5c])) [0 S4 A32])
        (expr_list:REG_EQUAL (div:SI (reg:SI 6 r6 [355])
                (const_int 1024 [0x400]))
            (nil))))

(insn 568 435 376 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [326])
        (const_int -131072 [0xfffffffffffe0000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -131072 [0xfffffffffffe0000])
        (nil)))

(insn 376 568 449 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 6 r6 [326])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -131072 [0xfffffffffffe0000])
        (nil)))

(insn 449 376 567 44 arch/arm/mm/init.c:656 (set (reg:SI 5 r5 [372])
        (ashiftrt:SI (reg:SI 5 r5 [369])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 104 [0x68])) [0 S4 A32])
        (expr_list:REG_EQUAL (div:SI (reg:SI 5 r5 [365])
                (const_int 1024 [0x400]))
            (nil))))

(insn 567 449 378 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [327])
        (const_int 896 [0x380])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 896 [0x380])
        (nil)))

(insn 378 567 463 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 6 r6 [327])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 896 [0x380])
        (nil)))

(insn 463 378 566 44 arch/arm/mm/init.c:656 (set (reg:SI 8 r8 [382])
        (ashiftrt:SI (reg:SI 8 r8 [379])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 116 [0x74])) [0 S4 A32])
        (expr_list:REG_EQUAL (div:SI (reg:SI 8 r8 [375])
                (const_int 1024 [0x400]))
            (nil))))

(insn 566 463 380 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [328])
        (const_int -16777216 [0xffffffffff000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -16777216 [0xffffffffff000000])
        (nil)))

(insn 380 566 565 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 6 r6 [328])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -16777216 [0xffffffffff000000])
        (nil)))

(insn 565 380 382 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [329])
        (const_int -2097152 [0xffffffffffe00000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -2097152 [0xffffffffffe00000])
        (nil)))

(insn 382 565 564 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg:SI 6 r6 [329])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2097152 [0xffffffffffe00000])
        (nil)))

(insn 564 382 387 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [331])
        (const_int -134217728 [0xfffffffff8000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -134217728 [0xfffffffff8000000])
        (nil)))

(insn 387 564 390 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 S4 A32])
        (reg:SI 6 r6 [331])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -134217728 [0xfffffffff8000000])
        (nil)))

(insn 390 387 396 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 S4 A32])
        (reg:SI 10 sl [333])) 167 {*arm_movsi_insn} (nil))

(insn 396 390 400 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 S4 A32])
        (reg:SI 9 r9 [336])) 167 {*arm_movsi_insn} (nil))

(insn 400 396 563 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 52 [0x34])) [0 S4 A32])
        (reg:SI 14 lr [334])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1073741824 [0xffffffffc0000000])
        (nil)))

(insn 563 400 402 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [339])
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn 402 563 562 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 S4 A32])
        (reg:SI 6 r6 [339])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 2 [0x2])
        (nil)))

(insn 562 402 404 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [340])
        (const_int -1090519040 [0xffffffffbf000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1090519040 [0xffffffffbf000000])
        (nil)))

(insn 404 562 658 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 S4 A32])
        (reg:SI 6 r6 [340])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1090519040 [0xffffffffbf000000])
        (nil)))

(insn 658 404 406 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6)
        (const_int -1075838976 [0xffffffffbfe00000])) 167 {*arm_movsi_insn} (nil))

(insn 406 658 408 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 S4 A32])
        (reg:SI 6 r6)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1075838976 [0xffffffffbfe00000])
        (nil)))

(insn 408 406 561 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 S4 A32])
        (reg:SI 4 r4 [330])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 14 [0xe])
        (nil)))

(insn 561 408 412 44 arch/arm/mm/init.c:656 (set (reg/f:SI 6 r6 [344])
        (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
        (nil)))

(insn 412 561 422 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 76 [0x4c])) [0 S4 A32])
        (reg/f:SI 6 r6 [344])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
        (nil)))

(note 422 412 560 44 NOTE_INSN_DELETED)

(insn 560 422 426 44 arch/arm/mm/init.c:656 (set (reg/f:SI 6 r6 [354])
        (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
        (nil)))

(insn 426 560 436 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 88 [0x58])) [0 S4 A32])
        (reg/f:SI 6 r6 [354])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
        (nil)))

(insn 436 426 559 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 92 [0x5c])) [0 S4 A32])
        (reg:SI 7 r7 [362])) 167 {*arm_movsi_insn} (nil))

(insn 559 436 440 44 arch/arm/mm/init.c:656 (set (reg/f:SI 6 r6 [364])
        (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
        (nil)))

(insn 440 559 450 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 100 [0x64])) [0 S4 A32])
        (reg/f:SI 6 r6 [364])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
        (nil)))

(insn 450 440 558 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 104 [0x68])) [0 S4 A32])
        (reg:SI 5 r5 [372])) 167 {*arm_movsi_insn} (nil))

(insn 558 450 454 44 arch/arm/mm/init.c:656 (set (reg/f:SI 5 r5 [374])
        (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
        (nil)))

(insn 454 558 464 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 S4 A32])
        (reg/f:SI 5 r5 [374])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
        (nil)))

(insn 464 454 384 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 116 [0x74])) [0 S4 A32])
        (reg:SI 8 r8 [382])) 167 {*arm_movsi_insn} (nil))

(insn 384 464 385 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 S4 A32])
        (reg:SI 4 r4 [330])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 14 [0xe])
        (nil)))

(insn 385 384 392 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 S4 A32])
        (reg:SI 12 ip [orig:186 D.25409 ] [186])) 167 {*arm_movsi_insn} (nil))

(insn 392 385 393 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 S4 A32])
        (reg:SI 14 lr [334])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1073741824 [0xffffffffc0000000])
        (nil)))

(insn 393 392 659 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 S4 A32])
        (reg:SI 11 fp [orig:187 high_memory.397 ] [187])) 167 {*arm_movsi_insn} (nil))

(insn 659 393 398 44 arch/arm/mm/init.c:656 (set (reg:SI 12 ip)
        (const_int -1075838976 [0xffffffffbfe00000])) 167 {*arm_movsi_insn} (nil))

(insn 398 659 660 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1075838976 [0xffffffffbfe00000])
        (nil)))

(insn 660 398 410 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6)
        (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)) 167 {*arm_movsi_insn} (nil))

(insn 410 660 661 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 S4 A32])
        (reg:SI 6 r6)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)
        (nil)))

(insn 661 410 424 44 arch/arm/mm/init.c:656 (set (reg:SI 12 ip)
        (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)) 167 {*arm_movsi_insn} (nil))

(insn 424 661 662 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
        (nil)))

(insn 662 424 438 44 arch/arm/mm/init.c:656 (set (reg:SI 6 r6)
        (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)) 167 {*arm_movsi_insn} (nil))

(insn 438 662 663 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 96 [0x60])) [0 S4 A32])
        (reg:SI 6 r6)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)
        (nil)))

(insn 663 438 452 44 arch/arm/mm/init.c:656 (set (reg:SI 12 ip)
        (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)) 167 {*arm_movsi_insn} (nil))

(insn 452 663 469 44 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 108 [0x6c])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)
        (nil)))

(call_insn 469 452 557 44 arch/arm/mm/init.c:656 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 120 [0x78])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 44 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 557 469 636 NOTE_INSN_DELETED)

(note 636 557 0 NOTE_INSN_DELETED)


;; Function bootmem_init (bootmem_init)[0:1354] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 31 count 52 (  2.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 31 count 56 (  2.4)
scanning new insn with uid = 221.
verify found no changes in insn with uid = 221.
deleting insn with uid = 198.
scanning new insn with uid = 222.
verify found no changes in insn with uid = 222.
deleting insn with uid = 196.
scanning new insn with uid = 223.
verify found no changes in insn with uid = 223.
deleting insn with uid = 193.
scanning new insn with uid = 224.
rescanning insn with uid = 224.
deleting insn with uid = 224.
deleting insn with uid = 162.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 31 count 52 (  2.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 23 n_edges 31 count 56 (  2.4)

Pass 0 for finding allocno costs

    a72 (r228,l2) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r228,l0) best GENERAL_REGS, cover GENERAL_REGS
    a53 (r226,l3) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r226,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r225,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r224,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r223,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r222,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r219,l4) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r217,l4) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r216,l4) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r215,l4) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r214,l4) best GENERAL_REGS, cover GENERAL_REGS
    a41 (r213,l4) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r212,l4) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r211,l4) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r210,l4) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r209,l4) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r208,l4) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r204,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r200,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r199,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r198,l0) best GENERAL_REGS, cover GENERAL_REGS
    a55 (r197,l3) best GENERAL_REGS, cover GENERAL_REGS
    a54 (r196,l3) best GENERAL_REGS, cover GENERAL_REGS
    a56 (r195,l3) best GENERAL_REGS, cover GENERAL_REGS
    a57 (r190,l3) best GENERAL_REGS, cover GENERAL_REGS
    a62 (r188,l3) best GENERAL_REGS, cover GENERAL_REGS
    a61 (r187,l3) best GENERAL_REGS, cover GENERAL_REGS
    a65 (r186,l3) best GENERAL_REGS, cover GENERAL_REGS
    a63 (r185,l3) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a74 (r183,l2) best GENERAL_REGS, cover GENERAL_REGS
    a73 (r182,l2) best GENERAL_REGS, cover GENERAL_REGS
    a75 (r181,l2) best GENERAL_REGS, cover GENERAL_REGS
    a76 (r176,l2) best GENERAL_REGS, cover GENERAL_REGS
    a83 (r174,l2) best GENERAL_REGS, cover GENERAL_REGS
    a81 (r173,l2) best GENERAL_REGS, cover GENERAL_REGS
    a82 (r172,l2) best GENERAL_REGS, cover GENERAL_REGS
    a80 (r171,l2) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r170,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r169,l0) best GENERAL_REGS, cover GENERAL_REGS
    a92 (r166,l1) best GENERAL_REGS, cover GENERAL_REGS
    a96 (r165,l1) best GENERAL_REGS, cover GENERAL_REGS
    a93 (r164,l1) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a90 (r160,l1) best GENERAL_REGS, cover GENERAL_REGS
    a71 (r160,l2) best GENERAL_REGS, cover GENERAL_REGS
    a52 (r160,l3) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r160,l4) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a79 (r159,l2) best GENERAL_REGS, cover GENERAL_REGS
    a91 (r158,l1) best GENERAL_REGS, cover GENERAL_REGS
    a89 (r157,l1) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a88 (r156,l1) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a95 (r155,l1) best GENERAL_REGS, cover GENERAL_REGS
    a64 (r154,l3) best GENERAL_REGS, cover GENERAL_REGS
    a84 (r153,l2) best GENERAL_REGS, cover GENERAL_REGS
    a59 (r152,l3) best GENERAL_REGS, cover GENERAL_REGS
    a78 (r151,l2) best GENERAL_REGS, cover GENERAL_REGS
    a70 (r148,l2) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a69 (r147,l2) best GENERAL_REGS, cover GENERAL_REGS
    a51 (r147,l3) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r147,l4) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a68 (r146,l2) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r146,l3) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r145,l4) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r144,l4) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r143,l4) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r142,l4) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r141,l4) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a87 (r140,l1) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a94 (r139,l1) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r138,l3) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a60 (r137,l3) best GENERAL_REGS, cover GENERAL_REGS
    a86 (r136,l1) best GENERAL_REGS, cover GENERAL_REGS
    a67 (r136,l2) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r136,l3) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r136,l4) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a85 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a66 (r135,l2) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r135,l3) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r135,l4) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a77 (r134,l2) best GENERAL_REGS, cover GENERAL_REGS
    a58 (r133,l3) best GENERAL_REGS, cover GENERAL_REGS

  a0(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r224,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r135,l0) costs: LO_REGS:0,2000 BASE_REGS:0,2000 HI_REGS:0,2000 GENERAL_REGS:0,2000 MEM:60000
  a4(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r135,l4) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a28(r136,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a29(r141,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r142,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a31(r147,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a32(r160,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a33(r219,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r216,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r143,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a36(r144,l4) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a37(r217,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r215,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r214,l4) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a40(r212,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r213,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r210,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r208,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r211,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r145,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a46(r209,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r135,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r136,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a49(r138,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a50(r146,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a51(r147,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a52(r160,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a53(r226,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a54(r196,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r197,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a56(r195,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a57(r190,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r133,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r152,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a60(r137,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r187,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a62(r188,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r185,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a64(r154,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a65(r186,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a67(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a68(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a69(r147,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a70(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a71(r160,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a72(r228,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r182,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a74(r183,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a75(r181,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a76(r176,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a78(r151,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a79(r159,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r171,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a81(r173,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a82(r172,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r174,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a84(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a85(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a86(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a88(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a89(r157,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a90(r160,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a92(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a93(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a94(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a96(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r228: preferred GENERAL_REGS, alternative NO_REGS
    r226: preferred GENERAL_REGS, alternative NO_REGS
    r225: preferred GENERAL_REGS, alternative NO_REGS
    r224: preferred GENERAL_REGS, alternative NO_REGS
    r223: preferred GENERAL_REGS, alternative NO_REGS
    r222: preferred GENERAL_REGS, alternative NO_REGS
    r219: preferred GENERAL_REGS, alternative NO_REGS
    r217: preferred GENERAL_REGS, alternative NO_REGS
    r216: preferred GENERAL_REGS, alternative NO_REGS
    r215: preferred GENERAL_REGS, alternative NO_REGS
    r214: preferred GENERAL_REGS, alternative NO_REGS
    r213: preferred GENERAL_REGS, alternative NO_REGS
    r212: preferred GENERAL_REGS, alternative NO_REGS
    r211: preferred GENERAL_REGS, alternative NO_REGS
    r210: preferred GENERAL_REGS, alternative NO_REGS
    r209: preferred GENERAL_REGS, alternative NO_REGS
    r208: preferred GENERAL_REGS, alternative NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS
    r204: preferred GENERAL_REGS, alternative NO_REGS
    r200: preferred GENERAL_REGS, alternative NO_REGS
    r199: preferred GENERAL_REGS, alternative NO_REGS
    r198: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r195: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r186: preferred GENERAL_REGS, alternative NO_REGS
    r185: preferred GENERAL_REGS, alternative NO_REGS
    r184: preferred GENERAL_REGS, alternative NO_REGS
    r183: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r176: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r172: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r170: preferred GENERAL_REGS, alternative NO_REGS
    r169: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r164: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r225,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r224,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r135,l0) costs: LO_REGS:0,2000 BASE_REGS:0,2000 HI_REGS:0,2000 GENERAL_REGS:0,2000 MEM:60000
  a4(r222,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r223,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r200,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a10(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r204,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r198,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r199,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a17(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r226,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a19(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r170,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a21(r228,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r169,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a23(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a27(r135,l4) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a28(r136,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a29(r141,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r142,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a31(r147,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a32(r160,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a33(r219,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r216,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r143,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a36(r144,l4) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a37(r217,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r215,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r214,l4) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a40(r212,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a41(r213,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a42(r210,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r208,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r211,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a45(r145,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a46(r209,l4) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r135,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a48(r136,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a49(r138,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a50(r146,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a51(r147,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a52(r160,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a53(r226,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a54(r196,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a55(r197,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a56(r195,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a57(r190,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a58(r133,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a59(r152,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a60(r137,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a61(r187,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a62(r188,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a63(r185,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a64(r154,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a65(r186,l3) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a66(r135,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a67(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a68(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a69(r147,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a70(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a71(r160,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a72(r228,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a73(r182,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a74(r183,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a75(r181,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a76(r176,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a77(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a78(r151,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a79(r159,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a80(r171,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a81(r173,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a82(r172,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a83(r174,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a84(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a85(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a86(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a87(r140,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a88(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a89(r157,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a90(r160,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a91(r158,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a92(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a93(r164,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a94(r139,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a95(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a96(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 199(l0): point = 0
   Insn 221(l0): point = 2
   Insn 197(l0): point = 4
   Insn 222(l0): point = 6
   Insn 195(l0): point = 8
   Insn 223(l0): point = 10
   Insn 194(l0): point = 12
   Insn 192(l0): point = 14
   Insn 191(l0): point = 16
   Insn 189(l0): point = 18
   Insn 188(l0): point = 20
   Insn 190(l0): point = 22
   Insn 218(l0): point = 25
   Insn 142(l0): point = 27
   Insn 148(l0): point = 29
   Insn 144(l0): point = 31
   Insn 146(l0): point = 33
   Insn 141(l0): point = 35
   Insn 137(l0): point = 37
   Insn 136(l0): point = 39
   Insn 135(l0): point = 41
   Insn 134(l0): point = 43
   Insn 143(l0): point = 45
   Insn 133(l0): point = 47
   Insn 131(l0): point = 49
   Insn 132(l0): point = 51
   Insn 130(l0): point = 53
   Insn 216(l0): point = 56
   Insn 94(l0): point = 58
   Insn 120(l0): point = 60
   Insn 93(l0): point = 62
   Insn 214(l0): point = 65
   Insn 58(l0): point = 67
   Insn 83(l0): point = 69
   Insn 57(l0): point = 71
   Insn 56(l0): point = 73
   Insn 53(l0): point = 75
   Insn 52(l0): point = 77
   Insn 51(l0): point = 79
   Insn 55(l0): point = 81
   Insn 54(l0): point = 83
   Insn 48(l0): point = 85
   Insn 45(l0): point = 87
   Insn 47(l0): point = 89
   Insn 46(l0): point = 91
   Insn 41(l0): point = 93
   Insn 40(l0): point = 95
   Insn 43(l0): point = 97
   Insn 39(l0): point = 99
   Insn 212(l0): point = 102
   Insn 6(l0): point = 104
   Insn 13(l0): point = 106
   Insn 9(l0): point = 108
   Insn 12(l0): point = 110
   Insn 11(l0): point = 112
   Insn 10(l0): point = 114
   Insn 5(l0): point = 116
   Insn 184(l4): point = 119
   Insn 183(l4): point = 121
   Insn 176(l4): point = 125
   Insn 175(l4): point = 127
   Insn 173(l4): point = 129
   Insn 172(l4): point = 131
   Insn 170(l4): point = 134
   Insn 169(l4): point = 136
   Insn 166(l4): point = 139
   Insn 165(l4): point = 141
   Insn 163(l4): point = 143
   Insn 224(l4): point = 145
   Insn 164(l4): point = 147
   Insn 160(l4): point = 150
   Insn 159(l4): point = 152
   Insn 158(l4): point = 154
   Insn 155(l4): point = 156
   Insn 157(l4): point = 158
   Insn 154(l4): point = 160
   Insn 153(l4): point = 162
   Insn 179(l4): point = 164
   Insn 156(l4): point = 166
   Insn 152(l4): point = 168
   Insn 127(l3): point = 171
   Insn 126(l3): point = 173
   Insn 125(l3): point = 175
   Insn 124(l3): point = 177
   Insn 122(l3): point = 179
   Insn 208(l3): point = 181
   Insn 115(l3): point = 184
   Insn 107(l3): point = 187
   Insn 113(l3): point = 189
   Insn 106(l3): point = 191
   Insn 110(l3): point = 193
   Insn 105(l3): point = 195
   Insn 104(l3): point = 197
   Insn 103(l3): point = 199
   Insn 112(l3): point = 201
   Insn 102(l3): point = 203
   Insn 99(l3): point = 205
   Insn 101(l3): point = 207
   Insn 116(l3): point = 209
   Insn 100(l3): point = 211
   Insn 98(l3): point = 213
   Insn 90(l2): point = 216
   Insn 89(l2): point = 218
   Insn 88(l2): point = 220
   Insn 87(l2): point = 222
   Insn 85(l2): point = 224
   Insn 78(l2): point = 227
   Insn 71(l2): point = 230
   Insn 77(l2): point = 232
   Insn 70(l2): point = 234
   Insn 76(l2): point = 236
   Insn 74(l2): point = 238
   Insn 69(l2): point = 240
   Insn 65(l2): point = 242
   Insn 68(l2): point = 244
   Insn 64(l2): point = 246
   Insn 67(l2): point = 248
   Insn 63(l2): point = 250
   Insn 79(l2): point = 252
   Insn 66(l2): point = 254
   Insn 62(l2): point = 256
   Insn 37(l1): point = 259
   Insn 31(l1): point = 261
   Insn 36(l1): point = 263
   Insn 28(l1): point = 267
   Insn 26(l1): point = 270
   Insn 25(l1): point = 272
   Insn 23(l1): point = 274
   Insn 21(l1): point = 276
   Insn 22(l1): point = 278
   Insn 18(l1): point = 280
   Insn 20(l1): point = 282
   Insn 32(l1): point = 284
   Insn 24(l1): point = 286
   Insn 19(l1): point = 288
   Insn 17(l1): point = 290
 a0(r225): [1..2]
 a1(r136): [1..114]
 a2(r224): [5..6]
 a3(r135): [5..112]
 a4(r222): [9..10]
 a5(r223): [9..12]
 a6(r147): [13..97]
 a7(r160): [23..110]
 a8(r200): [27..37]
 a9(r141): [25..29]
 a10(r142): [25..31]
 a11(r207): [30..33]
 a12(r204): [32..45]
 a13(r198): [36..53]
 a14(r199): [40..41]
 a15(r146): [44..99]
 a16(r138): [56..58]
 a17(r184): [59..62]
 a18(r226): [56..60]
 a19(r148): [65..67]
 a20(r170): [68..71]
 a21(r228): [65..69]
 a22(r169): [76..79]
 a23(r156): [102..104]
 a24(r161): [105..116]
 a25(r157): [102..106]
 a26(r140): [102..108]
 a27(r135): [119..170]
 a28(r136): [119..170]
 a29(r141): [119..170]
 a30(r142): [119..170]
 a31(r147): [119..170]
 a32(r160): [119..170]
 a33(r219): [126..127]
 a34(r216): [128..129]
 a35(r143): [128..156]
 a36(r144): [130..154]
 a37(r217): [130..131]
 a38(r215): [140..141]
 a39(r214): [142..147]
 a40(r212): [142..143]
 a41(r213): [144..145]
 a42(r210): [155..158]
 a43(r208): [157..160]
 a44(r211): [159..166]
 a45(r145): [159..168]
 a46(r209): [161..162]
 a47(r135): [171..215]
 a48(r136): [171..215]
 a49(r138): [171..215]
 a50(r146): [171..215]
 a51(r147): [171..215]
 a52(r160): [171..215]
 a53(r226): [171..215]
 a54(r196): [174..175]
 a55(r197): [176..177]
 a56(r195): [176..179]
 a57(r190): [190..193]
 a58(r133): [192..195]
 a59(r152): [192..205]
 a60(r137): [196..197]
 a61(r187): [198..199]
 a62(r188): [200..203]
 a63(r185): [204..207]
 a64(r154): [206..213]
 a65(r186): [208..211]
 a66(r135): [216..258]
 a67(r136): [216..258]
 a68(r146): [216..258]
 a69(r147): [216..258]
 a70(r148): [216..258]
 a71(r160): [216..258]
 a72(r228): [216..258]
 a73(r182): [219..220]
 a74(r183): [221..222]
 a75(r181): [221..224]
 a76(r176): [233..238]
 a77(r134): [235..240]
 a78(r151): [235..242]
 a79(r159): [241..244]
 a80(r171): [243..246]
 a81(r173): [245..248]
 a82(r172): [247..250]
 a83(r174): [249..254]
 a84(r153): [249..256]
 a85(r135): [259..292]
 a86(r136): [259..292]
 a87(r140): [259..292]
 a88(r156): [259..292]
 a89(r157): [259..292]
 a90(r160): [259..292]
 a91(r158): [268..276]
 a92(r166): [273..286]
 a93(r164): [277..282]
 a94(r139): [279..280]
 a95(r155): [281..290]
 a96(r165): [283..288]
 Rebuilding regno allocno list for 219
 Rebuilding regno allocno list for 217
 Rebuilding regno allocno list for 216
 Rebuilding regno allocno list for 215
 Rebuilding regno allocno list for 214
 Rebuilding regno allocno list for 213
 Rebuilding regno allocno list for 212
 Rebuilding regno allocno list for 211
 Rebuilding regno allocno list for 210
 Rebuilding regno allocno list for 209
 Rebuilding regno allocno list for 208
 Rebuilding regno allocno list for 197
 Rebuilding regno allocno list for 196
 Rebuilding regno allocno list for 195
 Rebuilding regno allocno list for 190
 Rebuilding regno allocno list for 188
 Rebuilding regno allocno list for 187
 Rebuilding regno allocno list for 186
 Rebuilding regno allocno list for 185
 Rebuilding regno allocno list for 183
 Rebuilding regno allocno list for 182
 Rebuilding regno allocno list for 181
 Rebuilding regno allocno list for 176
 Rebuilding regno allocno list for 174
 Rebuilding regno allocno list for 173
 Rebuilding regno allocno list for 172
 Rebuilding regno allocno list for 171
 Rebuilding regno allocno list for 166
 Rebuilding regno allocno list for 165
 Rebuilding regno allocno list for 164
 Rebuilding regno allocno list for 159
 Rebuilding regno allocno list for 158
 Rebuilding regno allocno list for 155
 Rebuilding regno allocno list for 154
 Rebuilding regno allocno list for 153
 Rebuilding regno allocno list for 152
 Rebuilding regno allocno list for 151
 Rebuilding regno allocno list for 145
 Rebuilding regno allocno list for 144
 Rebuilding regno allocno list for 143
 Rebuilding regno allocno list for 139
 Rebuilding regno allocno list for 137
 Rebuilding regno allocno list for 134
 Rebuilding regno allocno list for 133
Compressing live ranges: from 293 to 133 - 45%
Ranges after the compression:
 a0(r225): [0..1]
 a1(r136): [46..132] [0..44]
 a2(r224): [2..3]
 a3(r135): [46..132] [2..43]
 a4(r222): [4..5]
 a5(r223): [4..6]
 a6(r147): [46..118] [7..35]
 a7(r160): [46..132] [8..42]
 a8(r200): [10..17]
 a9(r141): [46..71] [9..11]
 a10(r142): [46..71] [9..13]
 a11(r207): [12..15]
 a12(r204): [14..21]
 a13(r198): [16..22]
 a14(r199): [18..19]
 a15(r146): [72..118] [20..36]
 a16(r138): [72..95] [23..24]
 a17(r184): [25..27]
 a18(r226): [72..95] [23..26]
 a19(r148): [96..118] [28..29]
 a20(r170): [30..32]
 a21(r228): [96..118] [28..31]
 a22(r169): [33..34]
 a23(r156): [119..132] [37..38]
 a24(r161): [39..45]
 a25(r157): [119..132] [37..40]
 a26(r140): [119..132] [37..41]
 a33(r219): [47..48]
 a34(r216): [49..50]
 a35(r143): [49..62]
 a36(r144): [51..60]
 a37(r217): [51..52]
 a38(r215): [53..54]
 a39(r214): [55..59]
 a40(r212): [55..56]
 a41(r213): [57..58]
 a42(r210): [61..64]
 a43(r208): [63..66]
 a44(r211): [65..69]
 a45(r145): [65..70]
 a46(r209): [67..68]
 a54(r196): [73..74]
 a55(r197): [75..76]
 a56(r195): [75..77]
 a57(r190): [78..80]
 a58(r133): [79..81]
 a59(r152): [79..89]
 a60(r137): [82..83]
 a61(r187): [84..85]
 a62(r188): [86..87]
 a63(r185): [88..91]
 a64(r154): [90..94]
 a65(r186): [92..93]
 a73(r182): [97..98]
 a74(r183): [99..100]
 a75(r181): [99..101]
 a76(r176): [102..104]
 a77(r134): [103..105]
 a78(r151): [103..107]
 a79(r159): [106..109]
 a80(r171): [108..111]
 a81(r173): [110..113]
 a82(r172): [112..115]
 a83(r174): [114..116]
 a84(r153): [114..117]
 a91(r158): [120..122]
 a92(r166): [121..129]
 a93(r164): [123..127]
 a94(r139): [124..125]
 a95(r155): [126..131]
 a96(r165): [128..130]
+++Allocating 664 bytes for conflict table (uncompressed size 1552)
;; a0(r225,l0) conflicts: a1(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r136,l0) conflicts: a0(r225,l0) a2(r224,l0) a3(r135,l0) a4(r222,l0) a5(r223,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a8(r200,l0) a11(r207,l0) a12(r204,l0) a13(r198,l0) a14(r199,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a17(r184,l0) a19(r148,l0) a21(r228,l0) a20(r170,l0) a22(r169,l0) a23(r156,l0) a25(r157,l0) a26(r140,l0) a24(r161,l0) a33(r219,l0) a34(r216,l0) a35(r143,l0) a37(r217,l0) a36(r144,l0) a38(r215,l0) a40(r212,l0) a39(r214,l0) a41(r213,l0) a42(r210,l0) a43(r208,l0) a44(r211,l0) a45(r145,l0) a46(r209,l0) a54(r196,l0) a55(r197,l0) a56(r195,l0) a57(r190,l0) a58(r133,l0) a59(r152,l0) a60(r137,l0) a61(r187,l0) a62(r188,l0) a63(r185,l0) a64(r154,l0) a65(r186,l0) a73(r182,l0) a74(r183,l0) a75(r181,l0) a76(r176,l0) a77(r134,l0) a78(r151,l0) a79(r159,l0) a80(r171,l0) a81(r173,l0) a82(r172,l0) a83(r174,l0) a84(r153,l0) a91(r158,l0) a92(r166,l0) a93(r164,l0) a94(r139,l0) a95(r155,l0) a96(r165,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r224,l0) conflicts: a1(r136,l0) a3(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r135,l0) conflicts: a1(r136,l0) a2(r224,l0) a4(r222,l0) a5(r223,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a8(r200,l0) a11(r207,l0) a12(r204,l0) a13(r198,l0) a14(r199,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a17(r184,l0) a19(r148,l0) a21(r228,l0) a20(r170,l0) a22(r169,l0) a23(r156,l0) a25(r157,l0) a26(r140,l0) a24(r161,l0) a33(r219,l0) a34(r216,l0) a35(r143,l0) a37(r217,l0) a36(r144,l0) a38(r215,l0) a40(r212,l0) a39(r214,l0) a41(r213,l0) a42(r210,l0) a43(r208,l0) a44(r211,l0) a45(r145,l0) a46(r209,l0) a54(r196,l0) a55(r197,l0) a56(r195,l0) a57(r190,l0) a58(r133,l0) a59(r152,l0) a60(r137,l0) a61(r187,l0) a62(r188,l0) a63(r185,l0) a64(r154,l0) a65(r186,l0) a73(r182,l0) a74(r183,l0) a75(r181,l0) a76(r176,l0) a77(r134,l0) a78(r151,l0) a79(r159,l0) a80(r171,l0) a81(r173,l0) a82(r172,l0) a83(r174,l0) a84(r153,l0) a91(r158,l0) a92(r166,l0) a93(r164,l0) a94(r139,l0) a95(r155,l0) a96(r165,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r222,l0) conflicts: a1(r136,l0) a3(r135,l0) a5(r223,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r223,l0) conflicts: a1(r136,l0) a3(r135,l0) a4(r222,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r147,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a8(r200,l0) a11(r207,l0) a12(r204,l0) a13(r198,l0) a14(r199,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a17(r184,l0) a19(r148,l0) a21(r228,l0) a20(r170,l0) a22(r169,l0) a33(r219,l0) a34(r216,l0) a35(r143,l0) a37(r217,l0) a36(r144,l0) a38(r215,l0) a40(r212,l0) a39(r214,l0) a41(r213,l0) a42(r210,l0) a43(r208,l0) a44(r211,l0) a45(r145,l0) a46(r209,l0) a54(r196,l0) a55(r197,l0) a56(r195,l0) a57(r190,l0) a58(r133,l0) a59(r152,l0) a60(r137,l0) a61(r187,l0) a62(r188,l0) a63(r185,l0) a64(r154,l0) a65(r186,l0) a73(r182,l0) a74(r183,l0) a75(r181,l0) a76(r176,l0) a77(r134,l0) a78(r151,l0) a79(r159,l0) a80(r171,l0) a81(r173,l0) a82(r172,l0) a83(r174,l0) a84(r153,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r160,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a9(r141,l0) a10(r142,l0) a8(r200,l0) a11(r207,l0) a12(r204,l0) a13(r198,l0) a14(r199,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a17(r184,l0) a19(r148,l0) a21(r228,l0) a20(r170,l0) a22(r169,l0) a23(r156,l0) a25(r157,l0) a26(r140,l0) a24(r161,l0) a33(r219,l0) a34(r216,l0) a35(r143,l0) a37(r217,l0) a36(r144,l0) a38(r215,l0) a40(r212,l0) a39(r214,l0) a41(r213,l0) a42(r210,l0) a43(r208,l0) a44(r211,l0) a45(r145,l0) a46(r209,l0) a54(r196,l0) a55(r197,l0) a56(r195,l0) a57(r190,l0) a58(r133,l0) a59(r152,l0) a60(r137,l0) a61(r187,l0) a62(r188,l0) a63(r185,l0) a64(r154,l0) a65(r186,l0) a73(r182,l0) a74(r183,l0) a75(r181,l0) a76(r176,l0) a77(r134,l0) a78(r151,l0) a79(r159,l0) a80(r171,l0) a81(r173,l0) a82(r172,l0) a83(r174,l0) a84(r153,l0) a91(r158,l0) a92(r166,l0) a93(r164,l0) a94(r139,l0) a95(r155,l0) a96(r165,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r200,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a11(r207,l0) a12(r204,l0) a13(r198,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a9(r141,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a10(r142,l0) a8(r200,l0) a33(r219,l0) a34(r216,l0) a35(r143,l0) a37(r217,l0) a36(r144,l0) a38(r215,l0) a40(r212,l0) a39(r214,l0) a41(r213,l0) a42(r210,l0) a43(r208,l0) a44(r211,l0) a45(r145,l0) a46(r209,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a10(r142,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a8(r200,l0) a11(r207,l0) a33(r219,l0) a34(r216,l0) a35(r143,l0) a37(r217,l0) a36(r144,l0) a38(r215,l0) a40(r212,l0) a39(r214,l0) a41(r213,l0) a42(r210,l0) a43(r208,l0) a44(r211,l0) a45(r145,l0) a46(r209,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a11(r207,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a10(r142,l0) a8(r200,l0) a12(r204,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a12(r204,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a8(r200,l0) a11(r207,l0) a13(r198,l0) a14(r199,l0) a15(r146,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a13(r198,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a8(r200,l0) a12(r204,l0) a14(r199,l0) a15(r146,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a14(r199,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a12(r204,l0) a13(r198,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a15(r146,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a12(r204,l0) a13(r198,l0) a16(r138,l0) a18(r226,l0) a17(r184,l0) a19(r148,l0) a21(r228,l0) a20(r170,l0) a22(r169,l0) a54(r196,l0) a55(r197,l0) a56(r195,l0) a57(r190,l0) a58(r133,l0) a59(r152,l0) a60(r137,l0) a61(r187,l0) a62(r188,l0) a63(r185,l0) a64(r154,l0) a65(r186,l0) a73(r182,l0) a74(r183,l0) a75(r181,l0) a76(r176,l0) a77(r134,l0) a78(r151,l0) a79(r159,l0) a80(r171,l0) a81(r173,l0) a82(r172,l0) a83(r174,l0) a84(r153,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a16(r138,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a18(r226,l0) a54(r196,l0) a55(r197,l0) a56(r195,l0) a57(r190,l0) a58(r133,l0) a59(r152,l0) a60(r137,l0) a61(r187,l0) a62(r188,l0) a63(r185,l0) a64(r154,l0) a65(r186,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a17(r184,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a18(r226,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a18(r226,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a17(r184,l0) a54(r196,l0) a55(r197,l0) a56(r195,l0) a57(r190,l0) a58(r133,l0) a59(r152,l0) a60(r137,l0) a61(r187,l0) a62(r188,l0) a63(r185,l0) a64(r154,l0) a65(r186,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a19(r148,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a21(r228,l0) a73(r182,l0) a74(r183,l0) a75(r181,l0) a76(r176,l0) a77(r134,l0) a78(r151,l0) a79(r159,l0) a80(r171,l0) a81(r173,l0) a82(r172,l0) a83(r174,l0) a84(r153,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a20(r170,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a21(r228,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a21(r228,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a20(r170,l0) a73(r182,l0) a74(r183,l0) a75(r181,l0) a76(r176,l0) a77(r134,l0) a78(r151,l0) a79(r159,l0) a80(r171,l0) a81(r173,l0) a82(r172,l0) a83(r174,l0) a84(r153,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a22(r169,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a23(r156,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a25(r157,l0) a26(r140,l0) a91(r158,l0) a92(r166,l0) a93(r164,l0) a94(r139,l0) a95(r155,l0) a96(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r161,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a25(r157,l0) a26(r140,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r157,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a23(r156,l0) a26(r140,l0) a24(r161,l0) a91(r158,l0) a92(r166,l0) a93(r164,l0) a94(r139,l0) a95(r155,l0) a96(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r140,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a23(r156,l0) a25(r157,l0) a24(r161,l0) a91(r158,l0) a92(r166,l0) a93(r164,l0) a94(r139,l0) a95(r155,l0) a96(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a33(r219,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r216,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a35(r143,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r143,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a34(r216,l0) a37(r217,l0) a36(r144,l0) a38(r215,l0) a40(r212,l0) a39(r214,l0) a41(r213,l0) a42(r210,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r144,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a35(r143,l0) a37(r217,l0) a38(r215,l0) a40(r212,l0) a39(r214,l0) a41(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r217,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a35(r143,l0) a36(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a38(r215,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a35(r143,l0) a36(r144,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a39(r214,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a35(r143,l0) a36(r144,l0) a40(r212,l0) a41(r213,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a40(r212,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a35(r143,l0) a36(r144,l0) a39(r214,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a41(r213,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a35(r143,l0) a36(r144,l0) a39(r214,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r210,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a35(r143,l0) a43(r208,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r208,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a42(r210,l0) a44(r211,l0) a45(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a44(r211,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a43(r208,l0) a45(r145,l0) a46(r209,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a45(r145,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a43(r208,l0) a44(r211,l0) a46(r209,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a46(r209,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a9(r141,l0) a10(r142,l0) a44(r211,l0) a45(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a54(r196,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a55(r197,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a56(r195,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a56(r195,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a55(r197,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a57(r190,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a58(r133,l0) a59(r152,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a58(r133,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a57(r190,l0) a59(r152,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a59(r152,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a57(r190,l0) a58(r133,l0) a60(r137,l0) a61(r187,l0) a62(r188,l0) a63(r185,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a60(r137,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a59(r152,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a61(r187,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a59(r152,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a62(r188,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a59(r152,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a63(r185,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a59(r152,l0) a64(r154,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a64(r154,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a63(r185,l0) a65(r186,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a65(r186,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a16(r138,l0) a18(r226,l0) a64(r154,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a73(r182,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a74(r183,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a75(r181,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a75(r181,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a74(r183,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a76(r176,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a77(r134,l0) a78(r151,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a77(r134,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a76(r176,l0) a78(r151,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a78(r151,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a76(r176,l0) a77(r134,l0) a79(r159,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a79(r159,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a78(r151,l0) a80(r171,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a80(r171,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a79(r159,l0) a81(r173,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a81(r173,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a80(r171,l0) a82(r172,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a82(r172,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a81(r173,l0) a83(r174,l0) a84(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a83(r174,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a82(r172,l0) a84(r153,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a84(r153,l0) conflicts: a1(r136,l0) a3(r135,l0) a6(r147,l0) a7(r160,l0) a15(r146,l0) a19(r148,l0) a21(r228,l0) a82(r172,l0) a83(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a91(r158,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a23(r156,l0) a25(r157,l0) a26(r140,l0) a92(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a92(r166,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a23(r156,l0) a25(r157,l0) a26(r140,l0) a91(r158,l0) a93(r164,l0) a94(r139,l0) a95(r155,l0) a96(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a93(r164,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a23(r156,l0) a25(r157,l0) a26(r140,l0) a92(r166,l0) a94(r139,l0) a95(r155,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a94(r139,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a23(r156,l0) a25(r157,l0) a26(r140,l0) a92(r166,l0) a93(r164,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a95(r155,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a23(r156,l0) a25(r157,l0) a26(r140,l0) a92(r166,l0) a93(r164,l0) a96(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a96(r165,l0) conflicts: a1(r136,l0) a3(r135,l0) a7(r160,l0) a23(r156,l0) a25(r157,l0) a26(r140,l0) a92(r166,l0) a95(r155,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a5(r223)<->a6(r147)@125:shuffle
  cp1:a34(r216)<->a37(r217)@125:shuffle
  cp2:a34(r216)<->a36(r144)@125:shuffle
  cp3:a33(r219)<->a34(r216)@125:shuffle
  cp4:a33(r219)<->a35(r143)@125:shuffle
  cp5:a40(r212)<->a41(r213)@125:shuffle
  cp6:a38(r215)<->a40(r212)@125:shuffle
  cp7:a38(r215)<->a39(r214)@125:shuffle
  cp8:a43(r208)<->a46(r209)@125:shuffle
  cp9:a42(r210)<->a45(r145)@125:shuffle
  cp10:a42(r210)<->a44(r211)@125:shuffle
  cp11:a35(r143)<->a43(r208)@125:shuffle
  cp12:a36(r144)<->a42(r210)@125:shuffle
  cp13:a9(r141)<->a11(r207)@125:shuffle
  cp14:a54(r196)<->a55(r197)@125:shuffle
  cp15:a54(r196)<->a56(r195)@125:shuffle
  cp16:a63(r185)<->a65(r186)@125:shuffle
  cp17:a59(r152)<->a64(r154)@125:shuffle
  cp18:a62(r188)<->a63(r185)@125:shuffle
  cp19:a61(r187)<->a62(r188)@125:shuffle
  cp20:a60(r137)<->a61(r187)@125:shuffle
  cp21:a58(r133)<->a60(r137)@125:shuffle
  cp22:a73(r182)<->a74(r183)@125:shuffle
  cp23:a73(r182)<->a75(r181)@125:shuffle
  cp24:a81(r173)<->a84(r153)@125:shuffle
  cp25:a81(r173)<->a83(r174)@125:shuffle
  cp26:a80(r171)<->a82(r172)@125:shuffle
  cp27:a79(r159)<->a81(r173)@125:shuffle
  cp28:a78(r151)<->a80(r171)@125:shuffle
  cp29:a77(r134)<->a79(r159)@125:shuffle
  cp30:a93(r164)<->a96(r165)@125:shuffle
  cp31:a94(r139)<->a95(r155)@125:shuffle
  cp32:a91(r158)<->a93(r164)@125:shuffle
  regions=5, blocks=23, points=133
    allocnos=97, copies=33, conflicts=1, ranges=85

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r225 1r136 2r224 3r135 4r222 5r223 6r147 7r160 8r200 9r141 10r142 11r207 12r204 13r198 14r199 15r146 16r138 17r184 18r226 19r148 20r170 21r228 22r169 23r156 24r161 25r157 26r140 33r219 34r216 35r143 36r144 37r217 38r215 39r214 40r212 41r213 42r210 43r208 44r211 45r145 46r209 54r196 55r197 56r195 57r190 58r133 59r152 60r137 61r187 62r188 63r185 64r154 65r186 73r182 74r183 75r181 76r176 77r134 78r151 79r159 80r171 81r173 82r172 83r174 84r153 91r158 92r166 93r164 94r139 95r155 96r165
    modified regnos: 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 151 152 153 154 155 156 157 158 159 160 161 164 165 166 169 170 171 172 173 174 176 181 182 183 184 185 186 187 188 190 195 196 197 198 199 200 204 207 208 209 210 211 212 213 214 215 216 217 219 222 223 224 225 226 228
    border:
    Pressure: GENERAL_REGS=12
    Reg 225 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 224 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 5 regs less
    Reg 222 of GENERAL_REGS has 1 regs less
    Reg 223 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 5 regs less
    Reg 160 of GENERAL_REGS has 5 regs less
    Reg 200 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 207 of GENERAL_REGS has 3 regs less
    Reg 204 of GENERAL_REGS has 3 regs less
    Reg 198 of GENERAL_REGS has 3 regs less
    Reg 146 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 226 of GENERAL_REGS has 4 regs less
    Reg 148 of GENERAL_REGS has 3 regs less
    Reg 228 of GENERAL_REGS has 3 regs less
    Reg 169 of GENERAL_REGS has 3 regs less
    Reg 196 of GENERAL_REGS has 1 regs less
    Reg 197 of GENERAL_REGS has 1 regs less
    Reg 195 of GENERAL_REGS has 1 regs less
    Reg 190 of GENERAL_REGS has 2 regs less
    Reg 133 of GENERAL_REGS has 2 regs less
    Reg 152 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
    Reg 187 of GENERAL_REGS has 2 regs less
    Reg 188 of GENERAL_REGS has 2 regs less
    Reg 185 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 186 of GENERAL_REGS has 1 regs less
    Reg 176 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
      Pushing a96(r165,l0)
      Pushing a94(r139,l0)
      Pushing a93(r164,l0)
      Pushing a92(r166,l0)
      Pushing a83(r174,l0)
      Pushing a82(r172,l0)
      Pushing a81(r173,l0)
      Pushing a80(r171,l0)
      Pushing a79(r159,l0)
      Pushing a75(r181,l0)
      Pushing a74(r183,l0)
      Pushing a73(r182,l0)
      Pushing a46(r209,l0)
      Pushing a44(r211,l0)
      Pushing a43(r208,l0)
      Pushing a42(r210,l0)
      Pushing a41(r213,l0)
      Pushing a40(r212,l0)
      Pushing a39(r214,l0)
      Pushing a38(r215,l0)
      Pushing a37(r217,l0)
      Pushing a34(r216,l0)
      Pushing a33(r219,l0)
      Pushing a23(r156,l0)
      Pushing a14(r199,l0)
      Pushing a95(r155,l0)
      Pushing a91(r158,l0)
      Pushing a84(r153,l0)
      Pushing a45(r145,l0)
      Pushing a24(r161,l0)
      Pushing a20(r170,l0)
      Pushing a17(r184,l0)
      Pushing a36(r144,l0)
      Pushing a35(r143,l0)
      Pushing a25(r157,l0)
      Pushing a26(r140,l0)
      Pushing a76(r176,l0)
      Pushing a65(r186,l0)
      Pushing a63(r185,l0)
      Pushing a56(r195,l0)
      Pushing a55(r197,l0)
      Pushing a54(r196,l0)
      Pushing a5(r223,l0)
      Pushing a4(r222,l0)
      Pushing a2(r224,l0)
      Pushing a0(r225,l0)
      Pushing a77(r134,l0)
      Pushing a64(r154,l0)
      Pushing a78(r151,l0)
      Pushing a62(r188,l0)
      Pushing a61(r187,l0)
      Pushing a60(r137,l0)
      Pushing a57(r190,l0)
      Pushing a58(r133,l0)
      Pushing a59(r152,l0)
      Pushing a22(r169,l0)
      Pushing a11(r207,l0)
      Pushing a9(r141,l0)
      Pushing a21(r228,l0)
      Pushing a12(r204,l0)
      Pushing a8(r200,l0)
      Pushing a13(r198,l0)
      Pushing a19(r148,l0)
      Pushing a10(r142,l0)
      Pushing a6(r147,l0)(potential spill: pri=2500, cost=30000)
      Pushing a18(r226,l0)
      Pushing a16(r138,l0)
      Pushing a15(r146,l0)
      Pushing a7(r160,l0)
      Pushing a1(r136,l0)
      Pushing a3(r135,l0)
      Popping a3(r135,l0)  -- assign reg 4
      Popping a1(r136,l0)  -- assign reg 5
      Popping a7(r160,l0)  -- assign reg 6
      Popping a15(r146,l0)  -- assign reg 7
      Popping a16(r138,l0)  -- assign reg 8
      Popping a18(r226,l0)  -- assign reg 10
      Popping a6(r147,l0)  -- assign reg 9
      Popping a10(r142,l0)  -- assign reg 3
      Popping a19(r148,l0)  -- assign reg 8
      Popping a13(r198,l0)  -- assign reg 8
      Popping a8(r200,l0)  -- assign reg 12
      Popping a12(r204,l0)  -- assign reg 3
      Popping a21(r228,l0)  -- assign reg 10
      Popping a9(r141,l0)  -- assign reg 14
      Popping a11(r207,l0)  -- assign reg 14
      Popping a22(r169,l0)  -- assign reg 1
      Popping a59(r152,l0)  -- assign reg 3
      Popping a58(r133,l0)  -- assign reg 12
      Popping a57(r190,l0)  -- assign reg 1
      Popping a60(r137,l0)  -- assign reg 12
      Popping a61(r187,l0)  -- assign reg 12
      Popping a62(r188,l0)  -- assign reg 12
      Popping a78(r151,l0)  -- assign reg 3
      Popping a64(r154,l0)  -- assign reg 3
      Popping a77(r134,l0)  -- assign reg 2
      Popping a0(r225,l0)  -- assign reg 3
      Popping a2(r224,l0)  -- assign reg 3
      Popping a4(r222,l0)  -- assign reg 3
      Popping a5(r223,l0)  -- assign reg 9
      Popping a54(r196,l0)  -- assign reg 3
      Popping a55(r197,l0)  -- assign reg 3
      Popping a56(r195,l0)  -- assign reg 1
      Popping a63(r185,l0)  -- assign reg 12
      Popping a65(r186,l0)  -- assign reg 12
      Popping a76(r176,l0)  -- assign reg 1
      Popping a26(r140,l0)  -- assign reg 3
      Popping a25(r157,l0)  -- assign reg 2
      Popping a35(r143,l0)  -- assign reg 2
      Popping a36(r144,l0)  -- assign reg 1
      Popping a17(r184,l0)  -- assign reg 3
      Popping a20(r170,l0)  -- assign reg 3
      Popping a24(r161,l0)  -- assign reg 1
      Popping a45(r145,l0)  -- assign reg 1
      Popping a84(r153,l0)  -- assign reg 2
      Popping a91(r158,l0)  -- assign reg 1
      Popping a95(r155,l0)  -- assign reg 0
      Popping a14(r199,l0)  -- assign reg 2
      Popping a23(r156,l0)  -- assign reg 12
      Popping a33(r219,l0)  -- assign reg 2
      Popping a34(r216,l0)  -- assign reg 1
      Popping a37(r217,l0)  -- assign reg 0
      Popping a38(r215,l0)  -- assign reg 0
      Popping a39(r214,l0)  -- assign reg 12
      Popping a40(r212,l0)  -- assign reg 0
      Popping a41(r213,l0)  -- assign reg 0
      Popping a42(r210,l0)  -- assign reg 1
      Popping a43(r208,l0)  -- assign reg 2
      Popping a44(r211,l0)  -- assign reg 0
      Popping a46(r209,l0)  -- assign reg 2
      Popping a73(r182,l0)  -- assign reg 3
      Popping a74(r183,l0)  -- assign reg 3
      Popping a75(r181,l0)  -- assign reg 2
      Popping a79(r159,l0)  -- assign reg 2
      Popping a80(r171,l0)  -- assign reg 3
      Popping a81(r173,l0)  -- assign reg 2
      Popping a82(r172,l0)  -- assign reg 3
      Popping a83(r174,l0)  -- assign reg 1
      Popping a92(r166,l0)  -- assign reg 14
      Popping a93(r164,l0)  -- assign reg 1
      Popping a94(r139,l0)  -- assign reg 0
      Popping a96(r165,l0)  -- assign reg 1
Disposition:
   58:r133 l0    12   77:r134 l0     2    3:r135 l0     4    1:r136 l0     5
   60:r137 l0    12   16:r138 l0     8   94:r139 l0     0   26:r140 l0     3
    9:r141 l0    14   10:r142 l0     3   35:r143 l0     2   36:r144 l0     1
   45:r145 l0     1   15:r146 l0     7    6:r147 l0     9   19:r148 l0     8
   78:r151 l0     3   59:r152 l0     3   84:r153 l0     2   64:r154 l0     3
   95:r155 l0     0   23:r156 l0    12   25:r157 l0     2   91:r158 l0     1
   79:r159 l0     2    7:r160 l0     6   24:r161 l0     1   93:r164 l0     1
   96:r165 l0     1   92:r166 l0    14   22:r169 l0     1   20:r170 l0     3
   80:r171 l0     3   82:r172 l0     3   81:r173 l0     2   83:r174 l0     1
   76:r176 l0     1   75:r181 l0     2   73:r182 l0     3   74:r183 l0     3
   17:r184 l0     3   63:r185 l0    12   65:r186 l0    12   61:r187 l0    12
   62:r188 l0    12   57:r190 l0     1   56:r195 l0     1   54:r196 l0     3
   55:r197 l0     3   13:r198 l0     8   14:r199 l0     2    8:r200 l0    12
   12:r204 l0     3   11:r207 l0    14   43:r208 l0     2   46:r209 l0     2
   42:r210 l0     1   44:r211 l0     0   40:r212 l0     0   41:r213 l0     0
   39:r214 l0    12   38:r215 l0     0   34:r216 l0     1   37:r217 l0     0
   33:r219 l0     2    4:r222 l0     3    5:r223 l0     9    2:r224 l0     3
    0:r225 l0     3   18:r226 l0    10   21:r228 l0    10
New iteration of spill/restore move
+++Costs: overall -500, reg -500, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 161
insn=10, live_throughout: 13, 161, dead_or_set: 136
insn=11, live_throughout: 13, 136, 161, dead_or_set: 135
insn=12, live_throughout: 13, 135, 136, 161, dead_or_set: 160
insn=9, live_throughout: 13, 135, 136, 160, 161, dead_or_set: 140
insn=13, live_throughout: 13, 135, 136, 140, 160, 161, dead_or_set: 157
insn=6, live_throughout: 13, 135, 136, 140, 157, 160, dead_or_set: 156, 161
insn=212, live_throughout: 13, 135, 136, 140, 156, 157, 160, dead_or_set: 
insn=35, live_throughout: 13, 135, 136, 140, 156, 157, 160, dead_or_set: 
insn=17, live_throughout: 13, 135, 136, 140, 156, 157, 160, dead_or_set: 155
insn=19, live_throughout: 13, 135, 136, 140, 155, 156, 157, 160, dead_or_set: 165
insn=24, live_throughout: 13, 135, 136, 140, 155, 156, 157, 160, 165, dead_or_set: 166
insn=32, live_throughout: 13, 135, 136, 155, 156, 157, 160, 165, 166, dead_or_set: 140
insn=20, live_throughout: 13, 135, 136, 140, 155, 156, 157, 160, 166, dead_or_set: 164, 165
insn=18, live_throughout: 13, 135, 136, 140, 156, 157, 160, 164, 166, dead_or_set: 139, 155
insn=22, live_throughout: 13, 135, 136, 140, 156, 157, 164, 166, dead_or_set: 139, 160
insn=21, live_throughout: 13, 135, 136, 140, 156, 157, 160, 166, dead_or_set: 158, 164
insn=23, live_throughout: 13, 135, 140, 156, 157, 158, 160, 166, dead_or_set: 136
insn=25, live_throughout: 13, 135, 136, 140, 156, 157, 158, 160, dead_or_set: 166
insn=26, live_throughout: 13, 135, 136, 140, 156, 157, 158, 160, dead_or_set: 
insn=28, live_throughout: 13, 136, 140, 156, 157, 160, dead_or_set: 135, 158
insn=29, live_throughout: 13, 135, 136, 140, 156, 157, 160, dead_or_set: 
insn=33, live_throughout: 13, 135, 136, 140, 156, 157, 160, dead_or_set: 
insn=36, live_throughout: 13, 135, 136, 140, 156, 157, 160, dead_or_set: 
insn=31, live_throughout: 13, 24, 135, 136, 140, 156, 160, dead_or_set: 157
insn=37, live_throughout: 13, 135, 136, 140, 156, 157, 160, dead_or_set: 
insn=39, live_throughout: 13, 135, 136, 160, dead_or_set: 146
insn=43, live_throughout: 13, 135, 136, 146, 160, dead_or_set: 147
insn=40, live_throughout: 13, 135, 136, 146, 147, 160, dead_or_set: 0
insn=41, live_throughout: 13, 135, 136, 146, 147, 160, dead_or_set: 0, 14
insn=46, live_throughout: 0, 13, 135, 136, 146, 147, 160, dead_or_set: 1
insn=47, live_throughout: 0, 1, 13, 135, 136, 146, 147, 160, dead_or_set: 2
insn=45, live_throughout: 1, 2, 13, 135, 136, 146, 147, 160, dead_or_set: 0
insn=48, live_throughout: 13, 135, 136, 146, 147, 160, dead_or_set: 0, 1, 2, 14
insn=54, live_throughout: 0, 13, 135, 136, 146, 147, 160, dead_or_set: 2
insn=55, live_throughout: 0, 2, 13, 135, 136, 146, 147, 160, dead_or_set: 3
insn=51, live_throughout: 2, 3, 13, 135, 136, 146, 147, 160, dead_or_set: 0, 169
insn=52, live_throughout: 2, 3, 13, 135, 136, 146, 147, 160, 169, dead_or_set: 0
insn=53, live_throughout: 0, 2, 3, 13, 135, 136, 146, 147, 160, dead_or_set: 1, 169
insn=56, live_throughout: 13, 135, 136, 146, 147, 160, dead_or_set: 0, 1, 2, 3, 14
insn=57, live_throughout: 13, 135, 136, 146, 147, 160, dead_or_set: 170
insn=83, live_throughout: 13, 135, 136, 146, 147, 160, 170, dead_or_set: 228
insn=58, live_throughout: 13, 135, 136, 146, 147, 160, 228, dead_or_set: 148, 170
insn=214, live_throughout: 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 
insn=82, live_throughout: 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 
insn=62, live_throughout: 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 153
insn=66, live_throughout: 13, 135, 136, 146, 147, 148, 153, 160, 228, dead_or_set: 174
insn=79, live_throughout: 13, 135, 136, 146, 147, 153, 160, 174, 228, dead_or_set: 148
insn=63, live_throughout: 13, 135, 136, 146, 147, 148, 153, 160, 174, 228, dead_or_set: 172
insn=67, live_throughout: 13, 135, 136, 146, 147, 148, 160, 172, 228, dead_or_set: 153, 173, 174
insn=64, live_throughout: 13, 135, 136, 146, 147, 148, 160, 173, 228, dead_or_set: 171, 172
insn=68, live_throughout: 13, 135, 136, 146, 147, 148, 160, 171, 228, dead_or_set: 159, 173
insn=65, live_throughout: 13, 135, 136, 146, 147, 148, 159, 160, 228, dead_or_set: 151, 171
insn=69, live_throughout: 13, 135, 136, 146, 147, 148, 151, 160, 228, dead_or_set: 134, 159
insn=74, live_throughout: 13, 134, 135, 136, 146, 147, 148, 151, 160, 228, dead_or_set: 176
insn=76, live_throughout: 13, 134, 135, 136, 146, 147, 148, 151, 160, 176, 228, dead_or_set: 0
insn=70, live_throughout: 0, 13, 135, 136, 146, 147, 148, 160, 176, 228, dead_or_set: 134, 151
insn=77, live_throughout: 0, 13, 24, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 1, 176
insn=71, live_throughout: 0, 1, 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 
insn=78, live_throughout: 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 0, 1, 14
insn=80, live_throughout: 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 
insn=85, live_throughout: 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 181
insn=87, live_throughout: 13, 135, 136, 146, 147, 148, 160, 181, 228, dead_or_set: 183
insn=88, live_throughout: 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 181, 182, 183
insn=89, live_throughout: 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 182
insn=90, live_throughout: 13, 135, 136, 146, 147, 148, 160, 228, dead_or_set: 
insn=91, live_throughout: 13, 135, 136, 146, 147, 160, dead_or_set: 
insn=93, live_throughout: 13, 135, 136, 146, 147, 160, dead_or_set: 184
insn=120, live_throughout: 13, 135, 136, 146, 147, 160, 184, dead_or_set: 226
insn=94, live_throughout: 13, 135, 136, 146, 147, 160, 226, dead_or_set: 138, 184
insn=216, live_throughout: 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 
insn=119, live_throughout: 2, 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 
insn=98, live_throughout: 2, 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 154
insn=100, live_throughout: 2, 13, 135, 136, 138, 146, 147, 154, 160, 226, dead_or_set: 186
insn=116, live_throughout: 2, 13, 135, 136, 146, 147, 154, 160, 186, 226, dead_or_set: 138
insn=101, live_throughout: 2, 13, 135, 136, 138, 146, 147, 154, 160, 226, dead_or_set: 185, 186
insn=99, live_throughout: 2, 13, 135, 136, 138, 146, 147, 160, 185, 226, dead_or_set: 152, 154
insn=102, live_throughout: 2, 13, 135, 136, 138, 146, 147, 152, 160, 226, dead_or_set: 185, 188
insn=112, live_throughout: 2, 13, 135, 136, 138, 146, 147, 152, 160, 188, 226, dead_or_set: 0
insn=103, live_throughout: 0, 2, 13, 135, 136, 138, 146, 147, 152, 160, 226, dead_or_set: 187, 188
insn=104, live_throughout: 0, 2, 13, 135, 136, 138, 146, 147, 152, 160, 226, dead_or_set: 137, 187
insn=105, live_throughout: 0, 2, 13, 135, 136, 138, 146, 147, 152, 160, 226, dead_or_set: 133, 137
insn=110, live_throughout: 0, 2, 13, 133, 135, 136, 138, 146, 147, 152, 160, 226, dead_or_set: 190
insn=106, live_throughout: 0, 2, 13, 135, 136, 138, 146, 147, 160, 190, 226, dead_or_set: 133, 152
insn=113, live_throughout: 0, 2, 13, 24, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 1, 190
insn=107, live_throughout: 0, 1, 2, 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 
insn=115, live_throughout: 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 0, 1, 2, 14
insn=117, live_throughout: 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 
insn=208, live_throughout: 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 2
insn=122, live_throughout: 2, 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 195
insn=124, live_throughout: 2, 13, 135, 136, 138, 146, 147, 160, 195, 226, dead_or_set: 197
insn=125, live_throughout: 2, 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 195, 196, 197
insn=126, live_throughout: 2, 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 196
insn=127, live_throughout: 2, 13, 135, 136, 138, 146, 147, 160, 226, dead_or_set: 
insn=128, live_throughout: 13, 135, 136, 146, 147, 160, dead_or_set: 
insn=130, live_throughout: 13, 135, 136, 146, 147, 160, dead_or_set: 198
insn=132, live_throughout: 13, 135, 136, 146, 147, 160, 198, dead_or_set: 1
insn=131, live_throughout: 1, 13, 135, 136, 146, 147, 160, 198, dead_or_set: 0
insn=133, live_throughout: 13, 135, 136, 146, 147, 160, 198, dead_or_set: 0, 1, 14
insn=143, live_throughout: 13, 135, 136, 146, 147, 160, 198, dead_or_set: 204
insn=134, live_throughout: 13, 135, 136, 147, 160, 198, 204, dead_or_set: 146
insn=135, live_throughout: 13, 135, 136, 147, 160, 198, 204, dead_or_set: 199
insn=136, live_throughout: 13, 135, 136, 147, 160, 198, 204, dead_or_set: 199
insn=137, live_throughout: 13, 135, 136, 147, 160, 198, 204, dead_or_set: 200
insn=141, live_throughout: 13, 135, 136, 147, 160, 200, 204, dead_or_set: 0, 1, 2, 198
insn=146, live_throughout: 0, 1, 2, 13, 135, 136, 147, 160, 200, 204, dead_or_set: 207
insn=144, live_throughout: 0, 1, 2, 13, 135, 136, 147, 160, 200, 207, dead_or_set: 142, 204
insn=148, live_throughout: 0, 1, 2, 13, 135, 136, 142, 147, 160, 200, dead_or_set: 141, 207
insn=142, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 0, 1, 2, 200
insn=218, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 
insn=182, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 
insn=152, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 145
insn=156, live_throughout: 13, 135, 136, 141, 142, 145, 147, 160, dead_or_set: 211
insn=179, live_throughout: 13, 135, 136, 141, 145, 147, 160, 211, dead_or_set: 142
insn=153, live_throughout: 13, 135, 136, 141, 142, 145, 147, 160, 211, dead_or_set: 209
insn=154, live_throughout: 13, 135, 136, 141, 142, 145, 147, 160, 211, dead_or_set: 208, 209
insn=157, live_throughout: 13, 135, 136, 141, 142, 147, 160, 208, dead_or_set: 145, 210, 211
insn=155, live_throughout: 13, 135, 136, 141, 142, 147, 160, 210, dead_or_set: 143, 208
insn=158, live_throughout: 13, 135, 136, 141, 142, 143, 147, 160, dead_or_set: 144, 210
insn=159, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, dead_or_set: 
insn=160, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, dead_or_set: 
insn=164, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, dead_or_set: 214
insn=224, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, 214, dead_or_set: 213
insn=163, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, 214, dead_or_set: 212, 213
insn=165, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, dead_or_set: 212, 214, 215
insn=166, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, dead_or_set: 215
insn=167, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, dead_or_set: 
insn=169, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, dead_or_set: 
insn=170, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, dead_or_set: 
insn=172, live_throughout: 13, 135, 136, 141, 142, 143, 144, 147, 160, dead_or_set: 217
insn=173, live_throughout: 13, 135, 136, 141, 142, 143, 147, 160, dead_or_set: 144, 216, 217
insn=175, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 143, 216, 219
insn=176, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 219
insn=177, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 
insn=180, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 
insn=183, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 
insn=184, live_throughout: 13, 135, 136, 141, 142, 147, 160, dead_or_set: 
insn=190, live_throughout: 13, 135, 136, 147, dead_or_set: 2, 160
insn=188, live_throughout: 2, 13, 135, 136, 147, dead_or_set: 0
insn=189, live_throughout: 0, 2, 13, 135, 136, 147, dead_or_set: 1
insn=191, live_throughout: 0, 1, 2, 13, 135, 136, 147, dead_or_set: 3
insn=192, live_throughout: 13, 135, 136, 147, dead_or_set: 0, 1, 2, 3, 14
insn=194, live_throughout: 13, 14, 135, 136, dead_or_set: 147, 223
insn=223, live_throughout: 13, 14, 135, 136, 223, dead_or_set: 222
insn=195, live_throughout: 13, 14, 135, 136, dead_or_set: 222, 223
insn=222, live_throughout: 13, 14, 135, 136, dead_or_set: 224
insn=197, live_throughout: 13, 14, 136, dead_or_set: 135, 224
insn=221, live_throughout: 13, 14, 136, dead_or_set: 225
insn=199, live_throughout: 13, 14, dead_or_set: 136, 225
init_insns for 161: (insn_list:REG_DEP_TRUE 5 (nil))
init_insns for 170: (insn_list:REG_DEP_TRUE 57 (nil))
init_insns for 181: (insn_list:REG_DEP_TRUE 85 (nil))
init_insns for 183: (insn_list:REG_DEP_TRUE 87 (nil))
init_insns for 184: (insn_list:REG_DEP_TRUE 93 (nil))
init_insns for 195: (insn_list:REG_DEP_TRUE 122 (nil))
init_insns for 197: (insn_list:REG_DEP_TRUE 124 (nil))
init_insns for 198: (insn_list:REG_DEP_TRUE 130 (nil))
init_insns for 199: (insn_list:REG_DEP_TRUE 136 (nil))
init_insns for 200: (insn_list:REG_DEP_TRUE 137 (nil))
init_insns for 204: (insn_list:REG_DEP_TRUE 143 (nil))
init_insns for 213: (insn_list:REG_DEP_TRUE 224 (nil))
init_insns for 215: (insn_list:REG_DEP_TRUE 166 (nil))
init_insns for 217: (insn_list:REG_DEP_TRUE 172 (nil))
init_insns for 219: (insn_list:REG_DEP_TRUE 176 (nil))
init_insns for 222: (insn_list:REG_DEP_TRUE 223 (nil))
init_insns for 224: (insn_list:REG_DEP_TRUE 222 (nil))
init_insns for 225: (insn_list:REG_DEP_TRUE 221 (nil))
init_insns for 226: (insn_list:REG_DEP_TRUE 120 (nil))
init_insns for 228: (insn_list:REG_DEP_TRUE 83 (nil))
changing reg in insn 105
changing reg in insn 110
changing reg in insn 106
changing reg in insn 69
changing reg in insn 74
changing reg in insn 70
changing reg in insn 11
changing reg in insn 28
changing reg in insn 175
changing reg in insn 197
changing reg in insn 169
changing reg in insn 164
changing reg in insn 159
changing reg in insn 135
changing reg in insn 105
changing reg in insn 69
changing reg in insn 55
changing reg in insn 43
changing reg in insn 39
changing reg in insn 28
changing reg in insn 23
changing reg in insn 10
changing reg in insn 13
changing reg in insn 11
changing reg in insn 199
changing reg in insn 135
changing reg in insn 23
changing reg in insn 104
changing reg in insn 105
changing reg in insn 116
changing reg in insn 94
changing reg in insn 126
changing reg in insn 116
changing reg in insn 100
changing reg in insn 98
changing reg in insn 18
changing reg in insn 22
changing reg in insn 9
changing reg in insn 32
changing reg in insn 32
changing reg in insn 24
changing reg in insn 19
changing reg in insn 17
changing reg in insn 148
changing reg in insn 183
changing reg in insn 179
changing reg in insn 144
changing reg in insn 148
changing reg in insn 183
changing reg in insn 179
changing reg in insn 156
changing reg in insn 152
changing reg in insn 155
changing reg in insn 175
changing reg in insn 163
changing reg in insn 159
changing reg in insn 158
changing reg in insn 173
changing reg in insn 169
changing reg in insn 164
changing reg in insn 152
changing reg in insn 157
changing reg in insn 153
changing reg in insn 154
changing reg in insn 39
changing reg in insn 134
changing reg in insn 40
changing reg in insn 43
changing reg in insn 194
changing reg in insn 47
changing reg in insn 79
changing reg in insn 58
changing reg in insn 89
changing reg in insn 79
changing reg in insn 66
changing reg in insn 62
changing reg in insn 65
changing reg in insn 76
changing reg in insn 74
changing reg in insn 70
changing reg in insn 99
changing reg in insn 112
changing reg in insn 110
changing reg in insn 106
changing reg in insn 62
changing reg in insn 67
changing reg in insn 63
changing reg in insn 64
changing reg in insn 98
changing reg in insn 101
changing reg in insn 99
changing reg in insn 17
changing reg in insn 20
changing reg in insn 18
changing reg in insn 6
changing reg in insn 36
changing reg in insn 13
changing reg in insn 31
changing reg in insn 36
changing reg in insn 31
changing reg in insn 21
changing reg in insn 28
changing reg in insn 23
changing reg in insn 68
changing reg in insn 69
changing reg in insn 22
changing reg in insn 12
changing reg in insn 190
changing reg in insn 54
changing reg in insn 39
changing reg in insn 22
changing reg in insn 5
changing reg in insn 9
changing reg in insn 6
changing reg in insn 20
changing reg in insn 21
changing reg in insn 19
changing reg in insn 20
changing reg in insn 24
changing reg in insn 25
changing reg in insn 51
changing reg in insn 53
changing reg in insn 57
changing reg in insn 83
changing reg in insn 58
changing reg in insn 64
changing reg in insn 65
changing reg in insn 63
changing reg in insn 64
changing reg in insn 67
changing reg in insn 68
changing reg in insn 66
changing reg in insn 67
changing reg in insn 74
changing reg in insn 77
changing reg in insn 85
changing reg in insn 88
changing reg in insn 88
changing reg in insn 89
changing reg in insn 87
changing reg in insn 88
changing reg in insn 93
changing reg in insn 120
changing reg in insn 94
changing reg in insn 101
changing reg in insn 102
changing reg in insn 103
changing reg in insn 100
changing reg in insn 101
changing reg in insn 103
changing reg in insn 104
changing reg in insn 102
changing reg in insn 103
changing reg in insn 110
changing reg in insn 113
changing reg in insn 122
changing reg in insn 125
changing reg in insn 125
changing reg in insn 126
changing reg in insn 124
changing reg in insn 125
changing reg in insn 130
changing reg in insn 141
changing reg in insn 141
changing reg in insn 141
changing reg in insn 131
changing reg in insn 135
changing reg in insn 136
changing reg in insn 137
changing reg in insn 142
changing reg in insn 142
changing reg in insn 142
changing reg in insn 143
changing reg in insn 146
changing reg in insn 144
changing reg in insn 146
changing reg in insn 148
changing reg in insn 154
changing reg in insn 155
changing reg in insn 153
changing reg in insn 154
changing reg in insn 157
changing reg in insn 158
changing reg in insn 156
changing reg in insn 157
changing reg in insn 163
changing reg in insn 165
changing reg in insn 224
changing reg in insn 163
changing reg in insn 164
changing reg in insn 165
changing reg in insn 165
changing reg in insn 166
changing reg in insn 173
changing reg in insn 175
changing reg in insn 172
changing reg in insn 173
changing reg in insn 175
changing reg in insn 176
changing reg in insn 223
changing reg in insn 195
changing reg in insn 194
changing reg in insn 195
changing reg in insn 222
changing reg in insn 197
changing reg in insn 221
changing reg in insn 199
changing reg in insn 120
changing reg in insn 124
changing reg in insn 122
changing reg in insn 124
changing reg in insn 122
changing reg in insn 83
changing reg in insn 87
changing reg in insn 85
changing reg in insn 87
changing reg in insn 85
Spilling for insn 134.
Spilling for insn 136.
Spilling for insn 166.
Spilling for insn 176.
Spilling for insn 195.
Spilling for insn 197.
Spilling for insn 199.

Reloads for insn # 134
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 zone_size+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 zone_size+0 S4 A32])

Reloads for insn # 136
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 zone_size+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 zone_size+4 S4 A32])

Reloads for insn # 166
Reload 0: reload_out (SI) = (mem/s/j:SI (reg/f:SI 13 sp) [0 zhole_size+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (reg/f:SI 13 sp) [0 zhole_size+0 S4 A64])

Reloads for insn # 176
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])

Reloads for insn # 195
Reload 0: reload_out (SI) = (mem/f/c/i:SI (reg/f:SI 3 r3 [222]) [0 high_memory+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/f/c/i:SI (reg/f:SI 3 r3 [222]) [0 high_memory+0 S4 A32])

Reloads for insn # 197
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [224]) [0 max_low_pfn+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [224]) [0 max_low_pfn+0 S4 A32])

Reloads for insn # 199
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 3 r3 [225]) [0 max_pfn+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 3 r3 [225]) [0 max_pfn+0 S4 A32])
deleting insn with uid = 53.


try_optimize_cfg iteration 1

Edge 3->5 redirected to 6
merging block 5 into block 4
deleting insn with uid = 29.
deleting insn with uid = 30.
Merged 4 and 5 without moving.
Edge 18->20 redirected to 21
merging block 20 into block 19
deleting insn with uid = 177.
deleting insn with uid = 178.
Merged 19 and 20 without moving.


try_optimize_cfg iteration 2



try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 48.
verify found no changes in insn with uid = 56.
verify found no changes in insn with uid = 78.
verify found no changes in insn with uid = 115.
verify found no changes in insn with uid = 133.
verify found no changes in insn with uid = 192.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 29 count 46 (  2.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 29 count 50 (  2.4)


bootmem_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={23d,18u} r1={27d,24u,1d} r2={25d,21u,1d} r3={29d,34u} r4={2d,12u} r5={2d,5u} r6={2d,4u} r7={1d,2u} r8={5d,12u} r9={2d,3u} r10={2d,4u,4d} r12={17d,12u,1d} r13={1d,37u,4d} r14={11d,4u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={23d,9u} r25={4d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 1158{942d,201u,15e} in 135{128 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip]
;; live  in  	 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 2 10 2 arch/arm/mm/init.c:144 discrim 1 (set (reg/f:SI 1 r1 [161])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 10 5 11 2 arch/arm/mm/init.c:142 (set (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 11 10 12 2 arch/arm/mm/init.c:142 (set (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
        (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 12 11 9 2 arch/arm/mm/init.c:141 (set (reg/v:SI 6 r6 [orig:160 min ] [160])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 9 12 13 2 arch/arm/mm/init.c:144 discrim 1 (set (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
        (plus:SI (reg/f:SI 1 r1 [161])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 13 9 6 2 arch/arm/mm/init.c:144 (set (reg/v:SI 2 r2 [orig:157 i ] [157])
        (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 6 13 212 2 arch/arm/mm/init.c:144 discrim 1 (set (reg:SI 12 ip [orig:156 D.25862 ] [156])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 1 r1 [161])
                (const_int 4 [0x4])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
        (nil)))

(jump_insn 212 6 213 2 (set (pc)
        (label_ref 33)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 213 212 35)

;; Start of basic block ( 6) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 5 [r5] 6 [r6] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 5 [r5] 6 [r6] 14 [lr] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  6 [91.0%] 
(code_label 35 213 16 3 74 "" [1 uses])

(note 16 35 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 16 19 3 arch/arm/mm/init.c:148 (set (reg:SI 0 r0 [orig:155 D.25868 ] [155])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 19 17 24 3 arch/arm/mm/init.c:149 (set (reg:SI 1 r1 [orig:165 <variable>.size ] [165])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
                (const_int -4 [0xfffffffffffffffc])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 24 19 32 3 arch/arm/mm/init.c:155 (set (reg:SI 14 lr [orig:166 <variable>.highmem ] [166])
        (mem/s/j:SI (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140]) [0 <variable>.highmem+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 32 24 20 3 arch/arm/mm/init.c:144 (set (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
        (plus:SI (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn 20 32 18 3 arch/arm/mm/init.c:149 (set (reg:SI 1 r1 [164])
        (plus:SI (reg:SI 0 r0 [orig:155 D.25868 ] [155])
            (reg:SI 1 r1 [orig:165 <variable>.size ] [165]))) 4 {*arm_addsi3} (nil))

(insn 18 20 22 3 arch/arm/mm/init.c:148 (set (reg/v:SI 0 r0 [orig:139 min.848 ] [139])
        (lshiftrt:SI (reg:SI 0 r0 [orig:155 D.25868 ] [155])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 22 18 21 3 arch/arm/mm/init.c:149 (parallel [
            (set (reg/v:SI 6 r6 [orig:160 min ] [160])
                (umin:SI (reg/v:SI 6 r6 [orig:160 min ] [160])
                    (reg/v:SI 0 r0 [orig:139 min.848 ] [139])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 21 22 23 3 arch/arm/mm/init.c:149 (set (reg/v:SI 1 r1 [orig:158 max_high ] [158])
        (lshiftrt:SI (reg:SI 1 r1 [164])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 23 21 25 3 arch/arm/mm/init.c:149 (parallel [
            (set (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])
                (umax:SI (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])
                    (reg/v:SI 1 r1 [orig:158 max_high ] [158])))
            (clobber (reg:CC 24 cc))
        ]) 106 {*arm_umaxsi3} (nil))

(insn 25 23 26 3 arch/arm/mm/init.c:155 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 14 lr [orig:166 <variable>.highmem ] [166])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 26 25 27 3 arch/arm/mm/init.c:155 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  6 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 33 4 arch/arm/mm/init.c:155 (parallel [
            (set (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                (umax:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                    (reg/v:SI 1 r1 [orig:158 max_high ] [158])))
            (clobber (reg:CC 24 cc))
        ]) 106 {*arm_umaxsi3} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 4 2 3) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
;; Pred edge  3 [50.0%] 
(code_label 33 28 34 6 72 "" [2 uses])

(note 34 33 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 36 34 31 6 arch/arm/mm/init.c:144 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:157 i ] [157])
            (reg:SI 12 ip [orig:156 D.25862 ] [156]))) 219 {*arm_cmpsi_insn} (nil))

(insn 31 36 37 6 arch/arm/mm/init.c:144 (set (reg/v:SI 2 r2 [orig:157 i ] [157])
        (plus:SI (reg/v:SI 2 r2 [orig:157 i ] [157])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 37 31 38 6 arch/arm/mm/init.c:144 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 6 -> ( 3 7)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  3 [91.0%] 
;; Succ edge  7 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  6 [9.0%]  (fallthru,loop_exit)
(note 38 37 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 42 38 44 7 NOTE_INSN_DELETED)

(note 44 42 49 7 NOTE_INSN_DELETED)

(note 49 44 39 7 NOTE_INSN_DELETED)

(insn 39 49 43 7 arch/arm/mm/init.c:174 (set (reg:SI 7 r7 [orig:146 D.25910 ] [146])
        (minus:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
            (reg/v:SI 6 r6 [orig:160 min ] [160]))) 28 {*arm_subsi3_insn} (nil))

(insn 43 39 40 7 arch/arm/mm/init.c:175 (set (reg:SI 9 r9 [orig:147 D.25908 ] [147])
        (ashift:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 40 43 41 7 arch/arm/mm/init.c:174 (set (reg:SI 0 r0)
        (reg:SI 7 r7 [orig:146 D.25910 ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn 41 40 46 7 arch/arm/mm/init.c:174 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("bootmem_bootmap_pages") [flags 0x41] <function_decl 0x11095280 bootmem_bootmap_pages>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 46 41 47 7 arch/arm/mm/init.c:175 (set (reg:SI 1 r1)
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (nil))

(insn 47 46 45 7 arch/arm/mm/init.c:175 (set (reg:SI 2 r2)
        (reg:SI 9 r9 [orig:147 D.25908 ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 45 47 48 7 arch/arm/mm/init.c:175 (set (reg:SI 0 r0)
        (ashift:SI (reg:SI 0 r0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(call_insn 48 45 54 7 arch/arm/mm/init.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_alloc_base") [flags 0x41] <function_decl 0x113f7900 memblock_alloc_base>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 54 48 55 7 arch/arm/mm/init.c:184 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:160 min ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 51 7 arch/arm/mm/init.c:184 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 51 55 52 7 arch/arm/mm/init.c:184 (set (reg:SI 1 r1 [169])
        (lshiftrt:SI (reg:SI 0 r0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 52 51 56 7 arch/arm/mm/init.c:184 (set (reg:SI 0 r0)
        (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c25120 contig_page_data>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c25120 contig_page_data>)
        (nil)))

(call_insn 56 52 57 7 arch/arm/mm/init.c:184 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("init_bootmem_node") [flags 0x41] <function_decl 0x11095300 init_bootmem_node>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 57 56 83 7 arch/arm/mm/init.c:187 (set (reg/f:SI 3 r3 [170])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 83 57 58 7 arch/arm/mm/init.c:187 discrim 1 (set (reg/f:SI 10 sl [228])
        (reg/f:SI 3 r3 [170])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 58 83 214 7 arch/arm/mm/init.c:187 (set (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [170])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
        (nil)))

(jump_insn 214 58 215 7 (set (pc)
        (label_ref 80)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 215 214 82)

;; Start of basic block ( 10) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  10 [95.5%] 
(code_label 82 215 61 8 77 "" [1 uses])

(note 61 82 62 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 62 61 66 8 include/linux/memblock.h:120 (set (reg:SI 2 r2 [orig:153 D.25891 ] [153])
        (mem/s/j:SI (reg/v/f:SI 8 r8 [orig:148 reg ] [148]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 66 62 79 8 include/linux/memblock.h:129 (set (reg:SI 1 r1 [orig:174 <variable>.size ] [174])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 79 66 63 8 arch/arm/mm/init.c:187 (set (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
        (plus:SI (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 63 79 67 8 include/linux/memblock.h:120 (set (reg:SI 3 r3 [172])
        (plus:SI (reg:SI 2 r2 [orig:153 D.25891 ] [153])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 67 63 64 8 include/linux/memblock.h:129 (set (reg:SI 2 r2 [173])
        (plus:SI (reg:SI 2 r2 [orig:153 D.25891 ] [153])
            (reg:SI 1 r1 [orig:174 <variable>.size ] [174]))) 4 {*arm_addsi3} (nil))

(insn 64 67 68 8 include/linux/memblock.h:120 (set (reg:SI 3 r3 [171])
        (plus:SI (reg:SI 3 r3 [172])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 2 r2 [orig:153 D.25891 ] [153])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 68 64 65 8 include/linux/memblock.h:129 (set (reg/v:SI 2 r2 [orig:159 max_low ] [159])
        (lshiftrt:SI (reg:SI 2 r2 [173])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 65 68 69 8 include/linux/memblock.h:120 (set (reg/v:SI 3 r3 [orig:151 start ] [151])
        (lshiftrt:SI (reg:SI 3 r3 [171])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 69 65 74 8 include/linux/memblock.h:129 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 max_low.853 ] [134])
                (umin:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                    (reg/v:SI 2 r2 [orig:159 max_low ] [159])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 74 69 76 8 arch/arm/mm/init.c:196 (set (reg:SI 1 r1 [176])
        (minus:SI (reg/v:SI 2 r2 [orig:134 max_low.853 ] [134])
            (reg/v:SI 3 r3 [orig:151 start ] [151]))) 28 {*arm_subsi3_insn} (nil))

(insn 76 74 70 8 arch/arm/mm/init.c:196 (set (reg:SI 0 r0)
        (ashift:SI (reg/v:SI 3 r3 [orig:151 start ] [151])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 70 76 77 8 arch/arm/mm/init.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:151 start ] [151])
            (reg/v:SI 2 r2 [orig:134 max_low.853 ] [134]))) 219 {*arm_cmpsi_insn} (nil))

(insn 77 70 71 8 arch/arm/mm/init.c:196 (set (reg:SI 1 r1)
        (ashift:SI (reg:SI 1 r1 [176])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 71 77 72 8 arch/arm/mm/init.c:193 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
        (nil)))
;; End of basic block 8 -> ( 11 9)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [4.5%]  (loop_exit)
;; Succ edge  9 [95.5%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  8 [95.5%]  (fallthru)
(note 72 71 73 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 73 72 75 9 NOTE_INSN_DELETED)

(note 75 73 78 9 NOTE_INSN_DELETED)

(call_insn 78 75 80 9 arch/arm/mm/init.c:196 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_bootmem") [flags 0x41] <function_decl 0x11095600 free_bootmem>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 9 7) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru,dfs_back)
;; Pred edge  7 [100.0%] 
(code_label 80 78 81 10 75 "" [1 uses])

(note 81 80 86 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 86 81 85 10 NOTE_INSN_DELETED)

(insn 85 86 87 10 arch/arm/mm/init.c:187 discrim 1 (set (reg:SI 2 r2 [orig:181 memblock.memory.cnt ] [181])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 10 sl [228])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 10 sl [228])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 8 [0x8]))) [0 memblock.memory.cnt+0 S4 A32])
            (nil))))

(insn 87 85 88 10 arch/arm/mm/init.c:187 discrim 1 (set (reg/f:SI 3 r3 [orig:183 memblock.memory.regions ] [183])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [228])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [228])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
            (nil))))

(insn 88 87 89 10 arch/arm/mm/init.c:187 discrim 1 (set (reg:SI 3 r3 [182])
        (plus:SI (mult:SI (reg:SI 2 r2 [orig:181 memblock.memory.cnt ] [181])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [orig:183 memblock.memory.regions ] [183]))) 270 {*arith_shiftsi} (nil))

(insn 89 88 90 10 arch/arm/mm/init.c:187 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
            (reg:SI 3 r3 [182]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 90 89 91 10 arch/arm/mm/init.c:187 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 10 -> ( 8 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  8 [95.5%] 
;; Succ edge  11 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 8 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 8 [r8] 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8] 10 [sl]
;; live  kill	

;; Pred edge  8 [4.5%]  (loop_exit)
;; Pred edge  10 [4.5%]  (fallthru,loop_exit)
(code_label 91 90 92 11 76 "" [1 uses])

(note 92 91 93 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 93 92 120 11 arch/arm/mm/init.c:200 (set (reg/f:SI 3 r3 [184])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 120 93 94 11 arch/arm/mm/init.c:200 discrim 1 (set (reg/f:SI 10 sl [226])
        (reg/f:SI 3 r3 [184])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 94 120 216 11 arch/arm/mm/init.c:200 (set (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [184])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 28 [0x1c]))) [0 memblock.reserved.regions+0 S4 A32])
        (nil)))

(jump_insn 216 94 217 11 (set (pc)
        (label_ref 117)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [100.0%] 

(barrier 217 216 119)

;; Start of basic block ( 14) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  14 [95.5%] 
(code_label 119 217 97 12 80 "" [1 uses])

(note 97 119 98 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 98 97 100 12 include/linux/memblock.h:138 (set (reg:SI 3 r3 [orig:154 D.25887 ] [154])
        (mem/s/j:SI (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 100 98 116 12 include/linux/memblock.h:147 (set (reg:SI 12 ip [orig:186 <variable>.size ] [186])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 116 100 101 12 arch/arm/mm/init.c:200 (set (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
        (plus:SI (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 101 116 99 12 include/linux/memblock.h:147 (set (reg:SI 12 ip [185])
        (plus:SI (reg:SI 3 r3 [orig:154 D.25887 ] [154])
            (reg:SI 12 ip [orig:186 <variable>.size ] [186]))) 4 {*arm_addsi3} (nil))

(insn 99 101 102 12 include/linux/memblock.h:138 (set (reg/v:SI 3 r3 [orig:152 start ] [152])
        (lshiftrt:SI (reg:SI 3 r3 [orig:154 D.25887 ] [154])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 102 99 112 12 include/linux/memblock.h:147 (set (reg:SI 12 ip [188])
        (plus:SI (reg:SI 12 ip [185])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 112 102 103 12 arch/arm/mm/init.c:209 (set (reg:SI 0 r0)
        (ashift:SI (reg/v:SI 3 r3 [orig:152 start ] [152])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 103 112 104 12 include/linux/memblock.h:147 (set (reg:SI 12 ip [187])
        (plus:SI (reg:SI 12 ip [188])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 12 ip [185])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 104 103 105 12 include/linux/memblock.h:147 (set (reg/v:SI 12 ip [orig:137 max_low.850 ] [137])
        (lshiftrt:SI (reg:SI 12 ip [187])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 105 104 110 12 include/linux/memblock.h:147 (parallel [
            (set (reg/v:SI 12 ip [orig:133 max_low.854 ] [133])
                (umin:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                    (reg/v:SI 12 ip [orig:137 max_low.850 ] [137])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 110 105 106 12 arch/arm/mm/init.c:209 (set (reg:SI 1 r1 [190])
        (minus:SI (reg/v:SI 12 ip [orig:133 max_low.854 ] [133])
            (reg/v:SI 3 r3 [orig:152 start ] [152]))) 28 {*arm_subsi3_insn} (nil))

(insn 106 110 113 12 arch/arm/mm/init.c:206 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:152 start ] [152])
            (reg/v:SI 12 ip [orig:133 max_low.854 ] [133]))) 219 {*arm_cmpsi_insn} (nil))

(insn 113 106 107 12 arch/arm/mm/init.c:209 (set (reg:SI 1 r1)
        (ashift:SI (reg:SI 1 r1 [190])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 107 113 108 12 arch/arm/mm/init.c:206 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
        (nil)))
;; End of basic block 12 -> ( 15 13)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  15 [4.5%]  (loop_exit)
;; Succ edge  13 [95.5%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  12 [95.5%]  (fallthru)
(note 108 107 109 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 109 108 111 13 NOTE_INSN_DELETED)

(note 111 109 115 13 NOTE_INSN_DELETED)

(call_insn 115 111 117 13 arch/arm/mm/init.c:209 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("reserve_bootmem") [flags 0x41] <function_decl 0x11095700 reserve_bootmem>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 13 -> ( 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 13 11) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru,dfs_back)
;; Pred edge  11 [100.0%] 
(code_label 117 115 118 14 78 "" [1 uses])

(note 118 117 123 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 123 118 208 14 NOTE_INSN_DELETED)

(insn 208 123 122 14 arch/arm/mm/init.c:209 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 122 208 124 14 arch/arm/mm/init.c:200 discrim 1 (set (reg:SI 1 r1 [orig:195 memblock.reserved.cnt ] [195])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 10 sl [226])
                (const_int 20 [0x14])) [0 memblock.reserved.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 10 sl [226])
                (const_int 20 [0x14])) [0 memblock.reserved.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 20 [0x14]))) [0 memblock.reserved.cnt+0 S4 A32])
            (nil))))

(insn 124 122 125 14 arch/arm/mm/init.c:200 discrim 1 (set (reg/f:SI 3 r3 [orig:197 memblock.reserved.regions ] [197])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [226])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [226])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 28 [0x1c]))) [0 memblock.reserved.regions+0 S4 A32])
            (nil))))

(insn 125 124 126 14 arch/arm/mm/init.c:200 discrim 1 (set (reg:SI 3 r3 [196])
        (plus:SI (mult:SI (reg:SI 1 r1 [orig:195 memblock.reserved.cnt ] [195])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [orig:197 memblock.reserved.regions ] [197]))) 270 {*arith_shiftsi} (nil))

(insn 126 125 127 14 arch/arm/mm/init.c:200 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
            (reg:SI 3 r3 [196]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 127 126 128 14 arch/arm/mm/init.c:200 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 119)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
        (nil)))
;; End of basic block 14 -> ( 12 15)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  12 [95.5%] 
;; Succ edge  15 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 14 12) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  14 [4.5%]  (fallthru,loop_exit)
;; Pred edge  12 [4.5%]  (loop_exit)
(code_label 128 127 129 15 79 "" [1 uses])

(note 129 128 147 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 147 129 130 15 NOTE_INSN_DELETED)

(insn 130 147 132 15 arch/arm/mm/init.c:249 discrim 1 (set (reg/f:SI 8 r8 [198])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))
        (nil)))

(insn 132 130 131 15 arch/arm/mm/init.c:249 discrim 1 (set (reg:SI 1 r1)
        (const_int 12 [0xc])) 167 {*arm_movsi_insn} (nil))

(insn 131 132 133 15 arch/arm/mm/init.c:249 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 8 r8 [198])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(call_insn 133 131 143 15 arch/arm/mm/init.c:249 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10b7d080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 143 133 134 15 arch/arm/mm/init.c:266 (set (reg/f:SI 3 r3 [204])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 134 143 135 15 arch/arm/mm/init.c:256 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 zone_size+0 S4 A32])
        (reg:SI 7 r7 [orig:146 D.25910 ] [146])) 167 {*arm_movsi_insn} (nil))

(insn 135 134 136 15 arch/arm/mm/init.c:258 (set (reg:SI 2 r2 [199])
        (minus:SI (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])
            (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 zone_size+4 S4 A32])
        (nil)))

(insn 136 135 137 15 arch/arm/mm/init.c:258 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 zone_size+4 S4 A32])
        (reg:SI 2 r2 [199])) 167 {*arm_movsi_insn} (nil))

(insn 137 136 141 15 arch/arm/mm/init.c:265 (set (reg/f:SI 12 ip [200])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn 141 137 146 15 arch/arm/mm/init.c:265 (parallel [
            (set (reg:SI 0 r0)
                (mem/s/c:SI (reg/f:SI 8 r8 [198]) [0 zone_size+0 S4 A32]))
            (set (reg:SI 1 r1)
                (mem/s/c:SI (plus:SI (reg/f:SI 8 r8 [198])
                        (const_int 4 [0x4])) [0 zone_size+4 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s/c:SI (plus:SI (reg/f:SI 8 r8 [198])
                        (const_int 8 [0x8])) [0 zone_size+8 S4 A32]))
        ]) 189 {*ldmsi3} (nil))

(insn 146 141 144 15 arch/arm/mm/init.c:266 discrim 1 (set (reg:SI 14 lr [orig:207 memblock.memory.cnt ] [207])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [204])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 8 [0x8]))) [0 memblock.memory.cnt+0 S4 A32])
        (nil)))

(insn 144 146 148 15 arch/arm/mm/init.c:266 (set (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [204])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
        (nil)))

(insn 148 144 142 15 arch/arm/mm/init.c:266 discrim 1 (set (reg/f:SI 14 lr [orig:141 D.25929 ] [141])
        (plus:SI (mult:SI (reg:SI 14 lr [orig:207 memblock.memory.cnt ] [207])
                (const_int 8 [0x8]))
            (reg/v/f:SI 3 r3 [orig:142 reg ] [142]))) 270 {*arith_shiftsi} (nil))

(insn 142 148 218 15 arch/arm/mm/init.c:265 (parallel [
            (set (mem/s/c:SI (reg/f:SI 12 ip [200]) [0 zhole_size+0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s/c:SI (plus:SI (reg/f:SI 12 ip [200])
                        (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s/c:SI (plus:SI (reg/f:SI 12 ip [200])
                        (const_int 8 [0x8])) [0 zhole_size+8 S4 A64])
                (reg:SI 2 r2))
        ]) 196 {*stmsi3} (nil))

(jump_insn 218 142 219 15 (set (pc)
        (label_ref 180)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 21)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  21 [100.0%] 

(barrier 219 218 182)

;; Start of basic block ( 21) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  21 [91.0%] 
(code_label 182 219 151 16 84 "" [1 uses])

(note 151 182 152 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 152 151 156 16 include/linux/memblock.h:120 (set (reg:SI 1 r1 [orig:145 D.25927 ] [145])
        (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:142 reg ] [142]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 156 152 179 16 include/linux/memblock.h:129 (set (reg:SI 0 r0 [orig:211 <variable>.size ] [211])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 179 156 153 16 arch/arm/mm/init.c:266 (set (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
        (plus:SI (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 153 179 154 16 include/linux/memblock.h:120 (set (reg:SI 2 r2 [209])
        (plus:SI (reg:SI 1 r1 [orig:145 D.25927 ] [145])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 154 153 157 16 include/linux/memblock.h:120 (set (reg:SI 2 r2 [208])
        (plus:SI (reg:SI 2 r2 [209])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 1 r1 [orig:145 D.25927 ] [145])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 157 154 155 16 include/linux/memblock.h:129 (set (reg:SI 1 r1 [210])
        (plus:SI (reg:SI 1 r1 [orig:145 D.25927 ] [145])
            (reg:SI 0 r0 [orig:211 <variable>.size ] [211]))) 4 {*arm_addsi3} (nil))

(insn 155 157 158 16 include/linux/memblock.h:120 (set (reg/v:SI 2 r2 [orig:143 start ] [143])
        (lshiftrt:SI (reg:SI 2 r2 [208])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 158 155 159 16 include/linux/memblock.h:129 (set (reg/v:SI 1 r1 [orig:144 end ] [144])
        (lshiftrt:SI (reg:SI 1 r1 [210])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 159 158 160 16 arch/arm/mm/init.c:270 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:143 start ] [143])
            (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 160 159 161 16 arch/arm/mm/init.c:270 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  18 [50.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  16 [50.0%]  (fallthru)
(note 161 160 164 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 164 161 224 17 arch/arm/mm/init.c:272 (parallel [
            (set (reg:SI 12 ip [214])
                (umin:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                    (reg/v:SI 1 r1 [orig:144 end ] [144])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (nil))

(insn 224 164 163 17 arch/arm/mm/init.c:272 (set (reg:SI 0 r0 [orig:213 zhole_size ] [213])
        (mem/s/j:SI (reg/f:SI 13 sp) [0 zhole_size+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/f:SI 13 sp) [0 zhole_size+0 S4 A64])
        (nil)))

(insn 163 224 165 17 arch/arm/mm/init.c:272 (set (reg:SI 0 r0 [212])
        (plus:SI (reg/v:SI 2 r2 [orig:143 start ] [143])
            (reg:SI 0 r0 [orig:213 zhole_size ] [213]))) 4 {*arm_addsi3} (nil))

(insn 165 163 166 17 arch/arm/mm/init.c:272 (set (reg:SI 0 r0 [215])
        (minus:SI (reg:SI 0 r0 [212])
            (reg:SI 12 ip [214]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -24 [0xffffffffffffffe8])) [0 zhole_size+0 S4 A64])
        (nil)))

(insn 166 165 167 17 arch/arm/mm/init.c:272 (set (mem/s/j:SI (reg/f:SI 13 sp) [0 zhole_size+0 S4 A64])
        (reg:SI 0 r0 [215])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  18 [100.0%]  (fallthru)

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  16 [50.0%] 
;; Pred edge  17 [100.0%]  (fallthru)
(code_label 167 166 168 18 82 "" [1 uses])

(note 168 167 169 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 169 168 170 18 arch/arm/mm/init.c:275 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:144 end ] [144])
            (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 170 169 171 18 arch/arm/mm/init.c:275 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 180)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 18 -> ( 19 21)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  19 [50.0%]  (fallthru)
;; Succ edge  21 [50.0%] 

;; Start of basic block ( 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 24 [cc]

;; Pred edge  18 [50.0%]  (fallthru)
(note 171 170 174 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 174 171 172 19 NOTE_INSN_DELETED)

(insn 172 174 173 19 arch/arm/mm/init.c:277 (set (reg:SI 0 r0 [orig:217 zhole_size+4 ] [217])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])
        (nil)))

(insn 173 172 175 19 arch/arm/mm/init.c:277 (set (reg:SI 1 r1 [216])
        (minus:SI (reg:SI 0 r0 [orig:217 zhole_size+4 ] [217])
            (reg/v:SI 1 r1 [orig:144 end ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 175 173 176 19 arch/arm/mm/init.c:277 (parallel [
            (set (reg:SI 2 r2 [219])
                (plus:SI (umax:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                        (reg/v:SI 2 r2 [orig:143 start ] [143]))
                    (reg:SI 1 r1 [216])))
            (clobber (reg:CC 24 cc))
        ]) 109 {*minmax_arithsi} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -20 [0xffffffffffffffec])) [0 zhole_size+4 S4 A32])
        (nil)))

(insn 176 175 180 19 arch/arm/mm/init.c:277 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])
        (reg:SI 2 r2 [219])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 19 -> ( 21)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  21 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 19 15 18) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru,dfs_back)
;; Pred edge  15 [100.0%] 
;; Pred edge  18 [50.0%] 
(code_label 180 176 181 21 81 "" [2 uses])

(note 181 180 183 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 183 181 184 21 arch/arm/mm/init.c:266 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
            (reg/f:SI 14 lr [orig:141 D.25929 ] [141]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 184 183 185 21 arch/arm/mm/init.c:266 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 182)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 21 -> ( 16 22)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp] 14 [lr]


;; Succ edge  16 [91.0%] 
;; Succ edge  22 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9]
;; live  kill	 14 [lr]

;; Pred edge  21 [9.0%]  (fallthru,loop_exit)
(note 185 184 186 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 186 185 187 22 NOTE_INSN_DELETED)

(note 187 186 190 22 NOTE_INSN_DELETED)

(insn 190 187 188 22 arch/arm/mm/init.c:295 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:160 min ] [160])) 167 {*arm_movsi_insn} (nil))

(insn 188 190 189 22 arch/arm/mm/init.c:295 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 189 188 191 22 arch/arm/mm/init.c:295 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn 191 189 192 22 arch/arm/mm/init.c:295 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(call_insn 192 191 194 22 arch/arm/mm/init.c:295 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_area_init_node") [flags 0x41] <function_decl 0x111d5700 free_area_init_node>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 194 192 223 22 arch/arm/mm/init.c:405 (set (reg:SI 9 r9 [223])
        (plus:SI (reg:SI 9 r9 [orig:147 D.25908 ] [147])
            (const_int -1073741824 [0xffffffffc0000000]))) 4 {*arm_addsi3} (nil))

(insn 223 194 195 22 arch/arm/mm/init.c:405 (set (reg/f:SI 3 r3 [222])
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>)
        (nil)))

(insn 195 223 222 22 arch/arm/mm/init.c:405 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [222]) [0 high_memory+0 S4 A32])
        (reg:SI 9 r9 [223])) 167 {*arm_movsi_insn} (nil))

(insn 222 195 197 22 arch/arm/mm/init.c:415 (set (reg/f:SI 3 r3 [224])
        (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>)
        (nil)))

(insn 197 222 221 22 arch/arm/mm/init.c:415 (set (mem/c/i:SI (reg/f:SI 3 r3 [224]) [0 max_low_pfn+0 S4 A32])
        (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 221 197 199 22 arch/arm/mm/init.c:416 (set (reg/f:SI 3 r3 [225])
        (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>)
        (nil)))

(insn 199 221 220 22 arch/arm/mm/init.c:416 (set (mem/c/i:SI (reg/f:SI 3 r3 [225]) [0 max_pfn+0 S4 A32])
        (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 22 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 220 199 225 NOTE_INSN_DELETED)

(note 225 220 0 NOTE_INSN_DELETED)


;; Function arm_memblock_init (arm_memblock_init)[0:1353] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 27 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 31 (  1.9)
scanning new insn with uid = 142.
verify found no changes in insn with uid = 142.
deleting insn with uid = 115.
scanning new insn with uid = 143.
verify found no changes in insn with uid = 143.
deleting insn with uid = 113.
scanning new insn with uid = 144.
verify found no changes in insn with uid = 144.
deleting insn with uid = 39.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 27 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 31 (  1.9)

Pass 0 for finding allocno costs

    a3 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r181,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r177,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r174,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r171,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r165,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r151,l1) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r144,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r143,l1) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r137,l1) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r136,l1) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a8(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a11(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a14(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a24(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a27(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000


Pass 1 for finding allocno costs

    r182: preferred GENERAL_REGS, alternative NO_REGS
    r181: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r177: preferred GENERAL_REGS, alternative NO_REGS
    r174: preferred GENERAL_REGS, alternative NO_REGS
    r171: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r181,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r174,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a8(r177,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r165,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a11(r171,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a14(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a16(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a17(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a22(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a24(r137,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a25(r143,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a26(r144,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a27(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000

   Insn 131(l0): point = 0
   Insn 130(l0): point = 2
   Insn 127(l0): point = 5
   Insn 125(l0): point = 8
   Insn 124(l0): point = 10
   Insn 123(l0): point = 12
   Insn 122(l0): point = 14
   Insn 119(l0): point = 17
   Insn 142(l0): point = 19
   Insn 118(l0): point = 21
   Insn 114(l0): point = 23
   Insn 143(l0): point = 25
   Insn 117(l0): point = 27
   Insn 112(l0): point = 29
   Insn 111(l0): point = 31
   Insn 109(l0): point = 33
   Insn 107(l0): point = 35
   Insn 108(l0): point = 37
   Insn 104(l0): point = 40
   Insn 103(l0): point = 42
   Insn 102(l0): point = 44
   Insn 101(l0): point = 46
   Insn 95(l0): point = 49
   Insn 98(l0): point = 51
   Insn 94(l0): point = 53
   Insn 92(l0): point = 55
   Insn 91(l0): point = 57
   Insn 90(l0): point = 59
   Insn 89(l0): point = 61
   Insn 84(l0): point = 64
   Insn 83(l0): point = 66
   Insn 81(l0): point = 68
   Insn 79(l0): point = 70
   Insn 80(l0): point = 72
   Insn 76(l0): point = 75
   Insn 75(l0): point = 77
   Insn 74(l0): point = 79
   Insn 73(l0): point = 81
   Insn 67(l0): point = 84
   Insn 70(l0): point = 86
   Insn 64(l0): point = 88
   Insn 63(l0): point = 90
   Insn 62(l0): point = 92
   Insn 61(l0): point = 94
   Insn 56(l0): point = 97
   Insn 55(l0): point = 99
   Insn 53(l0): point = 101
   Insn 51(l0): point = 103
   Insn 52(l0): point = 105
   Insn 48(l0): point = 108
   Insn 47(l0): point = 110
   Insn 46(l0): point = 112
   Insn 44(l0): point = 114
   Insn 43(l0): point = 116
   Insn 144(l0): point = 118
   Insn 42(l0): point = 120
   Insn 45(l0): point = 122
   Insn 40(l0): point = 124
   Insn 140(l0): point = 127
   Insn 19(l0): point = 129
   Insn 18(l0): point = 131
   Insn 13(l0): point = 133
   Insn 21(l0): point = 135
   Insn 17(l0): point = 137
   Insn 16(l0): point = 139
   Insn 15(l0): point = 141
   Insn 14(l0): point = 143
   Insn 20(l0): point = 145
   Insn 3(l0): point = 147
   Insn 2(l0): point = 149
   Insn 12(l0): point = 151
   Insn 7(l0): point = 153
   Insn 36(l1): point = 156
   Insn 29(l1): point = 158
   Insn 35(l1): point = 160
   Insn 30(l1): point = 162
   Insn 34(l1): point = 164
   Insn 25(l1): point = 166
   Insn 28(l1): point = 169
   Insn 26(l1): point = 171
   Insn 27(l1): point = 173
 a0(r138): [6..12]
 a1(r144): [13..147]
 a2(r179): [18..19]
 a3(r182): [18..21]
 a4(r181): [22..27]
 a5(r139): [22..29]
 a6(r178): [24..25]
 a7(r174): [28..46]
 a8(r177): [30..31]
 a9(r133): [38..44]
 a10(r165): [50..81]
 a11(r171): [50..53]
 a12(r134): [73..79]
 a13(r156): [85..122]
 a14(r141): [85..99]
 a15(r142): [106..112]
 a16(r155): [117..124]
 a17(r154): [117..118]
 a18(r150): [134..151]
 a19(r137): [127..135]
 a20(r136): [127..145]
 a21(r145): [142..153]
 a22(r143): [127..149]
 a23(r136): [156..175]
 a24(r137): [156..175]
 a25(r143): [156..175]
 a26(r144): [156..175]
 a27(r151): [161..164]
 a28(r135): [172..175] [156..166]
 Rebuilding regno allocno list for 151
 Rebuilding regno allocno list for 135
Compressing live ranges: from 176 to 45 - 25%
Ranges after the compression:
 a0(r138): [0..1]
 a1(r144): [39..44] [2..35]
 a2(r179): [3..4]
 a3(r182): [3..5]
 a4(r181): [6..9]
 a5(r139): [6..11]
 a6(r178): [7..8]
 a7(r174): [10..16]
 a8(r177): [12..13]
 a9(r133): [14..15]
 a10(r165): [17..21]
 a11(r171): [17..18]
 a12(r134): [19..20]
 a13(r156): [22..28]
 a14(r141): [22..23]
 a15(r142): [24..25]
 a16(r155): [26..29]
 a17(r154): [26..27]
 a18(r150): [31..37]
 a19(r137): [39..44] [30..32]
 a20(r136): [39..44] [30..34]
 a21(r145): [33..38]
 a22(r143): [39..44] [30..36]
 a27(r151): [40..41]
 a28(r135): [43..44] [39..42]
+++Allocating 192 bytes for conflict table (uncompressed size 232)
;; a0(r138,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r144,l0) conflicts: a2(r179,l0) a3(r182,l0) a4(r181,l0) a5(r139,l0) a6(r178,l0) a7(r174,l0) a8(r177,l0) a9(r133,l0) a11(r171,l0) a10(r165,l0) a12(r134,l0) a14(r141,l0) a13(r156,l0) a15(r142,l0) a17(r154,l0) a16(r155,l0) a19(r137,l0) a20(r136,l0) a22(r143,l0) a18(r150,l0) a21(r145,l0) a28(r135,l0) a27(r151,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r179,l0) conflicts: a1(r144,l0) a3(r182,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a3(r182,l0) conflicts: a1(r144,l0) a2(r179,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a4(r181,l0) conflicts: a1(r144,l0) a5(r139,l0) a6(r178,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r139,l0) conflicts: a1(r144,l0) a4(r181,l0) a6(r178,l0) a7(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r178,l0) conflicts: a1(r144,l0) a4(r181,l0) a5(r139,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r174,l0) conflicts: a1(r144,l0) a5(r139,l0) a8(r177,l0) a9(r133,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a8(r177,l0) conflicts: a1(r144,l0) a7(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r133,l0) conflicts: a1(r144,l0) a7(r174,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r165,l0) conflicts: a1(r144,l0) a11(r171,l0) a12(r134,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a11(r171,l0) conflicts: a1(r144,l0) a10(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a12(r134,l0) conflicts: a1(r144,l0) a10(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a13(r156,l0) conflicts: a1(r144,l0) a14(r141,l0) a15(r142,l0) a17(r154,l0) a16(r155,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a14(r141,l0) conflicts: a1(r144,l0) a13(r156,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a15(r142,l0) conflicts: a1(r144,l0) a13(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a16(r155,l0) conflicts: a1(r144,l0) a13(r156,l0) a17(r154,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a17(r154,l0) conflicts: a1(r144,l0) a13(r156,l0) a16(r155,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a18(r150,l0) conflicts: a1(r144,l0) a19(r137,l0) a20(r136,l0) a22(r143,l0) a21(r145,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a19(r137,l0) conflicts: a1(r144,l0) a20(r136,l0) a22(r143,l0) a18(r150,l0) a28(r135,l0) a27(r151,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a20(r136,l0) conflicts: a1(r144,l0) a19(r137,l0) a22(r143,l0) a18(r150,l0) a21(r145,l0) a28(r135,l0) a27(r151,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a21(r145,l0) conflicts: a1(r144,l0) a20(r136,l0) a22(r143,l0) a18(r150,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1
;; a22(r143,l0) conflicts: a1(r144,l0) a19(r137,l0) a20(r136,l0) a18(r150,l0) a21(r145,l0) a28(r135,l0) a27(r151,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a27(r151,l0) conflicts: a1(r144,l0) a19(r137,l0) a20(r136,l0) a22(r143,l0) a28(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r135,l0) conflicts: a1(r144,l0) a19(r137,l0) a20(r136,l0) a22(r143,l0) a27(r151,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1

  cp0:a5(r139)<->a8(r177)@125:shuffle
  cp1:a3(r182)<->a5(r139)@125:shuffle
  cp2:a3(r182)<->a4(r181)@125:shuffle
  regions=2, blocks=16, points=45
    allocnos=29, copies=3, conflicts=0, ranges=30

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r138 1r144 2r179 3r182 4r181 5r139 6r178 7r174 8r177 9r133 10r165 11r171 12r134 13r156 14r141 15r142 16r155 17r154 18r150 19r137 20r136 21r145 22r143 27r151 28r135
    modified regnos: 133 134 135 136 137 138 139 141 142 143 144 145 150 151 154 155 156 165 171 174 177 178 179 181 182
    border:
    Pressure: GENERAL_REGS=9
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 5 regs less
    Reg 174 of GENERAL_REGS has 3 regs less
    Reg 165 of GENERAL_REGS has 4 regs less
    Reg 156 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 4 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 145 of GENERAL_REGS has 2 regs less
    Reg 143 of GENERAL_REGS has 5 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
      Pushing a27(r151,l0)
      Pushing a8(r177,l0)
      Pushing a6(r178,l0)
      Pushing a4(r181,l0)
      Pushing a3(r182,l0)
      Pushing a2(r179,l0)
      Pushing a15(r142,l0)
      Pushing a12(r134,l0)
      Pushing a11(r171,l0)
      Pushing a9(r133,l0)
      Pushing a5(r139,l0)
      Pushing a17(r154,l0)
      Pushing a28(r135,l0)
      Pushing a16(r155,l0)
      Pushing a0(r138,l0)
      Pushing a21(r145,l0)
      Pushing a7(r174,l0)
      Pushing a18(r150,l0)
      Pushing a14(r141,l0)
      Pushing a13(r156,l0)
      Pushing a10(r165,l0)
      Pushing a1(r144,l0)
      Pushing a22(r143,l0)
      Pushing a19(r137,l0)
      Pushing a20(r136,l0)
      Popping a20(r136,l0)  -- assign reg 4
      Popping a19(r137,l0)  -- assign reg 5
      Popping a22(r143,l0)  -- assign reg 6
      Popping a1(r144,l0)  -- assign reg 7
      Popping a10(r165,l0)  -- assign reg 4
      Popping a13(r156,l0)  -- assign reg 4
      Popping a14(r141,l0)  -- assign reg 5
      Popping a18(r150,l0)  -- assign reg 12
      Popping a7(r174,l0)  -- assign reg 4
      Popping a21(r145,l0)  -- assign reg 3
      Popping a0(r138,l0)  -- assign reg 3
      Popping a16(r155,l0)  -- assign reg 3
      Popping a28(r135,l0)  -- assign reg 3
      Popping a17(r154,l0)  -- assign reg 1
      Popping a5(r139,l0)  -- assign reg 3
      Popping a9(r133,l0)  -- assign reg 1
      Popping a11(r171,l0)  -- assign reg 3
      Popping a12(r134,l0)  -- assign reg 1
      Popping a15(r142,l0)  -- assign reg 1
      Popping a2(r179,l0)  -- assign reg 2
      Popping a3(r182,l0)  -- assign reg 3
      Popping a4(r181,l0)  -- assign reg 2
      Popping a6(r178,l0)  -- assign reg 1
      Popping a8(r177,l0)  -- assign reg 3
      Popping a27(r151,l0)  -- assign reg 2
Disposition:
    9:r133 l0     1   12:r134 l0     1   28:r135 l0     3   20:r136 l0     4
   19:r137 l0     5    0:r138 l0     3    5:r139 l0     3   14:r141 l0     5
   15:r142 l0     1   22:r143 l0     6    1:r144 l0     7   21:r145 l0     3
   18:r150 l0    12   27:r151 l0     2   17:r154 l0     1   16:r155 l0     3
   13:r156 l0     4   10:r165 l0     4   11:r171 l0     3    7:r174 l0     4
    8:r177 l0     3    6:r178 l0     1    2:r179 l0     2    4:r181 l0     2
    3:r182 l0     3
New iteration of spill/restore move
+++Costs: overall -12250, reg -12250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 1, 13, dead_or_set: 145
insn=12, live_throughout: 0, 1, 13, 145, dead_or_set: 150
insn=2, live_throughout: 1, 13, 145, 150, dead_or_set: 0, 143
insn=3, live_throughout: 13, 143, 145, 150, dead_or_set: 1, 144
insn=20, live_throughout: 13, 143, 144, 145, 150, dead_or_set: 136
insn=14, live_throughout: 13, 136, 143, 144, 145, 150, dead_or_set: 0
insn=15, live_throughout: 0, 13, 136, 143, 144, 150, dead_or_set: 1, 145
insn=16, live_throughout: 0, 1, 13, 136, 143, 144, 150, dead_or_set: 2
insn=17, live_throughout: 0, 1, 2, 13, 136, 143, 144, 150, dead_or_set: 3
insn=21, live_throughout: 0, 1, 2, 3, 13, 136, 143, 144, 150, dead_or_set: 137
insn=13, live_throughout: 0, 1, 2, 3, 13, 136, 137, 143, 144, dead_or_set: 150
insn=18, live_throughout: 13, 136, 137, 143, 144, dead_or_set: 0, 1, 2, 3, 14
insn=19, live_throughout: 13, 136, 137, 143, 144, dead_or_set: 14
insn=140, live_throughout: 13, 136, 137, 143, 144, dead_or_set: 
insn=33, live_throughout: 13, 135, 136, 137, 143, 144, dead_or_set: 
insn=27, live_throughout: 13, 135, 136, 137, 143, 144, dead_or_set: 1
insn=26, live_throughout: 1, 13, 136, 137, 143, 144, dead_or_set: 0, 135
insn=28, live_throughout: 13, 136, 137, 143, 144, dead_or_set: 0, 1, 14
insn=31, live_throughout: 13, 136, 137, 143, 144, dead_or_set: 
insn=25, live_throughout: 13, 136, 137, 143, 144, dead_or_set: 135
insn=34, live_throughout: 13, 135, 136, 137, 143, 144, dead_or_set: 151
insn=30, live_throughout: 13, 135, 137, 143, 144, 151, dead_or_set: 136
insn=35, live_throughout: 13, 135, 136, 137, 143, 144, dead_or_set: 151
insn=29, live_throughout: 13, 24, 135, 136, 143, 144, dead_or_set: 137
insn=36, live_throughout: 13, 135, 136, 137, 143, 144, dead_or_set: 
insn=40, live_throughout: 13, 144, dead_or_set: 155
insn=45, live_throughout: 13, 144, 155, dead_or_set: 156
insn=42, live_throughout: 13, 144, 155, 156, dead_or_set: 0
insn=144, live_throughout: 0, 13, 144, 155, 156, dead_or_set: 154
insn=43, live_throughout: 0, 13, 144, 156, dead_or_set: 1, 154, 155
insn=44, live_throughout: 13, 144, 156, dead_or_set: 0, 1, 14
insn=46, live_throughout: 13, 144, 156, dead_or_set: 142
insn=47, live_throughout: 13, 142, 144, 156, dead_or_set: 
insn=48, live_throughout: 13, 142, 144, 156, dead_or_set: 
insn=52, live_throughout: 13, 144, 156, dead_or_set: 1, 142
insn=51, live_throughout: 1, 13, 144, 156, dead_or_set: 0
insn=53, live_throughout: 13, 144, 156, dead_or_set: 0, 1, 14
insn=55, live_throughout: 13, 144, 156, dead_or_set: 0, 141
insn=56, live_throughout: 13, 141, 144, 156, dead_or_set: 
insn=61, live_throughout: 13, 141, 144, 156, dead_or_set: 0
insn=62, live_throughout: 0, 13, 141, 144, 156, dead_or_set: 1
insn=63, live_throughout: 0, 1, 13, 141, 144, 156, dead_or_set: 2
insn=64, live_throughout: 13, 141, 144, 156, dead_or_set: 0, 1, 2, 14
insn=70, live_throughout: 13, 141, 144, 156, dead_or_set: 
insn=67, live_throughout: 13, 144, dead_or_set: 141, 156
insn=71, live_throughout: 13, 144, dead_or_set: 
insn=73, live_throughout: 13, 144, dead_or_set: 165
insn=74, live_throughout: 13, 144, 165, dead_or_set: 134
insn=75, live_throughout: 13, 134, 144, 165, dead_or_set: 
insn=76, live_throughout: 13, 134, 144, 165, dead_or_set: 
insn=80, live_throughout: 13, 144, 165, dead_or_set: 1, 134
insn=79, live_throughout: 1, 13, 144, 165, dead_or_set: 0
insn=81, live_throughout: 13, 144, 165, dead_or_set: 0, 1, 14
insn=83, live_throughout: 13, 144, 165, dead_or_set: 0
insn=84, live_throughout: 13, 144, 165, dead_or_set: 
insn=89, live_throughout: 13, 144, 165, dead_or_set: 0
insn=90, live_throughout: 0, 13, 144, 165, dead_or_set: 1
insn=91, live_throughout: 0, 1, 13, 144, 165, dead_or_set: 2
insn=92, live_throughout: 13, 144, 165, dead_or_set: 0, 1, 2, 14
insn=94, live_throughout: 13, 144, 165, dead_or_set: 171
insn=98, live_throughout: 13, 144, 165, 171, dead_or_set: 
insn=95, live_throughout: 13, 144, dead_or_set: 165, 171
insn=99, live_throughout: 13, 144, dead_or_set: 
insn=101, live_throughout: 13, 144, dead_or_set: 174
insn=102, live_throughout: 13, 144, 174, dead_or_set: 133
insn=103, live_throughout: 13, 133, 144, 174, dead_or_set: 
insn=104, live_throughout: 13, 133, 144, 174, dead_or_set: 
insn=108, live_throughout: 13, 144, 174, dead_or_set: 1, 133
insn=107, live_throughout: 1, 13, 144, 174, dead_or_set: 0
insn=109, live_throughout: 13, 144, 174, dead_or_set: 0, 1, 14
insn=111, live_throughout: 13, 144, 174, dead_or_set: 177
insn=112, live_throughout: 13, 144, 174, dead_or_set: 139, 177
insn=117, live_throughout: 13, 139, 144, dead_or_set: 174, 181
insn=143, live_throughout: 13, 139, 144, 181, dead_or_set: 178
insn=114, live_throughout: 13, 139, 144, 181, dead_or_set: 178
insn=118, live_throughout: 13, 144, dead_or_set: 139, 181, 182
insn=142, live_throughout: 13, 144, 182, dead_or_set: 179
insn=119, live_throughout: 13, 144, dead_or_set: 179, 182
insn=120, live_throughout: 13, 144, dead_or_set: 
insn=122, live_throughout: 13, 144, dead_or_set: 14
insn=123, live_throughout: 13, dead_or_set: 138, 144
insn=124, live_throughout: 13, 138, dead_or_set: 
insn=125, live_throughout: 13, 138, dead_or_set: 
insn=127, live_throughout: 13, dead_or_set: 14, 138
insn=128, live_throughout: 13, dead_or_set: 
insn=130, live_throughout: 13, dead_or_set: 14
insn=131, live_throughout: 13, 14, dead_or_set: 
init_insns for 145: (insn_list:REG_DEP_TRUE 7 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 12 (nil))
init_insns for 151: (insn_list:REG_DEP_TRUE 34 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 144 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 40 (nil))
init_insns for 156: (insn_list:REG_DEP_TRUE 45 (nil))
init_insns for 165: (insn_list:REG_DEP_TRUE 73 (nil))
init_insns for 171: (insn_list:REG_DEP_TRUE 94 (nil))
init_insns for 174: (insn_list:REG_DEP_TRUE 101 (nil))
init_insns for 177: (insn_list:REG_DEP_TRUE 111 (nil))
init_insns for 178: (insn_list:REG_DEP_TRUE 143 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 142 (nil))
changing reg in insn 102
changing reg in insn 108
changing reg in insn 103
changing reg in insn 74
changing reg in insn 80
changing reg in insn 75
changing reg in insn 25
changing reg in insn 27
changing reg in insn 26
changing reg in insn 20
changing reg in insn 30
changing reg in insn 21
changing reg in insn 30
changing reg in insn 25
changing reg in insn 21
changing reg in insn 29
changing reg in insn 35
changing reg in insn 29
changing reg in insn 123
changing reg in insn 127
changing reg in insn 124
changing reg in insn 112
changing reg in insn 118
changing reg in insn 114
changing reg in insn 55
changing reg in insn 70
changing reg in insn 67
changing reg in insn 46
changing reg in insn 52
changing reg in insn 47
changing reg in insn 2
changing reg in insn 34
changing reg in insn 25
changing reg in insn 34
changing reg in insn 3
changing reg in insn 123
changing reg in insn 7
changing reg in insn 14
changing reg in insn 15
changing reg in insn 12
changing reg in insn 20
changing reg in insn 13
changing reg in insn 34
changing reg in insn 35
changing reg in insn 144
changing reg in insn 43
changing reg in insn 40
changing reg in insn 43
changing reg in insn 42
changing reg in insn 45
changing reg in insn 70
changing reg in insn 67
changing reg in insn 63
changing reg in insn 62
changing reg in insn 51
changing reg in insn 46
changing reg in insn 73
changing reg in insn 98
changing reg in insn 95
changing reg in insn 91
changing reg in insn 90
changing reg in insn 79
changing reg in insn 74
changing reg in insn 94
changing reg in insn 98
changing reg in insn 95
changing reg in insn 101
changing reg in insn 117
changing reg in insn 111
changing reg in insn 107
changing reg in insn 102
changing reg in insn 111
changing reg in insn 111
changing reg in insn 112
changing reg in insn 143
changing reg in insn 114
changing reg in insn 142
changing reg in insn 119
changing reg in insn 117
changing reg in insn 118
changing reg in insn 118
changing reg in insn 119
Spilling for insn 13.
Spilling for insn 70.
Spilling for insn 67.
Spilling for insn 98.
Spilling for insn 95.
Spilling for insn 114.
Spilling for insn 119.

Reloads for insn # 13
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 70
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 4 r4 [156]) [0 phys_initrd_start+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 4 r4 [156]) [0 phys_initrd_start+0 S4 A32])

Reloads for insn # 67
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])

Reloads for insn # 98
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 4 r4 [165]) [0 phys_initrd_start+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 4 r4 [165]) [0 phys_initrd_start+0 S4 A32])

Reloads for insn # 95
Reload 0: reload_out (SI) = (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [165])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [165])
                                                        (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])

Reloads for insn # 114
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 1 r1 [178]) [0 initrd_start+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 1 r1 [178]) [0 initrd_start+0 S4 A32])

Reloads for insn # 119
Reload 0: reload_out (SI) = (mem/c/i:SI (reg/f:SI 2 r2 [179]) [0 initrd_end+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/c/i:SI (reg/f:SI 2 r2 [179]) [0 initrd_end+0 S4 A32])
deleting insn with uid = 52.
deleting insn with uid = 80.
deleting insn with uid = 108.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 19.
verify found no changes in insn with uid = 28.
verify found no changes in insn with uid = 44.
verify found no changes in insn with uid = 53.
verify found no changes in insn with uid = 64.
verify found no changes in insn with uid = 81.
verify found no changes in insn with uid = 92.
verify found no changes in insn with uid = 109.
verify found no changes in insn with uid = 122.
rescanning insn with uid = 127.
deleting insn with uid = 127.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 131.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 27 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 31 (  1.9)


arm_memblock_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={22d,12u} r1={24d,14u} r2={20d,6u} r3={23d,15u} r4={5d,19u,1d} r5={3d,4u} r6={1d,2u,1d} r7={1d,1u} r12={15d,2u} r13={1d,29u} r14={13d,1u} r15={13d} r16={13d} r17={13d} r18={13d} r19={13d} r20={13d} r21={13d} r22={13d} r23={13d} r24={20d,7u} r27={13d} r28={13d} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={13d} r37={13d} r38={13d} r39={13d} r40={13d} r41={13d} r42={13d} r43={13d} r44={13d} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} r76={13d} r77={13d} r78={13d} r79={13d} r80={13d} r81={13d} r82={13d} r83={13d} r84={13d} r85={13d} r86={13d} r87={13d} r88={13d} r89={13d} r90={13d} r91={13d} r92={13d} r93={13d} r94={13d} r95={13d} r96={13d} r97={13d} r98={13d} r99={13d} r100={13d} r101={13d} r102={13d} r103={13d} r104={13d} r105={13d} r106={13d} r107={13d} r108={13d} r109={13d} r110={13d} r111={13d} r112={13d} r113={13d} r114={13d} r115={13d} r116={13d} r117={13d} r118={13d} r119={13d} r120={13d} r121={13d} r122={13d} r123={13d} r124={13d} r125={13d} r126={13d} r127={13d} 
;;    total ref usage 1692{1578d,112u,2e} in 78{65 regular + 13 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 12 2 arch/arm/mm/init.c:332 (set (reg/f:SI 3 r3 [145])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 12 7 2 2 arch/arm/mm/init.c:332 (set (reg:SI 12 ip [150])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 2 12 3 2 arch/arm/mm/init.c:329 (set (reg/v/f:SI 6 r6 [orig:143 mi ] [143])
        (reg:SI 0 r0 [ mi ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 20 2 arch/arm/mm/init.c:329 (set (reg/v/f:SI 7 r7 [orig:144 mdesc ] [144])
        (reg:SI 1 r1 [ mdesc ])) 167 {*arm_movsi_insn} (nil))

(insn 20 3 14 2 arch/arm/mm/init.c:334 (set (reg:SI 4 r4 [orig:136 ivtmp.885 ] [136])
        (reg:SI 12 ip [150])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 14 20 15 2 arch/arm/mm/init.c:332 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 3 r3 [145])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 8 [0x8])))
        (nil)))

(insn 15 14 16 2 arch/arm/mm/init.c:332 (set (reg:SI 1 r1)
        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [145])
                (const_int 4 [0x4])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
        (nil)))

(insn 16 15 17 2 arch/arm/mm/init.c:332 (set (reg:SI 2 r2)
        (const_int 12 [0xc])) 167 {*arm_movsi_insn} (nil))

(insn 17 16 21 2 arch/arm/mm/init.c:332 (set (reg:SI 3 r3)
        (symbol_ref:SI ("meminfo_cmp") [flags 0x3] <function_decl 0x115b7c80 meminfo_cmp>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("meminfo_cmp") [flags 0x3] <function_decl 0x115b7c80 meminfo_cmp>)
        (nil)))

(insn 21 17 13 2 arch/arm/mm/init.c:335 (set (reg/v:SI 5 r5 [orig:137 i ] [137])
        (reg:SI 4 r4 [orig:136 ivtmp.885 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 13 21 18 2 arch/arm/mm/init.c:332 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [150])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 18 13 19 2 arch/arm/mm/init.c:332 (parallel [
            (call (mem:SI (symbol_ref:SI ("sort") [flags 0x41] <function_decl 0x11402380 sort>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(call_insn 19 18 140 2 arch/arm/mm/init.c:334 (parallel [
            (call (mem:SI (symbol_ref:SI ("memblock_init") [flags 0x41] <function_decl 0x113f7480 memblock_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 140 19 141 2 arch/arm/mm/init.c:335 (set (pc)
        (label_ref 31)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [100.0%] 

(barrier 141 140 33)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  4 [88.9%] 
(code_label 33 141 24 3 90 "" [1 uses])

(note 24 33 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 27 24 26 3 arch/arm/mm/init.c:336 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 D.26496 ] [135])
                (const_int 8 [0x8])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 26 27 28 3 arch/arm/mm/init.c:336 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 D.26496 ] [135])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 28 26 31 3 arch/arm/mm/init.c:336 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_add") [flags 0x41] <function_decl 0x113f7580 memblock_add>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 31 28 32 4 89 "" [1 uses])

(note 32 31 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 32 34 4 arch/arm/mm/init.c:328 (set (reg/f:SI 3 r3 [orig:135 D.26496 ] [135])
        (plus:SI (reg/v/f:SI 6 r6 [orig:143 mi ] [143])
            (reg:SI 4 r4 [orig:136 ivtmp.885 ] [136]))) 4 {*arm_addsi3} (nil))

(insn 34 25 30 4 arch/arm/mm/init.c:335 (set (reg:SI 2 r2 [orig:151 <variable>.nr_banks ] [151])
        (mem/s/j:SI (reg/v/f:SI 6 r6 [orig:143 mi ] [143]) [0 <variable>.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 6 r6 [orig:143 mi ] [143]) [0 <variable>.nr_banks+0 S4 A32])
        (nil)))

(insn 30 34 35 4 arch/arm/mm/init.c:335 discrim 2 (set (reg:SI 4 r4 [orig:136 ivtmp.885 ] [136])
        (plus:SI (reg:SI 4 r4 [orig:136 ivtmp.885 ] [136])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn 35 30 29 4 arch/arm/mm/init.c:335 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:137 i ] [137])
            (reg:SI 2 r2 [orig:151 <variable>.nr_banks ] [151]))) 219 {*arm_cmpsi_insn} (nil))

(insn 29 35 36 4 arch/arm/mm/init.c:335 discrim 2 (set (reg/v:SI 5 r5 [orig:137 i ] [137])
        (plus:SI (reg/v:SI 5 r5 [orig:137 i ] [137])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 36 29 37 4 arch/arm/mm/init.c:335 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8889 [0x22b9])
        (nil)))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [88.9%] 
;; Succ edge  5 [11.1%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [11.1%]  (fallthru,loop_exit)
(note 37 36 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 41 37 40 5 NOTE_INSN_DELETED)

(insn 40 41 45 5 arch/arm/mm/init.c:342 (set (reg/f:SI 3 r3 [155])
        (symbol_ref:SI ("_stext") [flags 0xc0] <var_decl 0x113f9720 _stext>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_stext") [flags 0xc0] <var_decl 0x113f9720 _stext>)
        (nil)))

(insn 45 40 42 5 arch/arm/mm/init.c:345 (set (reg/f:SI 4 r4 [156])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 42 45 144 5 arch/arm/mm/init.c:342 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 3 r3 [155])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("_stext") [flags 0xc0] <var_decl 0x113f9720 _stext>)
                (const_int 1073741824 [0x40000000])))
        (nil)))

(insn 144 42 43 5 arch/arm/mm/init.c:342 (set (reg/f:SI 1 r1 [154])
        (symbol_ref:SI ("_end") [flags 0xc0] <var_decl 0x11478300 _end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_end") [flags 0xc0] <var_decl 0x11478300 _end>)
        (nil)))

(insn 43 144 44 5 arch/arm/mm/init.c:342 (set (reg:SI 1 r1)
        (minus:SI (reg/f:SI 1 r1 [154])
            (reg/f:SI 3 r3 [155]))) 28 {*arm_subsi3_insn} (nil))

(call_insn 44 43 46 5 arch/arm/mm/init.c:342 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_reserve") [flags 0x41] <function_decl 0x113f7700 memblock_reserve>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 46 44 47 5 arch/arm/mm/init.c:345 (set (reg:SI 1 r1 [orig:142 phys_initrd_size.365 ] [142])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn 47 46 48 5 arch/arm/mm/init.c:345 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:142 phys_initrd_size.365 ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 48 47 49 5 arch/arm/mm/init.c:345 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 71)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  8 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 49 48 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 54 49 51 6 NOTE_INSN_DELETED)

(insn 51 54 53 6 arch/arm/mm/init.c:346 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 4 r4 [156]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(call_insn 53 51 55 6 arch/arm/mm/init.c:346 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_is_region_memory") [flags 0x41] <function_decl 0x113f7c00 memblock_is_region_memory>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 55 53 56 6 arch/arm/mm/init.c:345 discrim 1 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 5 r5 [orig:141 D.25190 ] [141])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 56 55 57 6 arch/arm/mm/init.c:345 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 71)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]


;; Succ edge  7 [0.0%]  (fallthru)
;; Succ edge  8 [100.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  6 [0.0%]  (fallthru)
(note 57 56 61 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 61 57 62 7 arch/arm/mm/init.c:347 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11160a80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11160a80>)
        (nil)))

(insn 62 61 63 7 arch/arm/mm/init.c:347 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 4 r4 [156]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(insn 63 62 64 7 arch/arm/mm/init.c:347 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(call_insn 64 63 70 7 arch/arm/mm/init.c:347 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 70 64 67 7 arch/arm/mm/init.c:349 (set (mem/c/i:SI (reg/f:SI 4 r4 [156]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 5 r5 [orig:141 D.25190 ] [141])) 167 {*arm_movsi_insn} (nil))

(insn 67 70 71 7 arch/arm/mm/init.c:349 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 5 r5 [orig:141 D.25190 ] [141])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 7 [r7] 13 [sp]
;; live  out 	 7 [r7] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 5 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 71 67 72 8 91 "" [2 uses])

(note 72 71 73 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 73 72 74 8 arch/arm/mm/init.c:351 (set (reg/f:SI 4 r4 [165])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 74 73 75 8 arch/arm/mm/init.c:351 (set (reg:SI 1 r1 [orig:134 phys_initrd_size.892 ] [134])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [165])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn 75 74 76 8 arch/arm/mm/init.c:351 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:134 phys_initrd_size.892 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 76 75 77 8 arch/arm/mm/init.c:351 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 8 -> ( 9 11)
;; lr  out 	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  9 [29.0%]  (fallthru)
;; Succ edge  11 [71.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [29.0%]  (fallthru)
(note 77 76 82 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 82 77 79 9 NOTE_INSN_DELETED)

(insn 79 82 81 9 arch/arm/mm/init.c:352 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 4 r4 [165]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(call_insn 81 79 83 9 arch/arm/mm/init.c:352 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_is_region_reserved") [flags 0x41] <function_decl 0x113f7d00 memblock_is_region_reserved>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 83 81 84 9 arch/arm/mm/init.c:351 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 84 83 85 9 arch/arm/mm/init.c:351 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 4 [r4] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  10 [0.0%]  (fallthru)
;; Succ edge  11 [100.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%]  (fallthru)
(note 85 84 89 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 89 85 90 10 arch/arm/mm/init.c:353 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x1174ae00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x1174ae00>)
        (nil)))

(insn 90 89 91 10 arch/arm/mm/init.c:353 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 4 r4 [165]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(insn 91 90 92 10 arch/arm/mm/init.c:353 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [165])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(call_insn 92 91 94 10 arch/arm/mm/init.c:353 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 94 92 98 10 arch/arm/mm/init.c:355 (set (reg:SI 3 r3 [171])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 98 94 95 10 arch/arm/mm/init.c:355 (set (mem/c/i:SI (reg/f:SI 4 r4 [165]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 3 r3 [171])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 95 98 99 10 arch/arm/mm/init.c:355 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [165])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 3 r3 [171])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 7 [r7] 13 [sp]
;; live  out 	 7 [r7] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 8 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  8 [71.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
(code_label 99 95 100 11 92 "" [2 uses])

(note 100 99 101 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 101 100 102 11 arch/arm/mm/init.c:357 (set (reg/f:SI 4 r4 [174])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 102 101 103 11 arch/arm/mm/init.c:357 (set (reg:SI 1 r1 [orig:133 phys_initrd_size.896 ] [133])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [174])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn 103 102 104 11 arch/arm/mm/init.c:357 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:133 phys_initrd_size.896 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 104 103 105 11 arch/arm/mm/init.c:357 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  12 [29.0%]  (fallthru)
;; Succ edge  13 [71.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  11 [29.0%]  (fallthru)
(note 105 104 107 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 107 105 109 12 arch/arm/mm/init.c:358 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 4 r4 [174]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(call_insn 109 107 111 12 arch/arm/mm/init.c:358 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_reserve") [flags 0x41] <function_decl 0x113f7700 memblock_reserve>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 111 109 112 12 arch/arm/mm/init.c:361 (set (reg:SI 3 r3 [orig:177 phys_initrd_start ] [177])
        (mem/c/i:SI (reg/f:SI 4 r4 [174]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 4 r4 [174]) [0 phys_initrd_start+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
            (nil))))

(insn 112 111 117 12 arch/arm/mm/init.c:361 (set (reg:SI 3 r3 [orig:139 initrd_start.367 ] [139])
        (plus:SI (reg:SI 3 r3 [orig:177 phys_initrd_start ] [177])
            (const_int -1073741824 [0xffffffffc0000000]))) 4 {*arm_addsi3} (nil))

(insn 117 112 143 12 arch/arm/mm/init.c:362 (set (reg:SI 2 r2 [orig:181 phys_initrd_size ] [181])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [174])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn 143 117 114 12 arch/arm/mm/init.c:361 (set (reg/f:SI 1 r1 [178])
        (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x111e8b40 initrd_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x111e8b40 initrd_start>)
        (nil)))

(insn 114 143 118 12 arch/arm/mm/init.c:361 (set (mem/c/i:SI (reg/f:SI 1 r1 [178]) [0 initrd_start+0 S4 A32])
        (reg:SI 3 r3 [orig:139 initrd_start.367 ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 118 114 142 12 arch/arm/mm/init.c:362 (set (reg:SI 3 r3 [182])
        (plus:SI (reg:SI 3 r3 [orig:139 initrd_start.367 ] [139])
            (reg:SI 2 r2 [orig:181 phys_initrd_size ] [181]))) 4 {*arm_addsi3} (nil))

(insn 142 118 119 12 arch/arm/mm/init.c:362 (set (reg/f:SI 2 r2 [179])
        (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x111e8ba0 initrd_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x111e8ba0 initrd_end>)
        (nil)))

(insn 119 142 120 12 arch/arm/mm/init.c:362 (set (mem/c/i:SI (reg/f:SI 2 r2 [179]) [0 initrd_end+0 S4 A32])
        (reg:SI 3 r3 [182])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 7 [r7] 13 [sp]
;; live  out 	 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [71.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
(code_label 120 119 121 13 93 "" [1 uses])

(note 121 120 122 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(call_insn 122 121 123 13 arch/arm/mm/init.c:366 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_mm_memblock_reserve") [flags 0x41] <function_decl 0x115b7280 arm_mm_memblock_reserve>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 123 122 124 13 arch/arm/mm/init.c:370 (set (reg/f:SI 3 r3 [orig:138 D.25203 ] [138])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:144 mdesc ] [144])
                (const_int 36 [0x24])) [0 <variable>.reserve+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 124 123 125 13 arch/arm/mm/init.c:370 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:138 D.25203 ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 125 124 126 13 arch/arm/mm/init.c:370 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2165 [0x875])
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 3 [r3] 13 [sp]
;; live  out 	 3 [r3] 13 [sp]


;; Succ edge  14 [78.3%]  (fallthru)
;; Succ edge  15 [21.6%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  13 [78.3%]  (fallthru)
(note 126 125 127 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(call_insn 127 126 128 14 arch/arm/mm/init.c:371 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:138 D.25203 ] [138]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (nil)
    (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  13 [21.6%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 128 127 129 15 94 "" [1 uses])

(note 129 128 130 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(call_insn 130 129 131 15 arch/arm/mm/init.c:373 (parallel [
            (call (mem:SI (symbol_ref:SI ("memblock_analyze") [flags 0x41] <function_decl 0x113f7500 memblock_analyze>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(call_insn/j 131 130 132 15 arch/arm/mm/init.c:374 (parallel [
            (call (mem:SI (symbol_ref:SI ("memblock_dump_all") [flags 0x41] <function_decl 0x113f7d80 memblock_dump_all>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 132 131 145)

(note 145 132 0 NOTE_INSN_DELETED)


;; Function pfn_valid (pfn_valid)[0:1350]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 8(l0): point = 0
   Insn 7(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=2
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 13, 14, dead_or_set: 0
insn=8, live_throughout: 13, 14, dead_or_set: 0


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


pfn_valid

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 13[sp]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r3={2d} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 131{124d,7u,0e} in 2{1 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 4 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(insn 7 6 8 2 arch/arm/mm/init.c:301 (set (reg:SI 0 r0)
        (ashift:SI (reg:SI 0 r0 [ pfn ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(call_insn/j 8 7 9 2 arch/arm/mm/init.c:301 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_is_memory") [flags 0x41] <function_decl 0x113f7b80 memblock_is_memory>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 9 8 22)

(note 22 9 0 NOTE_INSN_DELETED)


;; Function show_mem (show_mem)[0:1346]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 163.
verify found no changes in insn with uid = 163.
deleting insn with uid = 13.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 27 count 54 (  2.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 27 count 56 (  2.7)

Pass 0 for finding allocno costs

    a41 (r180,l2) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r180,l1) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a42 (r173,l2) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r167,l1) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r166,l1) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r165,l1) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r163,l1) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r156,l1) best GENERAL_REGS, cover GENERAL_REGS
    a40 (r155,l2) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r155,l1) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a39 (r154,l2) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r154,l1) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r153,l2) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r153,l1) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r152,l2) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r152,l1) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r151,l2) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r151,l1) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r150,l2) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r150,l1) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r149,l2) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r149,l1) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r148,l2) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r148,l1) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r147,l2) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r147,l1) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r146,l2) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r146,l1) best GENERAL_REGS, cover GENERAL_REGS
    a50 (r145,l2) best GENERAL_REGS, cover GENERAL_REGS
    a49 (r143,l2) best GENERAL_REGS, cover GENERAL_REGS
    a46 (r142,l2) best GENERAL_REGS, cover GENERAL_REGS
    a48 (r141,l2) best GENERAL_REGS, cover GENERAL_REGS
    a43 (r139,l2) best GENERAL_REGS, cover GENERAL_REGS
    a45 (r138,l2) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r136,l2) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r136,l1) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r135,l1) best GENERAL_REGS, cover GENERAL_REGS
    a47 (r134,l2) best GENERAL_REGS, cover GENERAL_REGS
    a44 (r133,l2) best GENERAL_REGS, cover GENERAL_REGS

  a0(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a6(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a15(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a16(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a17(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a18(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a19(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r180,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a28(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a31(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r147,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a33(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a34(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r150,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r151,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a40(r155,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a41(r180,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a42(r173,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r133,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a45(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a48(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r143,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r145,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r180: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r167: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r165: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r160: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a3(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:70000
  a6(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r136,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r148,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r149,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a15(r150,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a16(r151,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a17(r152,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a18(r153,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a19(r154,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a20(r155,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r180,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a22(r146,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a23(r167,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a24(r147,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a25(r163,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a26(r165,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r156,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a28(r166,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r135,l1) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a30(r136,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a31(r146,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r147,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:110000
  a33(r148,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a34(r149,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r150,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r151,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a37(r152,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a38(r153,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a39(r154,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a40(r155,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a41(r180,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:0
  a42(r173,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a43(r139,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a44(r133,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a45(r138,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a46(r142,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a47(r134,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a48(r141,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a49(r143,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a50(r145,l2) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 138(l0): point = 0
   Insn 137(l0): point = 2
   Insn 136(l0): point = 4
   Insn 134(l0): point = 6
   Insn 132(l0): point = 8
   Insn 133(l0): point = 10
   Insn 130(l0): point = 12
   Insn 128(l0): point = 14
   Insn 129(l0): point = 16
   Insn 126(l0): point = 18
   Insn 124(l0): point = 20
   Insn 125(l0): point = 22
   Insn 122(l0): point = 24
   Insn 120(l0): point = 26
   Insn 121(l0): point = 28
   Insn 118(l0): point = 30
   Insn 116(l0): point = 32
   Insn 117(l0): point = 34
   Insn 151(l0): point = 37
   Insn 21(l0): point = 39
   Insn 20(l0): point = 41
   Insn 19(l0): point = 43
   Insn 14(l0): point = 45
   Insn 163(l0): point = 47
   Insn 18(l0): point = 49
   Insn 12(l0): point = 51
   Insn 17(l0): point = 53
   Insn 16(l0): point = 55
   Insn 15(l0): point = 57
   Insn 150(l0): point = 59
   Insn 10(l0): point = 61
   Insn 9(l0): point = 63
   Insn 8(l0): point = 65
   Insn 7(l0): point = 67
   Insn 2(l0): point = 69
   Insn 113(l1): point = 72
   Insn 112(l1): point = 74
   Insn 108(l1): point = 77
   Insn 107(l1): point = 79
   Insn 36(l1): point = 82
   Insn 31(l1): point = 84
   Insn 34(l1): point = 86
   Insn 29(l1): point = 88
   Insn 33(l1): point = 90
   Insn 28(l1): point = 92
   Insn 32(l1): point = 94
   Insn 27(l1): point = 96
   Insn 105(l2): point = 99
   Insn 104(l2): point = 101
   Insn 102(l2): point = 103
   Insn 99(l2): point = 106
   Insn 98(l2): point = 108
   Insn 97(l2): point = 110
   Insn 93(l2): point = 113
   Insn 161(l2): point = 116
   Insn 88(l2): point = 118
   Insn 86(l2): point = 121
   Insn 85(l2): point = 123
   Insn 83(l2): point = 125
   Insn 159(l2): point = 128
   Insn 78(l2): point = 130
   Insn 76(l2): point = 133
   Insn 75(l2): point = 135
   Insn 74(l2): point = 137
   Insn 70(l2): point = 140
   Insn 157(l2): point = 143
   Insn 65(l2): point = 145
   Insn 63(l2): point = 148
   Insn 62(l2): point = 150
   Insn 60(l2): point = 152
   Insn 155(l2): point = 155
   Insn 55(l2): point = 157
   Insn 53(l2): point = 160
   Insn 52(l2): point = 162
   Insn 50(l2): point = 164
   Insn 153(l2): point = 167
   Insn 45(l2): point = 169
   Insn 43(l2): point = 172
   Insn 42(l2): point = 174
   Insn 38(l2): point = 176
   Insn 40(l2): point = 178
 a0(r150): [11..49]
 a1(r149): [17..53]
 a2(r151): [23..43]
 a3(r153): [29..39]
 a4(r152): [35..41]
 a5(r136): [37..57]
 a6(r155): [37..45]
 a7(r160): [46..47]
 a8(r154): [37..51]
 a9(r180): [37..59]
 a10(r148): [37..55]
 a11(r157): [64..69]
 a12(r136): [72..98]
 a13(r148): [72..98]
 a14(r149): [72..98]
 a15(r150): [72..98]
 a16(r151): [72..98]
 a17(r152): [72..98]
 a18(r153): [72..98]
 a19(r154): [72..98]
 a20(r155): [72..98]
 a21(r180): [72..98]
 a22(r146): [82..82]
 a23(r167): [83..86]
 a24(r147): [82..84]
 a25(r163): [85..88]
 a26(r165): [87..90]
 a27(r156): [89..92]
 a28(r166): [91..94]
 a29(r135): [93..96]
 a30(r136): [99..180]
 a31(r146): [99..180]
 a32(r147): [99..180]
 a33(r148): [99..180]
 a34(r149): [99..180]
 a35(r150): [99..180]
 a36(r151): [99..180]
 a37(r152): [99..180]
 a38(r153): [99..180]
 a39(r154): [99..180]
 a40(r155): [99..180]
 a41(r180): [99..180]
 a42(r173): [107..108]
 a43(r139): [109..110]
 a44(r133): [116..118] [111..113]
 a45(r138): [124..125]
 a46(r142): [136..137]
 a47(r134): [143..145] [138..140]
 a48(r141): [151..152]
 a49(r143): [163..164]
 a50(r145): [175..178]
 Rebuilding regno allocno list for 173
 Rebuilding regno allocno list for 167
 Rebuilding regno allocno list for 166
 Rebuilding regno allocno list for 165
 Rebuilding regno allocno list for 163
 Rebuilding regno allocno list for 156
 Rebuilding regno allocno list for 147
 Rebuilding regno allocno list for 146
 Rebuilding regno allocno list for 145
 Rebuilding regno allocno list for 143
 Rebuilding regno allocno list for 142
 Rebuilding regno allocno list for 141
 Rebuilding regno allocno list for 139
 Rebuilding regno allocno list for 138
 Rebuilding regno allocno list for 135
 Rebuilding regno allocno list for 134
 Rebuilding regno allocno list for 133
Compressing live ranges: from 181 to 59 - 32%
Ranges after the compression:
 a0(r150): [20..58] [0..12]
 a1(r149): [20..58] [1..14]
 a2(r151): [20..58] [2..8]
 a3(r153): [20..58] [3..6]
 a4(r152): [20..58] [4..7]
 a5(r136): [20..58] [5..16]
 a6(r155): [20..58] [5..9]
 a7(r160): [10..11]
 a8(r154): [20..58] [5..13]
 a9(r180): [20..58] [5..17]
 a10(r148): [20..58] [5..15]
 a11(r157): [18..19]
 a22(r146): [35..58] [21..21]
 a23(r167): [22..25]
 a24(r147): [35..58] [21..23]
 a25(r163): [24..27]
 a26(r165): [26..29]
 a27(r156): [28..31]
 a28(r166): [30..33]
 a29(r135): [32..34]
 a42(r173): [36..37]
 a43(r139): [38..39]
 a44(r133): [42..43] [40..41]
 a45(r138): [44..45]
 a46(r142): [46..47]
 a47(r134): [50..51] [48..49]
 a48(r141): [52..53]
 a49(r143): [54..55]
 a50(r145): [56..57]
+++Allocating 232 bytes for conflict table (uncompressed size 408)
;; a0(r150,l0) conflicts: a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a7(r160,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a1(r149,l0) conflicts: a0(r150,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a7(r160,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r151,l0) conflicts: a0(r150,l0) a1(r149,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r153,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a4(r152,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a5(r136,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a7(r160,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a6(r155,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a7(r160,l0) conflicts: a0(r150,l0) a1(r149,l0) a5(r136,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r154,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a9(r180,l0) a10(r148,l0) a7(r160,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r180,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a10(r148,l0) a7(r160,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a10(r148,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a7(r160,l0) a22(r146,l0) a24(r147,l0) a23(r167,l0) a25(r163,l0) a26(r165,l0) a27(r156,l0) a28(r166,l0) a29(r135,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r157,l0) conflicts:
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a22(r146,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a24(r147,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a23(r167,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a24(r147,l0) a25(r163,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a24(r147,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a23(r167,l0) a42(r173,l0) a43(r139,l0) a44(r133,l0) a45(r138,l0) a46(r142,l0) a47(r134,l0) a48(r141,l0) a49(r143,l0) a50(r145,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r163,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a23(r167,l0) a26(r165,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r165,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a25(r163,l0) a27(r156,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r156,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a26(r165,l0) a28(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r166,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a27(r156,l0) a29(r135,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a29(r135,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a28(r166,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a42(r173,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a43(r139,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a44(r133,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a45(r138,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a46(r142,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a47(r134,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a48(r141,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a49(r143,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a50(r145,l0) conflicts: a0(r150,l0) a1(r149,l0) a2(r151,l0) a3(r153,l0) a4(r152,l0) a5(r136,l0) a6(r155,l0) a8(r154,l0) a9(r180,l0) a10(r148,l0) a22(r146,l0) a24(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:

  cp0:a42(r173)<->a43(r139)@125:shuffle
  cp1:a26(r165)<->a28(r166)@125:shuffle
  cp2:a25(r163)<->a27(r156)@125:shuffle
  cp3:a23(r167)<->a26(r165)@125:shuffle
  cp4:a24(r147)<->a25(r163)@125:shuffle
  cp5:a22(r146)<->a23(r167)@125:shuffle
  regions=3, blocks=21, points=59
    allocnos=51, copies=6, conflicts=0, ranges=43

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r150 1r149 2r151 3r153 4r152 5r136 6r155 7r160 8r154 9r180 10r148 11r157 22r146 23r167 24r147 25r163 26r165 27r156 28r166 29r135 42r173 43r139 44r133 45r138 46r142 47r134 48r141 49r143 50r145
    modified regnos: 133 134 135 136 138 139 141 142 143 145 146 147 148 149 150 151 152 153 154 155 156 157 160 163 165 166 167 173 180
    border:
    Pressure: GENERAL_REGS=13
    Reg 150 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 3 regs less
    Reg 151 of GENERAL_REGS has 3 regs less
    Reg 153 of GENERAL_REGS has 3 regs less
    Reg 157 of GENERAL_REGS has 2 regs less
      Pushing a50(r145,l0)
      Pushing a49(r143,l0)
      Pushing a48(r141,l0)
      Pushing a46(r142,l0)
      Pushing a45(r138,l0)
      Pushing a43(r139,l0)
      Pushing a42(r173,l0)
      Pushing a28(r166,l0)
      Pushing a26(r165,l0)
      Pushing a25(r163,l0)
      Pushing a23(r167,l0)
      Pushing a22(r146,l0)
      Pushing a7(r160,l0)
      Pushing a47(r134,l0)
      Pushing a8(r154,l0)
      Pushing a44(r133,l0)
      Pushing a29(r135,l0)
      Pushing a27(r156,l0)
      Pushing a6(r155,l0)
      Pushing a10(r148,l0)
      Pushing a9(r180,l0)
      Pushing a4(r152,l0)
      Pushing a5(r136,l0)
      Pushing a24(r147,l0)
      Pushing a11(r157,l0)
      Pushing a3(r153,l0)
      Pushing a2(r151,l0)
      Pushing a1(r149,l0)
      Pushing a0(r150,l0)
      Popping a0(r150,l0)  -- assign reg 4
      Popping a1(r149,l0)  -- assign reg 5
      Popping a2(r151,l0)  -- assign reg 6
      Popping a3(r153,l0)  -- assign reg 7
      Popping a11(r157,l0)  -- assign reg 4
      Popping a24(r147,l0)  -- assign reg 3
      Popping a5(r136,l0)  -- assign reg 2
      Popping a4(r152,l0)  -- assign reg 1
      Popping a9(r180,l0)  -- assign reg 0
      Popping a10(r148,l0)  -- assign reg 12
      Popping a6(r155,l0)  -- assign reg 14
      Popping a27(r156,l0)  -- assign reg 3
      Popping a29(r135,l0)  -- assign reg 3
      Popping a44(r133,l0)  -- assign reg 8
      Popping a8(r154,l0)  -- assign reg 10
      Popping a47(r134,l0)  -- assign reg 8
      Popping a7(r160,l0)  -- assign reg 3
      Popping a22(r146,l0)  -- assign reg 9
      Popping a23(r167,l0)  -- assign reg 9
      Popping a25(r163,l0)  -- assign reg 3
      Popping a26(r165,l0)  -- assign reg 9
      Popping a28(r166,l0)  -- assign reg 9
      Popping a42(r173,l0)  -- assign reg 8
      Popping a43(r139,l0)  -- assign reg 8
      Popping a45(r138,l0)  -- assign reg 8
      Popping a46(r142,l0)  -- assign reg 8
      Popping a48(r141,l0)  -- assign reg 8
      Popping a49(r143,l0)  -- assign reg 8
      Popping a50(r145,l0)  -- assign reg 8
Disposition:
   44:r133 l0     8   47:r134 l0     8   29:r135 l0     3    5:r136 l0     2
   45:r138 l0     8   43:r139 l0     8   48:r141 l0     8   46:r142 l0     8
   49:r143 l0     8   50:r145 l0     8   22:r146 l0     9   24:r147 l0     3
   10:r148 l0    12    1:r149 l0     5    0:r150 l0     4    2:r151 l0     6
    4:r152 l0     1    3:r153 l0     7    8:r154 l0    10    6:r155 l0    14
   27:r156 l0     3   11:r157 l0     4    7:r160 l0     3   25:r163 l0     3
   26:r165 l0     9   28:r166 l0     9   23:r167 l0     9   42:r173 l0     8
    9:r180 l0     0
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 13, dead_or_set: 0, 157
insn=7, live_throughout: 13, 157, dead_or_set: 0
insn=8, live_throughout: 13, 157, dead_or_set: 0, 14
insn=9, live_throughout: 13, dead_or_set: 0, 157
insn=10, live_throughout: 13, dead_or_set: 0, 14
insn=150, live_throughout: 13, dead_or_set: 180
insn=15, live_throughout: 13, 180, dead_or_set: 136
insn=16, live_throughout: 13, 136, 180, dead_or_set: 148
insn=17, live_throughout: 13, 136, 148, 180, dead_or_set: 149
insn=12, live_throughout: 13, 136, 148, 149, dead_or_set: 154, 180
insn=18, live_throughout: 13, 136, 148, 149, 154, 180, dead_or_set: 150
insn=163, live_throughout: 13, 136, 148, 149, 150, 154, 180, dead_or_set: 160
insn=14, live_throughout: 13, 136, 148, 149, 150, 154, 180, dead_or_set: 155, 160
insn=19, live_throughout: 13, 136, 148, 149, 150, 154, 155, 180, dead_or_set: 151
insn=20, live_throughout: 13, 136, 148, 149, 150, 151, 154, 155, 180, dead_or_set: 152
insn=21, live_throughout: 13, 136, 148, 149, 150, 151, 152, 154, 155, 180, dead_or_set: 153
insn=151, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=111, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=27, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 135
insn=32, live_throughout: 13, 135, 136, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 166
insn=28, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 166, 180, dead_or_set: 135, 156
insn=33, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 156, 180, dead_or_set: 165, 166
insn=29, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 165, 180, dead_or_set: 156, 163
insn=34, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 163, 180, dead_or_set: 165, 167
insn=31, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 167, 180, dead_or_set: 147, 163
insn=36, live_throughout: 13, 136, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 146, 167
insn=103, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=40, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 145
insn=38, live_throughout: 13, 136, 145, 146, 147, 148, 149, 150, 151, 153, 154, 155, 180, dead_or_set: 152
insn=42, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 145
insn=43, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=45, live_throughout: 13, 136, 146, 147, 148, 149, 150, 152, 153, 154, 155, 180, dead_or_set: 151
insn=153, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=48, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=50, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 143
insn=52, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 143
insn=53, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=55, live_throughout: 13, 136, 146, 147, 148, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 149
insn=155, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=58, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=60, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 141
insn=62, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 141
insn=63, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=65, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 134
insn=157, live_throughout: 13, 134, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=68, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=70, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 134
insn=71, live_throughout: 13, 134, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=74, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 134, 142
insn=75, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 142
insn=76, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=78, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 154, 155, 180, dead_or_set: 153
insn=159, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=81, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=83, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 138
insn=85, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 138
insn=86, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=88, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 133
insn=161, live_throughout: 13, 133, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=91, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=93, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 133
insn=94, live_throughout: 13, 133, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=97, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 133, 139
insn=98, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 139, 173
insn=99, live_throughout: 13, 136, 146, 147, 148, 149, 151, 152, 153, 154, 155, 180, dead_or_set: 150, 173
insn=100, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=102, live_throughout: 13, 136, 146, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 147
insn=104, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=105, live_throughout: 13, 136, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=107, live_throughout: 13, 136, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 148
insn=108, live_throughout: 13, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 136
insn=109, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=112, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=113, live_throughout: 13, 136, 148, 149, 150, 151, 152, 153, 154, 155, 180, dead_or_set: 
insn=117, live_throughout: 13, 149, 150, 151, 153, dead_or_set: 1, 152
insn=116, live_throughout: 1, 13, 149, 150, 151, 153, dead_or_set: 0
insn=118, live_throughout: 13, 149, 150, 151, 153, dead_or_set: 0, 1, 14
insn=121, live_throughout: 13, 149, 150, 151, dead_or_set: 1, 153
insn=120, live_throughout: 1, 13, 149, 150, 151, dead_or_set: 0
insn=122, live_throughout: 13, 149, 150, 151, dead_or_set: 0, 1, 14
insn=125, live_throughout: 13, 149, 150, dead_or_set: 1, 151
insn=124, live_throughout: 1, 13, 149, 150, dead_or_set: 0
insn=126, live_throughout: 13, 149, 150, dead_or_set: 0, 1, 14
insn=129, live_throughout: 13, 150, dead_or_set: 1, 149
insn=128, live_throughout: 1, 13, 150, dead_or_set: 0
insn=130, live_throughout: 13, 150, dead_or_set: 0, 1, 14
insn=133, live_throughout: 13, dead_or_set: 1, 150
insn=132, live_throughout: 1, 13, dead_or_set: 0
insn=134, live_throughout: 13, dead_or_set: 0, 1, 14
insn=136, live_throughout: 13, 14, dead_or_set: 0
insn=137, live_throughout: 0, 13, 14, dead_or_set: 1
insn=138, live_throughout: 13, 14, dead_or_set: 0, 1
init_insns for 160: (insn_list:REG_DEP_TRUE 163 (nil))
changing reg in insn 93
changing reg in insn 88
changing reg in insn 97
changing reg in insn 70
changing reg in insn 65
changing reg in insn 74
changing reg in insn 27
changing reg in insn 32
changing reg in insn 28
changing reg in insn 108
changing reg in insn 15
changing reg in insn 21
changing reg in insn 20
changing reg in insn 19
changing reg in insn 18
changing reg in insn 17
changing reg in insn 16
changing reg in insn 27
changing reg in insn 108
changing reg in insn 27
changing reg in insn 83
changing reg in insn 85
changing reg in insn 97
changing reg in insn 98
changing reg in insn 60
changing reg in insn 62
changing reg in insn 74
changing reg in insn 75
changing reg in insn 50
changing reg in insn 52
changing reg in insn 40
changing reg in insn 42
changing reg in insn 36
changing reg in insn 104
changing reg in insn 31
changing reg in insn 102
changing reg in insn 83
changing reg in insn 60
changing reg in insn 50
changing reg in insn 40
changing reg in insn 104
changing reg in insn 102
changing reg in insn 93
changing reg in insn 88
changing reg in insn 70
changing reg in insn 65
changing reg in insn 16
changing reg in insn 107
changing reg in insn 112
changing reg in insn 107
changing reg in insn 17
changing reg in insn 55
changing reg in insn 129
changing reg in insn 55
changing reg in insn 18
changing reg in insn 99
changing reg in insn 133
changing reg in insn 99
changing reg in insn 19
changing reg in insn 45
changing reg in insn 125
changing reg in insn 45
changing reg in insn 20
changing reg in insn 38
changing reg in insn 117
changing reg in insn 38
changing reg in insn 21
changing reg in insn 78
changing reg in insn 121
changing reg in insn 78
changing reg in insn 12
changing reg in insn 112
changing reg in insn 14
changing reg in insn 36
changing reg in insn 31
changing reg in insn 28
changing reg in insn 33
changing reg in insn 29
changing reg in insn 2
changing reg in insn 9
changing reg in insn 163
changing reg in insn 14
changing reg in insn 29
changing reg in insn 31
changing reg in insn 33
changing reg in insn 34
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 36
changing reg in insn 98
changing reg in insn 99
changing reg in insn 150
changing reg in insn 12
changing reg in insn 12
changing reg in insn 27
deleting insn with uid = 117.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 8.
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 118.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 126.
verify found no changes in insn with uid = 130.
verify found no changes in insn with uid = 134.
verify found no changes in insn with uid = 138.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 27 count 54 (  2.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 27 count 56 (  2.7)


show_mem

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={19d,11u} r1={16d,7u} r2={11d,8u,1d} r3={15d,16u} r4={3d,3u} r5={2d,2u} r6={2d,2u} r7={2d,2u} r8={11d,9u} r9={4d,4u} r10={1d,1u} r12={11d,2u} r13={1d,28u} r14={9d,3u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={15d,7u} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} 
;;    total ref usage 1108{1002d,105u,1e} in 80{72 regular + 8 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 3 2 2 NOTE_INSN_DELETED)

(insn 2 11 7 2 arch/arm/mm/init.c:92 (set (reg/v:SI 4 r4 [orig:157 filter ] [157])
        (reg:SI 0 r0 [ filter ])) 167 {*arm_movsi_insn} (nil))

(insn 7 2 8 2 arch/arm/mm/init.c:97 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x11768f30>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x11768f30>)
        (nil)))

(call_insn 8 7 9 2 arch/arm/mm/init.c:97 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 9 8 10 2 arch/arm/mm/init.c:98 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:157 filter ] [157])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 9 150 2 arch/arm/mm/init.c:98 (parallel [
            (call (mem:SI (symbol_ref:SI ("show_free_areas") [flags 0x41] <function_decl 0x111b4600 show_free_areas>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 150 10 15 2 arch/arm/mm/init.c:100 discrim 1 (set (reg/f:SI 0 r0 [180])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 15 150 16 2 arch/arm/mm/init.c:108 (set (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 16 15 17 2 arch/arm/mm/init.c:100 (set (reg/v:SI 12 ip [orig:148 i ] [148])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 17 16 12 2 arch/arm/mm/init.c:94 (set (reg/v:SI 5 r5 [orig:149 slab ] [149])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 12 17 18 2 arch/arm/mm/init.c:100 discrim 1 (set (reg:SI 10 sl [orig:154 D.25004 ] [154])
        (mem/s/j/c:SI (pre_inc:SI (reg/f:SI 0 r0 [180])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 0 r0 [180])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
            (nil))))

(insn 18 12 163 2 arch/arm/mm/init.c:94 (set (reg/v:SI 4 r4 [orig:150 shared ] [150])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 163 18 14 2 arch/arm/mm/init.c:108 (set (reg/f:SI 3 r3 [160])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(insn 14 163 19 2 arch/arm/mm/init.c:108 (set (reg/f:SI 14 lr [orig:155 mem_map.344 ] [155])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [160]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 19 14 20 2 arch/arm/mm/init.c:93 (set (reg/v:SI 6 r6 [orig:151 reserved ] [151])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 20 19 21 2 arch/arm/mm/init.c:93 (set (reg/v:SI 1 r1 [orig:152 total ] [152])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 21 20 151 2 arch/arm/mm/init.c:93 (set (reg/v:SI 7 r7 [orig:153 free ] [153])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 151 21 152 2 arch/arm/mm/init.c:100 (set (pc)
        (label_ref 109)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 19)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  19 [100.0%] 

(barrier 152 151 111)

;; Start of basic block ( 19) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 9 [r9]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 9 [r9]
;; live  kill	

;; Pred edge  19 [91.0%] 
(code_label 111 152 24 3 111 "" [1 uses])

(note 24 111 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 30 24 35 3 NOTE_INSN_DELETED)

(note 35 30 27 3 NOTE_INSN_DELETED)

(insn 27 35 32 3 arch/arm/mm/init.c:91 (set (reg/f:SI 3 r3 [orig:135 D.26570 ] [135])
        (plus:SI (reg/f:SI 0 r0 [180])
            (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))))
        (nil)))

(insn 32 27 28 3 arch/arm/mm/init.c:109 (set (reg:SI 9 r9 [orig:166 <variable>.size ] [166])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 D.26570 ] [135])
                (const_int 8 [0x8])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 28 32 33 3 arch/arm/mm/init.c:105 (set (reg:SI 3 r3 [orig:156 D.24980 ] [156])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 D.26570 ] [135])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 33 28 29 3 arch/arm/mm/init.c:109 (set (reg:SI 9 r9 [165])
        (plus:SI (reg:SI 3 r3 [orig:156 D.24980 ] [156])
            (reg:SI 9 r9 [orig:166 <variable>.size ] [166]))) 4 {*arm_addsi3} (nil))

(insn 29 33 34 3 arch/arm/mm/init.c:108 (set (reg:SI 3 r3 [163])
        (lshiftrt:SI (reg:SI 3 r3 [orig:156 D.24980 ] [156])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 34 29 31 3 arch/arm/mm/init.c:109 (set (reg:SI 9 r9 [167])
        (lshiftrt:SI (reg:SI 9 r9 [165])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 31 34 36 3 arch/arm/mm/init.c:108 (set (reg/v/f:SI 3 r3 [orig:147 page ] [147])
        (plus:SI (mult:SI (reg:SI 3 r3 [163])
                (const_int 32 [0x20]))
            (reg/f:SI 14 lr [orig:155 mem_map.344 ] [155]))) 270 {*arith_shiftsi} (nil))

(insn 36 31 103 3 arch/arm/mm/init.c:109 (set (reg/v/f:SI 9 r9 [orig:146 end ] [146])
        (plus:SI (mult:SI (reg:SI 9 r9 [167])
                (const_int 32 [0x20]))
            (reg/f:SI 14 lr [orig:155 mem_map.344 ] [155]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 17) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  17 [86.0%]  (dfs_back)
(code_label 103 36 37 4 110 "" [1 uses])

(note 37 103 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 41 37 40 4 NOTE_INSN_DELETED)

(insn 40 41 38 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:145 D.25946 ] [145])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 38 40 42 4 arch/arm/mm/init.c:112 (set (reg/v:SI 1 r1 [orig:152 total ] [152])
        (plus:SI (reg/v:SI 1 r1 [orig:152 total ] [152])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 42 38 43 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:145 D.25946 ] [145])
                (const_int 1 [0x1])
                (const_int 10 [0xa]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 43 42 44 4 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 44 43 45 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 153 5 arch/arm/mm/init.c:114 (set (reg/v:SI 6 r6 [orig:151 reserved ] [151])
        (plus:SI (reg/v:SI 6 r6 [orig:151 reserved ] [151])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 153 45 154 5 (set (pc)
        (label_ref 100)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 17)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  17 [100.0%] 

(barrier 154 153 48)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%] 
(code_label 48 154 49 6 102 "" [1 uses])

(note 49 48 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 51 49 50 6 NOTE_INSN_DELETED)

(insn 50 51 52 6 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:143 D.25959 ] [143])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 52 50 53 6 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:143 D.25959 ] [143])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 53 52 54 6 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 58)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 54 53 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 55 54 155 7 arch/arm/mm/init.c:118 (set (reg/v:SI 5 r5 [orig:149 slab ] [149])
        (plus:SI (reg/v:SI 5 r5 [orig:149 slab ] [149])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 155 55 156 7 (set (pc)
        (label_ref 100)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 17)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  17 [100.0%] 

(barrier 156 155 58)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%] 
(code_label 58 156 59 8 104 "" [1 uses])

(note 59 58 61 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 61 59 60 8 NOTE_INSN_DELETED)

(insn 60 61 62 8 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:141 D.25974 ] [141])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 62 60 63 8 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:141 D.25974 ] [141])
                (const_int 1 [0x1])
                (const_int 15 [0xf]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 63 62 64 8 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 8 -> ( 10 9)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  10 [0.0%] 
;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 8 [r8]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
(note 64 63 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 65 64 157 9 include/linux/mm.h:356 (set (reg/v/f:SI 8 r8 [orig:134 page.962 ] [134])
        (reg/v/f:SI 3 r3 [orig:147 page ] [147])) 167 {*arm_movsi_insn} (nil))

(jump_insn 157 65 158 9 (set (pc)
        (label_ref 71)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%] 

(barrier 158 157 68)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 8 [r8]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8]
;; live  kill	

;; Pred edge  8 [0.0%] 
(code_label 68 158 69 10 105 "" [1 uses])

(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 71 10 include/linux/mm.h:355 (set (reg/v/f:SI 8 r8 [orig:134 page.962 ] [134])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147])
                (const_int 28 [0x1c])) [0 <variable>.D.8040.first_page+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 71 70 72 11 106 "" [1 uses])

(note 72 71 74 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 74 72 75 11 include/linux/mm.h:376 (set (reg:SI 8 r8 [orig:142 D.25970 ] [142])
        (mem/v:SI (plus:SI (reg/v/f:SI 8 r8 [orig:134 page.962 ] [134])
                (const_int 16 [0x10])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 75 74 76 11 arch/arm/mm/init.c:119 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:142 D.25970 ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 76 75 77 11 arch/arm/mm/init.c:119 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 81)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  12 [50.0%]  (fallthru)
;; Succ edge  13 [50.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 7 [r7]
;; live  kill	

;; Pred edge  11 [50.0%]  (fallthru)
(note 77 76 78 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 78 77 159 12 arch/arm/mm/init.c:120 (set (reg/v:SI 7 r7 [orig:153 free ] [153])
        (plus:SI (reg/v:SI 7 r7 [orig:153 free ] [153])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 159 78 160 12 (set (pc)
        (label_ref 100)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 17)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  17 [100.0%] 

(barrier 160 159 81)

;; Start of basic block ( 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  11 [50.0%] 
(code_label 81 160 82 13 107 "" [1 uses])

(note 82 81 84 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 84 82 83 13 NOTE_INSN_DELETED)

(insn 83 84 85 13 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:138 D.25991 ] [138])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 85 83 86 13 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:138 D.25991 ] [138])
                (const_int 1 [0x1])
                (const_int 15 [0xf]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 86 85 87 13 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  15 [0.0%] 
;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 8 [r8]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8]
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
(note 87 86 88 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 88 87 161 14 include/linux/mm.h:356 (set (reg/v/f:SI 8 r8 [orig:133 page.963 ] [133])
        (reg/v/f:SI 3 r3 [orig:147 page ] [147])) 167 {*arm_movsi_insn} (nil))

(jump_insn 161 88 162 14 (set (pc)
        (label_ref 94)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  16 [100.0%] 

(barrier 162 161 91)

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 8 [r8]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 8 [r8]
;; live  kill	

;; Pred edge  13 [0.0%] 
(code_label 91 162 92 15 108 "" [1 uses])

(note 92 91 93 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 93 92 94 15 include/linux/mm.h:355 (set (reg/v/f:SI 8 r8 [orig:133 page.963 ] [133])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147])
                (const_int 28 [0x1c])) [0 <variable>.D.8040.first_page+0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 15 -> ( 16)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 4 [r4] 8 [r8]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 8 [r8]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 94 93 95 16 109 "" [1 uses])

(note 95 94 97 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 97 95 98 16 include/linux/mm.h:376 (set (reg:SI 8 r8 [orig:139 D.25987 ] [139])
        (mem/v:SI (plus:SI (reg/v/f:SI 8 r8 [orig:133 page.963 ] [133])
                (const_int 16 [0x10])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 98 97 99 16 arch/arm/mm/init.c:122 (set (reg:SI 8 r8 [173])
        (plus:SI (reg:SI 8 r8 [orig:139 D.25987 ] [139])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 99 98 100 16 arch/arm/mm/init.c:122 (set (reg/v:SI 4 r4 [orig:150 shared ] [150])
        (plus:SI (reg/v:SI 4 r4 [orig:150 shared ] [150])
            (reg:SI 8 r8 [173]))) 4 {*arm_addsi3} (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 7 16 5 12) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%] 
;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  12 [100.0%] 
(code_label 100 99 101 17 103 "" [3 uses])

(note 101 100 102 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 102 101 104 17 arch/arm/mm/init.c:123 (set (reg/v/f:SI 3 r3 [orig:147 page ] [147])
        (plus:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 104 102 105 17 arch/arm/mm/init.c:124 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:147 page ] [147])
            (reg/v/f:SI 9 r9 [orig:146 end ] [146]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 105 104 106 17 arch/arm/mm/init.c:124 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
        (nil)))
;; End of basic block 17 -> ( 4 18)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [86.0%]  (dfs_back)
;; Succ edge  18 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 12 [ip]
;; live  kill	

;; Pred edge  17 [14.0%]  (fallthru,loop_exit)
(note 106 105 107 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 107 106 108 18 arch/arm/mm/init.c:100 (set (reg/v:SI 12 ip [orig:148 i ] [148])
        (plus:SI (reg/v:SI 12 ip [orig:148 i ] [148])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 108 107 109 18 arch/arm/mm/init.c:100 (set (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])
        (plus:SI (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))
;; End of basic block 18 -> ( 19)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  19 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 18 2) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 10 [sl] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 109 108 110 19 101 "" [1 uses])

(note 110 109 112 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 112 110 113 19 arch/arm/mm/init.c:100 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:148 i ] [148])
            (reg:SI 10 sl [orig:154 D.25004 ] [154]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 113 112 114 19 arch/arm/mm/init.c:100 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 111)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
        (nil)))
;; End of basic block 19 -> ( 3 20)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  20 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  19 [9.0%]  (fallthru,loop_exit)
(note 114 113 116 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 116 114 118 20 arch/arm/mm/init.c:127 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x11769900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x11769900>)
        (nil)))

(call_insn 118 116 121 20 arch/arm/mm/init.c:127 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 121 118 120 20 arch/arm/mm/init.c:128 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:153 free ] [153])) 167 {*arm_movsi_insn} (nil))

(insn 120 121 122 20 arch/arm/mm/init.c:128 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11769b70>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11769b70>)
        (nil)))

(call_insn 122 120 125 20 arch/arm/mm/init.c:128 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 125 122 124 20 arch/arm/mm/init.c:129 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:151 reserved ] [151])) 167 {*arm_movsi_insn} (nil))

(insn 124 125 126 20 arch/arm/mm/init.c:129 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x11769ed0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x11769ed0>)
        (nil)))

(call_insn 126 124 129 20 arch/arm/mm/init.c:129 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 129 126 128 20 arch/arm/mm/init.c:130 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:149 slab ] [149])) 167 {*arm_movsi_insn} (nil))

(insn 128 129 130 20 arch/arm/mm/init.c:130 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x11765930>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x11765930>)
        (nil)))

(call_insn 130 128 133 20 arch/arm/mm/init.c:130 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 133 130 132 20 arch/arm/mm/init.c:131 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:150 shared ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 132 133 134 20 arch/arm/mm/init.c:131 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x1176c0c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x1176c0c0>)
        (nil)))

(call_insn 134 132 136 20 arch/arm/mm/init.c:131 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 136 134 137 20 arch/arm/mm/init.c:132 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x1176c1b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x1176c1b0>)
        (nil)))

(insn 137 136 138 20 arch/arm/mm/init.c:132 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 138 137 139 20 arch/arm/mm/init.c:132 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 20 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 139 138 164)

(note 164 139 0 NOTE_INSN_DELETED)

