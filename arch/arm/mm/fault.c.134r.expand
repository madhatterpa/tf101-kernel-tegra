
;; Function do_bad (do_bad)[0:1296]


;; Generating RTL for gimple basic block 2

;; return 1;

(insn 8 7 9 arch/arm/mm/fault.c:489 (set (reg:SI 133 [ <result> ])
        (const_int 1 [0x1])) -1 (nil))

(jump_insn 9 8 10 arch/arm/mm/fault.c:489 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 10 9 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 arch/arm/mm/fault.c:487 (set (reg/v:SI 134 [ addr ])
        (reg:SI 0 r0 [ addr ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:487 (set (reg/v:SI 135 [ fsr ])
        (reg:SI 1 r1 [ fsr ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:487 (set (reg/v/f:SI 136 [ regs ])
        (reg:SI 2 r2 [ regs ])) -1 (nil))

(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 7 5 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 arch/arm/mm/fault.c:489 (set (reg:SI 133 [ <result> ])
        (const_int 1 [0x1])) -1 (nil))

(jump_insn 9 8 10 3 arch/arm/mm/fault.c:489 (set (pc)
        (label_ref 11)) -1 (nil))
;; End of basic block 3 -> ( 5)

;; Succ edge  5 [100.0%] 

(barrier 10 9 19)

;; Start of basic block () -> 4
(note 19 10 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 19 14 4 arch/arm/mm/fault.c:489 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 14 13 15 4 arch/arm/mm/fault.c:489 (clobber (reg:SI 133 [ <result> ])) -1 (nil))

(jump_insn 15 14 16 4 arch/arm/mm/fault.c:489 (set (pc)
        (label_ref 17)) -1 (nil))
;; End of basic block 4 -> ( 6)

;; Succ edge  6 [100.0%] 

(barrier 16 15 11)

;; Start of basic block ( 3) -> 5
;; Pred edge  3 [100.0%] 
(code_label 11 16 20 5 1 "" [1 uses])

(note 20 11 12 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 12 20 17 5 arch/arm/mm/fault.c:489 (set (reg/i:SI 0 r0)
        (reg:SI 133 [ <result> ])) -1 (nil))
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 17 12 21 6 2 "" [1 uses])

(note 21 17 18 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 18 21 0 6 arch/arm/mm/fault.c:489 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function __do_user_fault (__do_user_fault)[0:1289]

Partition 0: size 128 align 4
	si, offset 0

;; Generating RTL for gimple basic block 2

;; tsk->thread.address = addr;

(insn 11 10 0 arch/arm/mm/fault.c:185 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ tsk ])
                (const_int 784 [0x310])) [0 <variable>.thread.address+0 S4 A64])
        (reg/v:SI 135 [ addr ])) -1 (nil))

;; tsk->thread.error_code = fsr;

(insn 12 11 0 arch/arm/mm/fault.c:186 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ tsk ])
                (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])
        (reg/v:SI 136 [ fsr ])) -1 (nil))

;; tsk->thread.trap_no = 14;

(insn 13 12 14 arch/arm/mm/fault.c:187 (set (reg:SI 140)
        (const_int 14 [0xe])) -1 (nil))

(insn 14 13 0 arch/arm/mm/fault.c:187 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ tsk ])
                (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])
        (reg:SI 140)) -1 (nil))

;; sig.322 = (int) sig;

(insn 15 14 0 arch/arm/mm/fault.c:188 (set (reg:SI 133 [ sig.322 ])
        (reg/v:SI 137 [ sig ])) -1 (nil))

;; si.si_signo = sig.322;

(insn 16 15 0 arch/arm/mm/fault.c:188 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -128 [0xffffffffffffff80])) [0 si.si_signo+0 S4 A64])
        (reg:SI 133 [ sig.322 ])) -1 (nil))

;; si.si_errno = 0;

(insn 17 16 18 arch/arm/mm/fault.c:189 (set (reg:SI 141)
        (const_int 0 [0x0])) -1 (nil))

(insn 18 17 0 arch/arm/mm/fault.c:189 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -124 [0xffffffffffffff84])) [0 si.si_errno+0 S4 A32])
        (reg:SI 141)) -1 (nil))

;; si.si_code = code;

(insn 19 18 0 arch/arm/mm/fault.c:190 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -120 [0xffffffffffffff88])) [0 si.si_code+0 S4 A64])
        (reg/v:SI 138 [ code ])) -1 (nil))

;; si._sifields._sigfault._addr = (void *) (void *) addr;

(insn 20 19 0 arch/arm/mm/fault.c:191 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -116 [0xffffffffffffff8c])) [0 si._sifields._sigfault._addr+0 S4 A32])
        (reg/v:SI 135 [ addr ])) -1 (nil))

;; force_sig_info (sig.322, &si, tsk);

(insn 21 20 22 arch/arm/mm/fault.c:192 (set (reg:SI 142)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -128 [0xffffffffffffff80]))) -1 (nil))

(insn 22 21 23 arch/arm/mm/fault.c:192 (set (reg:SI 0 r0)
        (reg:SI 133 [ sig.322 ])) -1 (nil))

(insn 23 22 24 arch/arm/mm/fault.c:192 (set (reg:SI 1 r1)
        (reg:SI 142)) -1 (nil))

(insn 24 23 25 arch/arm/mm/fault.c:192 (set (reg:SI 2 r2)
        (reg/v/f:SI 134 [ tsk ])) -1 (nil))

(call_insn 25 24 0 arch/arm/mm/fault.c:192 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x11156f80 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))


;;
;; Full RTL generated for this function:
;;
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 9 3 2 arch/arm/mm/fault.c:173 (set (reg/v/f:SI 134 [ tsk ])
        (reg:SI 0 r0 [ tsk ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:173 (set (reg/v:SI 135 [ addr ])
        (reg:SI 1 r1 [ addr ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:173 (set (reg/v:SI 136 [ fsr ])
        (reg:SI 2 r2 [ fsr ])) -1 (nil))

(insn 5 4 6 2 arch/arm/mm/fault.c:173 (set (reg/v:SI 137 [ sig ])
        (reg:SI 3 r3 [ sig ])) -1 (nil))

(insn 6 5 7 2 arch/arm/mm/fault.c:173 (set (reg/v:SI 138 [ code ])
        (mem/c/i:SI (reg/f:SI 128 virtual-incoming-args) [0 code+0 S4 A32])) -1 (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 128 virtual-incoming-args) [0 code+0 S4 A32])
        (nil)))

(insn 7 6 8 2 arch/arm/mm/fault.c:173 (set (reg/v/f:SI 139 [ regs ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 128 virtual-incoming-args)
                (const_int 4 [0x4])) [0 regs+0 S4 A32])) -1 (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 128 virtual-incoming-args)
                (const_int 4 [0x4])) [0 regs+0 S4 A32])
        (nil)))

(note 8 7 10 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 10 8 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 3 arch/arm/mm/fault.c:185 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ tsk ])
                (const_int 784 [0x310])) [0 <variable>.thread.address+0 S4 A64])
        (reg/v:SI 135 [ addr ])) -1 (nil))

(insn 12 11 13 3 arch/arm/mm/fault.c:186 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ tsk ])
                (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])
        (reg/v:SI 136 [ fsr ])) -1 (nil))

(insn 13 12 14 3 arch/arm/mm/fault.c:187 (set (reg:SI 140)
        (const_int 14 [0xe])) -1 (nil))

(insn 14 13 15 3 arch/arm/mm/fault.c:187 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ tsk ])
                (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])
        (reg:SI 140)) -1 (nil))

(insn 15 14 16 3 arch/arm/mm/fault.c:188 (set (reg:SI 133 [ sig.322 ])
        (reg/v:SI 137 [ sig ])) -1 (nil))

(insn 16 15 17 3 arch/arm/mm/fault.c:188 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -128 [0xffffffffffffff80])) [0 si.si_signo+0 S4 A64])
        (reg:SI 133 [ sig.322 ])) -1 (nil))

(insn 17 16 18 3 arch/arm/mm/fault.c:189 (set (reg:SI 141)
        (const_int 0 [0x0])) -1 (nil))

(insn 18 17 19 3 arch/arm/mm/fault.c:189 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -124 [0xffffffffffffff84])) [0 si.si_errno+0 S4 A32])
        (reg:SI 141)) -1 (nil))

(insn 19 18 20 3 arch/arm/mm/fault.c:190 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -120 [0xffffffffffffff88])) [0 si.si_code+0 S4 A64])
        (reg/v:SI 138 [ code ])) -1 (nil))

(insn 20 19 21 3 arch/arm/mm/fault.c:191 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -116 [0xffffffffffffff8c])) [0 si._sifields._sigfault._addr+0 S4 A32])
        (reg/v:SI 135 [ addr ])) -1 (nil))

(insn 21 20 22 3 arch/arm/mm/fault.c:192 (set (reg:SI 142)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -128 [0xffffffffffffff80]))) -1 (nil))

(insn 22 21 23 3 arch/arm/mm/fault.c:192 (set (reg:SI 0 r0)
        (reg:SI 133 [ sig.322 ])) -1 (nil))

(insn 23 22 24 3 arch/arm/mm/fault.c:192 (set (reg:SI 1 r1)
        (reg:SI 142)) -1 (nil))

(insn 24 23 25 3 arch/arm/mm/fault.c:192 (set (reg:SI 2 r2)
        (reg/v/f:SI 134 [ tsk ])) -1 (nil))

(call_insn 25 24 30 3 arch/arm/mm/fault.c:192 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x11156f80 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 3 -> ( 4)

;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [100.0%]  (fallthru)
(note 30 25 27 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 27 30 28 4 arch/arm/mm/fault.c:193 (set (pc)
        (label_ref 29)) -1 (nil))
;; End of basic block 4 -> ( 6)

;; Succ edge  6 [100.0%] 

(barrier 28 27 26)

;; Start of basic block () -> 5
(code_label 26 28 31 5 3 "" [0 uses])

(note 31 26 29 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 29 31 32 6 4 "" [1 uses])

(note 32 29 0 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function show_pte (show_pte)[0:1287]


;; Generating RTL for gimple basic block 2

;; if (mm == 0B)

(insn 7 6 8 arch/arm/mm/fault.c:74 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 137 [ mm ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 8 7 0 arch/arm/mm/fault.c:74 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))

;; Generating RTL for gimple basic block 3

;; mm = &init_mm;

(insn 10 9 0 arch/arm/mm/fault.c:75 (set (reg/v/f:SI 137 [ mm ])
        (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x111538a0 init_mm>)) -1 (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 11 10 12 6 "" [0 uses])

(note 12 11 0 NOTE_INSN_BASIC_BLOCK)

;; printk (&"<1>pgd = %p\n"[0], mm->pgd);

(insn 13 12 14 arch/arm/mm/fault.c:77 (set (reg:SI 139)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114bfdb0>)) -1 (nil))

(insn 14 13 15 arch/arm/mm/fault.c:77 (set (reg:SI 0 r0)
        (reg:SI 139)) -1 (nil))

(insn 15 14 16 arch/arm/mm/fault.c:77 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 137 [ mm ])
                (const_int 36 [0x24])) [0 <variable>.pgd+0 S4 A32])) -1 (nil))

(call_insn 16 15 0 arch/arm/mm/fault.c:77 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; pgd = mm->pgd + (addr >> 21) * 8;

(insn 17 16 18 arch/arm/mm/fault.c:78 (set (reg:SI 140)
        (lshiftrt:SI (reg/v:SI 138 [ addr ])
            (const_int 21 [0x15]))) -1 (nil))

(insn 18 17 19 arch/arm/mm/fault.c:78 (set (reg:SI 141)
        (ashift:SI (reg:SI 140)
            (const_int 3 [0x3]))) -1 (nil))

(insn 19 18 20 arch/arm/mm/fault.c:78 (set (reg:SI 142)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 137 [ mm ])
                (const_int 36 [0x24])) [0 <variable>.pgd+0 S4 A32])) -1 (nil))

(insn 20 19 0 arch/arm/mm/fault.c:78 (set (reg/v/f:SI 135 [ pgd ])
        (plus:SI (reg:SI 142)
            (reg:SI 141))) -1 (nil))

;; printk (&"<1>[%08lx] *pgd=%08llx"[0], addr, (long long int) (*pgd)[0]);

(insn 21 20 22 arch/arm/mm/fault.c:79 (set (reg:SI 143)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x114b7420>)) -1 (nil))

(insn 22 21 23 arch/arm/mm/fault.c:79 (set (reg:SI 145)
        (mem/s/j:SI (reg/v/f:SI 135 [ pgd ]) [0 S4 A32])) -1 (nil))

(insn 23 22 24 arch/arm/mm/fault.c:79 (set (reg:DI 144)
        (zero_extend:DI (reg:SI 145))) -1 (nil))

(insn 24 23 25 arch/arm/mm/fault.c:79 (set (reg:SI 0 r0)
        (reg:SI 143)) -1 (nil))

(insn 25 24 26 arch/arm/mm/fault.c:79 (set (reg:SI 1 r1)
        (reg/v:SI 138 [ addr ])) -1 (nil))

(insn 26 25 27 arch/arm/mm/fault.c:79 (set (reg:DI 2 r2)
        (reg:DI 144)) -1 (nil))

(call_insn 27 26 0 arch/arm/mm/fault.c:79 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

;; D.24402 = *(pmd_t *) pgd;

(insn 28 27 0 arch/arm/mm/fault.c:111 (set (reg:SI 136 [ D.24402 ])
        (mem:SI (reg/v/f:SI 135 [ pgd ]) [0 S4 A32])) -1 (nil))

;; if (D.24402 == 0)

(insn 29 28 30 arch/arm/mm/fault.c:111 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 136 [ D.24402 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 30 29 0 arch/arm/mm/fault.c:111 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))

;; Generating RTL for gimple basic block 5

;; if (D.24402 & 2 != 0)

(insn 32 31 33 arch/arm/mm/fault.c:114 (set (reg:SI 146)
        (and:SI (reg:SI 136 [ D.24402 ])
            (const_int 2 [0x2]))) -1 (nil))

(insn 33 32 34 arch/arm/mm/fault.c:114 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 146)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 34 33 0 arch/arm/mm/fault.c:114 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 6

;; printk (&"(bad)"[0]);

(insn 36 35 37 arch/arm/mm/fault.c:115 (set (reg:SI 147)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x114e0740>)) -1 (nil))

(insn 37 36 38 arch/arm/mm/fault.c:115 (set (reg:SI 0 r0)
        (reg:SI 147)) -1 (nil))

(call_insn 38 37 0 arch/arm/mm/fault.c:115 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

;; Generating RTL for gimple basic block 7

;; 

(code_label 41 40 42 8 "" [0 uses])

(note 42 41 0 NOTE_INSN_BASIC_BLOCK)

;; D.24788 = &contig_page_data.node_zones[0] + ((mem_map + (D.24402 >> 12) * 32)->flags >> 30) * 768;

(insn 43 42 44 include/linux/mm.h:692 (set (reg:SI 148)
        (lshiftrt:SI (reg:SI 136 [ D.24402 ])
            (const_int 12 [0xc]))) -1 (nil))

(insn 44 43 45 include/linux/mm.h:692 (set (reg/f:SI 150)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) -1 (nil))

(insn 45 44 46 include/linux/mm.h:692 (set (reg/f:SI 149)
        (mem/f/c/i:SI (reg/f:SI 150) [0 mem_map+0 S4 A32])) -1 (nil))

(insn 46 45 47 include/linux/mm.h:692 (set (reg:SI 152)
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 148)
                    (const_int 32 [0x20]))
                (reg/f:SI 149)) [0 <variable>.flags+0 S4 A32])) -1 (nil))

(insn 47 46 48 include/linux/mm.h:692 (set (reg:SI 151)
        (lshiftrt:SI (reg:SI 152)
            (const_int 30 [0x1e]))) -1 (nil))

(insn 48 47 49 include/linux/mm.h:692 (set (reg:SI 154)
        (const_int 768 [0x300])) -1 (nil))

(insn 49 48 50 include/linux/mm.h:692 (set (reg:SI 153)
        (mult:SI (reg:SI 154)
            (reg:SI 151))) -1 (nil))

(insn 50 49 51 include/linux/mm.h:692 (set (reg:SI 155)
        (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)) -1 (nil))

(insn 51 50 0 include/linux/mm.h:692 (set (reg/f:SI 133 [ D.24788 ])
        (plus:SI (reg:SI 153)
            (reg:SI 155))) -1 (nil))

;; if ((int) D.24788 - (int) &D.24788->zone_pgdat->node_zones == 768)

(insn 52 51 53 include/linux/mmzone.h:741 (set (reg:SI 157)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 133 [ D.24788 ])
                (const_int 748 [0x2ec])) [0 <variable>.zone_pgdat+0 S4 A32])) -1 (nil))

(insn 53 52 54 include/linux/mmzone.h:741 (set (reg:SI 156)
        (minus:SI (reg/f:SI 133 [ D.24788 ])
            (reg:SI 157))) -1 (nil))

(insn 54 53 55 include/linux/mmzone.h:741 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 156)
            (const_int 768 [0x300]))) -1 (nil))

(jump_insn 55 54 0 include/linux/mmzone.h:741 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))

;; Generating RTL for gimple basic block 8

;; 

(code_label 56 55 57 7 "" [0 uses])

(note 57 56 0 NOTE_INSN_BASIC_BLOCK)

;; printk (&"\n"[0]); [tail call]

(insn 58 57 59 8 arch/arm/mm/fault.c:130 (set (reg:SI 158)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114e09e0>)) -1 (nil))

(insn 59 58 60 8 arch/arm/mm/fault.c:130 (set (reg:SI 0 r0)
        (reg:SI 158)) -1 (nil))

(call_insn/j 60 59 61 8 arch/arm/mm/fault.c:130 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(barrier 61 60 0)

;; Generating RTL for gimple basic block 9

;; 

(code_label 62 61 63 9 "" [0 uses])

(note 63 62 0 NOTE_INSN_BASIC_BLOCK)

;; pte = (pte_t *) ((D.24402 & 4294963200) + 3221225472) + (addr >> 12 & 511) * 4;

(insn 64 63 65 arch/arm/mm/fault.c:123 (set (reg:SI 160)
        (and:SI (reg:SI 136 [ D.24402 ])
            (const_int -4081 [0xfffffffffffff00f]))) -1 (nil))

(insn 65 64 66 arch/arm/mm/fault.c:123 (set (reg:SI 159)
        (and:SI (reg:SI 160)
            (const_int -16 [0xfffffffffffffff0]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 136 [ D.24402 ])
            (const_int -4096 [0xfffffffffffff000]))
        (nil)))

(insn 66 65 67 arch/arm/mm/fault.c:123 (set (reg:SI 161)
        (plus:SI (reg:SI 159)
            (const_int -1073741824 [0xffffffffc0000000]))) -1 (nil))

(insn 67 66 68 arch/arm/mm/fault.c:123 (set (reg:SI 162)
        (lshiftrt:SI (reg/v:SI 138 [ addr ])
            (const_int 12 [0xc]))) -1 (nil))

(insn 68 67 69 arch/arm/mm/fault.c:123 (set (reg:SI 164)
        (ashift:SI (reg:SI 162)
            (const_int 23 [0x17]))) -1 (nil))

(insn 69 68 70 arch/arm/mm/fault.c:123 (set (reg:SI 163)
        (lshiftrt:SI (reg:SI 164)
            (const_int 23 [0x17]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 162)
            (const_int 511 [0x1ff]))
        (nil)))

(insn 70 69 71 arch/arm/mm/fault.c:123 (set (reg:SI 165)
        (ashift:SI (reg:SI 163)
            (const_int 2 [0x2]))) -1 (nil))

(insn 71 70 0 arch/arm/mm/fault.c:123 (set (reg/v/f:SI 134 [ pte ])
        (plus:SI (reg:SI 161)
            (reg:SI 165))) -1 (nil))

;; printk (&", *pte=%08llx"[0], (long long int) *pte);

(insn 72 71 73 arch/arm/mm/fault.c:124 (set (reg:SI 166)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114e1ab0>)) -1 (nil))

(insn 73 72 74 arch/arm/mm/fault.c:124 (set (reg:SI 168)
        (mem:SI (reg/v/f:SI 134 [ pte ]) [0 S4 A32])) -1 (nil))

(insn 74 73 75 arch/arm/mm/fault.c:124 (set (reg:DI 167)
        (zero_extend:DI (reg:SI 168))) -1 (nil))

(insn 75 74 76 arch/arm/mm/fault.c:124 (set (reg:SI 0 r0)
        (reg:SI 166)) -1 (nil))

(insn 76 75 77 arch/arm/mm/fault.c:124 (set (reg:DI 2 r2)
        (reg:DI 167)) -1 (nil))

(call_insn 77 76 0 arch/arm/mm/fault.c:124 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; printk (&", *ppte=%08llx"[0], (long long int) *(pte + 2048));

(insn 78 77 79 arch/arm/mm/fault.c:125 (set (reg:SI 169)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114e1c60>)) -1 (nil))

(insn 79 78 80 arch/arm/mm/fault.c:125 (set (reg:SI 171)
        (mem:SI (plus:SI (reg/v/f:SI 134 [ pte ])
                (const_int 2048 [0x800])) [0 S4 A32])) -1 (nil))

(insn 80 79 81 arch/arm/mm/fault.c:125 (set (reg:DI 170)
        (zero_extend:DI (reg:SI 171))) -1 (nil))

(insn 81 80 82 arch/arm/mm/fault.c:125 (set (reg:SI 0 r0)
        (reg:SI 169)) -1 (nil))

(insn 82 81 83 arch/arm/mm/fault.c:125 (set (reg:DI 2 r2)
        (reg:DI 170)) -1 (nil))

(call_insn 83 82 0 arch/arm/mm/fault.c:125 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))


;;
;; Full RTL generated for this function:
;;
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 5 3 2 arch/arm/mm/fault.c:71 (set (reg/v/f:SI 137 [ mm ])
        (reg:SI 0 r0 [ mm ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:71 (set (reg/v:SI 138 [ addr ])
        (reg:SI 1 r1 [ addr ])) -1 (nil))

(note 4 3 6 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 6 4 7 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 7 6 8 3 arch/arm/mm/fault.c:74 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 137 [ mm ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 8 7 9 3 arch/arm/mm/fault.c:74 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 11)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 8500 [0x2134])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [15.0%]  (fallthru)
;; Succ edge  5 [85.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [15.0%]  (fallthru)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 11 4 arch/arm/mm/fault.c:75 (set (reg/v/f:SI 137 [ mm ])
        (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x111538a0 init_mm>)) -1 (nil))
;; End of basic block 4 -> ( 5)

;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; Pred edge  3 [85.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 11 10 12 5 6 "" [1 uses])

(note 12 11 13 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 5 arch/arm/mm/fault.c:77 (set (reg:SI 139)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114bfdb0>)) -1 (nil))

(insn 14 13 15 5 arch/arm/mm/fault.c:77 (set (reg:SI 0 r0)
        (reg:SI 139)) -1 (nil))

(insn 15 14 16 5 arch/arm/mm/fault.c:77 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 137 [ mm ])
                (const_int 36 [0x24])) [0 <variable>.pgd+0 S4 A32])) -1 (nil))

(call_insn 16 15 17 5 arch/arm/mm/fault.c:77 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 17 16 18 5 arch/arm/mm/fault.c:78 (set (reg:SI 140)
        (lshiftrt:SI (reg/v:SI 138 [ addr ])
            (const_int 21 [0x15]))) -1 (nil))

(insn 18 17 19 5 arch/arm/mm/fault.c:78 (set (reg:SI 141)
        (ashift:SI (reg:SI 140)
            (const_int 3 [0x3]))) -1 (nil))

(insn 19 18 20 5 arch/arm/mm/fault.c:78 (set (reg:SI 142)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 137 [ mm ])
                (const_int 36 [0x24])) [0 <variable>.pgd+0 S4 A32])) -1 (nil))

(insn 20 19 21 5 arch/arm/mm/fault.c:78 (set (reg/v/f:SI 135 [ pgd ])
        (plus:SI (reg:SI 142)
            (reg:SI 141))) -1 (nil))

(insn 21 20 22 5 arch/arm/mm/fault.c:79 (set (reg:SI 143)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x114b7420>)) -1 (nil))

(insn 22 21 23 5 arch/arm/mm/fault.c:79 (set (reg:SI 145)
        (mem/s/j:SI (reg/v/f:SI 135 [ pgd ]) [0 S4 A32])) -1 (nil))

(insn 23 22 24 5 arch/arm/mm/fault.c:79 (set (reg:DI 144)
        (zero_extend:DI (reg:SI 145))) -1 (nil))

(insn 24 23 25 5 arch/arm/mm/fault.c:79 (set (reg:SI 0 r0)
        (reg:SI 143)) -1 (nil))

(insn 25 24 26 5 arch/arm/mm/fault.c:79 (set (reg:SI 1 r1)
        (reg/v:SI 138 [ addr ])) -1 (nil))

(insn 26 25 27 5 arch/arm/mm/fault.c:79 (set (reg:DI 2 r2)
        (reg:DI 144)) -1 (nil))

(call_insn 27 26 28 5 arch/arm/mm/fault.c:79 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 28 27 29 5 arch/arm/mm/fault.c:111 (set (reg:SI 136 [ D.24402 ])
        (mem:SI (reg/v/f:SI 135 [ pgd ]) [0 S4 A32])) -1 (nil))

(insn 29 28 30 5 arch/arm/mm/fault.c:111 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 136 [ D.24402 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 30 29 31 5 arch/arm/mm/fault.c:111 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 56)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 5 -> ( 9 6)

;; Succ edge  9 [39.0%] 
;; Succ edge  6 [61.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [61.0%]  (fallthru)
(note 31 30 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 31 33 6 arch/arm/mm/fault.c:114 (set (reg:SI 146)
        (and:SI (reg:SI 136 [ D.24402 ])
            (const_int 2 [0x2]))) -1 (nil))

(insn 33 32 34 6 arch/arm/mm/fault.c:114 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 146)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 34 33 35 6 arch/arm/mm/fault.c:114 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 6 -> ( 7 8)

;; Succ edge  7 [0.0%]  (fallthru)
;; Succ edge  8 [100.0%] 

;; Start of basic block ( 6) -> 7
;; Pred edge  6 [0.0%]  (fallthru)
(note 35 34 36 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 36 35 37 7 arch/arm/mm/fault.c:115 (set (reg:SI 147)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x114e0740>)) -1 (nil))

(insn 37 36 38 7 arch/arm/mm/fault.c:115 (set (reg:SI 0 r0)
        (reg:SI 147)) -1 (nil))

(call_insn 38 37 39 7 arch/arm/mm/fault.c:115 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 39 38 40 7 arch/arm/mm/fault.c:116 (set (pc)
        (label_ref 56)) -1 (nil))
;; End of basic block 7 -> ( 9)

;; Succ edge  9 [100.0%] 

(barrier 40 39 41)

;; Start of basic block ( 6) -> 8
;; Pred edge  6 [100.0%] 
(code_label 41 40 42 8 8 "" [1 uses])

(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 8 include/linux/mm.h:692 (set (reg:SI 148)
        (lshiftrt:SI (reg:SI 136 [ D.24402 ])
            (const_int 12 [0xc]))) -1 (nil))

(insn 44 43 45 8 include/linux/mm.h:692 (set (reg/f:SI 150)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) -1 (nil))

(insn 45 44 46 8 include/linux/mm.h:692 (set (reg/f:SI 149)
        (mem/f/c/i:SI (reg/f:SI 150) [0 mem_map+0 S4 A32])) -1 (nil))

(insn 46 45 47 8 include/linux/mm.h:692 (set (reg:SI 152)
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 148)
                    (const_int 32 [0x20]))
                (reg/f:SI 149)) [0 <variable>.flags+0 S4 A32])) -1 (nil))

(insn 47 46 48 8 include/linux/mm.h:692 (set (reg:SI 151)
        (lshiftrt:SI (reg:SI 152)
            (const_int 30 [0x1e]))) -1 (nil))

(insn 48 47 49 8 include/linux/mm.h:692 (set (reg:SI 154)
        (const_int 768 [0x300])) -1 (nil))

(insn 49 48 50 8 include/linux/mm.h:692 (set (reg:SI 153)
        (mult:SI (reg:SI 154)
            (reg:SI 151))) -1 (nil))

(insn 50 49 51 8 include/linux/mm.h:692 (set (reg:SI 155)
        (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)) -1 (nil))

(insn 51 50 52 8 include/linux/mm.h:692 (set (reg/f:SI 133 [ D.24788 ])
        (plus:SI (reg:SI 153)
            (reg:SI 155))) -1 (nil))

(insn 52 51 53 8 include/linux/mmzone.h:741 (set (reg:SI 157)
        (mem/s/f/j:SI (plus:SI (reg/f:SI 133 [ D.24788 ])
                (const_int 748 [0x2ec])) [0 <variable>.zone_pgdat+0 S4 A32])) -1 (nil))

(insn 53 52 54 8 include/linux/mmzone.h:741 (set (reg:SI 156)
        (minus:SI (reg/f:SI 133 [ D.24788 ])
            (reg:SI 157))) -1 (nil))

(insn 54 53 55 8 include/linux/mmzone.h:741 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 156)
            (const_int 768 [0x300]))) -1 (nil))

(jump_insn 55 54 56 8 include/linux/mmzone.h:741 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 62)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 8 -> ( 9 10)

;; Succ edge  9 [28.0%]  (fallthru)
;; Succ edge  10 [72.0%] 

;; Start of basic block ( 10 8 5 7) -> 9
;; Pred edge  10 [100.0%] 
;; Pred edge  8 [28.0%]  (fallthru)
;; Pred edge  5 [39.0%] 
;; Pred edge  7 [100.0%] 
(code_label 56 55 57 9 7 "" [3 uses])

(note 57 56 58 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 9 arch/arm/mm/fault.c:130 (set (reg:SI 158)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114e09e0>)) -1 (nil))

(insn 59 58 60 9 arch/arm/mm/fault.c:130 (set (reg:SI 0 r0)
        (reg:SI 158)) -1 (nil))

(call_insn/j 60 59 61 9 arch/arm/mm/fault.c:130 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 9 -> ( 1)

;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 61 60 62)

;; Start of basic block ( 8) -> 10
;; Pred edge  8 [72.0%] 
(code_label 62 61 63 10 9 "" [1 uses])

(note 63 62 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 64 63 65 10 arch/arm/mm/fault.c:123 (set (reg:SI 160)
        (and:SI (reg:SI 136 [ D.24402 ])
            (const_int -4081 [0xfffffffffffff00f]))) -1 (nil))

(insn 65 64 66 10 arch/arm/mm/fault.c:123 (set (reg:SI 159)
        (and:SI (reg:SI 160)
            (const_int -16 [0xfffffffffffffff0]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 136 [ D.24402 ])
            (const_int -4096 [0xfffffffffffff000]))
        (nil)))

(insn 66 65 67 10 arch/arm/mm/fault.c:123 (set (reg:SI 161)
        (plus:SI (reg:SI 159)
            (const_int -1073741824 [0xffffffffc0000000]))) -1 (nil))

(insn 67 66 68 10 arch/arm/mm/fault.c:123 (set (reg:SI 162)
        (lshiftrt:SI (reg/v:SI 138 [ addr ])
            (const_int 12 [0xc]))) -1 (nil))

(insn 68 67 69 10 arch/arm/mm/fault.c:123 (set (reg:SI 164)
        (ashift:SI (reg:SI 162)
            (const_int 23 [0x17]))) -1 (nil))

(insn 69 68 70 10 arch/arm/mm/fault.c:123 (set (reg:SI 163)
        (lshiftrt:SI (reg:SI 164)
            (const_int 23 [0x17]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 162)
            (const_int 511 [0x1ff]))
        (nil)))

(insn 70 69 71 10 arch/arm/mm/fault.c:123 (set (reg:SI 165)
        (ashift:SI (reg:SI 163)
            (const_int 2 [0x2]))) -1 (nil))

(insn 71 70 72 10 arch/arm/mm/fault.c:123 (set (reg/v/f:SI 134 [ pte ])
        (plus:SI (reg:SI 161)
            (reg:SI 165))) -1 (nil))

(insn 72 71 73 10 arch/arm/mm/fault.c:124 (set (reg:SI 166)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114e1ab0>)) -1 (nil))

(insn 73 72 74 10 arch/arm/mm/fault.c:124 (set (reg:SI 168)
        (mem:SI (reg/v/f:SI 134 [ pte ]) [0 S4 A32])) -1 (nil))

(insn 74 73 75 10 arch/arm/mm/fault.c:124 (set (reg:DI 167)
        (zero_extend:DI (reg:SI 168))) -1 (nil))

(insn 75 74 76 10 arch/arm/mm/fault.c:124 (set (reg:SI 0 r0)
        (reg:SI 166)) -1 (nil))

(insn 76 75 77 10 arch/arm/mm/fault.c:124 (set (reg:DI 2 r2)
        (reg:DI 167)) -1 (nil))

(call_insn 77 76 78 10 arch/arm/mm/fault.c:124 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 78 77 79 10 arch/arm/mm/fault.c:125 (set (reg:SI 169)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114e1c60>)) -1 (nil))

(insn 79 78 80 10 arch/arm/mm/fault.c:125 (set (reg:SI 171)
        (mem:SI (plus:SI (reg/v/f:SI 134 [ pte ])
                (const_int 2048 [0x800])) [0 S4 A32])) -1 (nil))

(insn 80 79 81 10 arch/arm/mm/fault.c:125 (set (reg:DI 170)
        (zero_extend:DI (reg:SI 171))) -1 (nil))

(insn 81 80 82 10 arch/arm/mm/fault.c:125 (set (reg:SI 0 r0)
        (reg:SI 169)) -1 (nil))

(insn 82 81 83 10 arch/arm/mm/fault.c:125 (set (reg:DI 2 r2)
        (reg:DI 170)) -1 (nil))

(call_insn 83 82 84 10 arch/arm/mm/fault.c:125 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 84 83 85 10 arch/arm/mm/fault.c:125 (set (pc)
        (label_ref 56)) -1 (nil))
;; End of basic block 10 -> ( 9)

;; Succ edge  9 [100.0%] 

(barrier 85 84 90)

;; Start of basic block () -> 11
(note 90 85 87 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(jump_insn 87 90 88 11 arch/arm/mm/fault.c:131 (set (pc)
        (label_ref 89)) -1 (nil))
;; End of basic block 11 -> ( 13)

;; Succ edge  13 [100.0%] 

(barrier 88 87 86)

;; Start of basic block () -> 12
(code_label 86 88 91 12 5 "" [0 uses])

(note 91 86 89 12 [bb 12] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 12 -> ( 13)

;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 12) -> 13
;; Pred edge  11 [100.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
(code_label 89 91 92 13 10 "" [1 uses])

(note 92 89 0 13 [bb 13] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 13 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function __do_kernel_fault (__do_kernel_fault)[0:1288]


;; Generating RTL for gimple basic block 2

;; D.24430 = fixup_exception (regs);

(insn 9 8 10 arch/arm/mm/fault.c:147 (set (reg:SI 0 r0)
        (reg/v/f:SI 138 [ regs ])) -1 (nil))

(call_insn 10 9 11 arch/arm/mm/fault.c:147 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fixup_exception") [flags 0x41] <function_decl 0x11013a80 fixup_exception>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 0 arch/arm/mm/fault.c:147 (set (reg:SI 134 [ D.24430 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.24430 != 0)

(insn 12 11 13 arch/arm/mm/fault.c:147 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.24430 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 13 12 0 arch/arm/mm/fault.c:147 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 3

;; bust_spinlocks (1);

(insn 15 14 16 arch/arm/mm/fault.c:153 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) -1 (nil))

(call_insn 16 15 0 arch/arm/mm/fault.c:153 (parallel [
            (call (mem:SI (symbol_ref:SI ("bust_spinlocks") [flags 0x41] <function_decl 0x10a82a00 bust_spinlocks>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

;; if (addr <= 4095)

(insn 17 16 18 arch/arm/mm/fault.c:154 (set (reg:SI 139)
        (const_int 4095 [0xfff])) -1 (nil))

(insn 18 17 19 arch/arm/mm/fault.c:154 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 136 [ addr ])
            (reg:SI 139))) -1 (nil))

(jump_insn 19 18 0 arch/arm/mm/fault.c:154 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 4

;; iftmp.320 = &"paging request"[0];

(insn 21 20 0 arch/arm/mm/fault.c:154 discrim 2 (set (reg/f:SI 133 [ iftmp.320 ])
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114ed540>)) -1 (nil))

;; Generating RTL for gimple basic block 5

;; 

(code_label 24 23 25 16 "" [0 uses])

(note 25 24 0 NOTE_INSN_BASIC_BLOCK)

;; iftmp.320 = &"NULL pointer dereference"[0];

(insn 26 25 0 arch/arm/mm/fault.c:154 discrim 1 (set (reg/f:SI 133 [ iftmp.320 ])
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x114c3f80>)) -1 (nil))

;; Generating RTL for gimple basic block 6

;; 

(code_label 27 26 28 17 "" [0 uses])

(note 28 27 0 NOTE_INSN_BASIC_BLOCK)

;; printk (&"<1>Unable to handle kernel %s at virtual address %08lx\n"[0], iftmp.320, addr);

(insn 29 28 30 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 140)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x10b2ecc0>)) -1 (nil))

(insn 30 29 31 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 0 r0)
        (reg:SI 140)) -1 (nil))

(insn 31 30 32 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 1 r1)
        (reg/f:SI 133 [ iftmp.320 ])) -1 (nil))

(insn 32 31 33 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 2 r2)
        (reg/v:SI 136 [ addr ])) -1 (nil))

(call_insn 33 32 0 arch/arm/mm/fault.c:154 discrim 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

;; show_pte (mm, addr);

(insn 34 33 35 arch/arm/mm/fault.c:159 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ mm ])) -1 (nil))

(insn 35 34 36 arch/arm/mm/fault.c:159 (set (reg:SI 1 r1)
        (reg/v:SI 136 [ addr ])) -1 (nil))

(call_insn 36 35 0 arch/arm/mm/fault.c:159 (parallel [
            (call (mem:SI (symbol_ref:SI ("show_pte") [flags 0x3] <function_decl 0x512d9600 show_pte>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; die (&"Oops"[0], regs, (int) fsr);

(insn 37 36 38 arch/arm/mm/fault.c:160 (set (reg:SI 141)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x114ebb40>)) -1 (nil))

(insn 38 37 39 arch/arm/mm/fault.c:160 (set (reg:SI 0 r0)
        (reg:SI 141)) -1 (nil))

(insn 39 38 40 arch/arm/mm/fault.c:160 (set (reg:SI 1 r1)
        (reg/v/f:SI 138 [ regs ])) -1 (nil))

(insn 40 39 41 arch/arm/mm/fault.c:160 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ fsr ])) -1 (nil))

(call_insn 41 40 0 arch/arm/mm/fault.c:160 (parallel [
            (call (mem:SI (symbol_ref:SI ("die") [flags 0x41] <function_decl 0x512d9300 die>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

;; bust_spinlocks (0);

(insn 42 41 43 arch/arm/mm/fault.c:161 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 43 42 0 arch/arm/mm/fault.c:161 (parallel [
            (call (mem:SI (symbol_ref:SI ("bust_spinlocks") [flags 0x41] <function_decl 0x10a82a00 bust_spinlocks>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

;; do_exit (9);

(insn 44 43 45 arch/arm/mm/fault.c:162 (set (reg:SI 0 r0)
        (const_int 9 [0x9])) -1 (nil))

(call_insn 45 44 46 arch/arm/mm/fault.c:162 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_exit") [flags 0x41] <function_decl 0x10a67900 do_exit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(barrier 46 45 0)

;; Generating RTL for gimple basic block 7

;; 

(code_label 47 46 48 15 "" [0 uses])

(note 48 47 0 NOTE_INSN_BASIC_BLOCK)


;;
;; Full RTL generated for this function:
;;
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 7 3 2 arch/arm/mm/fault.c:143 (set (reg/v/f:SI 135 [ mm ])
        (reg:SI 0 r0 [ mm ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:143 (set (reg/v:SI 136 [ addr ])
        (reg:SI 1 r1 [ addr ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:143 (set (reg/v:SI 137 [ fsr ])
        (reg:SI 2 r2 [ fsr ])) -1 (nil))

(insn 5 4 6 2 arch/arm/mm/fault.c:143 (set (reg/v/f:SI 138 [ regs ])
        (reg:SI 3 r3 [ regs ])) -1 (nil))

(note 6 5 8 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 8 6 9 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 9 8 10 3 arch/arm/mm/fault.c:147 (set (reg:SI 0 r0)
        (reg/v/f:SI 138 [ regs ])) -1 (nil))

(call_insn 10 9 11 3 arch/arm/mm/fault.c:147 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fixup_exception") [flags 0x41] <function_decl 0x11013a80 fixup_exception>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 11 10 12 3 arch/arm/mm/fault.c:147 (set (reg:SI 134 [ D.24430 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 12 11 13 3 arch/arm/mm/fault.c:147 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.24430 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 13 12 14 3 arch/arm/mm/fault.c:147 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 8 4)

;; Succ edge  8 [100.0%] 
;; Succ edge  4 [0.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [0.0%]  (fallthru)
(note 14 13 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 14 16 4 arch/arm/mm/fault.c:153 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) -1 (nil))

(call_insn 16 15 17 4 arch/arm/mm/fault.c:153 (parallel [
            (call (mem:SI (symbol_ref:SI ("bust_spinlocks") [flags 0x41] <function_decl 0x10a82a00 bust_spinlocks>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 17 16 18 4 arch/arm/mm/fault.c:154 (set (reg:SI 139)
        (const_int 4095 [0xfff])) -1 (nil))

(insn 18 17 19 4 arch/arm/mm/fault.c:154 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 136 [ addr ])
            (reg:SI 139))) -1 (nil))

(jump_insn 19 18 20 4 arch/arm/mm/fault.c:154 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 6 5)

;; Succ edge  6 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; Pred edge  4 [50.0%]  (fallthru)
(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 5 arch/arm/mm/fault.c:154 discrim 2 (set (reg/f:SI 133 [ iftmp.320 ])
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114ed540>)) -1 (nil))

(jump_insn 22 21 23 5 arch/arm/mm/fault.c:154 discrim 2 (set (pc)
        (label_ref 27)) -1 (nil))
;; End of basic block 5 -> ( 7)

;; Succ edge  7 [100.0%] 

(barrier 23 22 24)

;; Start of basic block ( 4) -> 6
;; Pred edge  4 [50.0%] 
(code_label 24 23 25 6 16 "" [1 uses])

(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 6 arch/arm/mm/fault.c:154 discrim 1 (set (reg/f:SI 133 [ iftmp.320 ])
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x114c3f80>)) -1 (nil))
;; End of basic block 6 -> ( 7)

;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 5) -> 7
;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 27 26 28 7 17 "" [1 uses])

(note 28 27 29 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 29 28 30 7 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 140)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x10b2ecc0>)) -1 (nil))

(insn 30 29 31 7 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 0 r0)
        (reg:SI 140)) -1 (nil))

(insn 31 30 32 7 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 1 r1)
        (reg/f:SI 133 [ iftmp.320 ])) -1 (nil))

(insn 32 31 33 7 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 2 r2)
        (reg/v:SI 136 [ addr ])) -1 (nil))

(call_insn 33 32 34 7 arch/arm/mm/fault.c:154 discrim 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 34 33 35 7 arch/arm/mm/fault.c:159 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ mm ])) -1 (nil))

(insn 35 34 36 7 arch/arm/mm/fault.c:159 (set (reg:SI 1 r1)
        (reg/v:SI 136 [ addr ])) -1 (nil))

(call_insn 36 35 37 7 arch/arm/mm/fault.c:159 (parallel [
            (call (mem:SI (symbol_ref:SI ("show_pte") [flags 0x3] <function_decl 0x512d9600 show_pte>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 37 36 38 7 arch/arm/mm/fault.c:160 (set (reg:SI 141)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x114ebb40>)) -1 (nil))

(insn 38 37 39 7 arch/arm/mm/fault.c:160 (set (reg:SI 0 r0)
        (reg:SI 141)) -1 (nil))

(insn 39 38 40 7 arch/arm/mm/fault.c:160 (set (reg:SI 1 r1)
        (reg/v/f:SI 138 [ regs ])) -1 (nil))

(insn 40 39 41 7 arch/arm/mm/fault.c:160 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ fsr ])) -1 (nil))

(call_insn 41 40 42 7 arch/arm/mm/fault.c:160 (parallel [
            (call (mem:SI (symbol_ref:SI ("die") [flags 0x41] <function_decl 0x512d9300 die>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 42 41 43 7 arch/arm/mm/fault.c:161 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) -1 (nil))

(call_insn 43 42 44 7 arch/arm/mm/fault.c:161 (parallel [
            (call (mem:SI (symbol_ref:SI ("bust_spinlocks") [flags 0x41] <function_decl 0x10a82a00 bust_spinlocks>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 44 43 45 7 arch/arm/mm/fault.c:162 (set (reg:SI 0 r0)
        (const_int 9 [0x9])) -1 (nil))

(call_insn 45 44 46 7 arch/arm/mm/fault.c:162 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_exit") [flags 0x41] <function_decl 0x10a67900 do_exit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 7 -> ()


(barrier 46 45 47)

;; Start of basic block ( 3) -> 8
;; Pred edge  3 [100.0%] 
(code_label 47 46 48 8 15 "" [1 uses])

(note 48 47 53 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 9)

;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8) -> 9
;; Pred edge  8 [100.0%]  (fallthru)
(note 53 48 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(jump_insn 50 53 51 9 arch/arm/mm/fault.c:163 (set (pc)
        (label_ref 52)) -1 (nil))
;; End of basic block 9 -> ( 11)

;; Succ edge  11 [100.0%] 

(barrier 51 50 49)

;; Start of basic block () -> 10
(code_label 49 51 54 10 14 "" [0 uses])

(note 54 49 52 10 [bb 10] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 10 -> ( 11)

;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 9 10) -> 11
;; Pred edge  9 [100.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
(code_label 52 54 55 11 18 "" [1 uses])

(note 55 52 0 11 [bb 11] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 11 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function do_page_fault (do_page_fault)[0:1293]

Partition 0: size 72 align 4
	hot_regs, offset 0
	hot_regs, offset 0

;; Generating RTL for gimple basic block 2

;; sp.83 = sp;

(insn 8 7 0 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 144 [ sp.83 ])
        (reg/v:SI 13 sp [ sp ])) -1 (nil))

;; tsk = ((struct thread_info *) (sp.83 & 4294959104))->task;

(insn 9 8 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 160)
        (and:SI (reg:SI 144 [ sp.83 ])
            (const_int -8129 [0xffffffffffffe03f]))) -1 (nil))

(insn 10 9 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 159)
        (and:SI (reg:SI 160)
            (const_int -64 [0xffffffffffffffc0]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 144 [ sp.83 ])
            (const_int -8192 [0xffffffffffffe000]))
        (nil)))

(insn 11 10 0 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/v/f:SI 149 [ tsk ])
        (mem/s/f/j:SI (plus:SI (reg:SI 159)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) -1 (nil))

;; mm = tsk->mm;

(insn 12 11 0 arch/arm/mm/fault.c:286 (set (reg/v/f:SI 148 [ mm ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 492 [0x1ec])) [0 <variable>.mm+0 S4 A32])) -1 (nil))

;; if (regs->uregs[16] & 128 == 0)

(insn 13 12 14 arch/arm/mm/fault.c:289 (set (reg:SI 162)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 14 13 15 arch/arm/mm/fault.c:289 (set (reg:SI 161)
        (and:SI (reg:SI 162)
            (const_int 128 [0x80]))) -1 (nil))

(insn 15 14 16 arch/arm/mm/fault.c:289 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 16 15 0 arch/arm/mm/fault.c:289 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 3

;; __asm__ __volatile__("	cpsie i			@ arch_local_irq_enable" : "cc", "memory", "memory");

(insn 18 17 0 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:26 (parallel [
            (asm_operands/v ("	cpsie i			@ arch_local_irq_enable") ("") 0 []
                 [] 1104506)
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

;; Generating RTL for gimple basic block 4

;; 

(code_label 19 18 20 22 "" [0 uses])

(note 20 19 0 NOTE_INSN_BASIC_BLOCK)

;; sp.83 = sp;

(insn 21 20 0 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 143 [ sp.83 ])
        (reg/v:SI 13 sp [ sp ])) -1 (nil))

;; if ((((struct thread_info *) (sp.83 & 4294959104))->preempt_count & -1073741825) != 0 | mm == 0B != 0)

(insn 22 21 23 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 164)
        (and:SI (reg:SI 143 [ sp.83 ])
            (const_int -8129 [0xffffffffffffe03f]))) -1 (nil))

(insn 23 22 24 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 163)
        (and:SI (reg:SI 164)
            (const_int -64 [0xffffffffffffffc0]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 143 [ sp.83 ])
            (const_int -8192 [0xffffffffffffe000]))
        (nil)))

(insn 24 23 25 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 166)
        (mem/s/j:SI (plus:SI (reg:SI 163)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) -1 (nil))

(insn 25 24 26 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 165)
        (and:SI (reg:SI 166)
            (const_int -1073741825 [0xffffffffbfffffff]))) -1 (nil))

(insn 26 25 27 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 165)
            (const_int 0 [0x0]))) -1 (nil))

(insn 27 26 28 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 168)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 28 27 29 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:QI 167)
        (subreg:QI (reg:SI 168) 0)) -1 (nil))

(insn 29 28 30 arch/arm/mm/fault.c:296 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 148 [ mm ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 30 29 31 arch/arm/mm/fault.c:296 (set (reg:SI 170)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 31 30 32 arch/arm/mm/fault.c:296 (set (reg:QI 169)
        (subreg:QI (reg:SI 170) 0)) -1 (nil))

(insn 32 31 33 arch/arm/mm/fault.c:296 (set (reg:SI 171)
        (ior:SI (subreg:SI (reg:QI 167) 0)
            (subreg:SI (reg:QI 169) 0))) -1 (nil))

(insn 33 32 34 arch/arm/mm/fault.c:296 (set (reg:QI 172)
        (subreg:QI (reg:SI 171) 0)) -1 (nil))

(insn 34 33 35 arch/arm/mm/fault.c:296 (set (reg:SI 173)
        (zero_extend:SI (reg:QI 172))) -1 (nil))

(insn 35 34 36 arch/arm/mm/fault.c:296 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 173)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 36 35 0 arch/arm/mm/fault.c:296 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 5

;; D.24547 = &mm->mmap_sem;

(insn 38 37 0 arch/arm/mm/fault.c:304 (set (reg/f:SI 154 [ D.24547 ])
        (plus:SI (reg/v/f:SI 148 [ mm ])
            (const_int 60 [0x3c]))) -1 (nil))

;; D.24548 = down_read_trylock (D.24547);

(insn 39 38 40 arch/arm/mm/fault.c:304 (set (reg:SI 0 r0)
        (reg/f:SI 154 [ D.24547 ])) -1 (nil))

(call_insn 40 39 41 arch/arm/mm/fault.c:304 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("down_read_trylock") [flags 0x41] <function_decl 0x10c30c80 down_read_trylock>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 41 40 0 arch/arm/mm/fault.c:304 (set (reg:SI 153 [ D.24548 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.24548 == 0)

(insn 42 41 43 arch/arm/mm/fault.c:304 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 153 [ D.24548 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 43 42 0 arch/arm/mm/fault.c:304 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 6

;; if (regs->uregs[16] & 15 != 0)

(insn 45 44 46 arch/arm/mm/fault.c:305 (set (reg:SI 175)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 46 45 47 arch/arm/mm/fault.c:305 (set (reg:SI 174)
        (and:SI (reg:SI 175)
            (const_int 15 [0xf]))) -1 (nil))

(insn 47 46 48 arch/arm/mm/fault.c:305 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 174)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 48 47 0 arch/arm/mm/fault.c:305 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 7

;; D.24555 = search_exception_tables (regs->uregs[15]);

(insn 50 49 51 arch/arm/mm/fault.c:305 discrim 1 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) -1 (nil))

(call_insn 51 50 52 arch/arm/mm/fault.c:305 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_exception_tables") [flags 0x41] <function_decl 0x10e04f80 search_exception_tables>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 52 51 0 arch/arm/mm/fault.c:305 discrim 1 (set (reg/f:SI 152 [ D.24555 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.24555 == 0B)

(insn 53 52 54 arch/arm/mm/fault.c:305 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 152 [ D.24555 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 54 53 0 arch/arm/mm/fault.c:305 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))

;; Generating RTL for gimple basic block 8

;; 

(code_label 55 54 56 25 "" [0 uses])

(note 56 55 0 NOTE_INSN_BASIC_BLOCK)

;; down_read (D.24547);

(insn 57 56 58 arch/arm/mm/fault.c:307 (set (reg:SI 0 r0)
        (reg/f:SI 154 [ D.24547 ])) -1 (nil))

(call_insn 58 57 0 arch/arm/mm/fault.c:307 (parallel [
            (call (mem:SI (symbol_ref:SI ("down_read") [flags 0x41] <function_decl 0x10c30c00 down_read>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

;; Generating RTL for gimple basic block 9

;; 

(code_label 61 60 62 24 "" [0 uses])

(note 62 61 0 NOTE_INSN_BASIC_BLOCK)

;; if (regs->uregs[16] & 15 != 0)

(insn 63 62 64 arch/arm/mm/fault.c:316 (set (reg:SI 177)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 64 63 65 arch/arm/mm/fault.c:316 (set (reg:SI 176)
        (and:SI (reg:SI 177)
            (const_int 15 [0xf]))) -1 (nil))

(insn 65 64 66 arch/arm/mm/fault.c:316 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 176)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 66 65 0 arch/arm/mm/fault.c:316 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))

;; Generating RTL for gimple basic block 10

;; D.24560 = search_exception_tables (regs->uregs[15]);

(insn 68 67 69 arch/arm/mm/fault.c:317 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) -1 (nil))

(call_insn 69 68 70 arch/arm/mm/fault.c:317 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_exception_tables") [flags 0x41] <function_decl 0x10e04f80 search_exception_tables>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 70 69 0 arch/arm/mm/fault.c:317 (set (reg/f:SI 151 [ D.24560 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.24560 == 0B)

(insn 71 70 72 arch/arm/mm/fault.c:316 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 151 [ D.24560 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 72 71 0 arch/arm/mm/fault.c:316 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))

;; Generating RTL for gimple basic block 11

;; 

(code_label 73 72 74 26 "" [0 uses])

(note 74 73 0 NOTE_INSN_BASIC_BLOCK)

;; vma = find_vma (mm, addr);

(insn 75 74 76 arch/arm/mm/fault.c:238 (set (reg:SI 0 r0)
        (reg/v/f:SI 148 [ mm ])) -1 (nil))

(insn 76 75 77 arch/arm/mm/fault.c:238 (set (reg:SI 1 r1)
        (reg/v:SI 156 [ addr ])) -1 (nil))

(call_insn 77 76 78 arch/arm/mm/fault.c:238 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("find_vma") [flags 0x41] <function_decl 0x10fe6c80 find_vma>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 78 77 0 arch/arm/mm/fault.c:238 (set (reg/v/f:SI 136 [ vma ])
        (reg:SI 0 r0)) -1 (nil))

;; if (vma == 0B)

(insn 79 78 80 arch/arm/mm/fault.c:240 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 136 [ vma ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 80 79 0 arch/arm/mm/fault.c:240 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))

;; Generating RTL for gimple basic block 12

;; if (vma->vm_start > addr)

(insn 82 81 83 arch/arm/mm/fault.c:242 (set (reg:SI 178)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])) -1 (nil))

(insn 83 82 84 arch/arm/mm/fault.c:242 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 178)
            (reg/v:SI 156 [ addr ]))) -1 (nil))

(jump_insn 84 83 0 arch/arm/mm/fault.c:242 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))

;; Generating RTL for gimple basic block 13

;; D.24984 = fsr & 2048;

(insn 86 85 0 arch/arm/mm/fault.c:223 (set (reg:SI 138 [ D.24984 ])
        (and:SI (reg/v:SI 157 [ fsr ])
            (const_int 2048 [0x800]))) -1 (nil))

;; if (D.24984 != 0)

(insn 87 86 88 arch/arm/mm/fault.c:223 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 138 [ D.24984 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 88 87 0 arch/arm/mm/fault.c:223 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 14

;; mask = 2;

(insn 90 89 0 arch/arm/mm/fault.c:224 (set (reg/v:SI 137 [ mask ])
        (const_int 2 [0x2])) -1 (nil))

;; Generating RTL for gimple basic block 15

;; 

(code_label 93 92 94 29 "" [0 uses])

(note 94 93 0 NOTE_INSN_BASIC_BLOCK)

;; mask = 7;

(insn 95 94 0 arch/arm/mm/fault.c:221 (set (reg/v:SI 137 [ mask ])
        (const_int 7 [0x7])) -1 (nil))

;; Generating RTL for gimple basic block 16

;; 

(code_label 96 95 97 30 "" [0 uses])

(note 97 96 0 NOTE_INSN_BASIC_BLOCK)

;; if ((int) fsr < 0)

(insn 98 97 99 arch/arm/mm/fault.c:225 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 157 [ fsr ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 99 98 0 arch/arm/mm/fault.c:225 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7300 [0x1c84])
        (nil)))

;; Generating RTL for gimple basic block 17

;; mask = 4;

(insn 101 100 0 arch/arm/mm/fault.c:226 (set (reg/v:SI 137 [ mask ])
        (const_int 4 [0x4])) -1 (nil))

;; Generating RTL for gimple basic block 18

;; 

(code_label 102 101 103 31 "" [0 uses])

(note 103 102 0 NOTE_INSN_BASIC_BLOCK)

;; if (mask & vma->vm_flags == 0)

(insn 104 103 105 arch/arm/mm/fault.c:228 (set (reg:SI 180)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 24 [0x18])) [0 <variable>.vm_flags+0 S4 A32])) -1 (nil))

(insn 105 104 106 arch/arm/mm/fault.c:228 (set (reg:SI 179)
        (and:SI (reg/v:SI 137 [ mask ])
            (reg:SI 180))) -1 (nil))

(insn 106 105 107 arch/arm/mm/fault.c:228 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 179)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 107 106 0 arch/arm/mm/fault.c:228 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))

;; Generating RTL for gimple basic block 19

;; fault = 131072;

(insn 109 108 0 arch/arm/mm/fault.c:251 (set (reg/v:SI 147 [ fault ])
        (const_int 131072 [0x20000])) -1 (nil))

;; Generating RTL for gimple basic block 20

;; 

(code_label 112 111 113 32 "" [0 uses])

(note 113 112 0 NOTE_INSN_BASIC_BLOCK)

;; fault = handle_mm_fault (mm, vma, addr & 4294963200, D.24984 != 0);

(insn 114 113 115 arch/arm/mm/fault.c:259 (set (reg:SI 182)
        (and:SI (reg/v:SI 156 [ addr ])
            (const_int -4081 [0xfffffffffffff00f]))) -1 (nil))

(insn 115 114 116 arch/arm/mm/fault.c:259 (set (reg:SI 181)
        (and:SI (reg:SI 182)
            (const_int -16 [0xfffffffffffffff0]))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 156 [ addr ])
            (const_int -4096 [0xfffffffffffff000]))
        (nil)))

(insn 116 115 117 arch/arm/mm/fault.c:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 138 [ D.24984 ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 117 116 118 arch/arm/mm/fault.c:259 (set (reg:SI 184)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 118 117 119 arch/arm/mm/fault.c:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 148 [ mm ])) -1 (nil))

(insn 119 118 120 arch/arm/mm/fault.c:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 136 [ vma ])) -1 (nil))

(insn 120 119 121 arch/arm/mm/fault.c:259 (set (reg:SI 2 r2)
        (reg:SI 181)) -1 (nil))

(insn 121 120 122 arch/arm/mm/fault.c:259 (set (reg:SI 3 r3)
        (reg:SI 184)) -1 (nil))

(call_insn 122 121 123 arch/arm/mm/fault.c:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("handle_mm_fault") [flags 0x41] <function_decl 0x10fbfc80 handle_mm_fault>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 123 122 0 arch/arm/mm/fault.c:259 (set (reg/v:SI 147 [ fault ])
        (reg:SI 0 r0)) -1 (nil))

;; if (fault & 51 != 0)

(insn 124 123 125 arch/arm/mm/fault.c:260 (set (reg:SI 185)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 51 [0x33]))) -1 (nil))

(insn 125 124 126 arch/arm/mm/fault.c:260 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 185)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 126 125 0 arch/arm/mm/fault.c:260 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))

;; Generating RTL for gimple basic block 21

;; if (fault & 4 != 0)

(insn 128 127 129 arch/arm/mm/fault.c:262 (set (reg:SI 186)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 129 128 130 arch/arm/mm/fault.c:262 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 186)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 130 129 0 arch/arm/mm/fault.c:262 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 22

;; tsk->maj_flt = [plus_expr] tsk->maj_flt + 1;

(insn 132 131 133 arch/arm/mm/fault.c:263 (set (reg:SI 187)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])) -1 (nil))

(insn 133 132 134 arch/arm/mm/fault.c:263 (set (reg:SI 188)
        (plus:SI (reg:SI 187)
            (const_int 1 [0x1]))) -1 (nil))

(insn 134 133 0 arch/arm/mm/fault.c:263 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])
        (reg:SI 188)) -1 (nil))

;; Generating RTL for gimple basic block 23

;; 

(code_label 137 136 138 34 "" [0 uses])

(note 138 137 0 NOTE_INSN_BASIC_BLOCK)

;; tsk->min_flt = [plus_expr] tsk->min_flt + 1;

(insn 139 138 140 arch/arm/mm/fault.c:265 (set (reg:SI 189)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])) -1 (nil))

(insn 140 139 141 arch/arm/mm/fault.c:265 (set (reg:SI 190)
        (plus:SI (reg:SI 189)
            (const_int 1 [0x1]))) -1 (nil))

(insn 141 140 0 arch/arm/mm/fault.c:265 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])
        (reg:SI 190)) -1 (nil))

;; Generating RTL for gimple basic block 24

;; check_stack:

(code_label 144 143 145 28 ("check_stack") [0 uses])

(note 145 144 0 NOTE_INSN_BASIC_BLOCK)

;; if (vma->vm_flags & 256 != 0)

(insn 146 145 147 arch/arm/mm/fault.c:269 (set (reg:SI 192)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 24 [0x18])) [0 <variable>.vm_flags+0 S4 A32])) -1 (nil))

(insn 147 146 148 arch/arm/mm/fault.c:269 (set (reg:SI 191)
        (and:SI (reg:SI 192)
            (const_int 256 [0x100]))) -1 (nil))

(insn 148 147 149 arch/arm/mm/fault.c:269 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 191)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 149 148 0 arch/arm/mm/fault.c:269 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))

;; Generating RTL for gimple basic block 25

;; D.24988 = expand_stack (vma, addr);

(insn 151 150 152 arch/arm/mm/fault.c:269 discrim 1 (set (reg:SI 0 r0)
        (reg/v/f:SI 136 [ vma ])) -1 (nil))

(insn 152 151 153 arch/arm/mm/fault.c:269 discrim 1 (set (reg:SI 1 r1)
        (reg/v:SI 156 [ addr ])) -1 (nil))

(call_insn 153 152 154 arch/arm/mm/fault.c:269 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("expand_stack") [flags 0x41] <function_decl 0x10fe6b80 expand_stack>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 154 153 0 arch/arm/mm/fault.c:269 discrim 1 (set (reg:SI 135 [ D.24988 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.24988 == 0)

(insn 156 154 157 arch/arm/mm/fault.c:269 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.24988 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 157 156 0 arch/arm/mm/fault.c:269 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 155)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 26

;; 

(code_label 158 157 159 27 "" [0 uses])

(note 159 158 0 NOTE_INSN_BASIC_BLOCK)

;; fault = 65536;

(insn 160 159 0 arch/arm/mm/fault.c:239 (set (reg/v:SI 147 [ fault ])
        (const_int 65536 [0x10000])) -1 (nil))

;; Generating RTL for gimple basic block 27

;; 

(code_label 161 160 162 33 "" [0 uses])

(note 162 161 0 NOTE_INSN_BASIC_BLOCK)

;; up_read (D.24547);

(insn 163 162 164 arch/arm/mm/fault.c:323 (set (reg:SI 0 r0)
        (reg/f:SI 154 [ D.24547 ])) -1 (nil))

(call_insn 164 163 0 arch/arm/mm/fault.c:323 (parallel [
            (call (mem:SI (symbol_ref:SI ("up_read") [flags 0x41] <function_decl 0x10c30e00 up_read>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

;; D.24563 = (u64) addr;

(insn 165 164 0 arch/arm/mm/fault.c:325 (set (reg:DI 150 [ D.24563 ])
        (zero_extend:DI (reg/v:SI 156 [ addr ]))) -1 (nil))

;; D.24830 = (volatile int *) &perf_swevent_enabled[2].enabled.counter;

(insn 166 165 0 include/linux/jump_label.h:67 (set (reg/f:SI 142 [ D.24830 ])
        (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                (const_int 8 [0x8])))) -1 (nil))

;; D.24831 ={v} *D.24830;

(insn 167 166 0 include/linux/jump_label.h:67 (set (reg:SI 141 [ D.24831 ])
        (mem/v:SI (reg/f:SI 142 [ D.24830 ]) [0 S4 A32])) -1 (nil))

;; if (D.24831 != 0)

(insn 168 167 169 include/linux/jump_label.h:67 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 141 [ D.24831 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 169 168 0 include/linux/jump_label.h:67 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 28

;; if (regs == 0B)

(insn 171 170 172 include/linux/perf_event.h:1054 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 158 [ regs ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 172 171 0 include/linux/perf_event.h:1054 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 672 [0x2a0])
        (nil)))

;; Generating RTL for gimple basic block 29

;; regs.462 = regs;

(insn 174 173 0 include/linux/perf_event.h:1054 (set (reg/v/f:SI 134 [ regs.462 ])
        (reg/v/f:SI 158 [ regs ])) -1 (nil))

;; Generating RTL for gimple basic block 30

;; 

(code_label 177 176 178 37 "" [0 uses])

(note 178 177 0 NOTE_INSN_BASIC_BLOCK)

;; __memzero (&hot_regs, 72);

(insn 179 178 180 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 193)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -72 [0xffffffffffffffb8]))) -1 (nil))

(insn 180 179 181 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 0 r0)
        (reg:SI 193)) -1 (nil))

(insn 181 180 182 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) -1 (nil))

(call_insn 182 181 0 include/linux/perf_event.h:1043 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; __builtin_return_address (0);

(nil)

;; regs.462 = &hot_regs;

(insn 183 182 0 include/linux/perf_event.h:1056 (set (reg/v/f:SI 134 [ regs.462 ])
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -72 [0xffffffffffffffb8]))) -1 (nil))

;; Generating RTL for gimple basic block 31

;; 

(code_label 184 183 185 38 "" [0 uses])

(note 185 184 0 NOTE_INSN_BASIC_BLOCK)

;; __perf_sw_event (2, 1, regs.462, D.24563);

(insn 186 185 187 include/linux/perf_event.h:1058 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/v/f:SI 134 [ regs.462 ])) -1 (nil))

(insn 187 186 188 include/linux/perf_event.h:1058 (set (mem:DI (plus:SI (reg/f:SI 131 virtual-outgoing-args)
                (const_int 8 [0x8])) [0 S8 A64])
        (reg:DI 150 [ D.24563 ])) -1 (nil))

(insn 188 187 189 include/linux/perf_event.h:1058 (set (reg:SI 0 r0)
        (const_int 2 [0x2])) -1 (nil))

(insn 189 188 190 include/linux/perf_event.h:1058 (set (reg:DI 2 r2)
        (const_int 1 [0x1])) -1 (nil))

(call_insn 190 189 0 include/linux/perf_event.h:1058 (parallel [
            (call (mem:SI (symbol_ref:SI ("__perf_sw_event") [flags 0x41] <function_decl 0x11436b00 __perf_sw_event>) [0 S4 A32])
                (const_int 16 [0x10]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 32

;; 

(code_label 191 190 192 36 "" [0 uses])

(note 192 191 0 NOTE_INSN_BASIC_BLOCK)

;; if (fault & 4 != 0)

(insn 193 192 194 arch/arm/mm/fault.c:326 (set (reg:SI 195)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 194 193 195 arch/arm/mm/fault.c:326 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 195)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 195 194 0 arch/arm/mm/fault.c:326 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 33

;; D.24847 = (volatile int *) &perf_swevent_enabled[6].enabled.counter;

(insn 197 196 0 include/linux/jump_label.h:67 (set (reg/f:SI 140 [ D.24847 ])
        (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                (const_int 24 [0x18])))) -1 (nil))

;; D.24848 ={v} *D.24847;

(insn 198 197 0 include/linux/jump_label.h:67 (set (reg:SI 139 [ D.24848 ])
        (mem/v:SI (reg/f:SI 140 [ D.24847 ]) [0 S4 A32])) -1 (nil))

;; if (D.24848 != 0)

(insn 199 198 200 include/linux/jump_label.h:67 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 139 [ D.24848 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 200 199 0 include/linux/jump_label.h:67 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 34

;; if (regs == 0B)

(insn 202 201 203 include/linux/perf_event.h:1054 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 158 [ regs ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 203 202 0 include/linux/perf_event.h:1054 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 672 [0x2a0])
        (nil)))

;; Generating RTL for gimple basic block 35

;; regs.463 = regs;

(insn 205 204 0 include/linux/perf_event.h:1054 (set (reg/v/f:SI 133 [ regs.463 ])
        (reg/v/f:SI 158 [ regs ])) -1 (nil))

;; Generating RTL for gimple basic block 36

;; 

(code_label 208 207 209 40 "" [0 uses])

(note 209 208 0 NOTE_INSN_BASIC_BLOCK)

;; __memzero (&hot_regs, 72);

(insn 210 209 211 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 196)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -72 [0xffffffffffffffb8]))) -1 (nil))

(insn 211 210 212 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 0 r0)
        (reg:SI 196)) -1 (nil))

(insn 212 211 213 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) -1 (nil))

(call_insn 213 212 0 include/linux/perf_event.h:1043 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; __builtin_return_address (0);

(nil)

;; regs.463 = &hot_regs;

(insn 214 213 0 include/linux/perf_event.h:1056 (set (reg/v/f:SI 133 [ regs.463 ])
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -72 [0xffffffffffffffb8]))) -1 (nil))

;; Generating RTL for gimple basic block 37

;; 

(code_label 215 214 216 41 "" [0 uses])

(note 216 215 0 NOTE_INSN_BASIC_BLOCK)

;; __perf_sw_event (6, 1, regs.463, D.24563);

(insn 217 216 218 include/linux/perf_event.h:1058 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/v/f:SI 133 [ regs.463 ])) -1 (nil))

(insn 218 217 219 include/linux/perf_event.h:1058 (set (mem:DI (plus:SI (reg/f:SI 131 virtual-outgoing-args)
                (const_int 8 [0x8])) [0 S8 A64])
        (reg:DI 150 [ D.24563 ])) -1 (nil))

(insn 219 218 220 include/linux/perf_event.h:1058 (set (reg:SI 0 r0)
        (const_int 6 [0x6])) -1 (nil))

(insn 220 219 221 include/linux/perf_event.h:1058 (set (reg:DI 2 r2)
        (const_int 1 [0x1])) -1 (nil))

(call_insn 221 220 0 include/linux/perf_event.h:1058 (parallel [
            (call (mem:SI (symbol_ref:SI ("__perf_sw_event") [flags 0x41] <function_decl 0x11436b00 __perf_sw_event>) [0 S4 A32])
                (const_int 16 [0x10]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

;; Generating RTL for gimple basic block 38

;; 

(code_label 222 221 223 39 "" [0 uses])

(note 223 222 0 NOTE_INSN_BASIC_BLOCK)

;; if (fault & 196659 == 0)

(insn 224 223 225 arch/arm/mm/fault.c:334 (set (reg:SI 198)
        (const_int 196659 [0x30033])) -1 (nil))

(insn 225 224 226 arch/arm/mm/fault.c:334 (set (reg:SI 197)
        (and:SI (reg/v:SI 147 [ fault ])
            (reg:SI 198))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 147 [ fault ])
            (const_int 196659 [0x30033]))
        (nil)))

(insn 226 225 227 arch/arm/mm/fault.c:334 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 197)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 227 226 0 arch/arm/mm/fault.c:334 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 39

;; if (fault & 1 != 0)

(insn 229 228 230 arch/arm/mm/fault.c:337 (set (reg:SI 199)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 230 229 231 arch/arm/mm/fault.c:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 199)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 231 230 0 arch/arm/mm/fault.c:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7929 [0x1ef9])
        (nil)))

;; Generating RTL for gimple basic block 40

;; pagefault_out_of_memory ();

(call_insn 233 232 0 arch/arm/mm/fault.c:343 (parallel [
            (call (mem:SI (symbol_ref:SI ("pagefault_out_of_memory") [flags 0x41] <function_decl 0x10fb4d80 pagefault_out_of_memory>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (nil))

;; Generating RTL for gimple basic block 41

;; 

(code_label 236 235 237 43 "" [0 uses])

(note 237 236 0 NOTE_INSN_BASIC_BLOCK)

;; if (regs->uregs[16] & 15 != 0)

(insn 238 237 239 arch/arm/mm/fault.c:351 (set (reg:SI 201)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 239 238 240 arch/arm/mm/fault.c:351 (set (reg:SI 200)
        (and:SI (reg:SI 201)
            (const_int 15 [0xf]))) -1 (nil))

(insn 240 239 241 arch/arm/mm/fault.c:351 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 200)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 241 240 0 arch/arm/mm/fault.c:351 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))

;; Generating RTL for gimple basic block 42

;; if (fault & 2 != 0)

(insn 243 242 244 arch/arm/mm/fault.c:354 (set (reg:SI 202)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 2 [0x2]))) -1 (nil))

(insn 244 243 245 arch/arm/mm/fault.c:354 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 202)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 245 244 0 arch/arm/mm/fault.c:354 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))

;; Generating RTL for gimple basic block 43

;; code = 196610;

(insn 247 246 0 arch/arm/mm/fault.c:360 (set (reg/v:SI 145 [ code ])
        (const_int 196610 [0x30002])) -1 (nil))

;; sig = 7;

(insn 248 247 0 arch/arm/mm/fault.c:359 (set (reg/v:SI 146 [ sig ])
        (const_int 7 [0x7])) -1 (nil))

;; Generating RTL for gimple basic block 44

;; 

(code_label 251 250 252 44 "" [0 uses])

(note 252 251 0 NOTE_INSN_BASIC_BLOCK)

;; if (fault == 131072)

(insn 253 252 254 arch/arm/mm/fault.c:367 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 147 [ fault ])
            (const_int 131072 [0x20000]))) -1 (nil))

(jump_insn 254 253 0 arch/arm/mm/fault.c:367 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))

;; Generating RTL for gimple basic block 45

;; code = 196609;

(insn 256 255 0 arch/arm/mm/fault.c:367 discrim 2 (set (reg/v:SI 145 [ code ])
        (const_int 196609 [0x30001])) -1 (nil))

;; sig = 11;

(insn 257 256 0 arch/arm/mm/fault.c:366 (set (reg/v:SI 146 [ sig ])
        (const_int 11 [0xb])) -1 (nil))

;; Generating RTL for gimple basic block 46

;; 

(code_label 260 259 261 46 "" [0 uses])

(note 261 260 0 NOTE_INSN_BASIC_BLOCK)

;; code = 196610;

(insn 262 261 0 arch/arm/mm/fault.c:367 discrim 1 (set (reg/v:SI 145 [ code ])
        (const_int 196610 [0x30002])) -1 (nil))

;; sig = 11;

(insn 263 262 0 arch/arm/mm/fault.c:366 (set (reg/v:SI 146 [ sig ])
        (const_int 11 [0xb])) -1 (nil))

;; Generating RTL for gimple basic block 47

;; 

(code_label 264 263 265 45 "" [0 uses])

(note 265 264 0 NOTE_INSN_BASIC_BLOCK)

;; __do_user_fault (tsk, addr, fsr, (unsigned int) sig, code, regs);

(insn 266 265 267 arch/arm/mm/fault.c:371 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/v:SI 145 [ code ])) -1 (nil))

(insn 267 266 268 arch/arm/mm/fault.c:371 (set (mem:SI (plus:SI (reg/f:SI 131 virtual-outgoing-args)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v/f:SI 158 [ regs ])) -1 (nil))

(insn 268 267 269 arch/arm/mm/fault.c:371 (set (reg:SI 0 r0)
        (reg/v/f:SI 149 [ tsk ])) -1 (nil))

(insn 269 268 270 arch/arm/mm/fault.c:371 (set (reg:SI 1 r1)
        (reg/v:SI 156 [ addr ])) -1 (nil))

(insn 270 269 271 arch/arm/mm/fault.c:371 (set (reg:SI 2 r2)
        (reg/v:SI 157 [ fsr ])) -1 (nil))

(insn 271 270 272 arch/arm/mm/fault.c:371 (set (reg:SI 3 r3)
        (reg/v:SI 146 [ sig ])) -1 (nil))

(call_insn 272 271 0 arch/arm/mm/fault.c:371 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_user_fault") [flags 0x3] <function_decl 0x11459d80 __do_user_fault>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; Generating RTL for gimple basic block 48

;; no_context:

(code_label 275 274 276 23 ("no_context") [0 uses])

(note 276 275 0 NOTE_INSN_BASIC_BLOCK)

;; __do_kernel_fault (mm, addr, fsr, regs);

(insn 277 276 278 arch/arm/mm/fault.c:375 (set (reg:SI 0 r0)
        (reg/v/f:SI 148 [ mm ])) -1 (nil))

(insn 278 277 279 arch/arm/mm/fault.c:375 (set (reg:SI 1 r1)
        (reg/v:SI 156 [ addr ])) -1 (nil))

(insn 279 278 280 arch/arm/mm/fault.c:375 (set (reg:SI 2 r2)
        (reg/v:SI 157 [ fsr ])) -1 (nil))

(insn 280 279 281 arch/arm/mm/fault.c:375 (set (reg:SI 3 r3)
        (reg/v/f:SI 158 [ regs ])) -1 (nil))

(call_insn 281 280 0 arch/arm/mm/fault.c:375 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_kernel_fault") [flags 0x3] <function_decl 0x11459c80 __do_kernel_fault>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; Generating RTL for gimple basic block 49

;; 

(code_label 282 281 283 42 "" [0 uses])

(note 283 282 0 NOTE_INSN_BASIC_BLOCK)

;; return 0;

(insn 284 283 285 arch/arm/mm/fault.c:377 (set (reg:SI 155 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 285 284 286 arch/arm/mm/fault.c:377 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 286 285 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 arch/arm/mm/fault.c:277 (set (reg/v:SI 156 [ addr ])
        (reg:SI 0 r0 [ addr ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:277 (set (reg/v:SI 157 [ fsr ])
        (reg:SI 1 r1 [ fsr ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:277 (set (reg/v/f:SI 158 [ regs ])
        (reg:SI 2 r2 [ regs ])) -1 (nil))

(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 7 5 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 144 [ sp.83 ])
        (reg/v:SI 13 sp [ sp ])) -1 (nil))

(insn 9 8 10 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 160)
        (and:SI (reg:SI 144 [ sp.83 ])
            (const_int -8129 [0xffffffffffffe03f]))) -1 (nil))

(insn 10 9 11 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 159)
        (and:SI (reg:SI 160)
            (const_int -64 [0xffffffffffffffc0]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 144 [ sp.83 ])
            (const_int -8192 [0xffffffffffffe000]))
        (nil)))

(insn 11 10 12 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/v/f:SI 149 [ tsk ])
        (mem/s/f/j:SI (plus:SI (reg:SI 159)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) -1 (nil))

(insn 12 11 13 3 arch/arm/mm/fault.c:286 (set (reg/v/f:SI 148 [ mm ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 492 [0x1ec])) [0 <variable>.mm+0 S4 A32])) -1 (nil))

(insn 13 12 14 3 arch/arm/mm/fault.c:289 (set (reg:SI 162)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 14 13 15 3 arch/arm/mm/fault.c:289 (set (reg:SI 161)
        (and:SI (reg:SI 162)
            (const_int 128 [0x80]))) -1 (nil))

(insn 15 14 16 3 arch/arm/mm/fault.c:289 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 161)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 16 15 17 3 arch/arm/mm/fault.c:289 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [50.0%]  (fallthru)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:26 (parallel [
            (asm_operands/v ("	cpsie i			@ arch_local_irq_enable") ("") 0 []
                 [] 1104506)
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 4 -> ( 5)

;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [50.0%] 
(code_label 19 18 20 5 22 "" [1 uses])

(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 143 [ sp.83 ])
        (reg/v:SI 13 sp [ sp ])) -1 (nil))

(insn 22 21 23 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 164)
        (and:SI (reg:SI 143 [ sp.83 ])
            (const_int -8129 [0xffffffffffffe03f]))) -1 (nil))

(insn 23 22 24 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 163)
        (and:SI (reg:SI 164)
            (const_int -64 [0xffffffffffffffc0]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 143 [ sp.83 ])
            (const_int -8192 [0xffffffffffffe000]))
        (nil)))

(insn 24 23 25 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 166)
        (mem/s/j:SI (plus:SI (reg:SI 163)
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) -1 (nil))

(insn 25 24 26 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 165)
        (and:SI (reg:SI 166)
            (const_int -1073741825 [0xffffffffbfffffff]))) -1 (nil))

(insn 26 25 27 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 165)
            (const_int 0 [0x0]))) -1 (nil))

(insn 27 26 28 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 168)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 28 27 29 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:QI 167)
        (subreg:QI (reg:SI 168) 0)) -1 (nil))

(insn 29 28 30 5 arch/arm/mm/fault.c:296 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 148 [ mm ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 30 29 31 5 arch/arm/mm/fault.c:296 (set (reg:SI 170)
        (eq:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 31 30 32 5 arch/arm/mm/fault.c:296 (set (reg:QI 169)
        (subreg:QI (reg:SI 170) 0)) -1 (nil))

(insn 32 31 33 5 arch/arm/mm/fault.c:296 (set (reg:SI 171)
        (ior:SI (subreg:SI (reg:QI 167) 0)
            (subreg:SI (reg:QI 169) 0))) -1 (nil))

(insn 33 32 34 5 arch/arm/mm/fault.c:296 (set (reg:QI 172)
        (subreg:QI (reg:SI 171) 0)) -1 (nil))

(insn 34 33 35 5 arch/arm/mm/fault.c:296 (set (reg:SI 173)
        (zero_extend:SI (reg:QI 172))) -1 (nil))

(insn 35 34 36 5 arch/arm/mm/fault.c:296 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 173)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 36 35 37 5 arch/arm/mm/fault.c:296 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 275)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 49 6)

;; Succ edge  49 [50.0%] 
;; Succ edge  6 [50.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [50.0%]  (fallthru)
(note 37 36 38 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 38 37 39 6 arch/arm/mm/fault.c:304 (set (reg/f:SI 154 [ D.24547 ])
        (plus:SI (reg/v/f:SI 148 [ mm ])
            (const_int 60 [0x3c]))) -1 (nil))

(insn 39 38 40 6 arch/arm/mm/fault.c:304 (set (reg:SI 0 r0)
        (reg/f:SI 154 [ D.24547 ])) -1 (nil))

(call_insn 40 39 41 6 arch/arm/mm/fault.c:304 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("down_read_trylock") [flags 0x41] <function_decl 0x10c30c80 down_read_trylock>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 41 40 42 6 arch/arm/mm/fault.c:304 (set (reg:SI 153 [ D.24548 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 42 41 43 6 arch/arm/mm/fault.c:304 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 153 [ D.24548 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 43 42 44 6 arch/arm/mm/fault.c:304 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 10)

;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%] 

;; Start of basic block ( 6) -> 7
;; Pred edge  6 [50.0%]  (fallthru)
(note 44 43 45 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 45 44 46 7 arch/arm/mm/fault.c:305 (set (reg:SI 175)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 46 45 47 7 arch/arm/mm/fault.c:305 (set (reg:SI 174)
        (and:SI (reg:SI 175)
            (const_int 15 [0xf]))) -1 (nil))

(insn 47 46 48 7 arch/arm/mm/fault.c:305 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 174)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 48 47 49 7 arch/arm/mm/fault.c:305 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 7 -> ( 8 9)

;; Succ edge  8 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 7) -> 8
;; Pred edge  7 [50.0%]  (fallthru)
(note 49 48 50 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 50 49 51 8 arch/arm/mm/fault.c:305 discrim 1 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) -1 (nil))

(call_insn 51 50 52 8 arch/arm/mm/fault.c:305 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_exception_tables") [flags 0x41] <function_decl 0x10e04f80 search_exception_tables>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 52 51 53 8 arch/arm/mm/fault.c:305 discrim 1 (set (reg/f:SI 152 [ D.24555 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 53 52 54 8 arch/arm/mm/fault.c:305 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 152 [ D.24555 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 54 53 55 8 arch/arm/mm/fault.c:305 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 275)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 8 -> ( 49 9)

;; Succ edge  49 [15.0%] 
;; Succ edge  9 [85.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; Pred edge  7 [50.0%] 
;; Pred edge  8 [85.0%]  (fallthru)
(code_label 55 54 56 9 25 "" [1 uses])

(note 56 55 57 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 58 9 arch/arm/mm/fault.c:307 (set (reg:SI 0 r0)
        (reg/f:SI 154 [ D.24547 ])) -1 (nil))

(call_insn 58 57 59 9 arch/arm/mm/fault.c:307 (parallel [
            (call (mem:SI (symbol_ref:SI ("down_read") [flags 0x41] <function_decl 0x10c30c00 down_read>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 59 58 60 9 arch/arm/mm/fault.c:307 (set (pc)
        (label_ref 73)) -1 (nil))
;; End of basic block 9 -> ( 12)

;; Succ edge  12 [100.0%] 

(barrier 60 59 61)

;; Start of basic block ( 6) -> 10
;; Pred edge  6 [50.0%] 
(code_label 61 60 62 10 24 "" [1 uses])

(note 62 61 63 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 63 62 64 10 arch/arm/mm/fault.c:316 (set (reg:SI 177)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 64 63 65 10 arch/arm/mm/fault.c:316 (set (reg:SI 176)
        (and:SI (reg:SI 177)
            (const_int 15 [0xf]))) -1 (nil))

(insn 65 64 66 10 arch/arm/mm/fault.c:316 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 176)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 66 65 67 10 arch/arm/mm/fault.c:316 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 10 -> ( 11 12)

;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  12 [71.0%] 

;; Start of basic block ( 10) -> 11
;; Pred edge  10 [29.0%]  (fallthru)
(note 67 66 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 68 67 69 11 arch/arm/mm/fault.c:317 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) -1 (nil))

(call_insn 69 68 70 11 arch/arm/mm/fault.c:317 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_exception_tables") [flags 0x41] <function_decl 0x10e04f80 search_exception_tables>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 70 69 71 11 arch/arm/mm/fault.c:317 (set (reg/f:SI 151 [ D.24560 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 71 70 72 11 arch/arm/mm/fault.c:316 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 151 [ D.24560 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 72 71 73 11 arch/arm/mm/fault.c:316 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 275)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 11 -> ( 49 12)

;; Succ edge  49 [15.0%] 
;; Succ edge  12 [85.0%]  (fallthru)

;; Start of basic block ( 10 9 11) -> 12
;; Pred edge  10 [71.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  11 [85.0%]  (fallthru)
(code_label 73 72 74 12 26 "" [2 uses])

(note 74 73 75 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 75 74 76 12 arch/arm/mm/fault.c:238 (set (reg:SI 0 r0)
        (reg/v/f:SI 148 [ mm ])) -1 (nil))

(insn 76 75 77 12 arch/arm/mm/fault.c:238 (set (reg:SI 1 r1)
        (reg/v:SI 156 [ addr ])) -1 (nil))

(call_insn 77 76 78 12 arch/arm/mm/fault.c:238 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("find_vma") [flags 0x41] <function_decl 0x10fe6c80 find_vma>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 78 77 79 12 arch/arm/mm/fault.c:238 (set (reg/v/f:SI 136 [ vma ])
        (reg:SI 0 r0)) -1 (nil))

(insn 79 78 80 12 arch/arm/mm/fault.c:240 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 136 [ vma ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 80 79 81 12 arch/arm/mm/fault.c:240 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 12 -> ( 27 13)

;; Succ edge  27 [0.0%] 
;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; Pred edge  12 [100.0%]  (fallthru)
(note 81 80 82 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 82 81 83 13 arch/arm/mm/fault.c:242 (set (reg:SI 178)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])) -1 (nil))

(insn 83 82 84 13 arch/arm/mm/fault.c:242 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 178)
            (reg/v:SI 156 [ addr ]))) -1 (nil))

(jump_insn 84 83 155 13 arch/arm/mm/fault.c:242 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 144)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 13 -> ( 25 14)

;; Succ edge  25 [0.0%] 
;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 26) -> 14
;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  26 [50.0%] 
(code_label 155 84 85 14 35 "" [1 uses])

(note 85 155 86 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 86 85 87 14 arch/arm/mm/fault.c:223 (set (reg:SI 138 [ D.24984 ])
        (and:SI (reg/v:SI 157 [ fsr ])
            (const_int 2048 [0x800]))) -1 (nil))

(insn 87 86 88 14 arch/arm/mm/fault.c:223 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 138 [ D.24984 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 88 87 89 14 arch/arm/mm/fault.c:223 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 14 -> ( 15 16)

;; Succ edge  15 [50.0%]  (fallthru)
;; Succ edge  16 [50.0%] 

;; Start of basic block ( 14) -> 15
;; Pred edge  14 [50.0%]  (fallthru)
(note 89 88 90 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 90 89 91 15 arch/arm/mm/fault.c:224 (set (reg/v:SI 137 [ mask ])
        (const_int 2 [0x2])) -1 (nil))

(jump_insn 91 90 92 15 arch/arm/mm/fault.c:224 (set (pc)
        (label_ref 96)) -1 (nil))
;; End of basic block 15 -> ( 17)

;; Succ edge  17 [100.0%] 

(barrier 92 91 93)

;; Start of basic block ( 14) -> 16
;; Pred edge  14 [50.0%] 
(code_label 93 92 94 16 29 "" [1 uses])

(note 94 93 95 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 16 arch/arm/mm/fault.c:221 (set (reg/v:SI 137 [ mask ])
        (const_int 7 [0x7])) -1 (nil))
;; End of basic block 16 -> ( 17)

;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 15) -> 17
;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  15 [100.0%] 
(code_label 96 95 97 17 30 "" [1 uses])

(note 97 96 98 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 98 97 99 17 arch/arm/mm/fault.c:225 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 157 [ fsr ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 99 98 100 17 arch/arm/mm/fault.c:225 (set (pc)
        (if_then_else (ge (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 102)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7300 [0x1c84])
        (nil)))
;; End of basic block 17 -> ( 18 19)

;; Succ edge  18 [27.0%]  (fallthru)
;; Succ edge  19 [73.0%] 

;; Start of basic block ( 17) -> 18
;; Pred edge  17 [27.0%]  (fallthru)
(note 100 99 101 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 101 100 102 18 arch/arm/mm/fault.c:226 (set (reg/v:SI 137 [ mask ])
        (const_int 4 [0x4])) -1 (nil))
;; End of basic block 18 -> ( 19)

;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 17 18) -> 19
;; Pred edge  17 [73.0%] 
;; Pred edge  18 [100.0%]  (fallthru)
(code_label 102 101 103 19 31 "" [1 uses])

(note 103 102 104 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn 104 103 105 19 arch/arm/mm/fault.c:228 (set (reg:SI 180)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 24 [0x18])) [0 <variable>.vm_flags+0 S4 A32])) -1 (nil))

(insn 105 104 106 19 arch/arm/mm/fault.c:228 (set (reg:SI 179)
        (and:SI (reg/v:SI 137 [ mask ])
            (reg:SI 180))) -1 (nil))

(insn 106 105 107 19 arch/arm/mm/fault.c:228 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 179)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 107 106 108 19 arch/arm/mm/fault.c:228 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 19 -> ( 20 21)

;; Succ edge  20 [71.0%]  (fallthru)
;; Succ edge  21 [29.0%] 

;; Start of basic block ( 19) -> 20
;; Pred edge  19 [71.0%]  (fallthru)
(note 108 107 109 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 110 20 arch/arm/mm/fault.c:251 (set (reg/v:SI 147 [ fault ])
        (const_int 131072 [0x20000])) -1 (nil))

(jump_insn 110 109 111 20 arch/arm/mm/fault.c:251 (set (pc)
        (label_ref 161)) -1 (nil))
;; End of basic block 20 -> ( 28)

;; Succ edge  28 [100.0%] 

(barrier 111 110 112)

;; Start of basic block ( 19) -> 21
;; Pred edge  19 [29.0%] 
(code_label 112 111 113 21 32 "" [1 uses])

(note 113 112 114 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 114 113 115 21 arch/arm/mm/fault.c:259 (set (reg:SI 182)
        (and:SI (reg/v:SI 156 [ addr ])
            (const_int -4081 [0xfffffffffffff00f]))) -1 (nil))

(insn 115 114 116 21 arch/arm/mm/fault.c:259 (set (reg:SI 181)
        (and:SI (reg:SI 182)
            (const_int -16 [0xfffffffffffffff0]))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 156 [ addr ])
            (const_int -4096 [0xfffffffffffff000]))
        (nil)))

(insn 116 115 117 21 arch/arm/mm/fault.c:259 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 138 [ D.24984 ])
            (const_int 0 [0x0]))) -1 (nil))

(insn 117 116 118 21 arch/arm/mm/fault.c:259 (set (reg:SI 184)
        (ne:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) -1 (nil))

(insn 118 117 119 21 arch/arm/mm/fault.c:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 148 [ mm ])) -1 (nil))

(insn 119 118 120 21 arch/arm/mm/fault.c:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 136 [ vma ])) -1 (nil))

(insn 120 119 121 21 arch/arm/mm/fault.c:259 (set (reg:SI 2 r2)
        (reg:SI 181)) -1 (nil))

(insn 121 120 122 21 arch/arm/mm/fault.c:259 (set (reg:SI 3 r3)
        (reg:SI 184)) -1 (nil))

(call_insn 122 121 123 21 arch/arm/mm/fault.c:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("handle_mm_fault") [flags 0x41] <function_decl 0x10fbfc80 handle_mm_fault>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 123 122 124 21 arch/arm/mm/fault.c:259 (set (reg/v:SI 147 [ fault ])
        (reg:SI 0 r0)) -1 (nil))

(insn 124 123 125 21 arch/arm/mm/fault.c:260 (set (reg:SI 185)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 51 [0x33]))) -1 (nil))

(insn 125 124 126 21 arch/arm/mm/fault.c:260 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 185)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 126 125 127 21 arch/arm/mm/fault.c:260 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 161)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 21 -> ( 28 22)

;; Succ edge  28 [0.0%] 
;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21) -> 22
;; Pred edge  21 [100.0%]  (fallthru)
(note 127 126 128 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 128 127 129 22 arch/arm/mm/fault.c:262 (set (reg:SI 186)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 129 128 130 22 arch/arm/mm/fault.c:262 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 186)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 130 129 131 22 arch/arm/mm/fault.c:262 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 137)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 22 -> ( 23 24)

;; Succ edge  23 [50.0%]  (fallthru)
;; Succ edge  24 [50.0%] 

;; Start of basic block ( 22) -> 23
;; Pred edge  22 [50.0%]  (fallthru)
(note 131 130 132 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 132 131 133 23 arch/arm/mm/fault.c:263 (set (reg:SI 187)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])) -1 (nil))

(insn 133 132 134 23 arch/arm/mm/fault.c:263 (set (reg:SI 188)
        (plus:SI (reg:SI 187)
            (const_int 1 [0x1]))) -1 (nil))

(insn 134 133 135 23 arch/arm/mm/fault.c:263 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])
        (reg:SI 188)) -1 (nil))

(jump_insn 135 134 136 23 arch/arm/mm/fault.c:263 (set (pc)
        (label_ref 161)) -1 (nil))
;; End of basic block 23 -> ( 28)

;; Succ edge  28 [100.0%] 

(barrier 136 135 137)

;; Start of basic block ( 22) -> 24
;; Pred edge  22 [50.0%] 
(code_label 137 136 138 24 34 "" [1 uses])

(note 138 137 139 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 139 138 140 24 arch/arm/mm/fault.c:265 (set (reg:SI 189)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])) -1 (nil))

(insn 140 139 141 24 arch/arm/mm/fault.c:265 (set (reg:SI 190)
        (plus:SI (reg:SI 189)
            (const_int 1 [0x1]))) -1 (nil))

(insn 141 140 142 24 arch/arm/mm/fault.c:265 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 149 [ tsk ])
                (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])
        (reg:SI 190)) -1 (nil))

(jump_insn 142 141 143 24 arch/arm/mm/fault.c:265 (set (pc)
        (label_ref 161)) -1 (nil))
;; End of basic block 24 -> ( 28)

;; Succ edge  28 [100.0%] 

(barrier 143 142 144)

;; Start of basic block ( 13) -> 25
;; Pred edge  13 [0.0%] 
(code_label 144 143 145 25 28 ("check_stack") [1 uses])

(note 145 144 146 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 146 145 147 25 arch/arm/mm/fault.c:269 (set (reg:SI 192)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 24 [0x18])) [0 <variable>.vm_flags+0 S4 A32])) -1 (nil))

(insn 147 146 148 25 arch/arm/mm/fault.c:269 (set (reg:SI 191)
        (and:SI (reg:SI 192)
            (const_int 256 [0x100]))) -1 (nil))

(insn 148 147 149 25 arch/arm/mm/fault.c:269 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 191)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 149 148 150 25 arch/arm/mm/fault.c:269 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 25 -> ( 26 27)

;; Succ edge  26 [29.0%]  (fallthru)
;; Succ edge  27 [71.0%] 

;; Start of basic block ( 25) -> 26
;; Pred edge  25 [29.0%]  (fallthru)
(note 150 149 151 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 151 150 152 26 arch/arm/mm/fault.c:269 discrim 1 (set (reg:SI 0 r0)
        (reg/v/f:SI 136 [ vma ])) -1 (nil))

(insn 152 151 153 26 arch/arm/mm/fault.c:269 discrim 1 (set (reg:SI 1 r1)
        (reg/v:SI 156 [ addr ])) -1 (nil))

(call_insn 153 152 154 26 arch/arm/mm/fault.c:269 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("expand_stack") [flags 0x41] <function_decl 0x10fe6b80 expand_stack>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 154 153 156 26 arch/arm/mm/fault.c:269 discrim 1 (set (reg:SI 135 [ D.24988 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 156 154 157 26 arch/arm/mm/fault.c:269 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.24988 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 157 156 158 26 arch/arm/mm/fault.c:269 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 155)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 26 -> ( 14 27)

;; Succ edge  14 [50.0%] 
;; Succ edge  27 [50.0%]  (fallthru)

;; Start of basic block ( 25 26 12) -> 27
;; Pred edge  25 [71.0%] 
;; Pred edge  26 [50.0%]  (fallthru)
;; Pred edge  12 [0.0%] 
(code_label 158 157 159 27 27 "" [2 uses])

(note 159 158 160 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 160 159 161 27 arch/arm/mm/fault.c:239 (set (reg/v:SI 147 [ fault ])
        (const_int 65536 [0x10000])) -1 (nil))
;; End of basic block 27 -> ( 28)

;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 27 21 23 24 20) -> 28
;; Pred edge  27 [100.0%]  (fallthru)
;; Pred edge  21 [0.0%] 
;; Pred edge  23 [100.0%] 
;; Pred edge  24 [100.0%] 
;; Pred edge  20 [100.0%] 
(code_label 161 160 162 28 33 "" [4 uses])

(note 162 161 163 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 163 162 164 28 arch/arm/mm/fault.c:323 (set (reg:SI 0 r0)
        (reg/f:SI 154 [ D.24547 ])) -1 (nil))

(call_insn 164 163 165 28 arch/arm/mm/fault.c:323 (parallel [
            (call (mem:SI (symbol_ref:SI ("up_read") [flags 0x41] <function_decl 0x10c30e00 up_read>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 165 164 166 28 arch/arm/mm/fault.c:325 (set (reg:DI 150 [ D.24563 ])
        (zero_extend:DI (reg/v:SI 156 [ addr ]))) -1 (nil))

(insn 166 165 167 28 include/linux/jump_label.h:67 (set (reg/f:SI 142 [ D.24830 ])
        (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                (const_int 8 [0x8])))) -1 (nil))

(insn 167 166 168 28 include/linux/jump_label.h:67 (set (reg:SI 141 [ D.24831 ])
        (mem/v:SI (reg/f:SI 142 [ D.24830 ]) [0 S4 A32])) -1 (nil))

(insn 168 167 169 28 include/linux/jump_label.h:67 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 141 [ D.24831 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 169 168 170 28 include/linux/jump_label.h:67 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 191)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 28 -> ( 29 33)

;; Succ edge  29 [0.0%]  (fallthru)
;; Succ edge  33 [100.0%] 

;; Start of basic block ( 28) -> 29
;; Pred edge  28 [0.0%]  (fallthru)
(note 170 169 171 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 171 170 172 29 include/linux/perf_event.h:1054 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 158 [ regs ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 172 171 173 29 include/linux/perf_event.h:1054 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 177)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 672 [0x2a0])
        (nil)))
;; End of basic block 29 -> ( 31 30)

;; Succ edge  31 [6.7%] 
;; Succ edge  30 [93.3%]  (fallthru)

;; Start of basic block ( 29) -> 30
;; Pred edge  29 [93.3%]  (fallthru)
(note 173 172 174 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 174 173 175 30 include/linux/perf_event.h:1054 (set (reg/v/f:SI 134 [ regs.462 ])
        (reg/v/f:SI 158 [ regs ])) -1 (nil))

(jump_insn 175 174 176 30 include/linux/perf_event.h:1054 (set (pc)
        (label_ref 184)) -1 (nil))
;; End of basic block 30 -> ( 32)

;; Succ edge  32 [100.0%] 

(barrier 176 175 177)

;; Start of basic block ( 29) -> 31
;; Pred edge  29 [6.7%] 
(code_label 177 176 178 31 37 "" [1 uses])

(note 178 177 179 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 179 178 180 31 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 193)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -72 [0xffffffffffffffb8]))) -1 (nil))

(insn 180 179 181 31 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 0 r0)
        (reg:SI 193)) -1 (nil))

(insn 181 180 182 31 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) -1 (nil))

(call_insn 182 181 183 31 include/linux/perf_event.h:1043 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 183 182 184 31 include/linux/perf_event.h:1056 (set (reg/v/f:SI 134 [ regs.462 ])
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -72 [0xffffffffffffffb8]))) -1 (nil))
;; End of basic block 31 -> ( 32)

;; Succ edge  32 [100.0%]  (fallthru)

;; Start of basic block ( 30 31) -> 32
;; Pred edge  30 [100.0%] 
;; Pred edge  31 [100.0%]  (fallthru)
(code_label 184 183 185 32 38 "" [1 uses])

(note 185 184 186 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 186 185 187 32 include/linux/perf_event.h:1058 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/v/f:SI 134 [ regs.462 ])) -1 (nil))

(insn 187 186 188 32 include/linux/perf_event.h:1058 (set (mem:DI (plus:SI (reg/f:SI 131 virtual-outgoing-args)
                (const_int 8 [0x8])) [0 S8 A64])
        (reg:DI 150 [ D.24563 ])) -1 (nil))

(insn 188 187 189 32 include/linux/perf_event.h:1058 (set (reg:SI 0 r0)
        (const_int 2 [0x2])) -1 (nil))

(insn 189 188 190 32 include/linux/perf_event.h:1058 (set (reg:DI 2 r2)
        (const_int 1 [0x1])) -1 (nil))

(call_insn 190 189 191 32 include/linux/perf_event.h:1058 (parallel [
            (call (mem:SI (symbol_ref:SI ("__perf_sw_event") [flags 0x41] <function_decl 0x11436b00 __perf_sw_event>) [0 S4 A32])
                (const_int 16 [0x10]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 32 -> ( 33)

;; Succ edge  33 [100.0%]  (fallthru)

;; Start of basic block ( 32 28) -> 33
;; Pred edge  32 [100.0%]  (fallthru)
;; Pred edge  28 [100.0%] 
(code_label 191 190 192 33 36 "" [1 uses])

(note 192 191 193 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 193 192 194 33 arch/arm/mm/fault.c:326 (set (reg:SI 195)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 194 193 195 33 arch/arm/mm/fault.c:326 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 195)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 195 194 196 33 arch/arm/mm/fault.c:326 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 222)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 33 -> ( 34 39)

;; Succ edge  34 [50.0%]  (fallthru)
;; Succ edge  39 [50.0%] 

;; Start of basic block ( 33) -> 34
;; Pred edge  33 [50.0%]  (fallthru)
(note 196 195 197 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 197 196 198 34 include/linux/jump_label.h:67 (set (reg/f:SI 140 [ D.24847 ])
        (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                (const_int 24 [0x18])))) -1 (nil))

(insn 198 197 199 34 include/linux/jump_label.h:67 (set (reg:SI 139 [ D.24848 ])
        (mem/v:SI (reg/f:SI 140 [ D.24847 ]) [0 S4 A32])) -1 (nil))

(insn 199 198 200 34 include/linux/jump_label.h:67 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 139 [ D.24848 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 200 199 201 34 include/linux/jump_label.h:67 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 222)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 34 -> ( 35 39)

;; Succ edge  35 [0.0%]  (fallthru)
;; Succ edge  39 [100.0%] 

;; Start of basic block ( 34) -> 35
;; Pred edge  34 [0.0%]  (fallthru)
(note 201 200 202 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 202 201 203 35 include/linux/perf_event.h:1054 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 158 [ regs ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 203 202 204 35 include/linux/perf_event.h:1054 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 672 [0x2a0])
        (nil)))
;; End of basic block 35 -> ( 37 36)

;; Succ edge  37 [6.7%] 
;; Succ edge  36 [93.3%]  (fallthru)

;; Start of basic block ( 35) -> 36
;; Pred edge  35 [93.3%]  (fallthru)
(note 204 203 205 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 205 204 206 36 include/linux/perf_event.h:1054 (set (reg/v/f:SI 133 [ regs.463 ])
        (reg/v/f:SI 158 [ regs ])) -1 (nil))

(jump_insn 206 205 207 36 include/linux/perf_event.h:1054 (set (pc)
        (label_ref 215)) -1 (nil))
;; End of basic block 36 -> ( 38)

;; Succ edge  38 [100.0%] 

(barrier 207 206 208)

;; Start of basic block ( 35) -> 37
;; Pred edge  35 [6.7%] 
(code_label 208 207 209 37 40 "" [1 uses])

(note 209 208 210 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(insn 210 209 211 37 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 196)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -72 [0xffffffffffffffb8]))) -1 (nil))

(insn 211 210 212 37 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 0 r0)
        (reg:SI 196)) -1 (nil))

(insn 212 211 213 37 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) -1 (nil))

(call_insn 213 212 214 37 include/linux/perf_event.h:1043 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 214 213 215 37 include/linux/perf_event.h:1056 (set (reg/v/f:SI 133 [ regs.463 ])
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -72 [0xffffffffffffffb8]))) -1 (nil))
;; End of basic block 37 -> ( 38)

;; Succ edge  38 [100.0%]  (fallthru)

;; Start of basic block ( 36 37) -> 38
;; Pred edge  36 [100.0%] 
;; Pred edge  37 [100.0%]  (fallthru)
(code_label 215 214 216 38 41 "" [1 uses])

(note 216 215 217 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 217 216 218 38 include/linux/perf_event.h:1058 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/v/f:SI 133 [ regs.463 ])) -1 (nil))

(insn 218 217 219 38 include/linux/perf_event.h:1058 (set (mem:DI (plus:SI (reg/f:SI 131 virtual-outgoing-args)
                (const_int 8 [0x8])) [0 S8 A64])
        (reg:DI 150 [ D.24563 ])) -1 (nil))

(insn 219 218 220 38 include/linux/perf_event.h:1058 (set (reg:SI 0 r0)
        (const_int 6 [0x6])) -1 (nil))

(insn 220 219 221 38 include/linux/perf_event.h:1058 (set (reg:DI 2 r2)
        (const_int 1 [0x1])) -1 (nil))

(call_insn 221 220 222 38 include/linux/perf_event.h:1058 (parallel [
            (call (mem:SI (symbol_ref:SI ("__perf_sw_event") [flags 0x41] <function_decl 0x11436b00 __perf_sw_event>) [0 S4 A32])
                (const_int 16 [0x10]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 38 -> ( 39)

;; Succ edge  39 [100.0%]  (fallthru)

;; Start of basic block ( 34 33 38) -> 39
;; Pred edge  34 [100.0%] 
;; Pred edge  33 [50.0%] 
;; Pred edge  38 [100.0%]  (fallthru)
(code_label 222 221 223 39 39 "" [2 uses])

(note 223 222 224 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(insn 224 223 225 39 arch/arm/mm/fault.c:334 (set (reg:SI 198)
        (const_int 196659 [0x30033])) -1 (nil))

(insn 225 224 226 39 arch/arm/mm/fault.c:334 (set (reg:SI 197)
        (and:SI (reg/v:SI 147 [ fault ])
            (reg:SI 198))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 147 [ fault ])
            (const_int 196659 [0x30033]))
        (nil)))

(insn 226 225 227 39 arch/arm/mm/fault.c:334 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 197)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 227 226 228 39 arch/arm/mm/fault.c:334 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 282)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 39 -> ( 50 40)

;; Succ edge  50 [100.0%] 
;; Succ edge  40 [0.0%]  (fallthru)

;; Start of basic block ( 39) -> 40
;; Pred edge  39 [0.0%]  (fallthru)
(note 228 227 229 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 229 228 230 40 arch/arm/mm/fault.c:337 (set (reg:SI 199)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 230 229 231 40 arch/arm/mm/fault.c:337 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 199)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 231 230 232 40 arch/arm/mm/fault.c:337 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 236)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7929 [0x1ef9])
        (nil)))
;; End of basic block 40 -> ( 41 42)

;; Succ edge  41 [20.7%]  (fallthru)
;; Succ edge  42 [79.3%] 

;; Start of basic block ( 40) -> 41
;; Pred edge  40 [20.7%]  (fallthru)
(note 232 231 233 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(call_insn 233 232 234 41 arch/arm/mm/fault.c:343 (parallel [
            (call (mem:SI (symbol_ref:SI ("pagefault_out_of_memory") [flags 0x41] <function_decl 0x10fb4d80 pagefault_out_of_memory>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (nil))

(jump_insn 234 233 235 41 arch/arm/mm/fault.c:344 (set (pc)
        (label_ref 282)) -1 (nil))
;; End of basic block 41 -> ( 50)

;; Succ edge  50 [100.0%] 

(barrier 235 234 236)

;; Start of basic block ( 40) -> 42
;; Pred edge  40 [79.3%] 
(code_label 236 235 237 42 43 "" [1 uses])

(note 237 236 238 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 238 237 239 42 arch/arm/mm/fault.c:351 (set (reg:SI 201)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 158 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 239 238 240 42 arch/arm/mm/fault.c:351 (set (reg:SI 200)
        (and:SI (reg:SI 201)
            (const_int 15 [0xf]))) -1 (nil))

(insn 240 239 241 42 arch/arm/mm/fault.c:351 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 200)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 241 240 242 42 arch/arm/mm/fault.c:351 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 275)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 42 -> ( 49 43)

;; Succ edge  49 [50.0%] 
;; Succ edge  43 [50.0%]  (fallthru)

;; Start of basic block ( 42) -> 43
;; Pred edge  42 [50.0%]  (fallthru)
(note 242 241 243 43 [bb 43] NOTE_INSN_BASIC_BLOCK)

(insn 243 242 244 43 arch/arm/mm/fault.c:354 (set (reg:SI 202)
        (and:SI (reg/v:SI 147 [ fault ])
            (const_int 2 [0x2]))) -1 (nil))

(insn 244 243 245 43 arch/arm/mm/fault.c:354 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 202)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 245 244 246 43 arch/arm/mm/fault.c:354 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 251)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 43 -> ( 44 45)

;; Succ edge  44 [39.0%]  (fallthru)
;; Succ edge  45 [61.0%] 

;; Start of basic block ( 43) -> 44
;; Pred edge  43 [39.0%]  (fallthru)
(note 246 245 247 44 [bb 44] NOTE_INSN_BASIC_BLOCK)

(insn 247 246 248 44 arch/arm/mm/fault.c:360 (set (reg/v:SI 145 [ code ])
        (const_int 196610 [0x30002])) -1 (nil))

(insn 248 247 249 44 arch/arm/mm/fault.c:359 (set (reg/v:SI 146 [ sig ])
        (const_int 7 [0x7])) -1 (nil))

(jump_insn 249 248 250 44 arch/arm/mm/fault.c:359 (set (pc)
        (label_ref 264)) -1 (nil))
;; End of basic block 44 -> ( 48)

;; Succ edge  48 [100.0%] 

(barrier 250 249 251)

;; Start of basic block ( 43) -> 45
;; Pred edge  43 [61.0%] 
(code_label 251 250 252 45 44 "" [1 uses])

(note 252 251 253 45 [bb 45] NOTE_INSN_BASIC_BLOCK)

(insn 253 252 254 45 arch/arm/mm/fault.c:367 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 147 [ fault ])
            (const_int 131072 [0x20000]))) -1 (nil))

(jump_insn 254 253 255 45 arch/arm/mm/fault.c:367 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 260)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
        (nil)))
;; End of basic block 45 -> ( 47 46)

;; Succ edge  47 [28.0%] 
;; Succ edge  46 [72.0%]  (fallthru)

;; Start of basic block ( 45) -> 46
;; Pred edge  45 [72.0%]  (fallthru)
(note 255 254 256 46 [bb 46] NOTE_INSN_BASIC_BLOCK)

(insn 256 255 257 46 arch/arm/mm/fault.c:367 discrim 2 (set (reg/v:SI 145 [ code ])
        (const_int 196609 [0x30001])) -1 (nil))

(insn 257 256 258 46 arch/arm/mm/fault.c:366 (set (reg/v:SI 146 [ sig ])
        (const_int 11 [0xb])) -1 (nil))

(jump_insn 258 257 259 46 arch/arm/mm/fault.c:366 (set (pc)
        (label_ref 264)) -1 (nil))
;; End of basic block 46 -> ( 48)

;; Succ edge  48 [100.0%] 

(barrier 259 258 260)

;; Start of basic block ( 45) -> 47
;; Pred edge  45 [28.0%] 
(code_label 260 259 261 47 46 "" [1 uses])

(note 261 260 262 47 [bb 47] NOTE_INSN_BASIC_BLOCK)

(insn 262 261 263 47 arch/arm/mm/fault.c:367 discrim 1 (set (reg/v:SI 145 [ code ])
        (const_int 196610 [0x30002])) -1 (nil))

(insn 263 262 264 47 arch/arm/mm/fault.c:366 (set (reg/v:SI 146 [ sig ])
        (const_int 11 [0xb])) -1 (nil))
;; End of basic block 47 -> ( 48)

;; Succ edge  48 [100.0%]  (fallthru)

;; Start of basic block ( 44 46 47) -> 48
;; Pred edge  44 [100.0%] 
;; Pred edge  46 [100.0%] 
;; Pred edge  47 [100.0%]  (fallthru)
(code_label 264 263 265 48 45 "" [2 uses])

(note 265 264 266 48 [bb 48] NOTE_INSN_BASIC_BLOCK)

(insn 266 265 267 48 arch/arm/mm/fault.c:371 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/v:SI 145 [ code ])) -1 (nil))

(insn 267 266 268 48 arch/arm/mm/fault.c:371 (set (mem:SI (plus:SI (reg/f:SI 131 virtual-outgoing-args)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v/f:SI 158 [ regs ])) -1 (nil))

(insn 268 267 269 48 arch/arm/mm/fault.c:371 (set (reg:SI 0 r0)
        (reg/v/f:SI 149 [ tsk ])) -1 (nil))

(insn 269 268 270 48 arch/arm/mm/fault.c:371 (set (reg:SI 1 r1)
        (reg/v:SI 156 [ addr ])) -1 (nil))

(insn 270 269 271 48 arch/arm/mm/fault.c:371 (set (reg:SI 2 r2)
        (reg/v:SI 157 [ fsr ])) -1 (nil))

(insn 271 270 272 48 arch/arm/mm/fault.c:371 (set (reg:SI 3 r3)
        (reg/v:SI 146 [ sig ])) -1 (nil))

(call_insn 272 271 273 48 arch/arm/mm/fault.c:371 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_user_fault") [flags 0x3] <function_decl 0x11459d80 __do_user_fault>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn 273 272 274 48 arch/arm/mm/fault.c:372 (set (pc)
        (label_ref 282)) -1 (nil))
;; End of basic block 48 -> ( 50)

;; Succ edge  50 [100.0%] 

(barrier 274 273 275)

;; Start of basic block ( 5 8 11 42) -> 49
;; Pred edge  5 [50.0%] 
;; Pred edge  8 [15.0%] 
;; Pred edge  11 [15.0%] 
;; Pred edge  42 [50.0%] 
(code_label 275 274 276 49 23 ("no_context") [4 uses])

(note 276 275 277 49 [bb 49] NOTE_INSN_BASIC_BLOCK)

(insn 277 276 278 49 arch/arm/mm/fault.c:375 (set (reg:SI 0 r0)
        (reg/v/f:SI 148 [ mm ])) -1 (nil))

(insn 278 277 279 49 arch/arm/mm/fault.c:375 (set (reg:SI 1 r1)
        (reg/v:SI 156 [ addr ])) -1 (nil))

(insn 279 278 280 49 arch/arm/mm/fault.c:375 (set (reg:SI 2 r2)
        (reg/v:SI 157 [ fsr ])) -1 (nil))

(insn 280 279 281 49 arch/arm/mm/fault.c:375 (set (reg:SI 3 r3)
        (reg/v/f:SI 158 [ regs ])) -1 (nil))

(call_insn 281 280 282 49 arch/arm/mm/fault.c:375 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_kernel_fault") [flags 0x3] <function_decl 0x11459c80 __do_kernel_fault>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 49 -> ( 50)

;; Succ edge  50 [100.0%]  (fallthru)

;; Start of basic block ( 49 39 41 48) -> 50
;; Pred edge  49 [100.0%]  (fallthru)
;; Pred edge  39 [100.0%] 
;; Pred edge  41 [100.0%] 
;; Pred edge  48 [100.0%] 
(code_label 282 281 283 50 42 "" [3 uses])

(note 283 282 284 50 [bb 50] NOTE_INSN_BASIC_BLOCK)

(insn 284 283 285 50 arch/arm/mm/fault.c:377 (set (reg:SI 155 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 285 284 286 50 arch/arm/mm/fault.c:377 (set (pc)
        (label_ref 287)) -1 (nil))
;; End of basic block 50 -> ( 52)

;; Succ edge  52 [100.0%] 

(barrier 286 285 295)

;; Start of basic block () -> 51
(note 295 286 289 51 [bb 51] NOTE_INSN_BASIC_BLOCK)

(insn 289 295 290 51 arch/arm/mm/fault.c:377 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 290 289 291 51 arch/arm/mm/fault.c:377 (clobber (reg:SI 155 [ <result> ])) -1 (nil))

(jump_insn 291 290 292 51 arch/arm/mm/fault.c:377 (set (pc)
        (label_ref 293)) -1 (nil))
;; End of basic block 51 -> ( 53)

;; Succ edge  53 [100.0%] 

(barrier 292 291 287)

;; Start of basic block ( 50) -> 52
;; Pred edge  50 [100.0%] 
(code_label 287 292 296 52 21 "" [1 uses])

(note 296 287 288 52 [bb 52] NOTE_INSN_BASIC_BLOCK)

(insn 288 296 293 52 arch/arm/mm/fault.c:377 (set (reg/i:SI 0 r0)
        (reg:SI 155 [ <result> ])) -1 (nil))
;; End of basic block 52 -> ( 53)

;; Succ edge  53 [100.0%]  (fallthru)

;; Start of basic block ( 51 52) -> 53
;; Pred edge  51 [100.0%] 
;; Pred edge  52 [100.0%]  (fallthru)
(code_label 293 288 297 53 47 "" [1 uses])

(note 297 293 294 53 [bb 53] NOTE_INSN_BASIC_BLOCK)

(insn 294 297 0 53 arch/arm/mm/fault.c:377 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 53 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function do_bad_area (do_bad_area)[0:1290]


;; Generating RTL for gimple basic block 2

;; sp.83 = sp;

(insn 8 7 0 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 133 [ sp.83 ])
        (reg/v:SI 13 sp [ sp ])) -1 (nil))

;; tsk = ((struct thread_info *) (sp.83 & 4294959104))->task;

(insn 9 8 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 140)
        (and:SI (reg:SI 133 [ sp.83 ])
            (const_int -8129 [0xffffffffffffe03f]))) -1 (nil))

(insn 10 9 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 139)
        (and:SI (reg:SI 140)
            (const_int -64 [0xffffffffffffffc0]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 133 [ sp.83 ])
            (const_int -8192 [0xffffffffffffe000]))
        (nil)))

(insn 11 10 0 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/v/f:SI 135 [ tsk ])
        (mem/s/f/j:SI (plus:SI (reg:SI 139)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) -1 (nil))

;; mm = tsk->active_mm;

(insn 12 11 0 arch/arm/mm/fault.c:198 (set (reg/v/f:SI 134 [ mm ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 135 [ tsk ])
                (const_int 496 [0x1f0])) [0 <variable>.active_mm+0 S4 A64])) -1 (nil))

;; if (regs->uregs[16] & 15 == 0)

(insn 13 12 14 arch/arm/mm/fault.c:204 (set (reg:SI 142)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 138 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 14 13 15 arch/arm/mm/fault.c:204 (set (reg:SI 141)
        (and:SI (reg:SI 142)
            (const_int 15 [0xf]))) -1 (nil))

(insn 15 14 16 arch/arm/mm/fault.c:204 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 141)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 16 15 0 arch/arm/mm/fault.c:204 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))

;; Generating RTL for gimple basic block 3

;; __do_user_fault (tsk, addr, fsr, 11, 196609, regs); [tail call]

(insn 18 17 19 arch/arm/mm/fault.c:205 (set (reg:SI 143)
        (const_int 196609 [0x30001])) -1 (nil))

(insn 19 18 20 arch/arm/mm/fault.c:205 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg:SI 143)) -1 (nil))

(insn 20 19 21 arch/arm/mm/fault.c:205 (set (mem:SI (plus:SI (reg/f:SI 131 virtual-outgoing-args)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v/f:SI 138 [ regs ])) -1 (nil))

(insn 21 20 22 arch/arm/mm/fault.c:205 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ tsk ])) -1 (nil))

(insn 22 21 23 arch/arm/mm/fault.c:205 (set (reg:SI 1 r1)
        (reg/v:SI 136 [ addr ])) -1 (nil))

(insn 23 22 24 arch/arm/mm/fault.c:205 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ fsr ])) -1 (nil))

(insn 24 23 25 arch/arm/mm/fault.c:205 (set (reg:SI 3 r3)
        (const_int 11 [0xb])) -1 (nil))

(call_insn 25 24 0 arch/arm/mm/fault.c:205 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_user_fault") [flags 0x3] <function_decl 0x11459d80 __do_user_fault>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 28 27 29 51 "" [0 uses])

(note 29 28 0 NOTE_INSN_BASIC_BLOCK)

;; __do_kernel_fault (mm, addr, fsr, regs); [tail call]

(insn 30 29 31 4 arch/arm/mm/fault.c:207 (set (reg:SI 0 r0)
        (reg/v/f:SI 134 [ mm ])) -1 (nil))

(insn 31 30 32 4 arch/arm/mm/fault.c:207 (set (reg:SI 1 r1)
        (reg/v:SI 136 [ addr ])) -1 (nil))

(insn 32 31 33 4 arch/arm/mm/fault.c:207 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ fsr ])) -1 (nil))

(insn 33 32 34 4 arch/arm/mm/fault.c:207 (set (reg:SI 3 r3)
        (reg/v/f:SI 138 [ regs ])) -1 (nil))

(call_insn/j 34 33 35 4 arch/arm/mm/fault.c:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_kernel_fault") [flags 0x3] <function_decl 0x11459c80 __do_kernel_fault>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(barrier 35 34 0)

;; Generating RTL for gimple basic block 5

;; 

(code_label 36 35 37 52 "" [0 uses])

(note 37 36 0 NOTE_INSN_BASIC_BLOCK)


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 arch/arm/mm/fault.c:196 (set (reg/v:SI 136 [ addr ])
        (reg:SI 0 r0 [ addr ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:196 (set (reg/v:SI 137 [ fsr ])
        (reg:SI 1 r1 [ fsr ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:196 (set (reg/v/f:SI 138 [ regs ])
        (reg:SI 2 r2 [ regs ])) -1 (nil))

(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 7 5 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 133 [ sp.83 ])
        (reg/v:SI 13 sp [ sp ])) -1 (nil))

(insn 9 8 10 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 140)
        (and:SI (reg:SI 133 [ sp.83 ])
            (const_int -8129 [0xffffffffffffe03f]))) -1 (nil))

(insn 10 9 11 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 139)
        (and:SI (reg:SI 140)
            (const_int -64 [0xffffffffffffffc0]))) -1 (expr_list:REG_EQUAL (and:SI (reg:SI 133 [ sp.83 ])
            (const_int -8192 [0xffffffffffffe000]))
        (nil)))

(insn 11 10 12 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/v/f:SI 135 [ tsk ])
        (mem/s/f/j:SI (plus:SI (reg:SI 139)
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) -1 (nil))

(insn 12 11 13 3 arch/arm/mm/fault.c:198 (set (reg/v/f:SI 134 [ mm ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 135 [ tsk ])
                (const_int 496 [0x1f0])) [0 <variable>.active_mm+0 S4 A64])) -1 (nil))

(insn 13 12 14 3 arch/arm/mm/fault.c:204 (set (reg:SI 142)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 138 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 14 13 15 3 arch/arm/mm/fault.c:204 (set (reg:SI 141)
        (and:SI (reg:SI 142)
            (const_int 15 [0xf]))) -1 (nil))

(insn 15 14 16 3 arch/arm/mm/fault.c:204 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 141)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 16 15 17 3 arch/arm/mm/fault.c:204 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [39.0%]  (fallthru)
;; Succ edge  5 [61.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [39.0%]  (fallthru)
(note 17 16 18 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 4 arch/arm/mm/fault.c:205 (set (reg:SI 143)
        (const_int 196609 [0x30001])) -1 (nil))

(insn 19 18 20 4 arch/arm/mm/fault.c:205 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg:SI 143)) -1 (nil))

(insn 20 19 21 4 arch/arm/mm/fault.c:205 (set (mem:SI (plus:SI (reg/f:SI 131 virtual-outgoing-args)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v/f:SI 138 [ regs ])) -1 (nil))

(insn 21 20 22 4 arch/arm/mm/fault.c:205 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ tsk ])) -1 (nil))

(insn 22 21 23 4 arch/arm/mm/fault.c:205 (set (reg:SI 1 r1)
        (reg/v:SI 136 [ addr ])) -1 (nil))

(insn 23 22 24 4 arch/arm/mm/fault.c:205 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ fsr ])) -1 (nil))

(insn 24 23 25 4 arch/arm/mm/fault.c:205 (set (reg:SI 3 r3)
        (const_int 11 [0xb])) -1 (nil))

(call_insn 25 24 26 4 arch/arm/mm/fault.c:205 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_user_fault") [flags 0x3] <function_decl 0x11459d80 __do_user_fault>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn 26 25 27 4 arch/arm/mm/fault.c:205 (set (pc)
        (label_ref 36)) -1 (nil))
;; End of basic block 4 -> ( 6)

;; Succ edge  6 [100.0%] 

(barrier 27 26 28)

;; Start of basic block ( 3) -> 5
;; Pred edge  3 [61.0%] 
(code_label 28 27 29 5 51 "" [1 uses])

(note 29 28 30 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 30 29 31 5 arch/arm/mm/fault.c:207 (set (reg:SI 0 r0)
        (reg/v/f:SI 134 [ mm ])) -1 (nil))

(insn 31 30 32 5 arch/arm/mm/fault.c:207 (set (reg:SI 1 r1)
        (reg/v:SI 136 [ addr ])) -1 (nil))

(insn 32 31 33 5 arch/arm/mm/fault.c:207 (set (reg:SI 2 r2)
        (reg/v:SI 137 [ fsr ])) -1 (nil))

(insn 33 32 34 5 arch/arm/mm/fault.c:207 (set (reg:SI 3 r3)
        (reg/v/f:SI 138 [ regs ])) -1 (nil))

(call_insn/j 34 33 35 5 arch/arm/mm/fault.c:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_kernel_fault") [flags 0x3] <function_decl 0x11459c80 __do_kernel_fault>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 5 -> ( 1)

;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 35 34 36)

;; Start of basic block ( 4) -> 6
;; Pred edge  4 [100.0%] 
(code_label 36 35 37 6 52 "" [1 uses])

(note 37 36 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 6 -> ( 7)

;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; Pred edge  6 [100.0%]  (fallthru)
(note 42 37 39 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(jump_insn 39 42 40 7 arch/arm/mm/fault.c:208 (set (pc)
        (label_ref 41)) -1 (nil))
;; End of basic block 7 -> ( 9)

;; Succ edge  9 [100.0%] 

(barrier 40 39 38)

;; Start of basic block () -> 8
(code_label 38 40 43 8 50 "" [0 uses])

(note 43 38 41 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 9)

;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 7 8) -> 9
;; Pred edge  7 [100.0%] 
;; Pred edge  8 [100.0%]  (fallthru)
(code_label 41 43 44 9 53 "" [1 uses])

(note 44 41 0 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 9 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function do_translation_fault (do_translation_fault)[0:1294]


;; Generating RTL for gimple basic block 2

;; if (addr <= 3204448255)

(insn 8 7 9 arch/arm/mm/fault.c:413 (set (reg:SI 142)
        (const_int -1090519041 [0xffffffffbeffffff])) -1 (nil))

(insn 9 8 10 arch/arm/mm/fault.c:413 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 139 [ addr ])
            (reg:SI 142))) -1 (nil))

(jump_insn 10 9 0 arch/arm/mm/fault.c:413 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7929 [0x1ef9])
        (nil)))

;; Generating RTL for gimple basic block 3

;; D.24606 = do_page_fault (addr, fsr, regs); [tail call]

(insn 12 11 13 3 arch/arm/mm/fault.c:414 (set (reg:SI 0 r0)
        (reg/v:SI 139 [ addr ])) -1 (nil))

(insn 13 12 14 3 arch/arm/mm/fault.c:414 (set (reg:SI 1 r1)
        (reg/v:SI 140 [ fsr ])) -1 (nil))

(insn 14 13 15 3 arch/arm/mm/fault.c:414 (set (reg:SI 2 r2)
        (reg/v/f:SI 141 [ regs ])) -1 (nil))

(call_insn/j 15 14 16 3 arch/arm/mm/fault.c:414 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_page_fault") [flags 0x3] <function_decl 0x1147d180 do_page_fault>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(barrier 16 15 0)

;; Generating RTL for gimple basic block 4

;; 

(code_label 18 16 19 57 "" [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; if (regs->uregs[16] & 15 == 0)

(insn 20 19 21 arch/arm/mm/fault.c:416 (set (reg:SI 144)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 21 20 22 arch/arm/mm/fault.c:416 (set (reg:SI 143)
        (and:SI (reg:SI 144)
            (const_int 15 [0xf]))) -1 (nil))

(insn 22 21 23 arch/arm/mm/fault.c:416 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 143)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 23 22 0 arch/arm/mm/fault.c:416 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))

;; Generating RTL for gimple basic block 5

;; __asm__("mrc	p15, 0, %0, c2, c0, 0" : "=r" pg : "cc");

(insn 25 24 0 arch/arm/mm/fault.c:424 (parallel [
            (set (reg/v:SI 133 [ pg ])
                (asm_operands:SI ("mrc	p15, 0, %0, c2, c0, 0") ("=r") 0 []
                     [] 8342805))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

;; D.24612 = (addr >> 21) * 8;

(insn 26 25 27 arch/arm/mm/fault.c:424 (set (reg:SI 145)
        (lshiftrt:SI (reg/v:SI 139 [ addr ])
            (const_int 21 [0x15]))) -1 (nil))

(insn 27 26 0 arch/arm/mm/fault.c:424 (set (reg:SI 136 [ D.24612 ])
        (ashift:SI (reg:SI 145)
            (const_int 3 [0x3]))) -1 (nil))

;; pmd_k = (pmd_t *) (init_mm.pgd + D.24612);

(insn 28 27 29 arch/arm/mm/fault.c:441 (set (reg/f:SI 146)
        (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x111538a0 init_mm>)) -1 (nil))

(insn 29 28 30 arch/arm/mm/fault.c:441 (set (reg:SI 147)
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 146)
                (const_int 36 [0x24])) [0 init_mm.pgd+0 S4 A32])) -1 (nil))

(insn 30 29 0 arch/arm/mm/fault.c:441 (set (reg/v/f:SI 134 [ pmd_k ])
        (plus:SI (reg:SI 147)
            (reg:SI 136 [ D.24612 ]))) -1 (nil))

;; if (*(pmd_k + (addr >> 20 & 1) * 4) == 0)

(insn 31 30 32 arch/arm/mm/fault.c:451 (set (reg:SI 148)
        (lshiftrt:SI (reg/v:SI 139 [ addr ])
            (const_int 20 [0x14]))) -1 (nil))

(insn 32 31 33 arch/arm/mm/fault.c:451 (set (reg:SI 149)
        (and:SI (reg:SI 148)
            (const_int 1 [0x1]))) -1 (nil))

(insn 33 32 34 arch/arm/mm/fault.c:451 (set (reg:SI 150)
        (mem:SI (plus:SI (mult:SI (reg:SI 149)
                    (const_int 4 [0x4]))
                (reg/v/f:SI 134 [ pmd_k ])) [0 S4 A32])) -1 (nil))

(insn 34 33 35 arch/arm/mm/fault.c:451 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 150)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 35 34 0 arch/arm/mm/fault.c:451 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))

;; Generating RTL for gimple basic block 6

;; pmd = (pmd_t *) ((long unsigned int[2] *) (void *) ((pg & 4294950912) + 3221225472) + D.24612);

(insn 37 36 38 arch/arm/mm/fault.c:440 (set (reg:SI 152)
        (and:SI (reg/v:SI 133 [ pg ])
            (const_int -16321 [0xffffffffffffc03f]))) -1 (nil))

(insn 38 37 39 arch/arm/mm/fault.c:440 (set (reg:SI 151)
        (and:SI (reg:SI 152)
            (const_int -64 [0xffffffffffffffc0]))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 133 [ pg ])
            (const_int -16384 [0xffffffffffffc000]))
        (nil)))

(insn 39 38 40 arch/arm/mm/fault.c:440 (set (reg:SI 153)
        (plus:SI (reg:SI 151)
            (const_int -1073741824 [0xffffffffc0000000]))) -1 (nil))

(insn 40 39 0 arch/arm/mm/fault.c:440 (set (reg/v/f:SI 135 [ pmd ])
        (plus:SI (reg:SI 153)
            (reg:SI 136 [ D.24612 ]))) -1 (nil))

;; *pmd = *pmd_k;

(insn 41 40 42 arch/arm/mm/fault.c:455 (set (reg:SI 154)
        (mem:SI (reg/v/f:SI 134 [ pmd_k ]) [0 S4 A32])) -1 (nil))

(insn 42 41 0 arch/arm/mm/fault.c:455 (set (mem:SI (reg/v/f:SI 135 [ pmd ]) [0 S4 A32])
        (reg:SI 154)) -1 (nil))

;; *(pmd + 4) = *(pmd_k + 4);

(insn 43 42 44 arch/arm/mm/fault.c:455 (set (reg:SI 155)
        (mem:SI (plus:SI (reg/v/f:SI 134 [ pmd_k ])
                (const_int 4 [0x4])) [0 S4 A32])) -1 (nil))

(insn 44 43 0 arch/arm/mm/fault.c:455 (set (mem:SI (plus:SI (reg/v/f:SI 135 [ pmd ])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 155)) -1 (nil))

;; __asm__ __volatile__("mcr	p15, 0, %0, c7, c10, 1	@ flush_pmd" : "r" pmd : "cc");

(insn 45 44 0 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/tlbflush.h:479 (parallel [
            (asm_operands/v ("mcr	p15, 0, %0, c7, c10, 1	@ flush_pmd") ("") 0 [
                    (reg/v/f:SI 135 [ pmd ])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 8282573)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

;; __asm__ __volatile__("dsb" : "memory");

(insn 46 45 0 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/tlbflush.h:487 (parallel [
            (asm_operands/v ("dsb") ("") 0 []
                 [] 8283597)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

;; D.24606 = 0;

(insn 47 46 0 arch/arm/mm/fault.c:456 (set (reg:SI 137 [ D.24606 ])
        (const_int 0 [0x0])) -1 (nil))

;; Generating RTL for gimple basic block 7

;; bad_area:

(code_label 50 49 51 58 ("bad_area") [0 uses])

(note 51 50 0 NOTE_INSN_BASIC_BLOCK)

;; do_bad_area (addr, fsr, regs);

(insn 52 51 53 arch/arm/mm/fault.c:459 (set (reg:SI 0 r0)
        (reg/v:SI 139 [ addr ])) -1 (nil))

(insn 53 52 54 arch/arm/mm/fault.c:459 (set (reg:SI 1 r1)
        (reg/v:SI 140 [ fsr ])) -1 (nil))

(insn 54 53 55 arch/arm/mm/fault.c:459 (set (reg:SI 2 r2)
        (reg/v/f:SI 141 [ regs ])) -1 (nil))

(call_insn 55 54 0 arch/arm/mm/fault.c:459 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_bad_area") [flags 0x3] <function_decl 0x11459880 do_bad_area>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

;; D.24606 = 0;

(insn 56 55 0 arch/arm/mm/fault.c:460 (set (reg:SI 137 [ D.24606 ])
        (const_int 0 [0x0])) -1 (nil))

;; Generating RTL for gimple basic block 8

;; 

(code_label 57 56 58 59 "" [0 uses])

(note 58 57 0 NOTE_INSN_BASIC_BLOCK)

;; return D.24606;

(insn 59 58 60 arch/arm/mm/fault.c:461 (set (reg:SI 138 [ <result> ])
        (reg:SI 137 [ D.24606 ])) -1 (nil))

(jump_insn 60 59 61 arch/arm/mm/fault.c:461 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 61 60 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 arch/arm/mm/fault.c:407 (set (reg/v:SI 139 [ addr ])
        (reg:SI 0 r0 [ addr ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:407 (set (reg/v:SI 140 [ fsr ])
        (reg:SI 1 r1 [ fsr ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:407 (set (reg/v/f:SI 141 [ regs ])
        (reg:SI 2 r2 [ regs ])) -1 (nil))

(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 7 5 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 arch/arm/mm/fault.c:413 (set (reg:SI 142)
        (const_int -1090519041 [0xffffffffbeffffff])) -1 (nil))

(insn 9 8 10 3 arch/arm/mm/fault.c:413 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 139 [ addr ])
            (reg:SI 142))) -1 (nil))

(jump_insn 10 9 11 3 arch/arm/mm/fault.c:413 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 7929 [0x1ef9])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [20.7%]  (fallthru)
;; Succ edge  5 [79.3%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [20.7%]  (fallthru)
(note 11 10 12 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 4 arch/arm/mm/fault.c:414 (set (reg:SI 0 r0)
        (reg/v:SI 139 [ addr ])) -1 (nil))

(insn 13 12 14 4 arch/arm/mm/fault.c:414 (set (reg:SI 1 r1)
        (reg/v:SI 140 [ fsr ])) -1 (nil))

(insn 14 13 15 4 arch/arm/mm/fault.c:414 (set (reg:SI 2 r2)
        (reg/v/f:SI 141 [ regs ])) -1 (nil))

(call_insn/j 15 14 16 4 arch/arm/mm/fault.c:414 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_page_fault") [flags 0x3] <function_decl 0x1147d180 do_page_fault>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 4 -> ( 1)

;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 16 15 18)

;; Start of basic block ( 3) -> 5
;; Pred edge  3 [79.3%] 
(code_label 18 16 19 5 57 "" [1 uses])

(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 5 arch/arm/mm/fault.c:416 (set (reg:SI 144)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ regs ])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) -1 (nil))

(insn 21 20 22 5 arch/arm/mm/fault.c:416 (set (reg:SI 143)
        (and:SI (reg:SI 144)
            (const_int 15 [0xf]))) -1 (nil))

(insn 22 21 23 5 arch/arm/mm/fault.c:416 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 143)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 23 22 24 5 arch/arm/mm/fault.c:416 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 5 -> ( 8 6)

;; Succ edge  8 [29.0%] 
;; Succ edge  6 [71.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [71.0%]  (fallthru)
(note 24 23 25 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 6 arch/arm/mm/fault.c:424 (parallel [
            (set (reg/v:SI 133 [ pg ])
                (asm_operands:SI ("mrc	p15, 0, %0, c2, c0, 0") ("=r") 0 []
                     [] 8342805))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 26 25 27 6 arch/arm/mm/fault.c:424 (set (reg:SI 145)
        (lshiftrt:SI (reg/v:SI 139 [ addr ])
            (const_int 21 [0x15]))) -1 (nil))

(insn 27 26 28 6 arch/arm/mm/fault.c:424 (set (reg:SI 136 [ D.24612 ])
        (ashift:SI (reg:SI 145)
            (const_int 3 [0x3]))) -1 (nil))

(insn 28 27 29 6 arch/arm/mm/fault.c:441 (set (reg/f:SI 146)
        (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x111538a0 init_mm>)) -1 (nil))

(insn 29 28 30 6 arch/arm/mm/fault.c:441 (set (reg:SI 147)
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 146)
                (const_int 36 [0x24])) [0 init_mm.pgd+0 S4 A32])) -1 (nil))

(insn 30 29 31 6 arch/arm/mm/fault.c:441 (set (reg/v/f:SI 134 [ pmd_k ])
        (plus:SI (reg:SI 147)
            (reg:SI 136 [ D.24612 ]))) -1 (nil))

(insn 31 30 32 6 arch/arm/mm/fault.c:451 (set (reg:SI 148)
        (lshiftrt:SI (reg/v:SI 139 [ addr ])
            (const_int 20 [0x14]))) -1 (nil))

(insn 32 31 33 6 arch/arm/mm/fault.c:451 (set (reg:SI 149)
        (and:SI (reg:SI 148)
            (const_int 1 [0x1]))) -1 (nil))

(insn 33 32 34 6 arch/arm/mm/fault.c:451 (set (reg:SI 150)
        (mem:SI (plus:SI (mult:SI (reg:SI 149)
                    (const_int 4 [0x4]))
                (reg/v/f:SI 134 [ pmd_k ])) [0 S4 A32])) -1 (nil))

(insn 34 33 35 6 arch/arm/mm/fault.c:451 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 150)
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 35 34 36 6 arch/arm/mm/fault.c:451 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 6 -> ( 8 7)

;; Succ edge  8 [61.0%] 
;; Succ edge  7 [39.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; Pred edge  6 [39.0%]  (fallthru)
(note 36 35 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 37 36 38 7 arch/arm/mm/fault.c:440 (set (reg:SI 152)
        (and:SI (reg/v:SI 133 [ pg ])
            (const_int -16321 [0xffffffffffffc03f]))) -1 (nil))

(insn 38 37 39 7 arch/arm/mm/fault.c:440 (set (reg:SI 151)
        (and:SI (reg:SI 152)
            (const_int -64 [0xffffffffffffffc0]))) -1 (expr_list:REG_EQUAL (and:SI (reg/v:SI 133 [ pg ])
            (const_int -16384 [0xffffffffffffc000]))
        (nil)))

(insn 39 38 40 7 arch/arm/mm/fault.c:440 (set (reg:SI 153)
        (plus:SI (reg:SI 151)
            (const_int -1073741824 [0xffffffffc0000000]))) -1 (nil))

(insn 40 39 41 7 arch/arm/mm/fault.c:440 (set (reg/v/f:SI 135 [ pmd ])
        (plus:SI (reg:SI 153)
            (reg:SI 136 [ D.24612 ]))) -1 (nil))

(insn 41 40 42 7 arch/arm/mm/fault.c:455 (set (reg:SI 154)
        (mem:SI (reg/v/f:SI 134 [ pmd_k ]) [0 S4 A32])) -1 (nil))

(insn 42 41 43 7 arch/arm/mm/fault.c:455 (set (mem:SI (reg/v/f:SI 135 [ pmd ]) [0 S4 A32])
        (reg:SI 154)) -1 (nil))

(insn 43 42 44 7 arch/arm/mm/fault.c:455 (set (reg:SI 155)
        (mem:SI (plus:SI (reg/v/f:SI 134 [ pmd_k ])
                (const_int 4 [0x4])) [0 S4 A32])) -1 (nil))

(insn 44 43 45 7 arch/arm/mm/fault.c:455 (set (mem:SI (plus:SI (reg/v/f:SI 135 [ pmd ])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 155)) -1 (nil))

(insn 45 44 46 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/tlbflush.h:479 (parallel [
            (asm_operands/v ("mcr	p15, 0, %0, c7, c10, 1	@ flush_pmd") ("") 0 [
                    (reg/v/f:SI 135 [ pmd ])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 8282573)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 46 45 47 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/tlbflush.h:487 (parallel [
            (asm_operands/v ("dsb") ("") 0 []
                 [] 8283597)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 47 46 48 7 arch/arm/mm/fault.c:456 (set (reg:SI 137 [ D.24606 ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 48 47 49 7 arch/arm/mm/fault.c:456 (set (pc)
        (label_ref 57)) -1 (nil))
;; End of basic block 7 -> ( 9)

;; Succ edge  9 [100.0%] 

(barrier 49 48 50)

;; Start of basic block ( 5 6) -> 8
;; Pred edge  5 [29.0%] 
;; Pred edge  6 [61.0%] 
(code_label 50 49 51 8 58 ("bad_area") [2 uses])

(note 51 50 52 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 8 arch/arm/mm/fault.c:459 (set (reg:SI 0 r0)
        (reg/v:SI 139 [ addr ])) -1 (nil))

(insn 53 52 54 8 arch/arm/mm/fault.c:459 (set (reg:SI 1 r1)
        (reg/v:SI 140 [ fsr ])) -1 (nil))

(insn 54 53 55 8 arch/arm/mm/fault.c:459 (set (reg:SI 2 r2)
        (reg/v/f:SI 141 [ regs ])) -1 (nil))

(call_insn 55 54 56 8 arch/arm/mm/fault.c:459 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_bad_area") [flags 0x3] <function_decl 0x11459880 do_bad_area>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 56 55 57 8 arch/arm/mm/fault.c:460 (set (reg:SI 137 [ D.24606 ])
        (const_int 0 [0x0])) -1 (nil))
;; End of basic block 8 -> ( 9)

;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 7) -> 9
;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 57 56 58 9 59 "" [1 uses])

(note 58 57 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 59 58 60 9 arch/arm/mm/fault.c:461 (set (reg:SI 138 [ <result> ])
        (reg:SI 137 [ D.24606 ])) -1 (nil))

(jump_insn 60 59 61 9 arch/arm/mm/fault.c:461 (set (pc)
        (label_ref 62)) -1 (nil))
;; End of basic block 9 -> ( 11)

;; Succ edge  11 [100.0%] 

(barrier 61 60 70)

;; Start of basic block () -> 10
(note 70 61 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 64 70 65 10 arch/arm/mm/fault.c:461 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 65 64 66 10 arch/arm/mm/fault.c:461 (clobber (reg:SI 138 [ <result> ])) -1 (nil))

(jump_insn 66 65 67 10 arch/arm/mm/fault.c:461 (set (pc)
        (label_ref 68)) -1 (nil))
;; End of basic block 10 -> ( 12)

;; Succ edge  12 [100.0%] 

(barrier 67 66 62)

;; Start of basic block ( 9) -> 11
;; Pred edge  9 [100.0%] 
(code_label 62 67 71 11 56 "" [1 uses])

(note 71 62 63 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 63 71 68 11 arch/arm/mm/fault.c:461 (set (reg/i:SI 0 r0)
        (reg:SI 138 [ <result> ])) -1 (nil))
;; End of basic block 11 -> ( 12)

;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 10 11) -> 12
;; Pred edge  10 [100.0%] 
;; Pred edge  11 [100.0%]  (fallthru)
(code_label 68 63 72 12 60 "" [1 uses])

(note 72 68 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 69 72 0 12 arch/arm/mm/fault.c:461 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 12 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function do_sect_fault (do_sect_fault)[0:1295]


;; Generating RTL for gimple basic block 2

;; do_bad_area (addr, fsr, regs);

(insn 8 7 9 arch/arm/mm/fault.c:478 (set (reg:SI 0 r0)
        (reg/v:SI 134 [ addr ])) -1 (nil))

(insn 9 8 10 arch/arm/mm/fault.c:478 (set (reg:SI 1 r1)
        (reg/v:SI 135 [ fsr ])) -1 (nil))

(insn 10 9 11 arch/arm/mm/fault.c:478 (set (reg:SI 2 r2)
        (reg/v/f:SI 136 [ regs ])) -1 (nil))

(call_insn 11 10 0 arch/arm/mm/fault.c:478 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_bad_area") [flags 0x3] <function_decl 0x11459880 do_bad_area>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

;; return 0;

(insn 12 11 13 arch/arm/mm/fault.c:480 (set (reg:SI 133 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 13 12 14 arch/arm/mm/fault.c:480 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 14 13 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 arch/arm/mm/fault.c:477 (set (reg/v:SI 134 [ addr ])
        (reg:SI 0 r0 [ addr ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:477 (set (reg/v:SI 135 [ fsr ])
        (reg:SI 1 r1 [ fsr ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:477 (set (reg/v/f:SI 136 [ regs ])
        (reg:SI 2 r2 [ regs ])) -1 (nil))

(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 7 5 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 arch/arm/mm/fault.c:478 (set (reg:SI 0 r0)
        (reg/v:SI 134 [ addr ])) -1 (nil))

(insn 9 8 10 3 arch/arm/mm/fault.c:478 (set (reg:SI 1 r1)
        (reg/v:SI 135 [ fsr ])) -1 (nil))

(insn 10 9 11 3 arch/arm/mm/fault.c:478 (set (reg:SI 2 r2)
        (reg/v/f:SI 136 [ regs ])) -1 (nil))

(call_insn 11 10 12 3 arch/arm/mm/fault.c:478 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_bad_area") [flags 0x3] <function_decl 0x11459880 do_bad_area>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 12 11 13 3 arch/arm/mm/fault.c:480 (set (reg:SI 133 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 13 12 14 3 arch/arm/mm/fault.c:480 (set (pc)
        (label_ref 15)) -1 (nil))
;; End of basic block 3 -> ( 5)

;; Succ edge  5 [100.0%] 

(barrier 14 13 23)

;; Start of basic block () -> 4
(note 23 14 17 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 17 23 18 4 arch/arm/mm/fault.c:480 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 18 17 19 4 arch/arm/mm/fault.c:480 (clobber (reg:SI 133 [ <result> ])) -1 (nil))

(jump_insn 19 18 20 4 arch/arm/mm/fault.c:480 (set (pc)
        (label_ref 21)) -1 (nil))
;; End of basic block 4 -> ( 6)

;; Succ edge  6 [100.0%] 

(barrier 20 19 15)

;; Start of basic block ( 3) -> 5
;; Pred edge  3 [100.0%] 
(code_label 15 20 24 5 63 "" [1 uses])

(note 24 15 16 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 16 24 21 5 arch/arm/mm/fault.c:480 (set (reg/i:SI 0 r0)
        (reg:SI 133 [ <result> ])) -1 (nil))
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 21 16 25 6 64 "" [1 uses])

(note 25 21 22 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 22 25 0 6 arch/arm/mm/fault.c:480 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function do_PrefetchAbort (do_PrefetchAbort)[0:1300]

Partition 0: size 128 align 4
	info, offset 0

;; Generating RTL for gimple basic block 2

;; inf = &ifsr_info + ((ifsr & 1024) >> 6 | ifsr & 15) * 16;

(insn 8 7 9 arch/arm/mm/fault.c:627 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 9 8 10 arch/arm/mm/fault.c:627 (set (reg:SI 139)
        (and:SI (reg/v:SI 136 [ ifsr ])
            (const_int 1024 [0x400]))) -1 (nil))

(insn 10 9 11 arch/arm/mm/fault.c:627 (set (reg:SI 140)
        (lshiftrt:SI (reg:SI 139)
            (const_int 6 [0x6]))) -1 (nil))

(insn 11 10 12 arch/arm/mm/fault.c:627 (set (reg:SI 141)
        (and:SI (reg/v:SI 136 [ ifsr ])
            (const_int 15 [0xf]))) -1 (nil))

(insn 12 11 13 arch/arm/mm/fault.c:627 (set (reg:SI 142)
        (ior:SI (reg:SI 140)
            (reg:SI 141))) -1 (nil))

(insn 13 12 14 arch/arm/mm/fault.c:627 (set (reg:SI 143)
        (ashift:SI (reg:SI 142)
            (const_int 4 [0x4]))) -1 (nil))

(insn 14 13 0 arch/arm/mm/fault.c:627 (set (reg/v/f:SI 133 [ inf ])
        (plus:SI (reg/f:SI 138)
            (reg:SI 143))) -1 (nil))

;; D.24714 = inf->fn (addr, ifsr | 2147483648, regs);

(insn 15 14 16 arch/arm/mm/fault.c:630 (set (reg:SI 144)
        (ior:SI (reg/v:SI 136 [ ifsr ])
            (const_int -2147483648 [0xffffffff80000000]))) -1 (nil))

(insn 16 15 17 arch/arm/mm/fault.c:630 (set (reg/f:SI 145)
        (mem/s/f/j:SI (reg/v/f:SI 133 [ inf ]) [0 <variable>.fn+0 S4 A32])) -1 (nil))

(insn 17 16 18 arch/arm/mm/fault.c:630 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ addr ])) -1 (nil))

(insn 18 17 19 arch/arm/mm/fault.c:630 (set (reg:SI 1 r1)
        (reg:SI 144)) -1 (nil))

(insn 19 18 20 arch/arm/mm/fault.c:630 (set (reg:SI 2 r2)
        (reg/v/f:SI 137 [ regs ])) -1 (nil))

(call_insn 20 19 21 arch/arm/mm/fault.c:630 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 145) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 21 20 0 arch/arm/mm/fault.c:630 (set (reg:SI 134 [ D.24714 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.24714 == 0)

(insn 22 21 23 arch/arm/mm/fault.c:630 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.24714 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 23 22 0 arch/arm/mm/fault.c:630 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 3

;; printk (&"<1>Unhandled prefetch abort: %s (0x%03x) at 0x%08lx\n"[0], inf->name, ifsr, addr);

(insn 25 24 26 arch/arm/mm/fault.c:633 (set (reg:SI 146)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x114abbe0>)) -1 (nil))

(insn 26 25 27 arch/arm/mm/fault.c:633 (set (reg:SI 0 r0)
        (reg:SI 146)) -1 (nil))

(insn 27 26 28 arch/arm/mm/fault.c:633 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 12 [0xc])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(insn 28 27 29 arch/arm/mm/fault.c:633 (set (reg:SI 2 r2)
        (reg/v:SI 136 [ ifsr ])) -1 (nil))

(insn 29 28 30 arch/arm/mm/fault.c:633 (set (reg:SI 3 r3)
        (reg/v:SI 135 [ addr ])) -1 (nil))

(call_insn 30 29 0 arch/arm/mm/fault.c:633 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; info.si_signo = inf->sig;

(insn 31 30 32 arch/arm/mm/fault.c:636 (set (reg:SI 147)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 4 [0x4])) [0 <variable>.sig+0 S4 A32])) -1 (nil))

(insn 32 31 0 arch/arm/mm/fault.c:636 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -128 [0xffffffffffffff80])) [0 info.si_signo+0 S4 A64])
        (reg:SI 147)) -1 (nil))

;; info.si_errno = 0;

(insn 33 32 34 arch/arm/mm/fault.c:637 (set (reg:SI 148)
        (const_int 0 [0x0])) -1 (nil))

(insn 34 33 0 arch/arm/mm/fault.c:637 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -124 [0xffffffffffffff84])) [0 info.si_errno+0 S4 A32])
        (reg:SI 148)) -1 (nil))

;; info.si_code = inf->code;

(insn 35 34 36 arch/arm/mm/fault.c:638 (set (reg:SI 149)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 8 [0x8])) [0 <variable>.code+0 S4 A32])) -1 (nil))

(insn 36 35 0 arch/arm/mm/fault.c:638 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -120 [0xffffffffffffff88])) [0 info.si_code+0 S4 A64])
        (reg:SI 149)) -1 (nil))

;; info._sifields._sigfault._addr = (void *) (void *) addr;

(insn 37 36 0 arch/arm/mm/fault.c:639 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg/v:SI 135 [ addr ])) -1 (nil))

;; arm_notify_die (&""[0], regs, &info, ifsr, 0);

(insn 38 37 39 arch/arm/mm/fault.c:640 (set (reg:SI 150)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x1152d7e0>)) -1 (nil))

(insn 39 38 40 arch/arm/mm/fault.c:640 (set (reg:SI 151)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -128 [0xffffffffffffff80]))) -1 (nil))

(insn 40 39 41 arch/arm/mm/fault.c:640 (set (reg:SI 152)
        (const_int 0 [0x0])) -1 (nil))

(insn 41 40 42 arch/arm/mm/fault.c:640 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg:SI 152)) -1 (nil))

(insn 42 41 43 arch/arm/mm/fault.c:640 (set (reg:SI 0 r0)
        (reg:SI 150)) -1 (nil))

(insn 43 42 44 arch/arm/mm/fault.c:640 (set (reg:SI 1 r1)
        (reg/v/f:SI 137 [ regs ])) -1 (nil))

(insn 44 43 45 arch/arm/mm/fault.c:640 (set (reg:SI 2 r2)
        (reg:SI 151)) -1 (nil))

(insn 45 44 46 arch/arm/mm/fault.c:640 (set (reg:SI 3 r3)
        (reg/v:SI 136 [ ifsr ])) -1 (nil))

(call_insn 46 45 0 arch/arm/mm/fault.c:640 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_notify_die") [flags 0x41] <function_decl 0x512d9380 arm_notify_die>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 47 46 48 66 "" [0 uses])

(note 48 47 0 NOTE_INSN_BASIC_BLOCK)


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 arch/arm/mm/fault.c:626 (set (reg/v:SI 135 [ addr ])
        (reg:SI 0 r0 [ addr ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:626 (set (reg/v:SI 136 [ ifsr ])
        (reg:SI 1 r1 [ ifsr ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:626 (set (reg/v/f:SI 137 [ regs ])
        (reg:SI 2 r2 [ regs ])) -1 (nil))

(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 7 5 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 arch/arm/mm/fault.c:627 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 9 8 10 3 arch/arm/mm/fault.c:627 (set (reg:SI 139)
        (and:SI (reg/v:SI 136 [ ifsr ])
            (const_int 1024 [0x400]))) -1 (nil))

(insn 10 9 11 3 arch/arm/mm/fault.c:627 (set (reg:SI 140)
        (lshiftrt:SI (reg:SI 139)
            (const_int 6 [0x6]))) -1 (nil))

(insn 11 10 12 3 arch/arm/mm/fault.c:627 (set (reg:SI 141)
        (and:SI (reg/v:SI 136 [ ifsr ])
            (const_int 15 [0xf]))) -1 (nil))

(insn 12 11 13 3 arch/arm/mm/fault.c:627 (set (reg:SI 142)
        (ior:SI (reg:SI 140)
            (reg:SI 141))) -1 (nil))

(insn 13 12 14 3 arch/arm/mm/fault.c:627 (set (reg:SI 143)
        (ashift:SI (reg:SI 142)
            (const_int 4 [0x4]))) -1 (nil))

(insn 14 13 15 3 arch/arm/mm/fault.c:627 (set (reg/v/f:SI 133 [ inf ])
        (plus:SI (reg/f:SI 138)
            (reg:SI 143))) -1 (nil))

(insn 15 14 16 3 arch/arm/mm/fault.c:630 (set (reg:SI 144)
        (ior:SI (reg/v:SI 136 [ ifsr ])
            (const_int -2147483648 [0xffffffff80000000]))) -1 (nil))

(insn 16 15 17 3 arch/arm/mm/fault.c:630 (set (reg/f:SI 145)
        (mem/s/f/j:SI (reg/v/f:SI 133 [ inf ]) [0 <variable>.fn+0 S4 A32])) -1 (nil))

(insn 17 16 18 3 arch/arm/mm/fault.c:630 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ addr ])) -1 (nil))

(insn 18 17 19 3 arch/arm/mm/fault.c:630 (set (reg:SI 1 r1)
        (reg:SI 144)) -1 (nil))

(insn 19 18 20 3 arch/arm/mm/fault.c:630 (set (reg:SI 2 r2)
        (reg/v/f:SI 137 [ regs ])) -1 (nil))

(call_insn 20 19 21 3 arch/arm/mm/fault.c:630 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 145) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 21 20 22 3 arch/arm/mm/fault.c:630 (set (reg:SI 134 [ D.24714 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 22 21 23 3 arch/arm/mm/fault.c:630 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.24714 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 23 22 24 3 arch/arm/mm/fault.c:630 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 5 4)

;; Succ edge  5 [100.0%] 
;; Succ edge  4 [0.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [0.0%]  (fallthru)
(note 24 23 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 4 arch/arm/mm/fault.c:633 (set (reg:SI 146)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x114abbe0>)) -1 (nil))

(insn 26 25 27 4 arch/arm/mm/fault.c:633 (set (reg:SI 0 r0)
        (reg:SI 146)) -1 (nil))

(insn 27 26 28 4 arch/arm/mm/fault.c:633 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 12 [0xc])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(insn 28 27 29 4 arch/arm/mm/fault.c:633 (set (reg:SI 2 r2)
        (reg/v:SI 136 [ ifsr ])) -1 (nil))

(insn 29 28 30 4 arch/arm/mm/fault.c:633 (set (reg:SI 3 r3)
        (reg/v:SI 135 [ addr ])) -1 (nil))

(call_insn 30 29 31 4 arch/arm/mm/fault.c:633 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 31 30 32 4 arch/arm/mm/fault.c:636 (set (reg:SI 147)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 4 [0x4])) [0 <variable>.sig+0 S4 A32])) -1 (nil))

(insn 32 31 33 4 arch/arm/mm/fault.c:636 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -128 [0xffffffffffffff80])) [0 info.si_signo+0 S4 A64])
        (reg:SI 147)) -1 (nil))

(insn 33 32 34 4 arch/arm/mm/fault.c:637 (set (reg:SI 148)
        (const_int 0 [0x0])) -1 (nil))

(insn 34 33 35 4 arch/arm/mm/fault.c:637 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -124 [0xffffffffffffff84])) [0 info.si_errno+0 S4 A32])
        (reg:SI 148)) -1 (nil))

(insn 35 34 36 4 arch/arm/mm/fault.c:638 (set (reg:SI 149)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 8 [0x8])) [0 <variable>.code+0 S4 A32])) -1 (nil))

(insn 36 35 37 4 arch/arm/mm/fault.c:638 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -120 [0xffffffffffffff88])) [0 info.si_code+0 S4 A64])
        (reg:SI 149)) -1 (nil))

(insn 37 36 38 4 arch/arm/mm/fault.c:639 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg/v:SI 135 [ addr ])) -1 (nil))

(insn 38 37 39 4 arch/arm/mm/fault.c:640 (set (reg:SI 150)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x1152d7e0>)) -1 (nil))

(insn 39 38 40 4 arch/arm/mm/fault.c:640 (set (reg:SI 151)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -128 [0xffffffffffffff80]))) -1 (nil))

(insn 40 39 41 4 arch/arm/mm/fault.c:640 (set (reg:SI 152)
        (const_int 0 [0x0])) -1 (nil))

(insn 41 40 42 4 arch/arm/mm/fault.c:640 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg:SI 152)) -1 (nil))

(insn 42 41 43 4 arch/arm/mm/fault.c:640 (set (reg:SI 0 r0)
        (reg:SI 150)) -1 (nil))

(insn 43 42 44 4 arch/arm/mm/fault.c:640 (set (reg:SI 1 r1)
        (reg/v/f:SI 137 [ regs ])) -1 (nil))

(insn 44 43 45 4 arch/arm/mm/fault.c:640 (set (reg:SI 2 r2)
        (reg:SI 151)) -1 (nil))

(insn 45 44 46 4 arch/arm/mm/fault.c:640 (set (reg:SI 3 r3)
        (reg/v:SI 136 [ ifsr ])) -1 (nil))

(call_insn 46 45 47 4 arch/arm/mm/fault.c:640 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_notify_die") [flags 0x41] <function_decl 0x512d9380 arm_notify_die>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 4 -> ( 5)

;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; Pred edge  3 [100.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 47 46 48 5 66 "" [1 uses])

(note 48 47 53 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [100.0%]  (fallthru)
(note 53 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn 50 53 51 6 arch/arm/mm/fault.c:641 (set (pc)
        (label_ref 52)) -1 (nil))
;; End of basic block 6 -> ( 8)

;; Succ edge  8 [100.0%] 

(barrier 51 50 49)

;; Start of basic block () -> 7
(code_label 49 51 54 7 65 "" [0 uses])

(note 54 49 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 8)

;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 52 54 55 8 67 "" [1 uses])

(note 55 52 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function do_DataAbort (do_DataAbort)[0:1298]

Partition 0: size 128 align 4
	info, offset 0

;; Generating RTL for gimple basic block 2

;; inf = &fsr_info + ((fsr & 1024) >> 6 | fsr & 15) * 16;

(insn 8 7 9 arch/arm/mm/fault.c:559 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 9 8 10 arch/arm/mm/fault.c:559 (set (reg:SI 139)
        (plus:SI (reg/f:SI 138)
            (const_int 512 [0x200]))) -1 (nil))

(insn 10 9 11 arch/arm/mm/fault.c:559 (set (reg:SI 140)
        (and:SI (reg/v:SI 136 [ fsr ])
            (const_int 1024 [0x400]))) -1 (nil))

(insn 11 10 12 arch/arm/mm/fault.c:559 (set (reg:SI 141)
        (lshiftrt:SI (reg:SI 140)
            (const_int 6 [0x6]))) -1 (nil))

(insn 12 11 13 arch/arm/mm/fault.c:559 (set (reg:SI 142)
        (and:SI (reg/v:SI 136 [ fsr ])
            (const_int 15 [0xf]))) -1 (nil))

(insn 13 12 14 arch/arm/mm/fault.c:559 (set (reg:SI 143)
        (ior:SI (reg:SI 141)
            (reg:SI 142))) -1 (nil))

(insn 14 13 15 arch/arm/mm/fault.c:559 (set (reg:SI 144)
        (ashift:SI (reg:SI 143)
            (const_int 4 [0x4]))) -1 (nil))

(insn 15 14 0 arch/arm/mm/fault.c:559 (set (reg/v/f:SI 133 [ inf ])
        (plus:SI (reg:SI 139)
            (reg:SI 144))) -1 (nil))

;; D.24678 = inf->fn (addr, fsr & 2147483647, regs);

(insn 16 15 17 arch/arm/mm/fault.c:562 (set (reg:SI 145)
        (and:SI (reg/v:SI 136 [ fsr ])
            (const_int 2147483647 [0x7fffffff]))) -1 (nil))

(insn 17 16 18 arch/arm/mm/fault.c:562 (set (reg/f:SI 146)
        (mem/s/f/j:SI (reg/v/f:SI 133 [ inf ]) [0 <variable>.fn+0 S4 A32])) -1 (nil))

(insn 18 17 19 arch/arm/mm/fault.c:562 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ addr ])) -1 (nil))

(insn 19 18 20 arch/arm/mm/fault.c:562 (set (reg:SI 1 r1)
        (reg:SI 145)) -1 (nil))

(insn 20 19 21 arch/arm/mm/fault.c:562 (set (reg:SI 2 r2)
        (reg/v/f:SI 137 [ regs ])) -1 (nil))

(call_insn 21 20 22 arch/arm/mm/fault.c:562 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 146) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 22 21 0 arch/arm/mm/fault.c:562 (set (reg:SI 134 [ D.24678 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.24678 == 0)

(insn 23 22 24 arch/arm/mm/fault.c:562 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.24678 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 24 23 0 arch/arm/mm/fault.c:562 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 3

;; printk (&"<1>Unhandled fault: %s (0x%03x) at 0x%08lx\n"[0], inf->name, fsr, addr);

(insn 26 25 27 arch/arm/mm/fault.c:565 (set (reg:SI 147)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x114abc30>)) -1 (nil))

(insn 27 26 28 arch/arm/mm/fault.c:565 (set (reg:SI 0 r0)
        (reg:SI 147)) -1 (nil))

(insn 28 27 29 arch/arm/mm/fault.c:565 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 12 [0xc])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(insn 29 28 30 arch/arm/mm/fault.c:565 (set (reg:SI 2 r2)
        (reg/v:SI 136 [ fsr ])) -1 (nil))

(insn 30 29 31 arch/arm/mm/fault.c:565 (set (reg:SI 3 r3)
        (reg/v:SI 135 [ addr ])) -1 (nil))

(call_insn 31 30 0 arch/arm/mm/fault.c:565 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; info.si_signo = inf->sig;

(insn 32 31 33 arch/arm/mm/fault.c:568 (set (reg:SI 148)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 4 [0x4])) [0 <variable>.sig+0 S4 A32])) -1 (nil))

(insn 33 32 0 arch/arm/mm/fault.c:568 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -128 [0xffffffffffffff80])) [0 info.si_signo+0 S4 A64])
        (reg:SI 148)) -1 (nil))

;; info.si_errno = 0;

(insn 34 33 35 arch/arm/mm/fault.c:569 (set (reg:SI 149)
        (const_int 0 [0x0])) -1 (nil))

(insn 35 34 0 arch/arm/mm/fault.c:569 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -124 [0xffffffffffffff84])) [0 info.si_errno+0 S4 A32])
        (reg:SI 149)) -1 (nil))

;; info.si_code = inf->code;

(insn 36 35 37 arch/arm/mm/fault.c:570 (set (reg:SI 150)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 8 [0x8])) [0 <variable>.code+0 S4 A32])) -1 (nil))

(insn 37 36 0 arch/arm/mm/fault.c:570 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -120 [0xffffffffffffff88])) [0 info.si_code+0 S4 A64])
        (reg:SI 150)) -1 (nil))

;; info._sifields._sigfault._addr = (void *) (void *) addr;

(insn 38 37 0 arch/arm/mm/fault.c:571 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg/v:SI 135 [ addr ])) -1 (nil))

;; arm_notify_die (&""[0], regs, &info, fsr, 0);

(insn 39 38 40 arch/arm/mm/fault.c:572 (set (reg:SI 151)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x1152d7e0>)) -1 (nil))

(insn 40 39 41 arch/arm/mm/fault.c:572 (set (reg:SI 152)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -128 [0xffffffffffffff80]))) -1 (nil))

(insn 41 40 42 arch/arm/mm/fault.c:572 (set (reg:SI 153)
        (const_int 0 [0x0])) -1 (nil))

(insn 42 41 43 arch/arm/mm/fault.c:572 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg:SI 153)) -1 (nil))

(insn 43 42 44 arch/arm/mm/fault.c:572 (set (reg:SI 0 r0)
        (reg:SI 151)) -1 (nil))

(insn 44 43 45 arch/arm/mm/fault.c:572 (set (reg:SI 1 r1)
        (reg/v/f:SI 137 [ regs ])) -1 (nil))

(insn 45 44 46 arch/arm/mm/fault.c:572 (set (reg:SI 2 r2)
        (reg:SI 152)) -1 (nil))

(insn 46 45 47 arch/arm/mm/fault.c:572 (set (reg:SI 3 r3)
        (reg/v:SI 136 [ fsr ])) -1 (nil))

(call_insn 47 46 0 arch/arm/mm/fault.c:572 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_notify_die") [flags 0x41] <function_decl 0x512d9380 arm_notify_die>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 48 47 49 71 "" [0 uses])

(note 49 48 0 NOTE_INSN_BASIC_BLOCK)


;;
;; Full RTL generated for this function:
;;
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 6 3 2 arch/arm/mm/fault.c:558 (set (reg/v:SI 135 [ addr ])
        (reg:SI 0 r0 [ addr ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:558 (set (reg/v:SI 136 [ fsr ])
        (reg:SI 1 r1 [ fsr ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:558 (set (reg/v/f:SI 137 [ regs ])
        (reg:SI 2 r2 [ regs ])) -1 (nil))

(note 5 4 7 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 7 5 8 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 8 7 9 3 arch/arm/mm/fault.c:559 (set (reg/f:SI 138)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 9 8 10 3 arch/arm/mm/fault.c:559 (set (reg:SI 139)
        (plus:SI (reg/f:SI 138)
            (const_int 512 [0x200]))) -1 (nil))

(insn 10 9 11 3 arch/arm/mm/fault.c:559 (set (reg:SI 140)
        (and:SI (reg/v:SI 136 [ fsr ])
            (const_int 1024 [0x400]))) -1 (nil))

(insn 11 10 12 3 arch/arm/mm/fault.c:559 (set (reg:SI 141)
        (lshiftrt:SI (reg:SI 140)
            (const_int 6 [0x6]))) -1 (nil))

(insn 12 11 13 3 arch/arm/mm/fault.c:559 (set (reg:SI 142)
        (and:SI (reg/v:SI 136 [ fsr ])
            (const_int 15 [0xf]))) -1 (nil))

(insn 13 12 14 3 arch/arm/mm/fault.c:559 (set (reg:SI 143)
        (ior:SI (reg:SI 141)
            (reg:SI 142))) -1 (nil))

(insn 14 13 15 3 arch/arm/mm/fault.c:559 (set (reg:SI 144)
        (ashift:SI (reg:SI 143)
            (const_int 4 [0x4]))) -1 (nil))

(insn 15 14 16 3 arch/arm/mm/fault.c:559 (set (reg/v/f:SI 133 [ inf ])
        (plus:SI (reg:SI 139)
            (reg:SI 144))) -1 (nil))

(insn 16 15 17 3 arch/arm/mm/fault.c:562 (set (reg:SI 145)
        (and:SI (reg/v:SI 136 [ fsr ])
            (const_int 2147483647 [0x7fffffff]))) -1 (nil))

(insn 17 16 18 3 arch/arm/mm/fault.c:562 (set (reg/f:SI 146)
        (mem/s/f/j:SI (reg/v/f:SI 133 [ inf ]) [0 <variable>.fn+0 S4 A32])) -1 (nil))

(insn 18 17 19 3 arch/arm/mm/fault.c:562 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ addr ])) -1 (nil))

(insn 19 18 20 3 arch/arm/mm/fault.c:562 (set (reg:SI 1 r1)
        (reg:SI 145)) -1 (nil))

(insn 20 19 21 3 arch/arm/mm/fault.c:562 (set (reg:SI 2 r2)
        (reg/v/f:SI 137 [ regs ])) -1 (nil))

(call_insn 21 20 22 3 arch/arm/mm/fault.c:562 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (reg/f:SI 146) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 22 21 23 3 arch/arm/mm/fault.c:562 (set (reg:SI 134 [ D.24678 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 23 22 24 3 arch/arm/mm/fault.c:562 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.24678 ])
            (const_int 0 [0x0]))) -1 (nil))

(jump_insn 24 23 25 3 arch/arm/mm/fault.c:562 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 48)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 5 4)

;; Succ edge  5 [100.0%] 
;; Succ edge  4 [0.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [0.0%]  (fallthru)
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 4 arch/arm/mm/fault.c:565 (set (reg:SI 147)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x114abc30>)) -1 (nil))

(insn 27 26 28 4 arch/arm/mm/fault.c:565 (set (reg:SI 0 r0)
        (reg:SI 147)) -1 (nil))

(insn 28 27 29 4 arch/arm/mm/fault.c:565 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 12 [0xc])) [0 <variable>.name+0 S4 A32])) -1 (nil))

(insn 29 28 30 4 arch/arm/mm/fault.c:565 (set (reg:SI 2 r2)
        (reg/v:SI 136 [ fsr ])) -1 (nil))

(insn 30 29 31 4 arch/arm/mm/fault.c:565 (set (reg:SI 3 r3)
        (reg/v:SI 135 [ addr ])) -1 (nil))

(call_insn 31 30 32 4 arch/arm/mm/fault.c:565 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 32 31 33 4 arch/arm/mm/fault.c:568 (set (reg:SI 148)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 4 [0x4])) [0 <variable>.sig+0 S4 A32])) -1 (nil))

(insn 33 32 34 4 arch/arm/mm/fault.c:568 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -128 [0xffffffffffffff80])) [0 info.si_signo+0 S4 A64])
        (reg:SI 148)) -1 (nil))

(insn 34 33 35 4 arch/arm/mm/fault.c:569 (set (reg:SI 149)
        (const_int 0 [0x0])) -1 (nil))

(insn 35 34 36 4 arch/arm/mm/fault.c:569 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -124 [0xffffffffffffff84])) [0 info.si_errno+0 S4 A32])
        (reg:SI 149)) -1 (nil))

(insn 36 35 37 4 arch/arm/mm/fault.c:570 (set (reg:SI 150)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ inf ])
                (const_int 8 [0x8])) [0 <variable>.code+0 S4 A32])) -1 (nil))

(insn 37 36 38 4 arch/arm/mm/fault.c:570 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -120 [0xffffffffffffff88])) [0 info.si_code+0 S4 A64])
        (reg:SI 150)) -1 (nil))

(insn 38 37 39 4 arch/arm/mm/fault.c:571 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 129 virtual-stack-vars)
                (const_int -116 [0xffffffffffffff8c])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg/v:SI 135 [ addr ])) -1 (nil))

(insn 39 38 40 4 arch/arm/mm/fault.c:572 (set (reg:SI 151)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x1152d7e0>)) -1 (nil))

(insn 40 39 41 4 arch/arm/mm/fault.c:572 (set (reg:SI 152)
        (plus:SI (reg/f:SI 129 virtual-stack-vars)
            (const_int -128 [0xffffffffffffff80]))) -1 (nil))

(insn 41 40 42 4 arch/arm/mm/fault.c:572 (set (reg:SI 153)
        (const_int 0 [0x0])) -1 (nil))

(insn 42 41 43 4 arch/arm/mm/fault.c:572 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg:SI 153)) -1 (nil))

(insn 43 42 44 4 arch/arm/mm/fault.c:572 (set (reg:SI 0 r0)
        (reg:SI 151)) -1 (nil))

(insn 44 43 45 4 arch/arm/mm/fault.c:572 (set (reg:SI 1 r1)
        (reg/v/f:SI 137 [ regs ])) -1 (nil))

(insn 45 44 46 4 arch/arm/mm/fault.c:572 (set (reg:SI 2 r2)
        (reg:SI 152)) -1 (nil))

(insn 46 45 47 4 arch/arm/mm/fault.c:572 (set (reg:SI 3 r3)
        (reg/v:SI 136 [ fsr ])) -1 (nil))

(call_insn 47 46 48 4 arch/arm/mm/fault.c:572 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_notify_die") [flags 0x41] <function_decl 0x512d9380 arm_notify_die>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 4 -> ( 5)

;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; Pred edge  3 [100.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 48 47 49 5 71 "" [1 uses])

(note 49 48 54 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [100.0%]  (fallthru)
(note 54 49 51 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn 51 54 52 6 arch/arm/mm/fault.c:573 (set (pc)
        (label_ref 53)) -1 (nil))
;; End of basic block 6 -> ( 8)

;; Succ edge  8 [100.0%] 

(barrier 52 51 50)

;; Start of basic block () -> 7
(code_label 50 52 55 7 70 "" [0 uses])

(note 55 50 53 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 8)

;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 53 55 56 8 72 "" [1 uses])

(note 56 53 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function hook_ifault_code (hook_ifault_code)[0:1299] (unlikely executed)


;; Generating RTL for gimple basic block 2

;; if ((unsigned int) nr > 31)

(insn 10 9 11 arch/arm/mm/fault.c:615 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 133 [ nr ])
            (const_int 31 [0x1f]))) -1 (nil))

(jump_insn 11 10 0 arch/arm/mm/fault.c:615 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 3

;; __bug (&"arch/arm/mm/fault.c"[0], 616);

(insn 13 12 14 arch/arm/mm/fault.c:616 (set (reg:SI 138)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11536b70>)) -1 (nil))

(insn 14 13 15 arch/arm/mm/fault.c:616 (set (reg:SI 0 r0)
        (reg:SI 138)) -1 (nil))

(insn 15 14 16 arch/arm/mm/fault.c:616 (set (reg:SI 1 r1)
        (const_int 616 [0x268])) -1 (nil))

(call_insn 16 15 17 arch/arm/mm/fault.c:616 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(barrier 17 16 0)

;; Generating RTL for gimple basic block 4

;; 

(code_label 18 17 19 76 "" [0 uses])

(note 19 18 0 NOTE_INSN_BASIC_BLOCK)

;; ifsr_info[nr].fn = fn;

(insn 20 19 21 arch/arm/mm/fault.c:618 (set (reg/f:SI 139)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 21 20 0 arch/arm/mm/fault.c:618 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 133 [ nr ])
                    (const_int 16 [0x10]))
                (reg/f:SI 139)) [0 <variable>.fn+0 S4 A32])
        (reg/v/f:SI 134 [ fn ])) -1 (nil))

;; ifsr_info[nr].sig = sig;

(insn 22 21 23 arch/arm/mm/fault.c:619 (set (reg/f:SI 140)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 23 22 24 arch/arm/mm/fault.c:619 (set (reg:SI 141)
        (const_int 4 [0x4])) -1 (nil))

(insn 24 23 25 arch/arm/mm/fault.c:619 (set (reg:SI 142)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 25 24 26 arch/arm/mm/fault.c:619 (set (reg:SI 143)
        (plus:SI (reg/f:SI 140)
            (reg:SI 142))) -1 (nil))

(insn 26 25 27 arch/arm/mm/fault.c:619 (set (reg/f:SI 144)
        (plus:SI (reg:SI 143)
            (reg:SI 141))) -1 (nil))

(insn 27 26 0 arch/arm/mm/fault.c:619 (set (mem/s/j:SI (reg/f:SI 144) [0 <variable>.sig+0 S4 A32])
        (reg/v:SI 135 [ sig ])) -1 (nil))

;; ifsr_info[nr].code = code;

(insn 28 27 29 arch/arm/mm/fault.c:620 (set (reg/f:SI 145)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 29 28 30 arch/arm/mm/fault.c:620 (set (reg:SI 146)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 30 29 31 arch/arm/mm/fault.c:620 (set (reg:SI 147)
        (plus:SI (reg:SI 146)
            (const_int 1 [0x1]))) -1 (nil))

(insn 31 30 0 arch/arm/mm/fault.c:620 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 147)
                    (const_int 8 [0x8]))
                (reg/f:SI 145)) [0 <variable>.code+0 S4 A32])
        (reg/v:SI 136 [ code ])) -1 (nil))

;; ifsr_info[nr].name = name;

(insn 32 31 33 arch/arm/mm/fault.c:621 (set (reg/f:SI 148)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 33 32 34 arch/arm/mm/fault.c:621 (set (reg:SI 149)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 34 33 35 arch/arm/mm/fault.c:621 (set (reg:SI 150)
        (plus:SI (reg:SI 149)
            (const_int 1 [0x1]))) -1 (nil))

(insn 35 34 36 arch/arm/mm/fault.c:621 (set (reg:SI 151)
        (const_int 4 [0x4])) -1 (nil))

(insn 36 35 37 arch/arm/mm/fault.c:621 (set (reg:SI 152)
        (ashift:SI (reg:SI 150)
            (const_int 3 [0x3]))) -1 (nil))

(insn 37 36 38 arch/arm/mm/fault.c:621 (set (reg:SI 153)
        (plus:SI (reg/f:SI 148)
            (reg:SI 152))) -1 (nil))

(insn 38 37 39 arch/arm/mm/fault.c:621 (set (reg/f:SI 154)
        (plus:SI (reg:SI 153)
            (reg:SI 151))) -1 (nil))

(insn 39 38 0 arch/arm/mm/fault.c:621 (set (mem/s/f/j:SI (reg/f:SI 154) [0 <variable>.name+0 S4 A32])
        (reg/v/f:SI 137 [ name ])) -1 (nil))


;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 8 3 2 arch/arm/mm/fault.c:614 (set (reg/v:SI 133 [ nr ])
        (reg:SI 0 r0 [ nr ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:614 (set (reg/v/f:SI 134 [ fn ])
        (reg:SI 1 r1 [ fn ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:614 (set (reg/v:SI 135 [ sig ])
        (reg:SI 2 r2 [ sig ])) -1 (nil))

(insn 5 4 6 2 arch/arm/mm/fault.c:614 (set (reg/v:SI 136 [ code ])
        (reg:SI 3 r3 [ code ])) -1 (nil))

(insn 6 5 7 2 arch/arm/mm/fault.c:614 (set (reg/v/f:SI 137 [ name ])
        (mem/f/c/i:SI (reg/f:SI 128 virtual-incoming-args) [0 name+0 S4 A32])) -1 (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 128 virtual-incoming-args) [0 name+0 S4 A32])
        (nil)))

(note 7 6 9 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 9 7 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 11 3 arch/arm/mm/fault.c:615 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 133 [ nr ])
            (const_int 31 [0x1f]))) -1 (nil))

(jump_insn 11 10 12 3 arch/arm/mm/fault.c:615 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [0.0%]  (fallthru)
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 4 arch/arm/mm/fault.c:616 (set (reg:SI 138)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11536b70>)) -1 (nil))

(insn 14 13 15 4 arch/arm/mm/fault.c:616 (set (reg:SI 0 r0)
        (reg:SI 138)) -1 (nil))

(insn 15 14 16 4 arch/arm/mm/fault.c:616 (set (reg:SI 1 r1)
        (const_int 616 [0x268])) -1 (nil))

(call_insn 16 15 17 4 arch/arm/mm/fault.c:616 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()


(barrier 17 16 18)

;; Start of basic block ( 3) -> 5
;; Pred edge  3 [100.0%] 
(code_label 18 17 19 5 76 "" [1 uses])

(note 19 18 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 5 arch/arm/mm/fault.c:618 (set (reg/f:SI 139)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 21 20 22 5 arch/arm/mm/fault.c:618 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 133 [ nr ])
                    (const_int 16 [0x10]))
                (reg/f:SI 139)) [0 <variable>.fn+0 S4 A32])
        (reg/v/f:SI 134 [ fn ])) -1 (nil))

(insn 22 21 23 5 arch/arm/mm/fault.c:619 (set (reg/f:SI 140)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 23 22 24 5 arch/arm/mm/fault.c:619 (set (reg:SI 141)
        (const_int 4 [0x4])) -1 (nil))

(insn 24 23 25 5 arch/arm/mm/fault.c:619 (set (reg:SI 142)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 25 24 26 5 arch/arm/mm/fault.c:619 (set (reg:SI 143)
        (plus:SI (reg/f:SI 140)
            (reg:SI 142))) -1 (nil))

(insn 26 25 27 5 arch/arm/mm/fault.c:619 (set (reg/f:SI 144)
        (plus:SI (reg:SI 143)
            (reg:SI 141))) -1 (nil))

(insn 27 26 28 5 arch/arm/mm/fault.c:619 (set (mem/s/j:SI (reg/f:SI 144) [0 <variable>.sig+0 S4 A32])
        (reg/v:SI 135 [ sig ])) -1 (nil))

(insn 28 27 29 5 arch/arm/mm/fault.c:620 (set (reg/f:SI 145)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 29 28 30 5 arch/arm/mm/fault.c:620 (set (reg:SI 146)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 30 29 31 5 arch/arm/mm/fault.c:620 (set (reg:SI 147)
        (plus:SI (reg:SI 146)
            (const_int 1 [0x1]))) -1 (nil))

(insn 31 30 32 5 arch/arm/mm/fault.c:620 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 147)
                    (const_int 8 [0x8]))
                (reg/f:SI 145)) [0 <variable>.code+0 S4 A32])
        (reg/v:SI 136 [ code ])) -1 (nil))

(insn 32 31 33 5 arch/arm/mm/fault.c:621 (set (reg/f:SI 148)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 33 32 34 5 arch/arm/mm/fault.c:621 (set (reg:SI 149)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 34 33 35 5 arch/arm/mm/fault.c:621 (set (reg:SI 150)
        (plus:SI (reg:SI 149)
            (const_int 1 [0x1]))) -1 (nil))

(insn 35 34 36 5 arch/arm/mm/fault.c:621 (set (reg:SI 151)
        (const_int 4 [0x4])) -1 (nil))

(insn 36 35 37 5 arch/arm/mm/fault.c:621 (set (reg:SI 152)
        (ashift:SI (reg:SI 150)
            (const_int 3 [0x3]))) -1 (nil))

(insn 37 36 38 5 arch/arm/mm/fault.c:621 (set (reg:SI 153)
        (plus:SI (reg/f:SI 148)
            (reg:SI 152))) -1 (nil))

(insn 38 37 39 5 arch/arm/mm/fault.c:621 (set (reg/f:SI 154)
        (plus:SI (reg:SI 153)
            (reg:SI 151))) -1 (nil))

(insn 39 38 44 5 arch/arm/mm/fault.c:621 (set (mem/s/f/j:SI (reg/f:SI 154) [0 <variable>.name+0 S4 A32])
        (reg/v/f:SI 137 [ name ])) -1 (nil))
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [100.0%]  (fallthru)
(note 44 39 41 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn 41 44 42 6 arch/arm/mm/fault.c:622 (set (pc)
        (label_ref 43)) -1 (nil))
;; End of basic block 6 -> ( 8)

;; Succ edge  8 [100.0%] 

(barrier 42 41 40)

;; Start of basic block () -> 7
(code_label 40 42 45 7 75 "" [0 uses])

(note 45 40 43 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 8)

;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 43 45 46 8 77 "" [1 uses])

(note 46 43 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function hook_fault_code (hook_fault_code)[0:1297] (unlikely executed)


;; Generating RTL for gimple basic block 2

;; if ((unsigned int) nr > 31)

(insn 10 9 11 arch/arm/mm/fault.c:544 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 133 [ nr ])
            (const_int 31 [0x1f]))) -1 (nil))

(jump_insn 11 10 0 arch/arm/mm/fault.c:544 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 3

;; __bug (&"arch/arm/mm/fault.c"[0], 545);

(insn 13 12 14 arch/arm/mm/fault.c:545 (set (reg:SI 138)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11536b70>)) -1 (nil))

(insn 14 13 15 arch/arm/mm/fault.c:545 (set (reg:SI 139)
        (const_int 545 [0x221])) -1 (nil))

(insn 15 14 16 arch/arm/mm/fault.c:545 (set (reg:SI 0 r0)
        (reg:SI 138)) -1 (nil))

(insn 16 15 17 arch/arm/mm/fault.c:545 (set (reg:SI 1 r1)
        (reg:SI 139)) -1 (nil))

(call_insn 17 16 18 arch/arm/mm/fault.c:545 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(barrier 18 17 0)

;; Generating RTL for gimple basic block 4

;; 

(code_label 19 18 20 81 "" [0 uses])

(note 20 19 0 NOTE_INSN_BASIC_BLOCK)

;; fsr_info[nr].fn = fn;

(insn 21 20 22 arch/arm/mm/fault.c:547 (set (reg/f:SI 140)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 22 21 23 arch/arm/mm/fault.c:547 (set (reg:SI 141)
        (const_int 512 [0x200])) -1 (nil))

(insn 23 22 24 arch/arm/mm/fault.c:547 (set (reg:SI 142)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 24 23 25 arch/arm/mm/fault.c:547 (set (reg:SI 143)
        (plus:SI (reg/f:SI 140)
            (reg:SI 142))) -1 (nil))

(insn 25 24 26 arch/arm/mm/fault.c:547 (set (reg/f:SI 144)
        (plus:SI (reg:SI 143)
            (reg:SI 141))) -1 (nil))

(insn 26 25 0 arch/arm/mm/fault.c:547 (set (mem/s/f/j:SI (reg/f:SI 144) [0 <variable>.fn+0 S4 A32])
        (reg/v/f:SI 134 [ fn ])) -1 (nil))

;; fsr_info[nr].sig = sig;

(insn 27 26 28 arch/arm/mm/fault.c:548 (set (reg/f:SI 145)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 28 27 29 arch/arm/mm/fault.c:548 (set (reg:SI 146)
        (const_int 516 [0x204])) -1 (nil))

(insn 29 28 30 arch/arm/mm/fault.c:548 (set (reg:SI 147)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 30 29 31 arch/arm/mm/fault.c:548 (set (reg:SI 148)
        (plus:SI (reg/f:SI 145)
            (reg:SI 147))) -1 (nil))

(insn 31 30 32 arch/arm/mm/fault.c:548 (set (reg/f:SI 149)
        (plus:SI (reg:SI 148)
            (reg:SI 146))) -1 (nil))

(insn 32 31 0 arch/arm/mm/fault.c:548 (set (mem/s/j:SI (reg/f:SI 149) [0 <variable>.sig+0 S4 A32])
        (reg/v:SI 135 [ sig ])) -1 (nil))

;; fsr_info[nr].code = code;

(insn 33 32 34 arch/arm/mm/fault.c:549 (set (reg/f:SI 150)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 34 33 35 arch/arm/mm/fault.c:549 (set (reg:SI 151)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 35 34 36 arch/arm/mm/fault.c:549 (set (reg:SI 152)
        (plus:SI (reg:SI 151)
            (const_int 1 [0x1]))) -1 (nil))

(insn 36 35 37 arch/arm/mm/fault.c:549 (set (reg:SI 153)
        (const_int 512 [0x200])) -1 (nil))

(insn 37 36 38 arch/arm/mm/fault.c:549 (set (reg:SI 154)
        (ashift:SI (reg:SI 152)
            (const_int 3 [0x3]))) -1 (nil))

(insn 38 37 39 arch/arm/mm/fault.c:549 (set (reg:SI 155)
        (plus:SI (reg/f:SI 150)
            (reg:SI 154))) -1 (nil))

(insn 39 38 40 arch/arm/mm/fault.c:549 (set (reg/f:SI 156)
        (plus:SI (reg:SI 155)
            (reg:SI 153))) -1 (nil))

(insn 40 39 0 arch/arm/mm/fault.c:549 (set (mem/s/j:SI (reg/f:SI 156) [0 <variable>.code+0 S4 A32])
        (reg/v:SI 136 [ code ])) -1 (nil))

;; fsr_info[nr].name = name;

(insn 41 40 42 arch/arm/mm/fault.c:550 (set (reg/f:SI 157)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 42 41 43 arch/arm/mm/fault.c:550 (set (reg:SI 158)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 43 42 44 arch/arm/mm/fault.c:550 (set (reg:SI 159)
        (plus:SI (reg:SI 158)
            (const_int 1 [0x1]))) -1 (nil))

(insn 44 43 45 arch/arm/mm/fault.c:550 (set (reg:SI 160)
        (const_int 516 [0x204])) -1 (nil))

(insn 45 44 46 arch/arm/mm/fault.c:550 (set (reg:SI 161)
        (ashift:SI (reg:SI 159)
            (const_int 3 [0x3]))) -1 (nil))

(insn 46 45 47 arch/arm/mm/fault.c:550 (set (reg:SI 162)
        (plus:SI (reg/f:SI 157)
            (reg:SI 161))) -1 (nil))

(insn 47 46 48 arch/arm/mm/fault.c:550 (set (reg/f:SI 163)
        (plus:SI (reg:SI 162)
            (reg:SI 160))) -1 (nil))

(insn 48 47 0 arch/arm/mm/fault.c:550 (set (mem/s/f/j:SI (reg/f:SI 163) [0 <variable>.name+0 S4 A32])
        (reg/v/f:SI 137 [ name ])) -1 (nil))


;;
;; Full RTL generated for this function:
;;
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(insn 2 8 3 2 arch/arm/mm/fault.c:543 (set (reg/v:SI 133 [ nr ])
        (reg:SI 0 r0 [ nr ])) -1 (nil))

(insn 3 2 4 2 arch/arm/mm/fault.c:543 (set (reg/v/f:SI 134 [ fn ])
        (reg:SI 1 r1 [ fn ])) -1 (nil))

(insn 4 3 5 2 arch/arm/mm/fault.c:543 (set (reg/v:SI 135 [ sig ])
        (reg:SI 2 r2 [ sig ])) -1 (nil))

(insn 5 4 6 2 arch/arm/mm/fault.c:543 (set (reg/v:SI 136 [ code ])
        (reg:SI 3 r3 [ code ])) -1 (nil))

(insn 6 5 7 2 arch/arm/mm/fault.c:543 (set (reg/v/f:SI 137 [ name ])
        (mem/f/c/i:SI (reg/f:SI 128 virtual-incoming-args) [0 name+0 S4 A32])) -1 (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 128 virtual-incoming-args) [0 name+0 S4 A32])
        (nil)))

(note 7 6 9 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 9 7 10 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 11 3 arch/arm/mm/fault.c:544 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 133 [ nr ])
            (const_int 31 [0x1f]))) -1 (nil))

(jump_insn 11 10 12 3 arch/arm/mm/fault.c:544 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [0.0%]  (fallthru)
(note 12 11 13 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 13 12 14 4 arch/arm/mm/fault.c:545 (set (reg:SI 138)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11536b70>)) -1 (nil))

(insn 14 13 15 4 arch/arm/mm/fault.c:545 (set (reg:SI 139)
        (const_int 545 [0x221])) -1 (nil))

(insn 15 14 16 4 arch/arm/mm/fault.c:545 (set (reg:SI 0 r0)
        (reg:SI 138)) -1 (nil))

(insn 16 15 17 4 arch/arm/mm/fault.c:545 (set (reg:SI 1 r1)
        (reg:SI 139)) -1 (nil))

(call_insn 17 16 18 4 arch/arm/mm/fault.c:545 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()


(barrier 18 17 19)

;; Start of basic block ( 3) -> 5
;; Pred edge  3 [100.0%] 
(code_label 19 18 20 5 81 "" [1 uses])

(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 21 20 22 5 arch/arm/mm/fault.c:547 (set (reg/f:SI 140)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 22 21 23 5 arch/arm/mm/fault.c:547 (set (reg:SI 141)
        (const_int 512 [0x200])) -1 (nil))

(insn 23 22 24 5 arch/arm/mm/fault.c:547 (set (reg:SI 142)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 24 23 25 5 arch/arm/mm/fault.c:547 (set (reg:SI 143)
        (plus:SI (reg/f:SI 140)
            (reg:SI 142))) -1 (nil))

(insn 25 24 26 5 arch/arm/mm/fault.c:547 (set (reg/f:SI 144)
        (plus:SI (reg:SI 143)
            (reg:SI 141))) -1 (nil))

(insn 26 25 27 5 arch/arm/mm/fault.c:547 (set (mem/s/f/j:SI (reg/f:SI 144) [0 <variable>.fn+0 S4 A32])
        (reg/v/f:SI 134 [ fn ])) -1 (nil))

(insn 27 26 28 5 arch/arm/mm/fault.c:548 (set (reg/f:SI 145)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 28 27 29 5 arch/arm/mm/fault.c:548 (set (reg:SI 146)
        (const_int 516 [0x204])) -1 (nil))

(insn 29 28 30 5 arch/arm/mm/fault.c:548 (set (reg:SI 147)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 4 [0x4]))) -1 (nil))

(insn 30 29 31 5 arch/arm/mm/fault.c:548 (set (reg:SI 148)
        (plus:SI (reg/f:SI 145)
            (reg:SI 147))) -1 (nil))

(insn 31 30 32 5 arch/arm/mm/fault.c:548 (set (reg/f:SI 149)
        (plus:SI (reg:SI 148)
            (reg:SI 146))) -1 (nil))

(insn 32 31 33 5 arch/arm/mm/fault.c:548 (set (mem/s/j:SI (reg/f:SI 149) [0 <variable>.sig+0 S4 A32])
        (reg/v:SI 135 [ sig ])) -1 (nil))

(insn 33 32 34 5 arch/arm/mm/fault.c:549 (set (reg/f:SI 150)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 34 33 35 5 arch/arm/mm/fault.c:549 (set (reg:SI 151)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 35 34 36 5 arch/arm/mm/fault.c:549 (set (reg:SI 152)
        (plus:SI (reg:SI 151)
            (const_int 1 [0x1]))) -1 (nil))

(insn 36 35 37 5 arch/arm/mm/fault.c:549 (set (reg:SI 153)
        (const_int 512 [0x200])) -1 (nil))

(insn 37 36 38 5 arch/arm/mm/fault.c:549 (set (reg:SI 154)
        (ashift:SI (reg:SI 152)
            (const_int 3 [0x3]))) -1 (nil))

(insn 38 37 39 5 arch/arm/mm/fault.c:549 (set (reg:SI 155)
        (plus:SI (reg/f:SI 150)
            (reg:SI 154))) -1 (nil))

(insn 39 38 40 5 arch/arm/mm/fault.c:549 (set (reg/f:SI 156)
        (plus:SI (reg:SI 155)
            (reg:SI 153))) -1 (nil))

(insn 40 39 41 5 arch/arm/mm/fault.c:549 (set (mem/s/j:SI (reg/f:SI 156) [0 <variable>.code+0 S4 A32])
        (reg/v:SI 136 [ code ])) -1 (nil))

(insn 41 40 42 5 arch/arm/mm/fault.c:550 (set (reg/f:SI 157)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) -1 (nil))

(insn 42 41 43 5 arch/arm/mm/fault.c:550 (set (reg:SI 158)
        (ashift:SI (reg/v:SI 133 [ nr ])
            (const_int 1 [0x1]))) -1 (nil))

(insn 43 42 44 5 arch/arm/mm/fault.c:550 (set (reg:SI 159)
        (plus:SI (reg:SI 158)
            (const_int 1 [0x1]))) -1 (nil))

(insn 44 43 45 5 arch/arm/mm/fault.c:550 (set (reg:SI 160)
        (const_int 516 [0x204])) -1 (nil))

(insn 45 44 46 5 arch/arm/mm/fault.c:550 (set (reg:SI 161)
        (ashift:SI (reg:SI 159)
            (const_int 3 [0x3]))) -1 (nil))

(insn 46 45 47 5 arch/arm/mm/fault.c:550 (set (reg:SI 162)
        (plus:SI (reg/f:SI 157)
            (reg:SI 161))) -1 (nil))

(insn 47 46 48 5 arch/arm/mm/fault.c:550 (set (reg/f:SI 163)
        (plus:SI (reg:SI 162)
            (reg:SI 160))) -1 (nil))

(insn 48 47 53 5 arch/arm/mm/fault.c:550 (set (mem/s/f/j:SI (reg/f:SI 163) [0 <variable>.name+0 S4 A32])
        (reg/v/f:SI 137 [ name ])) -1 (nil))
;; End of basic block 5 -> ( 6)

;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [100.0%]  (fallthru)
(note 53 48 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(jump_insn 50 53 51 6 arch/arm/mm/fault.c:551 (set (pc)
        (label_ref 52)) -1 (nil))
;; End of basic block 6 -> ( 8)

;; Succ edge  8 [100.0%] 

(barrier 51 50 49)

;; Start of basic block () -> 7
(code_label 49 51 54 7 80 "" [0 uses])

(note 54 49 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 8)

;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 52 54 55 8 82 "" [1 uses])

(note 55 52 0 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)


;; Function exceptions_init (exceptions_init)[0:1301] (unlikely executed)


;; Generating RTL for gimple basic block 2

;; D.24724 = cpu_architecture ();

(call_insn 5 4 6 arch/arm/mm/fault.c:645 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_architecture") [flags 0x41] <function_decl 0x512d9700 cpu_architecture>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (nil))

(insn 6 5 0 arch/arm/mm/fault.c:645 (set (reg:SI 134 [ D.24724 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.24724 > 7)

(insn 7 6 8 arch/arm/mm/fault.c:645 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.24724 ])
            (const_int 7 [0x7]))) -1 (nil))

(jump_insn 8 7 0 arch/arm/mm/fault.c:645 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 3

;; hook_fault_code (4, do_translation_fault, 11, 196609, &"I-cache maintenance fault"[0]);

(insn 10 9 11 arch/arm/mm/fault.c:646 (set (reg:SI 136)
        (symbol_ref:SI ("do_translation_fault") [flags 0x3] <function_decl 0x1147d280 do_translation_fault>)) -1 (nil))

(insn 11 10 12 arch/arm/mm/fault.c:646 (set (reg:SI 137)
        (const_int 196609 [0x30001])) -1 (nil))

(insn 12 11 13 arch/arm/mm/fault.c:646 (set (reg/f:SI 138)
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x1154a280>)) -1 (nil))

(insn 13 12 14 arch/arm/mm/fault.c:646 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/f:SI 138)) -1 (nil))

(insn 14 13 15 arch/arm/mm/fault.c:646 (set (reg:SI 0 r0)
        (const_int 4 [0x4])) -1 (nil))

(insn 15 14 16 arch/arm/mm/fault.c:646 (set (reg:SI 1 r1)
        (reg:SI 136)) -1 (nil))

(insn 16 15 17 arch/arm/mm/fault.c:646 (set (reg:SI 2 r2)
        (const_int 11 [0xb])) -1 (nil))

(insn 17 16 18 arch/arm/mm/fault.c:646 (set (reg:SI 3 r3)
        (reg:SI 137)) -1 (nil))

(call_insn 18 17 0 arch/arm/mm/fault.c:646 (parallel [
            (call (mem:SI (symbol_ref:SI ("hook_fault_code") [flags 0x3] <function_decl 0x512d9400 hook_fault_code>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; Generating RTL for gimple basic block 4

;; 

(code_label 19 18 20 86 "" [0 uses])

(note 20 19 0 NOTE_INSN_BASIC_BLOCK)

;; D.24727 = cpu_architecture ();

(call_insn 21 20 22 arch/arm/mm/fault.c:650 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_architecture") [flags 0x41] <function_decl 0x512d9700 cpu_architecture>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (nil))

(insn 22 21 0 arch/arm/mm/fault.c:650 (set (reg:SI 133 [ D.24727 ])
        (reg:SI 0 r0)) -1 (nil))

;; if (D.24727 > 8)

(insn 23 22 24 arch/arm/mm/fault.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.24727 ])
            (const_int 8 [0x8]))) -1 (nil))

(jump_insn 24 23 0 arch/arm/mm/fault.c:650 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 0)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))

;; Generating RTL for gimple basic block 5

;; hook_fault_code (3, do_bad, 11, 196609, &"section access flag fault"[0]);

(insn 26 25 27 arch/arm/mm/fault.c:655 (set (reg:SI 139)
        (symbol_ref:SI ("do_bad") [flags 0x3] <function_decl 0x1147d480 do_bad>)) -1 (nil))

(insn 27 26 28 arch/arm/mm/fault.c:655 (set (reg:SI 140)
        (const_int 196609 [0x30001])) -1 (nil))

(insn 28 27 29 arch/arm/mm/fault.c:655 (set (reg/f:SI 141)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x1154a2c0>)) -1 (nil))

(insn 29 28 30 arch/arm/mm/fault.c:655 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/f:SI 141)) -1 (nil))

(insn 30 29 31 arch/arm/mm/fault.c:655 (set (reg:SI 0 r0)
        (const_int 3 [0x3])) -1 (nil))

(insn 31 30 32 arch/arm/mm/fault.c:655 (set (reg:SI 1 r1)
        (reg:SI 139)) -1 (nil))

(insn 32 31 33 arch/arm/mm/fault.c:655 (set (reg:SI 2 r2)
        (const_int 11 [0xb])) -1 (nil))

(insn 33 32 34 arch/arm/mm/fault.c:655 (set (reg:SI 3 r3)
        (reg:SI 140)) -1 (nil))

(call_insn 34 33 0 arch/arm/mm/fault.c:655 (parallel [
            (call (mem:SI (symbol_ref:SI ("hook_fault_code") [flags 0x3] <function_decl 0x512d9400 hook_fault_code>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; hook_fault_code (6, do_bad, 11, 196609, &"section access flag fault"[0]);

(insn 35 34 36 arch/arm/mm/fault.c:657 (set (reg:SI 142)
        (symbol_ref:SI ("do_bad") [flags 0x3] <function_decl 0x1147d480 do_bad>)) -1 (nil))

(insn 36 35 37 arch/arm/mm/fault.c:657 (set (reg:SI 143)
        (const_int 196609 [0x30001])) -1 (nil))

(insn 37 36 38 arch/arm/mm/fault.c:657 (set (reg/f:SI 144)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x1154a2c0>)) -1 (nil))

(insn 38 37 39 arch/arm/mm/fault.c:657 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/f:SI 144)) -1 (nil))

(insn 39 38 40 arch/arm/mm/fault.c:657 (set (reg:SI 0 r0)
        (const_int 6 [0x6])) -1 (nil))

(insn 40 39 41 arch/arm/mm/fault.c:657 (set (reg:SI 1 r1)
        (reg:SI 142)) -1 (nil))

(insn 41 40 42 arch/arm/mm/fault.c:657 (set (reg:SI 2 r2)
        (const_int 11 [0xb])) -1 (nil))

(insn 42 41 43 arch/arm/mm/fault.c:657 (set (reg:SI 3 r3)
        (reg:SI 143)) -1 (nil))

(call_insn 43 42 0 arch/arm/mm/fault.c:657 (parallel [
            (call (mem:SI (symbol_ref:SI ("hook_fault_code") [flags 0x3] <function_decl 0x512d9400 hook_fault_code>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

;; Generating RTL for gimple basic block 6

;; 

(code_label 44 43 45 87 "" [0 uses])

(note 45 44 0 NOTE_INSN_BASIC_BLOCK)

;; return 0;

(insn 46 45 47 arch/arm/mm/fault.c:662 (set (reg:SI 135 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 47 46 48 arch/arm/mm/fault.c:662 (set (pc)
        (label_ref 0)) -1 (nil))

(barrier 48 47 0)


;;
;; Full RTL generated for this function:
;;
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 4 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 3)

;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; Pred edge  2 [100.0%]  (fallthru)
(note 4 2 5 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn 5 4 6 3 arch/arm/mm/fault.c:645 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_architecture") [flags 0x41] <function_decl 0x512d9700 cpu_architecture>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (nil))

(insn 6 5 7 3 arch/arm/mm/fault.c:645 (set (reg:SI 134 [ D.24724 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 7 6 8 3 arch/arm/mm/fault.c:645 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.24724 ])
            (const_int 7 [0x7]))) -1 (nil))

(jump_insn 8 7 9 3 arch/arm/mm/fault.c:645 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)

;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; Pred edge  3 [0.0%]  (fallthru)
(note 9 8 10 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 10 9 11 4 arch/arm/mm/fault.c:646 (set (reg:SI 136)
        (symbol_ref:SI ("do_translation_fault") [flags 0x3] <function_decl 0x1147d280 do_translation_fault>)) -1 (nil))

(insn 11 10 12 4 arch/arm/mm/fault.c:646 (set (reg:SI 137)
        (const_int 196609 [0x30001])) -1 (nil))

(insn 12 11 13 4 arch/arm/mm/fault.c:646 (set (reg/f:SI 138)
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x1154a280>)) -1 (nil))

(insn 13 12 14 4 arch/arm/mm/fault.c:646 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/f:SI 138)) -1 (nil))

(insn 14 13 15 4 arch/arm/mm/fault.c:646 (set (reg:SI 0 r0)
        (const_int 4 [0x4])) -1 (nil))

(insn 15 14 16 4 arch/arm/mm/fault.c:646 (set (reg:SI 1 r1)
        (reg:SI 136)) -1 (nil))

(insn 16 15 17 4 arch/arm/mm/fault.c:646 (set (reg:SI 2 r2)
        (const_int 11 [0xb])) -1 (nil))

(insn 17 16 18 4 arch/arm/mm/fault.c:646 (set (reg:SI 3 r3)
        (reg:SI 137)) -1 (nil))

(call_insn 18 17 19 4 arch/arm/mm/fault.c:646 (parallel [
            (call (mem:SI (symbol_ref:SI ("hook_fault_code") [flags 0x3] <function_decl 0x512d9400 hook_fault_code>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 4 -> ( 5)

;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 5
;; Pred edge  3 [100.0%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 19 18 20 5 86 "" [1 uses])

(note 20 19 21 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(call_insn 21 20 22 5 arch/arm/mm/fault.c:650 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_architecture") [flags 0x41] <function_decl 0x512d9700 cpu_architecture>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (nil)
    (nil))

(insn 22 21 23 5 arch/arm/mm/fault.c:650 (set (reg:SI 133 [ D.24727 ])
        (reg:SI 0 r0)) -1 (nil))

(insn 23 22 24 5 arch/arm/mm/fault.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 133 [ D.24727 ])
            (const_int 8 [0x8]))) -1 (nil))

(jump_insn 24 23 25 5 arch/arm/mm/fault.c:650 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) -1 (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 5 -> ( 6 7)

;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; Pred edge  5 [0.0%]  (fallthru)
(note 25 24 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 27 6 arch/arm/mm/fault.c:655 (set (reg:SI 139)
        (symbol_ref:SI ("do_bad") [flags 0x3] <function_decl 0x1147d480 do_bad>)) -1 (nil))

(insn 27 26 28 6 arch/arm/mm/fault.c:655 (set (reg:SI 140)
        (const_int 196609 [0x30001])) -1 (nil))

(insn 28 27 29 6 arch/arm/mm/fault.c:655 (set (reg/f:SI 141)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x1154a2c0>)) -1 (nil))

(insn 29 28 30 6 arch/arm/mm/fault.c:655 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/f:SI 141)) -1 (nil))

(insn 30 29 31 6 arch/arm/mm/fault.c:655 (set (reg:SI 0 r0)
        (const_int 3 [0x3])) -1 (nil))

(insn 31 30 32 6 arch/arm/mm/fault.c:655 (set (reg:SI 1 r1)
        (reg:SI 139)) -1 (nil))

(insn 32 31 33 6 arch/arm/mm/fault.c:655 (set (reg:SI 2 r2)
        (const_int 11 [0xb])) -1 (nil))

(insn 33 32 34 6 arch/arm/mm/fault.c:655 (set (reg:SI 3 r3)
        (reg:SI 140)) -1 (nil))

(call_insn 34 33 35 6 arch/arm/mm/fault.c:655 (parallel [
            (call (mem:SI (symbol_ref:SI ("hook_fault_code") [flags 0x3] <function_decl 0x512d9400 hook_fault_code>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 35 34 36 6 arch/arm/mm/fault.c:657 (set (reg:SI 142)
        (symbol_ref:SI ("do_bad") [flags 0x3] <function_decl 0x1147d480 do_bad>)) -1 (nil))

(insn 36 35 37 6 arch/arm/mm/fault.c:657 (set (reg:SI 143)
        (const_int 196609 [0x30001])) -1 (nil))

(insn 37 36 38 6 arch/arm/mm/fault.c:657 (set (reg/f:SI 144)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x1154a2c0>)) -1 (nil))

(insn 38 37 39 6 arch/arm/mm/fault.c:657 (set (mem:SI (reg/f:SI 131 virtual-outgoing-args) [0 S4 A32])
        (reg/f:SI 144)) -1 (nil))

(insn 39 38 40 6 arch/arm/mm/fault.c:657 (set (reg:SI 0 r0)
        (const_int 6 [0x6])) -1 (nil))

(insn 40 39 41 6 arch/arm/mm/fault.c:657 (set (reg:SI 1 r1)
        (reg:SI 142)) -1 (nil))

(insn 41 40 42 6 arch/arm/mm/fault.c:657 (set (reg:SI 2 r2)
        (const_int 11 [0xb])) -1 (nil))

(insn 42 41 43 6 arch/arm/mm/fault.c:657 (set (reg:SI 3 r3)
        (reg:SI 143)) -1 (nil))

(call_insn 43 42 44 6 arch/arm/mm/fault.c:657 (parallel [
            (call (mem:SI (symbol_ref:SI ("hook_fault_code") [flags 0x3] <function_decl 0x512d9400 hook_fault_code>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) -1 (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 6 -> ( 7)

;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 5 6) -> 7
;; Pred edge  5 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 44 43 45 7 87 "" [1 uses])

(note 45 44 46 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 46 45 47 7 arch/arm/mm/fault.c:662 (set (reg:SI 135 [ <result> ])
        (const_int 0 [0x0])) -1 (nil))

(jump_insn 47 46 48 7 arch/arm/mm/fault.c:662 (set (pc)
        (label_ref 49)) -1 (nil))
;; End of basic block 7 -> ( 9)

;; Succ edge  9 [100.0%] 

(barrier 48 47 57)

;; Start of basic block () -> 8
(note 57 48 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 51 57 52 8 arch/arm/mm/fault.c:662 (clobber (reg/i:SI 0 r0)) -1 (nil))

(insn 52 51 53 8 arch/arm/mm/fault.c:662 (clobber (reg:SI 135 [ <result> ])) -1 (nil))

(jump_insn 53 52 54 8 arch/arm/mm/fault.c:662 (set (pc)
        (label_ref 55)) -1 (nil))
;; End of basic block 8 -> ( 10)

;; Succ edge  10 [100.0%] 

(barrier 54 53 49)

;; Start of basic block ( 7) -> 9
;; Pred edge  7 [100.0%] 
(code_label 49 54 58 9 85 "" [1 uses])

(note 58 49 50 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 50 58 55 9 arch/arm/mm/fault.c:662 (set (reg/i:SI 0 r0)
        (reg:SI 135 [ <result> ])) -1 (nil))
;; End of basic block 9 -> ( 10)

;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 10
;; Pred edge  8 [100.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 55 50 59 10 88 "" [1 uses])

(note 59 55 56 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 56 59 0 10 arch/arm/mm/fault.c:662 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 10 -> ( 1)

;; Succ edge  EXIT [100.0%]  (fallthru)

