
;; Function do_bad (do_bad)[0:1296]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 18(l0): point = 0
   Insn 12(l0): point = 2
Compressing live ranges: from 5 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=2
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=12, live_throughout: 13, 14, dead_or_set: 0
insn=18, live_throughout: 0, 13, 14, dead_or_set: 


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


do_bad

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 13{8d,5u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 12 2 NOTE_INSN_DELETED)

(insn 12 8 18 2 arch/arm/mm/fault.c:489 (set (reg/i:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 18 12 22 2 arch/arm/mm/fault.c:489 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 22 18 23 NOTE_INSN_DELETED)

(note 23 22 0 NOTE_INSN_DELETED)


;; Function __do_user_fault (__do_user_fault)[0:1289]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 34.
rescanning insn with uid = 34.
deleting insn with uid = 34.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)

Pass 0 for finding allocno costs

    a1 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a5(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 25(l0): point = 0
   Insn 16(l0): point = 2
   Insn 18(l0): point = 4
   Insn 17(l0): point = 6
   Insn 20(l0): point = 8
   Insn 19(l0): point = 10
   Insn 34(l0): point = 12
   Insn 23(l0): point = 14
   Insn 14(l0): point = 16
   Insn 13(l0): point = 18
   Insn 24(l0): point = 20
   Insn 11(l0): point = 22
   Insn 22(l0): point = 24
   Insn 12(l0): point = 26
   Insn 3(l0): point = 28
   Insn 5(l0): point = 30
   Insn 2(l0): point = 32
 a0(r137): [3..30]
 a1(r141): [5..6]
 a2(r135): [9..28]
 a3(r138): [11..12]
 a4(r134): [17..32]
 a5(r140): [17..18]
Compressing live ranges: from 35 to 11 - 31%
Ranges after the compression:
 a0(r137): [0..9]
 a1(r141): [1..2]
 a2(r135): [3..8]
 a3(r138): [4..5]
 a4(r134): [6..10]
 a5(r140): [6..7]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r137,l0) conflicts: a1(r141,l0) a2(r135,l0) a3(r138,l0) a5(r140,l0) a4(r134,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a1(r141,l0) conflicts: a0(r137,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a2(r135,l0) conflicts: a0(r137,l0) a3(r138,l0) a5(r140,l0) a4(r134,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a3(r138,l0) conflicts: a0(r137,l0) a2(r135,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a4(r134,l0) conflicts: a0(r137,l0) a2(r135,l0) a5(r140,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a5(r140,l0) conflicts: a0(r137,l0) a2(r135,l0) a4(r134,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2

  regions=1, blocks=3, points=11
    allocnos=6, copies=0, conflicts=1, ranges=6

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r137 1r141 2r135 3r138 4r134 5r140
    modified regnos: 134 135 137 138 140 141
    border:
    Pressure: GENERAL_REGS=6
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 3 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 2 regs less
      Pushing a5(r140,l0)
      Pushing a3(r138,l0)
      Pushing a1(r141,l0)
      Pushing a2(r135,l0)
      Pushing a0(r137,l0)
      Pushing a4(r134,l0)
      Popping a4(r134,l0)  -- assign reg 12
      Popping a0(r137,l0)  -- assign reg 3
      Popping a2(r135,l0)  -- assign reg 14
      Popping a1(r141,l0)  -- assign reg 12
      Popping a3(r138,l0)  -- assign reg 12
      Popping a5(r140,l0)  -- assign reg 1
Disposition:
    4:r134 l0    12    2:r135 l0    14    0:r137 l0     3    3:r138 l0    12
    5:r140 l0     1    1:r141 l0    12
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, dead_or_set: 0, 134
insn=5, live_throughout: 1, 2, 13, 134, dead_or_set: 3, 137
insn=3, live_throughout: 2, 13, 134, 137, dead_or_set: 1, 135
insn=12, live_throughout: 13, 134, 135, 137, dead_or_set: 2
insn=22, live_throughout: 13, 134, 135, 137, dead_or_set: 0
insn=11, live_throughout: 0, 13, 134, 135, 137, dead_or_set: 
insn=24, live_throughout: 0, 13, 134, 135, 137, dead_or_set: 2
insn=13, live_throughout: 0, 2, 13, 134, 135, 137, dead_or_set: 140
insn=14, live_throughout: 0, 2, 13, 135, 137, dead_or_set: 134, 140
insn=23, live_throughout: 0, 2, 13, 135, 137, dead_or_set: 1
insn=34, live_throughout: 0, 1, 2, 13, 135, 137, dead_or_set: 138
insn=19, live_throughout: 0, 1, 2, 13, 135, 137, dead_or_set: 138
insn=20, live_throughout: 0, 1, 2, 13, 137, dead_or_set: 135
insn=17, live_throughout: 0, 1, 2, 13, 137, dead_or_set: 141
insn=18, live_throughout: 0, 1, 2, 13, 137, dead_or_set: 141
insn=16, live_throughout: 0, 1, 2, 13, dead_or_set: 137
insn=25, live_throughout: 13, dead_or_set: 0, 1, 2, 14
init_insns for 138: (insn_list:REG_DEP_TRUE 34 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 13 (nil))
init_insns for 141: (insn_list:REG_DEP_TRUE 17 (nil))
changing reg in insn 2
changing reg in insn 12
changing reg in insn 24
changing reg in insn 14
changing reg in insn 11
changing reg in insn 3
changing reg in insn 20
changing reg in insn 11
changing reg in insn 5
changing reg in insn 22
changing reg in insn 16
changing reg in insn 34
changing reg in insn 19
changing reg in insn 13
changing reg in insn 14
changing reg in insn 17
changing reg in insn 18
Spilling for insn 12.
Spilling for insn 11.
Spilling for insn 14.
Spilling for insn 19.
Spilling for insn 20.
Spilling for insn 18.
Spilling for insn 16.

Reloads for insn # 12
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
                                                        (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
                                                        (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])

Reloads for insn # 11
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
                                                        (const_int 784 [0x310])) [0 <variable>.thread.address+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
                                                        (const_int 784 [0x310])) [0 <variable>.thread.address+0 S4 A64])

Reloads for insn # 14
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
                                                        (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
                                                        (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])

Reloads for insn # 19
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 si.si_code+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 si.si_code+0 S4 A64])

Reloads for insn # 20
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 si._sifields._sigfault._addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 si._sifields._sigfault._addr+0 S4 A32])

Reloads for insn # 18
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 si.si_errno+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 si.si_errno+0 S4 A32])

Reloads for insn # 16
Reload 0: reload_out (SI) = (mem/s/j/c:SI (reg/f:SI 13 sp) [0 si.si_signo+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (reg/f:SI 13 sp) [0 si.si_signo+0 S4 A64])
deleting insn with uid = 5.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 25.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


__do_user_fault

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={3d,2u} r1={4d,3u} r2={3d,2u} r3={2d,2u} r12={5d,6u} r13={1d,9u,1d} r14={3d,3u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 160{132d,27u,1e} in 16{15 regular + 1 call} insns.
(note 1 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 9 8 2 NOTE_INSN_DELETED)

(note 8 4 21 2 NOTE_INSN_FUNCTION_BEG)

(note 21 8 2 2 NOTE_INSN_DELETED)

(insn 2 21 3 2 arch/arm/mm/fault.c:173 (set (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
        (reg:SI 0 r0 [ tsk ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 12 2 arch/arm/mm/fault.c:173 (set (reg/v:SI 14 lr [orig:135 addr ] [135])
        (reg:SI 1 r1 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 12 3 22 2 arch/arm/mm/fault.c:186 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
                (const_int 792 [0x318])) [0 <variable>.thread.error_code+0 S4 A64])
        (reg:SI 2 r2 [ fsr ])) 167 {*arm_movsi_insn} (nil))

(insn 22 12 11 2 arch/arm/mm/fault.c:192 (set (reg:SI 0 r0)
        (reg/v:SI 3 r3 [orig:137 sig ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 11 22 24 2 arch/arm/mm/fault.c:185 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
                (const_int 784 [0x310])) [0 <variable>.thread.address+0 S4 A64])
        (reg/v:SI 14 lr [orig:135 addr ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 24 11 13 2 arch/arm/mm/fault.c:192 (set (reg:SI 2 r2)
        (reg/v/f:SI 12 ip [orig:134 tsk ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 13 24 14 2 arch/arm/mm/fault.c:187 (set (reg:SI 1 r1 [140])
        (const_int 14 [0xe])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 14 [0xe])
        (nil)))

(insn 14 13 23 2 arch/arm/mm/fault.c:187 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:134 tsk ] [134])
                (const_int 788 [0x314])) [0 <variable>.thread.trap_no+0 S4 A32])
        (reg:SI 1 r1 [140])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 14 [0xe])
        (nil)))

(insn 23 14 34 2 arch/arm/mm/fault.c:192 (set (reg:SI 1 r1)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 34 23 19 2 arch/arm/mm/fault.c:190 (set (reg/v:SI 12 ip [orig:138 code ] [138])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 code+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 code+0 S4 A32])
        (nil)))

(insn 19 34 20 2 arch/arm/mm/fault.c:190 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 si.si_code+0 S4 A64])
        (reg/v:SI 12 ip [orig:138 code ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 20 19 17 2 arch/arm/mm/fault.c:191 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 si._sifields._sigfault._addr+0 S4 A32])
        (reg/v:SI 14 lr [orig:135 addr ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 17 20 18 2 arch/arm/mm/fault.c:189 (set (reg:SI 12 ip [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 18 17 16 2 arch/arm/mm/fault.c:189 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 si.si_errno+0 S4 A32])
        (reg:SI 12 ip [141])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 16 18 25 2 arch/arm/mm/fault.c:188 (set (mem/s/j/c:SI (reg/f:SI 13 sp) [0 si.si_signo+0 S4 A64])
        (reg/v:SI 3 r3 [orig:137 sig ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn 25 16 33 2 arch/arm/mm/fault.c:192 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("force_sig_info") [flags 0x41] <function_decl 0x11156f80 force_sig_info>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 33 25 35 NOTE_INSN_DELETED)

(note 35 33 0 NOTE_INSN_DELETED)


;; Function show_pte (show_pte)[0:1287]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 133.
verify found no changes in insn with uid = 133.
deleting insn with uid = 50.
scanning new insn with uid = 134.
verify found no changes in insn with uid = 134.
deleting insn with uid = 48.
scanning new insn with uid = 135.
verify found no changes in insn with uid = 135.
deleting insn with uid = 44.
scanning new insn with uid = 136.
verify found no changes in insn with uid = 136.
deleting insn with uid = 124.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 13 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)

Pass 0 for finding allocno costs

    a20 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a10(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r178: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r163,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a5(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a7(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a9(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a10(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 129(l0): point = 0
   Insn 83(l0): point = 2
   Insn 81(l0): point = 4
   Insn 104(l0): point = 6
   Insn 103(l0): point = 8
   Insn 77(l0): point = 10
   Insn 99(l0): point = 12
   Insn 71(l0): point = 14
   Insn 75(l0): point = 16
   Insn 66(l0): point = 18
   Insn 100(l0): point = 20
   Insn 132(l0): point = 22
   Insn 69(l0): point = 24
   Insn 131(l0): point = 26
   Insn 60(l0): point = 29
   Insn 59(l0): point = 31
   Insn 55(l0): point = 34
   Insn 54(l0): point = 36
   Insn 53(l0): point = 38
   Insn 52(l0): point = 40
   Insn 51(l0): point = 42
   Insn 134(l0): point = 44
   Insn 133(l0): point = 46
   Insn 47(l0): point = 48
   Insn 46(l0): point = 50
   Insn 45(l0): point = 52
   Insn 135(l0): point = 54
   Insn 43(l0): point = 56
   Insn 127(l0): point = 59
   Insn 38(l0): point = 61
   Insn 37(l0): point = 63
   Insn 34(l0): point = 66
   Insn 33(l0): point = 68
   Insn 30(l0): point = 71
   Insn 29(l0): point = 73
   Insn 28(l0): point = 75
   Insn 27(l0): point = 77
   Insn 95(l0): point = 79
   Insn 96(l0): point = 81
   Insn 25(l0): point = 83
   Insn 24(l0): point = 85
   Insn 19(l0): point = 87
   Insn 16(l0): point = 89
   Insn 15(l0): point = 91
   Insn 17(l0): point = 93
   Insn 14(l0): point = 95
   Insn 126(l0): point = 97
   Insn 136(l0): point = 99
   Insn 3(l0): point = 101
 a0(r146): [66..68] [34..58] [7..28]
 a1(r134): [9..14]
 a2(r161): [13..18]
 a3(r163): [13..24]
 a4(r159): [19..26]
 a5(r138): [66..101] [34..58] [25..28]
 a6(r136): [66..75] [34..58] [27..28]
 a7(r156): [37..38]
 a8(r157): [39..40]
 a9(r133): [39..42]
 a10(r155): [43..46]
 a11(r151): [43..48]
 a12(r154): [43..44]
 a13(r152): [49..50]
 a14(r149): [51..52]
 a15(r148): [51..56]
 a16(r150): [53..54]
 a17(r142): [76..87]
 a18(r140): [76..93]
 a19(r137): [88..97]
 a20(r178): [98..99]
Compressing live ranges: from 104 to 40 - 38%
Ranges after the compression:
 a0(r146): [29..30] [11..28] [0..10]
 a1(r134): [1..3]
 a2(r161): [2..4]
 a3(r163): [2..6]
 a4(r159): [5..8]
 a5(r138): [29..39] [11..28] [7..10]
 a6(r136): [29..31] [11..28] [9..10]
 a7(r156): [12..13]
 a8(r157): [14..15]
 a9(r133): [14..16]
 a10(r155): [17..19]
 a11(r151): [17..20]
 a12(r154): [17..18]
 a13(r152): [21..22]
 a14(r149): [23..24]
 a15(r148): [23..27]
 a16(r150): [25..26]
 a17(r142): [32..33]
 a18(r140): [32..35]
 a19(r137): [34..36]
 a20(r178): [37..38]
+++Allocating 168 bytes for conflict table (uncompressed size 168)
;; a0(r146,l0) conflicts: a1(r134,l0) a2(r161,l0) a3(r163,l0) a4(r159,l0) a5(r138,l0) a6(r136,l0) a7(r156,l0) a8(r157,l0) a9(r133,l0) a12(r154,l0) a10(r155,l0) a11(r151,l0) a13(r152,l0) a14(r149,l0) a15(r148,l0) a16(r150,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a1(r134,l0) conflicts: a0(r146,l0) a2(r161,l0) a3(r163,l0)
;;     total conflict hard regs: 0 2 3 14
;;     conflict hard regs: 0 2 3 14
;; a2(r161,l0) conflicts: a0(r146,l0) a1(r134,l0) a3(r163,l0)
;;     total conflict hard regs: 0 3
;;     conflict hard regs: 0 3
;; a3(r163,l0) conflicts: a0(r146,l0) a1(r134,l0) a2(r161,l0) a4(r159,l0)
;;     total conflict hard regs: 0 3
;;     conflict hard regs: 0 3
;; a4(r159,l0) conflicts: a0(r146,l0) a3(r163,l0) a5(r138,l0)
;;     total conflict hard regs: 3
;;     conflict hard regs: 3
;; a5(r138,l0) conflicts: a0(r146,l0) a4(r159,l0) a6(r136,l0) a7(r156,l0) a8(r157,l0) a9(r133,l0) a12(r154,l0) a10(r155,l0) a11(r151,l0) a13(r152,l0) a14(r149,l0) a15(r148,l0) a16(r150,l0) a17(r142,l0) a18(r140,l0) a19(r137,l0) a20(r178,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r136,l0) conflicts: a0(r146,l0) a5(r138,l0) a7(r156,l0) a8(r157,l0) a9(r133,l0) a12(r154,l0) a10(r155,l0) a11(r151,l0) a13(r152,l0) a14(r149,l0) a15(r148,l0) a16(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r156,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r157,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0) a9(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r133,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0) a8(r157,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r155,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0) a12(r154,l0) a11(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r151,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0) a12(r154,l0) a10(r155,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r154,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0) a10(r155,l0) a11(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r152,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r149,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0) a15(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r148,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0) a14(r149,l0) a16(r150,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r150,l0) conflicts: a0(r146,l0) a5(r138,l0) a6(r136,l0) a15(r148,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r142,l0) conflicts: a5(r138,l0) a18(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a18(r140,l0) conflicts: a5(r138,l0) a17(r142,l0) a19(r137,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a19(r137,l0) conflicts: a5(r138,l0) a18(r140,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a20(r178,l0) conflicts: a5(r138,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0

  cp0:a4(r159)<->a6(r136)@125:shuffle
  cp1:a3(r163)<->a5(r138)@125:shuffle
  cp2:a2(r161)<->a4(r159)@125:shuffle
  cp3:a11(r151)<->a13(r152)@125:shuffle
  cp4:a9(r133)<->a11(r151)@125:shuffle
  cp5:a9(r133)<->a12(r154)@125:shuffle
  cp6:a9(r133)<->a10(r155)@125:shuffle
  cp7:a7(r156)<->a9(r133)@125:shuffle
  cp8:a7(r156)<->a8(r157)@125:shuffle
  cp9:a19(r137)<->a20(r178)@125:shuffle
  regions=1, blocks=8, points=40
    allocnos=21, copies=10, conflicts=1, ranges=27

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 7 6 5 4 3 2
    all: 0r146 1r134 2r161 3r163 4r159 5r138 6r136 7r156 8r157 9r133 10r155 11r151 12r154 13r152 14r149 15r148 16r150 17r142 18r140 19r137 20r178
    modified regnos: 133 134 136 137 138 140 142 146 148 149 150 151 152 154 155 156 157 159 161 163 178
    border:
    Pressure: GENERAL_REGS=8
    Reg 146 of GENERAL_REGS has 4 regs less
    Reg 134 of GENERAL_REGS has 4 regs less
    Reg 161 of GENERAL_REGS has 2 regs less
    Reg 163 of GENERAL_REGS has 2 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 156 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 152 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 148 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 5 regs less
    Reg 140 of GENERAL_REGS has 5 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
      Pushing a20(r178,l0)
      Pushing a16(r150,l0)
      Pushing a15(r148,l0)
      Pushing a14(r149,l0)
      Pushing a13(r152,l0)
      Pushing a12(r154,l0)
      Pushing a11(r151,l0)
      Pushing a10(r155,l0)
      Pushing a8(r157,l0)
      Pushing a7(r156,l0)
      Pushing a9(r133,l0)
      Pushing a4(r159,l0)
      Pushing a6(r136,l0)
      Pushing a3(r163,l0)
      Pushing a2(r161,l0)
      Pushing a19(r137,l0)
      Pushing a1(r134,l0)
      Pushing a0(r146,l0)
      Pushing a18(r140,l0)
      Pushing a17(r142,l0)
      Pushing a5(r138,l0)
      Popping a5(r138,l0)  -- assign reg 4
      Popping a17(r142,l0)  -- assign reg 5
      Popping a18(r140,l0)  -- assign reg 6
      Popping a0(r146,l0)  -- assign reg 5
      Popping a1(r134,l0)  -- assign reg 6
      Popping a19(r137,l0)  -- assign reg 5
      Popping a2(r161,l0)  -- assign reg 2
      Popping a3(r163,l0)  -- assign reg 4
      Popping a6(r136,l0)  -- assign reg 2
      Popping a4(r159,l0)  -- assign reg 2
      Popping a9(r133,l0)  -- assign reg 3
      Popping a7(r156,l0)  -- assign reg 3
      Popping a8(r157,l0)  -- assign reg 1
      Popping a10(r155,l0)  -- assign reg 1
      Popping a11(r151,l0)  -- assign reg 3
      Popping a12(r154,l0)  -- assign reg 0
      Popping a13(r152,l0)  -- assign reg 3
      Popping a14(r149,l0)  -- assign reg 3
      Popping a15(r148,l0)  -- assign reg 1
      Popping a16(r150,l0)  -- assign reg 3
      Popping a20(r178,l0)  -- assign reg 5
Disposition:
    9:r133 l0     3    1:r134 l0     6    6:r136 l0     2   19:r137 l0     5
    5:r138 l0     4   18:r140 l0     6   17:r142 l0     5    0:r146 l0     5
   15:r148 l0     1   14:r149 l0     3   16:r150 l0     3   11:r151 l0     3
   13:r152 l0     3   12:r154 l0     0   10:r155 l0     1    7:r156 l0     3
    8:r157 l0     1    4:r159 l0     2    2:r161 l0     2    3:r163 l0     4
   20:r178 l0     5
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 13, dead_or_set: 1, 138
insn=136, live_throughout: 0, 13, 138, dead_or_set: 178
insn=126, live_throughout: 13, 138, dead_or_set: 0, 137, 178
insn=14, live_throughout: 13, 137, 138, dead_or_set: 0
insn=17, live_throughout: 0, 13, 137, 138, dead_or_set: 140
insn=15, live_throughout: 0, 13, 137, 138, 140, dead_or_set: 1
insn=16, live_throughout: 13, 137, 138, 140, dead_or_set: 0, 1, 14
insn=19, live_throughout: 13, 138, 140, dead_or_set: 137, 142
insn=24, live_throughout: 13, 138, 140, 142, dead_or_set: 0
insn=25, live_throughout: 0, 13, 138, 140, 142, dead_or_set: 1
insn=96, live_throughout: 0, 1, 13, 138, 140, 142, dead_or_set: 3
insn=95, live_throughout: 0, 1, 3, 13, 138, 140, 142, dead_or_set: 2
insn=27, live_throughout: 13, 138, 140, 142, dead_or_set: 0, 1, 2, 3, 14
insn=28, live_throughout: 13, 14, 138, dead_or_set: 136, 140, 142
insn=29, live_throughout: 13, 14, 136, 138, dead_or_set: 
insn=30, live_throughout: 13, 14, 136, 138, dead_or_set: 
insn=33, live_throughout: 13, 14, 136, 138, dead_or_set: 146
insn=34, live_throughout: 13, 14, 136, 138, 146, dead_or_set: 
insn=37, live_throughout: 13, dead_or_set: 0
insn=38, live_throughout: 13, dead_or_set: 0, 14
insn=127, live_throughout: 13, 14, dead_or_set: 
insn=41, live_throughout: 13, 14, 136, 138, 146, dead_or_set: 
insn=43, live_throughout: 13, 14, 136, 138, 146, dead_or_set: 148
insn=135, live_throughout: 13, 14, 136, 138, 146, 148, dead_or_set: 150
insn=45, live_throughout: 13, 14, 136, 138, 146, 148, dead_or_set: 149, 150
insn=46, live_throughout: 13, 14, 136, 138, 146, dead_or_set: 148, 149, 152
insn=47, live_throughout: 13, 14, 136, 138, 146, dead_or_set: 151, 152
insn=133, live_throughout: 13, 14, 136, 138, 146, 151, dead_or_set: 155
insn=134, live_throughout: 13, 14, 136, 138, 146, 151, 155, dead_or_set: 154
insn=51, live_throughout: 13, 14, 136, 138, 146, dead_or_set: 133, 151, 154, 155
insn=52, live_throughout: 13, 14, 133, 136, 138, 146, dead_or_set: 157
insn=53, live_throughout: 13, 14, 136, 138, 146, dead_or_set: 133, 156, 157
insn=54, live_throughout: 13, 14, 136, 138, 146, dead_or_set: 156
insn=55, live_throughout: 13, 14, 136, 138, 146, dead_or_set: 
insn=56, live_throughout: 13, 14, dead_or_set: 
insn=59, live_throughout: 13, 14, dead_or_set: 0
insn=60, live_throughout: 13, 14, dead_or_set: 0
insn=62, live_throughout: 13, 136, 138, 146, dead_or_set: 
insn=131, live_throughout: 13, 138, 146, dead_or_set: 136, 159
insn=69, live_throughout: 13, 146, 159, dead_or_set: 138, 163
insn=132, live_throughout: 13, 146, 163, dead_or_set: 159
insn=100, live_throughout: 13, 146, 159, 163, dead_or_set: 3
insn=66, live_throughout: 3, 13, 146, 163, dead_or_set: 159, 161
insn=75, live_throughout: 3, 13, 146, 161, 163, dead_or_set: 0
insn=71, live_throughout: 0, 3, 13, 146, 161, 163, dead_or_set: 134
insn=99, live_throughout: 0, 3, 13, 134, 146, dead_or_set: 2, 161, 163
insn=77, live_throughout: 13, 134, 146, dead_or_set: 0, 2, 3, 14
insn=103, live_throughout: 13, 146, dead_or_set: 2, 134
insn=104, live_throughout: 2, 13, dead_or_set: 3, 146
insn=81, live_throughout: 2, 3, 13, dead_or_set: 0
insn=83, live_throughout: 13, dead_or_set: 0, 2, 3, 14
insn=129, live_throughout: 13, 14, dead_or_set: 
init_insns for 150: (insn_list:REG_DEP_TRUE 135 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 134 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 133 (nil))
init_insns for 157: (insn_list:REG_DEP_TRUE 52 (nil))
init_insns for 178: (insn_list:REG_DEP_TRUE 136 (nil))
changing reg in insn 51
changing reg in insn 53
changing reg in insn 52
changing reg in insn 52
changing reg in insn 71
changing reg in insn 103
changing reg in insn 28
changing reg in insn 131
changing reg in insn 33
changing reg in insn 33
changing reg in insn 43
changing reg in insn 29
changing reg in insn 126
changing reg in insn 19
changing reg in insn 15
changing reg in insn 3
changing reg in insn 69
changing reg in insn 25
changing reg in insn 17
changing reg in insn 17
changing reg in insn 95
changing reg in insn 28
changing reg in insn 19
changing reg in insn 95
changing reg in insn 28
changing reg in insn 33
changing reg in insn 104
changing reg in insn 100
changing reg in insn 43
changing reg in insn 46
changing reg in insn 45
changing reg in insn 46
changing reg in insn 135
changing reg in insn 45
changing reg in insn 47
changing reg in insn 51
changing reg in insn 46
changing reg in insn 47
changing reg in insn 134
changing reg in insn 51
changing reg in insn 133
changing reg in insn 51
changing reg in insn 53
changing reg in insn 54
changing reg in insn 52
changing reg in insn 53
changing reg in insn 132
changing reg in insn 131
changing reg in insn 132
changing reg in insn 66
changing reg in insn 66
changing reg in insn 99
changing reg in insn 71
changing reg in insn 69
changing reg in insn 99
changing reg in insn 71
changing reg in insn 136
changing reg in insn 126


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 27.
verify found no changes in insn with uid = 38.
verify found no changes in insn with uid = 60.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 83.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 13 (  1.6)
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)


show_pte

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={14d,9u} r1={12d,6u} r2={14d,12u} r3={16d,10u,1d} r4={2d,5u} r5={4d,7u} r6={2d,3u} r12={7d} r13={1d,13u} r14={6d,1u} r15={6d} r16={6d} r17={6d} r18={6d} r19={6d} r20={6d} r21={6d} r22={6d} r23={6d} r24={10d,3u} r27={6d} r28={6d} r29={6d} r30={6d} r31={6d} r32={6d} r33={6d} r34={6d} r35={6d} r36={6d} r37={6d} r38={6d} r39={6d} r40={6d} r41={6d} r42={6d} r43={6d} r44={6d} r45={6d} r46={6d} r47={6d} r48={6d} r49={6d} r50={6d} r51={6d} r52={6d} r53={6d} r54={6d} r55={6d} r56={6d} r57={6d} r58={6d} r59={6d} r60={6d} r61={6d} r62={6d} r63={6d} r64={6d} r65={6d} r66={6d} r67={6d} r68={6d} r69={6d} r70={6d} r71={6d} r72={6d} r73={6d} r74={6d} r75={6d} r76={6d} r77={6d} r78={6d} r79={6d} r80={6d} r81={6d} r82={6d} r83={6d} r84={6d} r85={6d} r86={6d} r87={6d} r88={6d} r89={6d} r90={6d} r91={6d} r92={6d} r93={6d} r94={6d} r95={6d} r96={6d} r97={6d} r98={6d} r99={6d} r100={6d} r101={6d} r102={6d} r103={6d} r104={6d} r105={6d} r106={6d} r107={6d} r108={6d} r109={6d} r110={6d} r111={6d} r112={6d} r113={6d} r114={6d} r115={6d} r116={6d} r117={6d} r118={6d} r119={6d} r120={6d} r121={6d} r122={6d} r123={6d} r124={6d} r125={6d} r126={6d} r127={6d} 
;;    total ref usage 818{748d,69u,1e} in 49{43 regular + 6 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 7 2 NOTE_INSN_FUNCTION_BEG)

(note 7 4 22 2 NOTE_INSN_DELETED)

(note 22 7 3 2 NOTE_INSN_DELETED)

(insn 3 22 136 2 arch/arm/mm/fault.c:71 (set (reg/v:SI 4 r4 [orig:138 addr ] [138])
        (reg:SI 1 r1 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 136 3 126 2 arch/arm/mm/fault.c:75 (set (reg/f:SI 5 r5 [178])
        (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x111538a0 init_mm>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x111538a0 init_mm>)
        (nil)))

(insn 126 136 14 2 arch/arm/mm/fault.c:75 (parallel [
            (set (reg/v/f:SI 5 r5 [orig:137 mm ] [137])
                (if_then_else:SI (ne (reg:SI 0 r0 [ mm ])
                        (const_int 0 [0x0]))
                    (reg:SI 0 r0 [ mm ])
                    (reg/f:SI 5 r5 [178])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(insn 14 126 17 2 arch/arm/mm/fault.c:77 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114bfdb0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114bfdb0>)
        (nil)))

(insn 17 14 15 2 arch/arm/mm/fault.c:78 (set (reg:SI 6 r6 [140])
        (lshiftrt:SI (reg/v:SI 4 r4 [orig:138 addr ] [138])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn 15 17 16 2 arch/arm/mm/fault.c:77 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:137 mm ] [137])
                (const_int 36 [0x24])) [0 <variable>.pgd+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 16 15 19 2 arch/arm/mm/fault.c:77 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 19 16 24 2 arch/arm/mm/fault.c:78 (set (reg/f:SI 5 r5 [orig:142 <variable>.pgd ] [142])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:137 mm ] [137])
                (const_int 36 [0x24])) [0 <variable>.pgd+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 24 19 25 2 arch/arm/mm/fault.c:79 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x114b7420>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x114b7420>)
        (nil)))

(insn 25 24 96 2 arch/arm/mm/fault.c:79 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:138 addr ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 96 25 95 2 arch/arm/mm/fault.c:79 (set (reg:SI 3 r3 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 95 96 27 2 arch/arm/mm/fault.c:79 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 6 r6 [140])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:142 <variable>.pgd ] [142])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 27 95 28 2 arch/arm/mm/fault.c:79 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 28 27 29 2 arch/arm/mm/fault.c:111 (set (reg:SI 2 r2 [orig:136 D.24402 ] [136])
        (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [140])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:142 <variable>.pgd ] [142])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 29 28 30 2 arch/arm/mm/fault.c:111 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:136 D.24402 ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 30 29 31 2 arch/arm/mm/fault.c:111 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 56)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 13 [sp]


;; Succ edge  6 [39.0%] 
;; Succ edge  3 [61.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 31 30 32 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 32 31 33 3 NOTE_INSN_DELETED)

(insn 33 32 34 3 arch/arm/mm/fault.c:114 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 2 r2 [orig:136 D.24402 ] [136])
                        (const_int 2 [0x2]))
                    (const_int 0 [0x0])))
            (set (reg:SI 5 r5 [146])
                (and:SI (reg:SI 2 r2 [orig:136 D.24402 ] [136])
                    (const_int 2 [0x2])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 34 33 35 3 arch/arm/mm/fault.c:114 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru)
(note 35 34 37 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 37 35 38 4 arch/arm/mm/fault.c:115 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x114e0740>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x114e0740>)
        (nil)))

(call_insn 38 37 127 4 arch/arm/mm/fault.c:115 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 127 38 128 4 arch/arm/mm/fault.c:116 (set (pc)
        (label_ref 56)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 128 127 41)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 41 128 42 5 8 "" [1 uses])

(note 42 41 49 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 49 42 43 5 NOTE_INSN_DELETED)

(insn 43 49 135 5 include/linux/mm.h:692 (set (reg:SI 1 r1 [148])
        (lshiftrt:SI (reg:SI 2 r2 [orig:136 D.24402 ] [136])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 135 43 45 5 include/linux/mm.h:692 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn 45 135 46 5 include/linux/mm.h:692 (set (reg/f:SI 3 r3 [orig:149 mem_map ] [149])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [150]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 46 45 47 5 include/linux/mm.h:692 (set (reg:SI 3 r3 [orig:152 <variable>.flags ] [152])
        (mem/s/j:SI (plus:SI (mult:SI (reg:SI 1 r1 [148])
                    (const_int 32 [0x20]))
                (reg/f:SI 3 r3 [orig:149 mem_map ] [149])) [0 <variable>.flags+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 47 46 133 5 include/linux/mm.h:692 (set (reg:SI 3 r3 [151])
        (lshiftrt:SI (reg:SI 3 r3 [orig:152 <variable>.flags ] [152])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn 133 47 134 5 include/linux/mm.h:692 (set (reg/f:SI 1 r1 [155])
        (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)
        (nil)))

(insn 134 133 51 5 include/linux/mm.h:692 (set (reg:SI 0 r0 [154])
        (const_int 768 [0x300])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 768 [0x300])
        (nil)))

(insn 51 134 52 5 include/linux/mm.h:692 (set (reg/f:SI 3 r3 [orig:133 D.24788 ] [133])
        (plus:SI (mult:SI (reg:SI 0 r0 [154])
                (reg:SI 3 r3 [151]))
            (reg/f:SI 1 r1 [155]))) 40 {*mulsi3addsi_v6} (nil))

(insn 52 51 53 5 include/linux/mmzone.h:741 (set (reg/f:SI 1 r1 [orig:157 <variable>.zone_pgdat ] [157])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:133 D.24788 ] [133])
                (const_int 748 [0x2ec])) [0 <variable>.zone_pgdat+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:133 D.24788 ] [133])
                (const_int 748 [0x2ec])) [0 <variable>.zone_pgdat+0 S4 A32])
        (nil)))

(insn 53 52 54 5 include/linux/mmzone.h:741 (set (reg:SI 3 r3 [156])
        (minus:SI (reg/f:SI 3 r3 [orig:133 D.24788 ] [133])
            (reg/f:SI 1 r1 [orig:157 <variable>.zone_pgdat ] [157]))) 28 {*arm_subsi3_insn} (nil))

(insn 54 53 55 5 include/linux/mmzone.h:741 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [156])
            (const_int 768 [0x300]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 55 54 56 5 include/linux/mmzone.h:741 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]


;; Succ edge  6 [28.0%]  (fallthru)
;; Succ edge  7 [72.0%] 

;; Start of basic block ( 4 5 2 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%] 
;; Pred edge  5 [28.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
;; Pred edge  7 [100.0%] 
(code_label 56 55 57 6 7 "" [3 uses])

(note 57 56 59 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 59 57 60 6 arch/arm/mm/fault.c:130 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114e09e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114e09e0>)
        (nil)))

(call_insn/j 60 59 61 6 arch/arm/mm/fault.c:130 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 6 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 61 60 62)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6]
;; live  kill	 14 [lr]

;; Pred edge  5 [72.0%] 
(code_label 62 61 63 7 9 "" [1 uses])

(note 63 62 64 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 64 63 67 7 NOTE_INSN_DELETED)

(note 67 64 68 7 NOTE_INSN_DELETED)

(note 68 67 70 7 NOTE_INSN_DELETED)

(note 70 68 73 7 NOTE_INSN_DELETED)

(note 73 70 79 7 NOTE_INSN_DELETED)

(note 79 73 131 7 NOTE_INSN_DELETED)

(insn 131 79 69 7 arch/arm/mm/fault.c:123 (set (reg:SI 2 r2 [159])
        (and:SI (reg:SI 2 r2 [orig:136 D.24402 ] [136])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 69 131 132 7 arch/arm/mm/fault.c:123 (set (reg:SI 4 r4 [163])
        (zero_extract:SI (reg/v:SI 4 r4 [orig:138 addr ] [138])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (nil))

(insn 132 69 100 7 arch/arm/mm/fault.c:123 (set (reg:SI 2 r2 [159])
        (and:SI (reg:SI 2 r2 [159])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 100 132 66 7 arch/arm/mm/fault.c:124 (set (reg:SI 3 r3 [+4 ])
        (reg:SI 5 r5 [146])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 66 100 75 7 arch/arm/mm/fault.c:123 (set (reg:SI 2 r2 [161])
        (plus:SI (reg:SI 2 r2 [159])
            (const_int -1073741824 [0xffffffffc0000000]))) 4 {*arm_addsi3} (nil))

(insn 75 66 71 7 arch/arm/mm/fault.c:124 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114e1ab0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114e1ab0>)
        (nil)))

(insn 71 75 99 7 arch/arm/mm/fault.c:123 (set (reg/v/f:SI 6 r6 [orig:134 pte ] [134])
        (plus:SI (mult:SI (reg:SI 4 r4 [163])
                (const_int 4 [0x4]))
            (reg:SI 2 r2 [161]))) 270 {*arith_shiftsi} (nil))

(insn 99 71 77 7 arch/arm/mm/fault.c:124 (set (reg:SI 2 r2)
        (mem:SI (plus:SI (mult:SI (reg:SI 4 r4 [163])
                    (const_int 4 [0x4]))
                (reg:SI 2 r2 [161])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 77 99 103 7 arch/arm/mm/fault.c:124 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 103 77 104 7 arch/arm/mm/fault.c:125 (set (reg:SI 2 r2)
        (mem:SI (plus:SI (reg/v/f:SI 6 r6 [orig:134 pte ] [134])
                (const_int 2048 [0x800])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 104 103 81 7 arch/arm/mm/fault.c:125 (set (reg:SI 3 r3 [+4 ])
        (reg:SI 5 r5 [146])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 81 104 83 7 arch/arm/mm/fault.c:125 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114e1c60>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114e1c60>)
        (nil)))

(call_insn 83 81 129 7 arch/arm/mm/fault.c:125 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 129 83 130 7 (set (pc)
        (label_ref 56)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  6 [100.0%] 

(barrier 130 129 137)

(note 137 130 0 NOTE_INSN_DELETED)


;; Function __do_kernel_fault (__do_kernel_fault)[0:1288]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 61.
verify found no changes in insn with uid = 61.
deleting insn with uid = 57.
scanning new insn with uid = 62.
verify found no changes in insn with uid = 62.
deleting insn with uid = 56.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 6 (  1.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 8 (  1.6)

Pass 0 for finding allocno costs

    a5 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a4(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r143,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a6(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000


Pass 1 for finding allocno costs

    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r136,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a4(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r143,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000
  a6(r142,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:22000

   Insn 45(l0): point = 1
   Insn 44(l0): point = 3
   Insn 43(l0): point = 5
   Insn 42(l0): point = 7
   Insn 41(l0): point = 9
   Insn 38(l0): point = 11
   Insn 40(l0): point = 13
   Insn 39(l0): point = 15
   Insn 36(l0): point = 17
   Insn 35(l0): point = 19
   Insn 34(l0): point = 21
   Insn 33(l0): point = 23
   Insn 31(l0): point = 25
   Insn 62(l0): point = 27
   Insn 61(l0): point = 29
   Insn 30(l0): point = 31
   Insn 32(l0): point = 33
   Insn 16(l0): point = 35
   Insn 15(l0): point = 37
   Insn 13(l0): point = 40
   Insn 12(l0): point = 42
   Insn 10(l0): point = 44
   Insn 4(l0): point = 46
   Insn 3(l0): point = 48
   Insn 9(l0): point = 50
   Insn 2(l0): point = 52
   Insn 5(l0): point = 54
 a0(r134): [8..42]
 a1(r137): [14..46]
 a2(r138): [16..54]
 a3(r136): [20..48]
 a4(r135): [22..52]
 a5(r143): [26..29]
 a6(r142): [26..27]
Compressing live ranges: from 57 to 13 - 22%
Ranges after the compression:
 a0(r134): [0..8]
 a1(r137): [1..9]
 a2(r138): [2..12]
 a3(r136): [3..10]
 a4(r135): [4..11]
 a5(r143): [5..7]
 a6(r142): [5..6]
+++Allocating 56 bytes for conflict table (uncompressed size 56)
;; a0(r134,l0) conflicts: a1(r137,l0) a2(r138,l0) a3(r136,l0) a4(r135,l0) a6(r142,l0) a5(r143,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r137,l0) conflicts: a0(r134,l0) a2(r138,l0) a3(r136,l0) a4(r135,l0) a6(r142,l0) a5(r143,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r138,l0) conflicts: a0(r134,l0) a1(r137,l0) a3(r136,l0) a4(r135,l0) a6(r142,l0) a5(r143,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r136,l0) conflicts: a0(r134,l0) a1(r137,l0) a2(r138,l0) a4(r135,l0) a6(r142,l0) a5(r143,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a4(r135,l0) conflicts: a0(r134,l0) a1(r137,l0) a2(r138,l0) a3(r136,l0) a6(r142,l0) a5(r143,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a5(r143,l0) conflicts: a0(r134,l0) a1(r137,l0) a2(r138,l0) a3(r136,l0) a4(r135,l0) a6(r142,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2
;; a6(r142,l0) conflicts: a0(r134,l0) a1(r137,l0) a2(r138,l0) a3(r136,l0) a4(r135,l0) a5(r143,l0)
;;     total conflict hard regs: 0 2
;;     conflict hard regs: 0 2

  regions=1, blocks=5, points=13
    allocnos=7, copies=0, conflicts=0, ranges=7

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r134 1r137 2r138 3r136 4r135 5r143 6r142
    modified regnos: 134 135 136 137 138 142 143
    border:
    Pressure: GENERAL_REGS=9
    Reg 134 of GENERAL_REGS has 4 regs less
    Reg 137 of GENERAL_REGS has 4 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 2 regs less
    Reg 142 of GENERAL_REGS has 2 regs less
      Pushing a6(r142,l0)
      Pushing a5(r143,l0)
      Pushing a4(r135,l0)
      Pushing a1(r137,l0)
      Pushing a0(r134,l0)
      Pushing a2(r138,l0)
      Pushing a3(r136,l0)
      Popping a3(r136,l0)  -- assign reg 4
      Popping a2(r138,l0)  -- assign reg 5
      Popping a0(r134,l0)  -- assign reg 6
      Popping a1(r137,l0)  -- assign reg 7
      Popping a4(r135,l0)  -- assign reg 8
      Popping a5(r143,l0)  -- assign reg 3
      Popping a6(r142,l0)  -- assign reg 1
Disposition:
    0:r134 l0     6    4:r135 l0     8    3:r136 l0     4    1:r137 l0     7
    2:r138 l0     5    6:r142 l0     1    5:r143 l0     3
New iteration of spill/restore move
+++Costs: overall 5750, reg 5750, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 138
insn=2, live_throughout: 1, 2, 13, 138, dead_or_set: 0, 135
insn=9, live_throughout: 1, 2, 13, 135, 138, dead_or_set: 0
insn=3, live_throughout: 0, 2, 13, 135, 138, dead_or_set: 1, 136
insn=4, live_throughout: 0, 13, 135, 136, 138, dead_or_set: 2, 137
insn=10, live_throughout: 13, 135, 136, 137, 138, dead_or_set: 0, 14
insn=12, live_throughout: 13, 14, 135, 136, 137, 138, dead_or_set: 0, 134
insn=13, live_throughout: 13, 14, 134, 135, 136, 137, 138, dead_or_set: 
insn=15, live_throughout: 13, 134, 135, 136, 137, 138, dead_or_set: 0
insn=16, live_throughout: 13, 134, 135, 136, 137, 138, dead_or_set: 0, 14
insn=32, live_throughout: 13, 134, 135, 136, 137, 138, dead_or_set: 2
insn=30, live_throughout: 2, 13, 134, 135, 136, 137, 138, dead_or_set: 0
insn=61, live_throughout: 0, 2, 13, 134, 135, 136, 137, 138, dead_or_set: 143
insn=62, live_throughout: 0, 2, 13, 134, 135, 136, 137, 138, 143, dead_or_set: 142
insn=31, live_throughout: 0, 2, 13, 134, 135, 136, 137, 138, dead_or_set: 1, 142, 143
insn=33, live_throughout: 13, 134, 135, 136, 137, 138, dead_or_set: 0, 1, 2, 14
insn=34, live_throughout: 13, 134, 136, 137, 138, dead_or_set: 0, 135
insn=35, live_throughout: 0, 13, 134, 137, 138, dead_or_set: 1, 136
insn=36, live_throughout: 13, 134, 137, 138, dead_or_set: 0, 1, 14
insn=39, live_throughout: 13, 134, 137, dead_or_set: 1, 138
insn=40, live_throughout: 1, 13, 134, dead_or_set: 2, 137
insn=38, live_throughout: 1, 2, 13, 134, dead_or_set: 0
insn=41, live_throughout: 13, 134, dead_or_set: 0, 1, 2, 14
insn=42, live_throughout: 13, dead_or_set: 0, 134
insn=43, live_throughout: 13, dead_or_set: 0, 14
insn=44, live_throughout: 13, dead_or_set: 0
insn=45, live_throughout: 13, dead_or_set: 0, 14
insn=52, live_throughout: 13, 14, dead_or_set: 
init_insns for 142: (insn_list:REG_DEP_TRUE 62 (nil))
init_insns for 143: (insn_list:REG_DEP_TRUE 61 (nil))
changing reg in insn 12
changing reg in insn 42
changing reg in insn 2
changing reg in insn 34
changing reg in insn 3
changing reg in insn 31
changing reg in insn 35
changing reg in insn 32
changing reg in insn 4
changing reg in insn 40
changing reg in insn 5
changing reg in insn 39
changing reg in insn 9
changing reg in insn 62
changing reg in insn 31
changing reg in insn 61
changing reg in insn 31


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 10.
verify found no changes in insn with uid = 16.
verify found no changes in insn with uid = 33.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 41.
verify found no changes in insn with uid = 43.
verify found no changes in insn with uid = 45.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 6 (  1.2)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 8 (  1.6)


__do_kernel_fault

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,10u} r1={12d,5u} r2={10d,3u} r3={9d,2u} r4={1d,3u} r5={1d,2u} r6={1d,1u} r7={1d,1u} r8={1d,1u} r12={8d} r13={1d,11u} r14={8d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={9d,1u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 888{847d,41u,0e} in 27{20 regular + 7 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 6 5 2 NOTE_INSN_DELETED)

(insn 5 11 2 2 arch/arm/mm/fault.c:143 (set (reg/v/f:SI 5 r5 [orig:138 regs ] [138])
        (reg:SI 3 r3 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 2 5 9 2 arch/arm/mm/fault.c:143 (set (reg/v/f:SI 8 r8 [orig:135 mm ] [135])
        (reg:SI 0 r0 [ mm ])) 167 {*arm_movsi_insn} (nil))

(insn 9 2 3 2 arch/arm/mm/fault.c:147 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:138 regs ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 3 9 4 2 arch/arm/mm/fault.c:143 (set (reg/v:SI 4 r4 [orig:136 addr ] [136])
        (reg:SI 1 r1 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 4 3 10 2 arch/arm/mm/fault.c:143 (set (reg/v:SI 7 r7 [orig:137 fsr ] [137])
        (reg:SI 2 r2 [ fsr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 10 4 12 2 arch/arm/mm/fault.c:147 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("fixup_exception") [flags 0x41] <function_decl 0x11013a80 fixup_exception>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 12 10 13 2 arch/arm/mm/fault.c:147 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 6 r6 [orig:134 D.24430 ] [134])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 13 12 14 2 arch/arm/mm/fault.c:147 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [100.0%] 
;; Succ edge  3 [0.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [0.0%]  (fallthru)
(note 14 13 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 14 18 3 NOTE_INSN_DELETED)

(note 18 17 59 3 NOTE_INSN_DELETED)

(note 59 18 15 3 NOTE_INSN_DELETED)

(insn 15 59 16 3 arch/arm/mm/fault.c:153 (set (reg:SI 0 r0)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(call_insn 16 15 32 3 arch/arm/mm/fault.c:153 (parallel [
            (call (mem:SI (symbol_ref:SI ("bust_spinlocks") [flags 0x41] <function_decl 0x10a82a00 bust_spinlocks>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 32 16 30 3 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:136 addr ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 30 32 61 3 arch/arm/mm/fault.c:154 discrim 3 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x10b2ecc0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x10b2ecc0>)
        (nil)))

(insn 61 30 62 3 arch/arm/mm/fault.c:154 discrim 3 (set (reg/f:SI 3 r3 [143])
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114ed540>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114ed540>)
        (nil)))

(insn 62 61 31 3 arch/arm/mm/fault.c:154 discrim 3 (set (reg/f:SI 1 r1 [142])
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x114c3f80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x114c3f80>)
        (nil)))

(insn 31 62 33 3 arch/arm/mm/fault.c:154 discrim 3 (parallel [
            (set (reg:SI 1 r1)
                (if_then_else:SI (ltu (reg/v:SI 4 r4 [orig:136 addr ] [136])
                        (const_int 4096 [0x1000]))
                    (reg/f:SI 1 r1 [142])
                    (reg/f:SI 3 r3 [143])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(call_insn 33 31 34 3 arch/arm/mm/fault.c:154 discrim 3 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 34 33 35 3 arch/arm/mm/fault.c:159 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:135 mm ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 35 34 36 3 arch/arm/mm/fault.c:159 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:136 addr ] [136])) 167 {*arm_movsi_insn} (nil))

(call_insn 36 35 39 3 arch/arm/mm/fault.c:159 (parallel [
            (call (mem:SI (symbol_ref:SI ("show_pte") [flags 0x3] <function_decl 0x512d9600 show_pte>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 39 36 40 3 arch/arm/mm/fault.c:160 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:138 regs ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 40 39 38 3 arch/arm/mm/fault.c:160 (set (reg:SI 2 r2)
        (reg/v:SI 7 r7 [orig:137 fsr ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 38 40 41 3 arch/arm/mm/fault.c:160 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x114ebb40>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x114ebb40>)
        (nil)))

(call_insn 41 38 42 3 arch/arm/mm/fault.c:160 (parallel [
            (call (mem:SI (symbol_ref:SI ("die") [flags 0x41] <function_decl 0x512d9300 die>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 42 41 43 3 arch/arm/mm/fault.c:161 (set (reg:SI 0 r0)
        (reg:SI 6 r6 [orig:134 D.24430 ] [134])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 43 42 44 3 arch/arm/mm/fault.c:161 (parallel [
            (call (mem:SI (symbol_ref:SI ("bust_spinlocks") [flags 0x41] <function_decl 0x10a82a00 bust_spinlocks>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 44 43 45 3 arch/arm/mm/fault.c:162 (set (reg:SI 0 r0)
        (const_int 9 [0x9])) 167 {*arm_movsi_insn} (nil))

(call_insn 45 44 46 3 arch/arm/mm/fault.c:162 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_exit") [flags 0x41] <function_decl 0x10a67900 do_exit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 46 45 52)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 52 46 55 4 18 "" [1 uses])

(note 55 52 60 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 60 55 63 NOTE_INSN_DELETED)

(note 63 60 0 NOTE_INSN_DELETED)


;; Function do_page_fault (do_page_fault)[0:1293]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 349.
verify found no changes in insn with uid = 349.
deleting insn with uid = 310.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 43 n_edges 65 count 81 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 43 n_edges 65 count 84 (    2)

Pass 0 for finding allocno costs

    a7 (r208,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r207,l0) best GENERAL_REGS, cover GENERAL_REGS
    a32 (r206,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r205,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r201,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r197,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r196,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r193,l0) best GENERAL_REGS, cover GENERAL_REGS
    a23 (r192,l0) best GENERAL_REGS, cover GENERAL_REGS
    a24 (r190,l0) best GENERAL_REGS, cover GENERAL_REGS
    a25 (r189,l0) best GENERAL_REGS, cover GENERAL_REGS
    a26 (r188,l0) best GENERAL_REGS, cover GENERAL_REGS
    a27 (r187,l0) best GENERAL_REGS, cover GENERAL_REGS
    a29 (r180,l0) best GENERAL_REGS, cover GENERAL_REGS
    a31 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a33 (r173,l0) best GENERAL_REGS, cover GENERAL_REGS
    a34 (r168,l0) best GENERAL_REGS, cover GENERAL_REGS
    a35 (r166,l0) best GENERAL_REGS, cover GENERAL_REGS
    a36 (r163,l0) best GENERAL_REGS, cover GENERAL_REGS
    a37 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a38 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r156,l0) best GENERAL_REGS, cover GENERAL_REGS
    a21 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a28 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a30 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a22 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:140000
  a1(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a3(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a7(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a10(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a22(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a23(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a31(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r163,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a37(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r159,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000


Pass 1 for finding allocno costs

    r208: preferred GENERAL_REGS, alternative NO_REGS
    r207: preferred GENERAL_REGS, alternative NO_REGS
    r206: preferred GENERAL_REGS, alternative NO_REGS
    r205: preferred GENERAL_REGS, alternative NO_REGS
    r201: preferred GENERAL_REGS, alternative NO_REGS
    r197: preferred GENERAL_REGS, alternative NO_REGS
    r196: preferred GENERAL_REGS, alternative NO_REGS
    r193: preferred GENERAL_REGS, alternative NO_REGS
    r192: preferred GENERAL_REGS, alternative NO_REGS
    r190: preferred GENERAL_REGS, alternative NO_REGS
    r189: preferred GENERAL_REGS, alternative NO_REGS
    r188: preferred GENERAL_REGS, alternative NO_REGS
    r187: preferred GENERAL_REGS, alternative NO_REGS
    r180: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r173: preferred GENERAL_REGS, alternative NO_REGS
    r168: preferred GENERAL_REGS, alternative NO_REGS
    r166: preferred GENERAL_REGS, alternative NO_REGS
    r163: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r156: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:140000
  a1(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r156,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a3(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a4(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a5(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:90000
  a7(r208,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r207,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:100000
  a10(r201,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a11(r197,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r205,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a13(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a14(r196,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a15(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a18(r193,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a19(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a20(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a21(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a22(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a23(r192,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a24(r190,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a25(r189,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a26(r188,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a27(r187,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a28(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a29(r180,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a30(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a31(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a32(r206,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a33(r173,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a34(r168,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a35(r166,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a36(r163,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000
  a37(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a38(r159,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000

   Insn 294(l0): point = 0
   Insn 288(l0): point = 2
   Insn 281(l0): point = 5
   Insn 280(l0): point = 7
   Insn 279(l0): point = 9
   Insn 278(l0): point = 11
   Insn 277(l0): point = 13
   Insn 334(l0): point = 16
   Insn 272(l0): point = 18
   Insn 267(l0): point = 20
   Insn 266(l0): point = 22
   Insn 271(l0): point = 24
   Insn 270(l0): point = 26
   Insn 269(l0): point = 28
   Insn 268(l0): point = 30
   Insn 313(l0): point = 33
   Insn 349(l0): point = 35
   Insn 311(l0): point = 37
   Insn 315(l0): point = 39
   Insn 332(l0): point = 42
   Insn 248(l0): point = 44
   Insn 247(l0): point = 46
   Insn 245(l0): point = 49
   Insn 244(l0): point = 51
   Insn 241(l0): point = 54
   Insn 240(l0): point = 56
   Insn 238(l0): point = 58
   Insn 330(l0): point = 61
   Insn 233(l0): point = 63
   Insn 231(l0): point = 66
   Insn 230(l0): point = 68
   Insn 227(l0): point = 71
   Insn 226(l0): point = 73
   Insn 340(l0): point = 75
   Insn 339(l0): point = 77
   Insn 221(l0): point = 80
   Insn 303(l0): point = 82
   Insn 304(l0): point = 84
   Insn 217(l0): point = 86
   Insn 220(l0): point = 88
   Insn 219(l0): point = 90
   Insn 214(l0): point = 93
   Insn 213(l0): point = 95
   Insn 211(l0): point = 97
   Insn 212(l0): point = 99
   Insn 210(l0): point = 101
   Insn 328(l0): point = 104
   Insn 205(l0): point = 106
   Insn 203(l0): point = 109
   Insn 202(l0): point = 111
   Insn 200(l0): point = 114
   Insn 199(l0): point = 116
   Insn 198(l0): point = 118
   Insn 197(l0): point = 120
   Insn 195(l0): point = 123
   Insn 194(l0): point = 125
   Insn 190(l0): point = 128
   Insn 302(l0): point = 130
   Insn 301(l0): point = 132
   Insn 186(l0): point = 134
   Insn 189(l0): point = 136
   Insn 188(l0): point = 138
   Insn 183(l0): point = 141
   Insn 182(l0): point = 143
   Insn 180(l0): point = 145
   Insn 181(l0): point = 147
   Insn 179(l0): point = 149
   Insn 326(l0): point = 152
   Insn 174(l0): point = 154
   Insn 172(l0): point = 157
   Insn 171(l0): point = 159
   Insn 169(l0): point = 162
   Insn 168(l0): point = 164
   Insn 167(l0): point = 166
   Insn 166(l0): point = 168
   Insn 164(l0): point = 170
   Insn 300(l0): point = 172
   Insn 163(l0): point = 174
   Insn 160(l0): point = 177
   Insn 157(l0): point = 180
   Insn 156(l0): point = 182
   Insn 153(l0): point = 184
   Insn 152(l0): point = 186
   Insn 149(l0): point = 189
   Insn 148(l0): point = 191
   Insn 146(l0): point = 193
   Insn 324(l0): point = 196
   Insn 141(l0): point = 198
   Insn 140(l0): point = 200
   Insn 139(l0): point = 202
   Insn 322(l0): point = 205
   Insn 134(l0): point = 207
   Insn 133(l0): point = 209
   Insn 132(l0): point = 211
   Insn 130(l0): point = 214
   Insn 129(l0): point = 216
   Insn 126(l0): point = 219
   Insn 125(l0): point = 221
   Insn 123(l0): point = 223
   Insn 122(l0): point = 225
   Insn 118(l0): point = 227
   Insn 343(l0): point = 229
   Insn 119(l0): point = 231
   Insn 121(l0): point = 233
   Insn 342(l0): point = 235
   Insn 320(l0): point = 238
   Insn 109(l0): point = 240
   Insn 107(l0): point = 243
   Insn 106(l0): point = 245
   Insn 317(l0): point = 247
   Insn 309(l0): point = 249
   Insn 104(l0): point = 251
   Insn 87(l0): point = 253
   Insn 84(l0): point = 256
   Insn 83(l0): point = 258
   Insn 82(l0): point = 260
   Insn 80(l0): point = 263
   Insn 79(l0): point = 265
   Insn 77(l0): point = 267
   Insn 76(l0): point = 269
   Insn 75(l0): point = 271
   Insn 72(l0): point = 274
   Insn 71(l0): point = 276
   Insn 69(l0): point = 278
   Insn 68(l0): point = 280
   Insn 66(l0): point = 283
   Insn 65(l0): point = 285
   Insn 318(l0): point = 288
   Insn 58(l0): point = 290
   Insn 57(l0): point = 292
   Insn 54(l0): point = 295
   Insn 53(l0): point = 297
   Insn 51(l0): point = 299
   Insn 50(l0): point = 301
   Insn 48(l0): point = 304
   Insn 47(l0): point = 306
   Insn 43(l0): point = 309
   Insn 42(l0): point = 311
   Insn 306(l0): point = 313
   Insn 40(l0): point = 315
   Insn 39(l0): point = 317
   Insn 38(l0): point = 319
   Insn 36(l0): point = 322
   Insn 35(l0): point = 324
   Insn 34(l0): point = 326
   Insn 27(l0): point = 328
   Insn 26(l0): point = 330
   Insn 24(l0): point = 332
   Insn 345(l0): point = 334
   Insn 344(l0): point = 336
   Insn 18(l0): point = 339
   Insn 16(l0): point = 342
   Insn 12(l0): point = 344
   Insn 15(l0): point = 346
   Insn 11(l0): point = 348
   Insn 3(l0): point = 350
   Insn 13(l0): point = 352
   Insn 2(l0): point = 354
   Insn 347(l0): point = 356
   Insn 346(l0): point = 358
   Insn 4(l0): point = 360
 a0(r158): [66..360] [21..60] [8..15]
 a1(r157): [66..350] [27..60] [10..15]
 a2(r156): [66..354] [29..60] [12..15]
 a3(r148): [66..344] [54..60] [14..15]
 a4(r145): [42..46] [23..33]
 a5(r146): [42..44] [25..39]
 a6(r149): [66..348] [31..60]
 a7(r208): [34..37]
 a8(r207): [34..35]
 a9(r147): [238..240] [196..223] [66..177] [49..60] [34..41]
 a10(r201): [57..58]
 a11(r197): [74..77]
 a12(r205): [85..172]
 a13(r133): [104..106] [87..93]
 a14(r196): [94..101]
 a15(r139): [117..118]
 a16(r140): [119..120]
 a17(r134): [152..154] [135..141]
 a18(r193): [142..149]
 a19(r141): [165..166]
 a20(r142): [167..168]
 a21(r154): [175..319]
 a22(r136): [243..265] [232..237] [180..195]
 a23(r192): [192..193]
 a24(r190): [199..200]
 a25(r189): [201..202]
 a26(r188): [208..209]
 a27(r187): [210..211]
 a28(r138): [243..253] [234..237]
 a29(r180): [246..251]
 a30(r137): [246..249]
 a31(r178): [259..260]
 a32(r206): [307..313] [286..287]
 a33(r173): [325..326]
 a34(r168): [327..328]
 a35(r166): [331..332]
 a36(r163): [333..336]
 a37(r162): [347..352]
 a38(r159): [349..358]
Compressing live ranges: from 363 to 101 - 27%
Ranges after the compression:
 a0(r158): [25..100] [5..24] [0..4]
 a1(r157): [25..96] [8..24] [1..4]
 a2(r156): [25..98] [9..24] [2..4]
 a3(r148): [25..92] [21..24] [3..4]
 a4(r145): [17..19] [6..11]
 a5(r146): [17..18] [7..15]
 a6(r149): [25..94] [10..24]
 a7(r208): [12..14]
 a8(r207): [12..13]
 a9(r147): [69..70] [56..65] [25..51] [20..24] [12..16]
 a10(r201): [22..23]
 a11(r197): [26..27]
 a12(r205): [28..49]
 a13(r133): [33..34] [29..30]
 a14(r196): [31..32]
 a15(r139): [35..36]
 a16(r140): [37..38]
 a17(r134): [43..44] [39..40]
 a18(r193): [41..42]
 a19(r141): [45..46]
 a20(r142): [47..48]
 a21(r154): [50..83]
 a22(r136): [71..78] [66..68] [52..55]
 a23(r192): [53..54]
 a24(r190): [57..58]
 a25(r189): [59..60]
 a26(r188): [61..62]
 a27(r187): [63..64]
 a28(r138): [71..75] [67..68]
 a29(r180): [72..74]
 a30(r137): [72..73]
 a31(r178): [76..77]
 a32(r206): [81..82] [79..80]
 a33(r173): [84..85]
 a34(r168): [86..87]
 a35(r166): [88..89]
 a36(r163): [90..91]
 a37(r162): [93..97]
 a38(r159): [95..99]
+++Allocating 312 bytes for conflict table (uncompressed size 312)
;; a0(r158,l0) conflicts: a1(r157,l0) a2(r156,l0) a3(r148,l0) a4(r145,l0) a5(r146,l0) a6(r149,l0) a8(r207,l0) a7(r208,l0) a9(r147,l0) a10(r201,l0) a11(r197,l0) a12(r205,l0) a13(r133,l0) a14(r196,l0) a15(r139,l0) a16(r140,l0) a17(r134,l0) a18(r193,l0) a19(r141,l0) a20(r142,l0) a21(r154,l0) a22(r136,l0) a23(r192,l0) a24(r190,l0) a25(r189,l0) a26(r188,l0) a27(r187,l0) a28(r138,l0) a30(r137,l0) a29(r180,l0) a31(r178,l0) a32(r206,l0) a33(r173,l0) a34(r168,l0) a35(r166,l0) a36(r163,l0) a37(r162,l0) a38(r159,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r157,l0) conflicts: a0(r158,l0) a2(r156,l0) a3(r148,l0) a4(r145,l0) a5(r146,l0) a6(r149,l0) a8(r207,l0) a7(r208,l0) a9(r147,l0) a10(r201,l0) a11(r197,l0) a12(r205,l0) a13(r133,l0) a14(r196,l0) a15(r139,l0) a16(r140,l0) a17(r134,l0) a18(r193,l0) a19(r141,l0) a20(r142,l0) a21(r154,l0) a22(r136,l0) a23(r192,l0) a24(r190,l0) a25(r189,l0) a26(r188,l0) a27(r187,l0) a28(r138,l0) a30(r137,l0) a29(r180,l0) a31(r178,l0) a32(r206,l0) a33(r173,l0) a34(r168,l0) a35(r166,l0) a36(r163,l0) a37(r162,l0) a38(r159,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r156,l0) conflicts: a0(r158,l0) a1(r157,l0) a3(r148,l0) a4(r145,l0) a5(r146,l0) a6(r149,l0) a8(r207,l0) a7(r208,l0) a9(r147,l0) a10(r201,l0) a11(r197,l0) a12(r205,l0) a13(r133,l0) a14(r196,l0) a15(r139,l0) a16(r140,l0) a17(r134,l0) a18(r193,l0) a19(r141,l0) a20(r142,l0) a21(r154,l0) a22(r136,l0) a23(r192,l0) a24(r190,l0) a25(r189,l0) a26(r188,l0) a27(r187,l0) a28(r138,l0) a30(r137,l0) a29(r180,l0) a31(r178,l0) a32(r206,l0) a33(r173,l0) a34(r168,l0) a35(r166,l0) a36(r163,l0) a37(r162,l0) a38(r159,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r148,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a6(r149,l0) a9(r147,l0) a10(r201,l0) a11(r197,l0) a12(r205,l0) a13(r133,l0) a14(r196,l0) a15(r139,l0) a16(r140,l0) a17(r134,l0) a18(r193,l0) a19(r141,l0) a20(r142,l0) a21(r154,l0) a22(r136,l0) a23(r192,l0) a24(r190,l0) a25(r189,l0) a26(r188,l0) a27(r187,l0) a28(r138,l0) a30(r137,l0) a29(r180,l0) a31(r178,l0) a32(r206,l0) a33(r173,l0) a34(r168,l0) a35(r166,l0) a36(r163,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a4(r145,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a5(r146,l0) a6(r149,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a5(r146,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a4(r145,l0) a6(r149,l0) a8(r207,l0) a7(r208,l0) a9(r147,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a6(r149,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a4(r145,l0) a5(r146,l0) a8(r207,l0) a7(r208,l0) a9(r147,l0) a10(r201,l0) a11(r197,l0) a12(r205,l0) a13(r133,l0) a14(r196,l0) a15(r139,l0) a16(r140,l0) a17(r134,l0) a18(r193,l0) a19(r141,l0) a20(r142,l0) a21(r154,l0) a22(r136,l0) a23(r192,l0) a24(r190,l0) a25(r189,l0) a26(r188,l0) a27(r187,l0) a28(r138,l0) a30(r137,l0) a29(r180,l0) a31(r178,l0) a32(r206,l0) a33(r173,l0) a34(r168,l0) a35(r166,l0) a36(r163,l0) a37(r162,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r208,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a5(r146,l0) a6(r149,l0) a8(r207,l0) a9(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a8(r207,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a5(r146,l0) a6(r149,l0) a7(r208,l0) a9(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a9(r147,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a5(r146,l0) a6(r149,l0) a8(r207,l0) a7(r208,l0) a10(r201,l0) a11(r197,l0) a12(r205,l0) a13(r133,l0) a14(r196,l0) a15(r139,l0) a16(r140,l0) a17(r134,l0) a18(r193,l0) a19(r141,l0) a20(r142,l0) a21(r154,l0) a24(r190,l0) a25(r189,l0) a26(r188,l0) a27(r187,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a10(r201,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a11(r197,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r205,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a13(r133,l0) a14(r196,l0) a15(r139,l0) a16(r140,l0) a17(r134,l0) a18(r193,l0) a19(r141,l0) a20(r142,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a13(r133,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a12(r205,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a14(r196,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a12(r205,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a15(r139,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a12(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r140,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a12(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r134,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a12(r205,l0)
;;     total conflict hard regs: 0 2 3
;;     conflict hard regs: 0 2 3
;; a18(r193,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a12(r205,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a19(r141,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a12(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r142,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a12(r205,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a21(r154,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a22(r136,l0) a23(r192,l0) a24(r190,l0) a25(r189,l0) a26(r188,l0) a27(r187,l0) a28(r138,l0) a30(r137,l0) a29(r180,l0) a31(r178,l0) a32(r206,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a22(r136,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a21(r154,l0) a23(r192,l0) a28(r138,l0) a30(r137,l0) a29(r180,l0) a31(r178,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a23(r192,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a21(r154,l0) a22(r136,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a24(r190,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a21(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a25(r189,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a21(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a26(r188,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a21(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a27(r187,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a9(r147,l0) a21(r154,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a28(r138,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a21(r154,l0) a22(r136,l0) a30(r137,l0) a29(r180,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a29(r180,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a21(r154,l0) a22(r136,l0) a28(r138,l0) a30(r137,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a30(r137,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a21(r154,l0) a22(r136,l0) a28(r138,l0) a29(r180,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a31(r178,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a21(r154,l0) a22(r136,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a32(r206,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0) a21(r154,l0)
;;     total conflict hard regs: 0
;;     conflict hard regs: 0
;; a33(r173,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a34(r168,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a35(r166,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a36(r163,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a3(r148,l0) a6(r149,l0)
;;     total conflict hard regs:
;;     conflict hard regs:
;; a37(r162,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a6(r149,l0) a38(r159,l0)
;;     total conflict hard regs: 1
;;     conflict hard regs: 1
;; a38(r159,l0) conflicts: a0(r158,l0) a1(r157,l0) a2(r156,l0) a37(r162,l0)
;;     total conflict hard regs: 0 1
;;     conflict hard regs: 0 1

  cp0:a4(r145)<->a8(r207)@125:shuffle
  cp1:a4(r145)<->a7(r208)@125:shuffle
  cp2:a4(r145)<->a9(r147)@125:shuffle
  cp3:a13(r133)<->a14(r196)@1000:move
  cp4:a17(r134)<->a18(r193)@1000:move
  cp5:a24(r190)<->a25(r189)@125:shuffle
  cp6:a26(r188)<->a27(r187)@125:shuffle
  cp7:a33(r173)<->a34(r168)@125:shuffle
  regions=1, blocks=43, points=101
    allocnos=39, copies=8, conflicts=0, ranges=60

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r158 1r157 2r156 3r148 4r145 5r146 6r149 7r208 8r207 9r147 10r201 11r197 12r205 13r133 14r196 15r139 16r140 17r134 18r193 19r141 20r142 21r154 22r136 23r192 24r190 25r189 26r188 27r187 28r138 29r180 30r137 31r178 32r206 33r173 34r168 35r166 36r163 37r162 38r159
    modified regnos: 133 134 136 137 138 139 140 141 142 145 146 147 148 149 154 156 157 158 159 162 163 166 168 173 178 180 187 188 189 190 192 193 196 197 201 205 206 207 208
    border:
    Pressure: GENERAL_REGS=11
    Reg 158 of GENERAL_REGS has 5 regs less
    Reg 157 of GENERAL_REGS has 5 regs less
    Reg 156 of GENERAL_REGS has 5 regs less
    Reg 148 of GENERAL_REGS has 5 regs less
    Reg 145 of GENERAL_REGS has 4 regs less
    Reg 146 of GENERAL_REGS has 3 regs less
    Reg 149 of GENERAL_REGS has 5 regs less
    Reg 147 of GENERAL_REGS has 5 regs less
    Reg 197 of GENERAL_REGS has 1 regs less
    Reg 205 of GENERAL_REGS has 5 regs less
    Reg 133 of GENERAL_REGS has 3 regs less
    Reg 196 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 193 of GENERAL_REGS has 3 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 5 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 192 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 1 regs less
    Reg 206 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 2 regs less
      Pushing a35(r166,l0)
      Pushing a34(r168,l0)
      Pushing a33(r173,l0)
      Pushing a29(r180,l0)
      Pushing a27(r187,l0)
      Pushing a26(r188,l0)
      Pushing a25(r189,l0)
      Pushing a24(r190,l0)
      Pushing a10(r201,l0)
      Pushing a8(r207,l0)
      Pushing a7(r208,l0)
      Pushing a36(r163,l0)
      Pushing a30(r137,l0)
      Pushing a37(r162,l0)
      Pushing a31(r178,l0)
      Pushing a28(r138,l0)
      Pushing a23(r192,l0)
      Pushing a20(r142,l0)
      Pushing a19(r141,l0)
      Pushing a16(r140,l0)
      Pushing a15(r139,l0)
      Pushing a32(r206,l0)
      Pushing a11(r197,l0)
      Pushing a38(r159,l0)
      Pushing a18(r193,l0)
      Pushing a17(r134,l0)
      Pushing a14(r196,l0)
      Pushing a13(r133,l0)
      Pushing a5(r146,l0)
      Pushing a4(r145,l0)
      Pushing a12(r205,l0)(potential spill: pri=2500, cost=30000)
      Pushing a21(r154,l0)(potential spill: pri=3076, cost=40000)
      Pushing a1(r157,l0)(potential spill: pri=4166, cost=50000)
      Pushing a3(r148,l0)(potential spill: pri=5454, cost=60000)
      Pushing a22(r136,l0)
      Pushing a6(r149,l0)
      Pushing a2(r156,l0)
      Pushing a9(r147,l0)
      Pushing a0(r158,l0)
      Popping a0(r158,l0)  -- assign reg 4
      Popping a9(r147,l0)  -- assign reg 5
      Popping a2(r156,l0)  -- assign reg 6
      Popping a6(r149,l0)  -- assign reg 7
      Popping a22(r136,l0)  -- assign reg 5
      Popping a3(r148,l0)  -- assign reg 8
      Popping a1(r157,l0)  -- assign reg 10
      Popping a21(r154,l0)  -- assign reg 9
      Popping a12(r205,l0)  -- assign reg 9
      Popping a4(r145,l0)  -- assign reg 5
      Popping a5(r146,l0)  -- assign reg 3
      Popping a13(r133,l0)  -- assign reg 1
      Popping a14(r196,l0)  -- assign reg 11
      Popping a17(r134,l0)  -- assign reg 1
      Popping a18(r193,l0)  -- assign reg 11
      Popping a38(r159,l0)  -- assign reg 3
      Popping a11(r197,l0)  -- assign reg 3
      Popping a32(r206,l0)  -- assign reg 3
      Popping a15(r139,l0)  -- assign reg 3
      Popping a16(r140,l0)  -- assign reg 3
      Popping a19(r141,l0)  -- assign reg 3
      Popping a20(r142,l0)  -- assign reg 3
      Popping a23(r192,l0)  -- assign reg 3
      Popping a28(r138,l0)  -- assign reg 3
      Popping a31(r178,l0)  -- assign reg 3
      Popping a37(r162,l0)  -- assign reg 2
      Popping a30(r137,l0)  -- assign reg 2
      Popping a36(r163,l0)  -- assign reg 3
      Popping a7(r208,l0)  -- assign reg 2
      Popping a8(r207,l0)  -- assign reg 1
      Popping a10(r201,l0)  -- assign reg 3
      Popping a24(r190,l0)  -- assign reg 3
      Popping a25(r189,l0)  -- assign reg 3
      Popping a26(r188,l0)  -- assign reg 3
      Popping a27(r187,l0)  -- assign reg 3
      Popping a29(r180,l0)  -- assign reg 1
      Popping a33(r173,l0)  -- assign reg 3
      Popping a34(r168,l0)  -- assign reg 3
      Popping a35(r166,l0)  -- assign reg 3
Disposition:
   13:r133 l0     1   17:r134 l0     1   22:r136 l0     5   30:r137 l0     2
   28:r138 l0     3   15:r139 l0     3   16:r140 l0     3   19:r141 l0     3
   20:r142 l0     3    4:r145 l0     5    5:r146 l0     3    9:r147 l0     5
    3:r148 l0     8    6:r149 l0     7   21:r154 l0     9    2:r156 l0     6
    1:r157 l0    10    0:r158 l0     4   38:r159 l0     3   37:r162 l0     2
   36:r163 l0     3   35:r166 l0     3   34:r168 l0     3   33:r173 l0     3
   31:r178 l0     3   29:r180 l0     1   27:r187 l0     3   26:r188 l0     3
   25:r189 l0     3   24:r190 l0     3   23:r192 l0     3   18:r193 l0    11
   14:r196 l0    11   11:r197 l0     3   10:r201 l0     3   12:r205 l0     9
   32:r206 l0     3    8:r207 l0     1    7:r208 l0     2
New iteration of spill/restore move
+++Costs: overall -250, reg -250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=4, live_throughout: 0, 1, 13, dead_or_set: 2, 158
insn=346, live_throughout: 0, 1, 13, 158, dead_or_set: 159
insn=347, live_throughout: 0, 1, 13, 158, dead_or_set: 159
insn=2, live_throughout: 1, 13, 158, 159, dead_or_set: 0, 156
insn=13, live_throughout: 1, 13, 156, 158, 159, dead_or_set: 162
insn=3, live_throughout: 13, 156, 158, 159, 162, dead_or_set: 1, 157
insn=11, live_throughout: 13, 156, 157, 158, 162, dead_or_set: 149, 159
insn=15, live_throughout: 13, 149, 156, 157, 158, dead_or_set: 162
insn=12, live_throughout: 13, 24, 149, 156, 157, 158, dead_or_set: 148
insn=16, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 
insn=18, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 
insn=19, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 
insn=344, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 163
insn=345, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 163
insn=24, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 163, 166
insn=26, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 166
insn=27, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 168
insn=34, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 168, 173
insn=35, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 173
insn=36, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 
insn=38, live_throughout: 13, 148, 149, 156, 157, 158, dead_or_set: 154
insn=39, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0
insn=40, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0, 14
insn=306, live_throughout: 0, 13, 148, 149, 154, 156, 157, 158, dead_or_set: 206
insn=42, live_throughout: 13, 148, 149, 154, 156, 157, 158, 206, dead_or_set: 0
insn=43, live_throughout: 13, 148, 149, 154, 156, 157, 158, 206, dead_or_set: 
insn=47, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 206
insn=48, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=50, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0
insn=51, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0, 14
insn=53, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0
insn=54, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=55, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=57, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0
insn=58, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0, 14
insn=318, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=61, live_throughout: 13, 148, 149, 154, 156, 157, 158, 206, dead_or_set: 
insn=65, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 206
insn=66, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=68, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0
insn=69, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0, 14
insn=71, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0
insn=72, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=73, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=75, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0
insn=76, live_throughout: 0, 13, 148, 149, 154, 156, 157, 158, dead_or_set: 1
insn=77, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0, 1, 14
insn=79, live_throughout: 0, 13, 148, 149, 154, 156, 157, 158, dead_or_set: 136
insn=80, live_throughout: 0, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=82, live_throughout: 0, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 178
insn=83, live_throughout: 0, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 178
insn=84, live_throughout: 0, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=155, live_throughout: 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=87, live_throughout: 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 138
insn=104, live_throughout: 13, 24, 136, 138, 148, 149, 154, 156, 157, 158, dead_or_set: 180
insn=309, live_throughout: 13, 136, 138, 148, 149, 154, 156, 157, 158, 180, dead_or_set: 137
insn=317, live_throughout: 13, 136, 138, 148, 149, 154, 156, 157, 158, 180, dead_or_set: 137
insn=106, live_throughout: 13, 136, 138, 148, 149, 154, 156, 157, 158, dead_or_set: 137, 180
insn=107, live_throughout: 13, 136, 138, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=109, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 147
insn=320, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=112, live_throughout: 13, 136, 138, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=342, live_throughout: 13, 136, 138, 148, 149, 154, 156, 157, 158, dead_or_set: 2
insn=121, live_throughout: 2, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 3, 138
insn=119, live_throughout: 2, 3, 13, 148, 149, 154, 156, 157, 158, dead_or_set: 1, 136
insn=343, live_throughout: 1, 3, 13, 148, 149, 154, 156, 157, 158, dead_or_set: 2
insn=118, live_throughout: 1, 2, 3, 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0
insn=122, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0, 1, 2, 3, 14
insn=123, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 0, 147
insn=125, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=126, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=129, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=130, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=132, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 187
insn=133, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 187, 188
insn=134, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 188
insn=322, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=137, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=139, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 189
insn=140, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 189, 190
insn=141, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 190
insn=324, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=144, live_throughout: 0, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=146, live_throughout: 0, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 192
insn=148, live_throughout: 0, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 192
insn=149, live_throughout: 0, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=152, live_throughout: 0, 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 1
insn=153, live_throughout: 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 0, 1, 14
insn=156, live_throughout: 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 0
insn=157, live_throughout: 13, 136, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=158, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=160, live_throughout: 13, 148, 149, 154, 156, 157, 158, dead_or_set: 147
insn=161, live_throughout: 13, 147, 148, 149, 154, 156, 157, 158, dead_or_set: 
insn=163, live_throughout: 13, 147, 148, 149, 156, 157, 158, dead_or_set: 0, 154
insn=300, live_throughout: 0, 13, 147, 148, 149, 156, 157, 158, dead_or_set: 205
insn=164, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 0, 14
insn=166, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 142
insn=167, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 141, 142
insn=168, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 141
insn=169, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=171, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=172, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=174, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 134
insn=326, live_throughout: 13, 134, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=177, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=179, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 193
insn=181, live_throughout: 13, 147, 148, 149, 156, 157, 158, 193, 205, dead_or_set: 1
insn=180, live_throughout: 1, 13, 147, 148, 149, 156, 157, 158, 193, 205, dead_or_set: 0
insn=182, live_throughout: 13, 147, 148, 149, 156, 157, 158, 193, 205, dead_or_set: 0, 1, 14
insn=183, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 134, 193
insn=184, live_throughout: 13, 134, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=188, live_throughout: 13, 134, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 0
insn=189, live_throughout: 0, 13, 134, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 2, 3
insn=186, live_throughout: 0, 2, 3, 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 134
insn=301, live_throughout: 0, 2, 3, 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=302, live_throughout: 0, 2, 3, 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=190, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 0, 2, 3, 14
insn=191, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=194, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=195, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=197, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 140
insn=198, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 139, 140
insn=199, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 139
insn=200, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=202, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=203, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=205, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 133
insn=328, live_throughout: 13, 133, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=208, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=210, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 196
insn=212, live_throughout: 13, 147, 148, 149, 156, 157, 158, 196, 205, dead_or_set: 1
insn=211, live_throughout: 1, 13, 147, 148, 149, 156, 157, 158, 196, 205, dead_or_set: 0
insn=213, live_throughout: 13, 147, 148, 149, 156, 157, 158, 196, 205, dead_or_set: 0, 1, 14
insn=214, live_throughout: 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 133, 196
insn=215, live_throughout: 13, 133, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 
insn=219, live_throughout: 13, 133, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 0
insn=220, live_throughout: 0, 13, 133, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 2, 3
insn=217, live_throughout: 0, 2, 3, 13, 147, 148, 149, 156, 157, 158, 205, dead_or_set: 133
insn=304, live_throughout: 0, 2, 3, 13, 147, 148, 149, 156, 157, 158, dead_or_set: 205
insn=303, live_throughout: 0, 2, 3, 13, 147, 148, 149, 156, 157, 158, dead_or_set: 
insn=221, live_throughout: 13, 147, 148, 149, 156, 157, 158, dead_or_set: 0, 2, 3, 14
insn=222, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, dead_or_set: 
insn=339, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, dead_or_set: 197
insn=340, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, dead_or_set: 197
insn=226, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, dead_or_set: 197
insn=227, live_throughout: 13, 14, 147, 148, 149, 156, 157, 158, dead_or_set: 
insn=230, live_throughout: 13, 147, 148, 149, 156, 157, 158, dead_or_set: 
insn=231, live_throughout: 13, 147, 148, 149, 156, 157, 158, dead_or_set: 
insn=233, live_throughout: 13, dead_or_set: 14
insn=330, live_throughout: 13, 14, dead_or_set: 
insn=236, live_throughout: 13, 147, 148, 149, 156, 157, 158, dead_or_set: 
insn=238, live_throughout: 13, 147, 148, 149, 156, 157, 158, dead_or_set: 201
insn=240, live_throughout: 13, 147, 148, 149, 156, 157, 158, dead_or_set: 201
insn=241, live_throughout: 13, 147, 148, 149, 156, 157, 158, dead_or_set: 
insn=244, live_throughout: 13, 147, 149, 156, 157, 158, dead_or_set: 
insn=245, live_throughout: 13, 147, 149, 156, 157, 158, dead_or_set: 
insn=247, live_throughout: 13, 149, 156, 157, 158, dead_or_set: 145
insn=248, live_throughout: 13, 145, 149, 156, 157, 158, dead_or_set: 146
insn=332, live_throughout: 13, 145, 146, 149, 156, 157, 158, dead_or_set: 
insn=251, live_throughout: 13, 147, 149, 156, 157, 158, dead_or_set: 
insn=315, live_throughout: 13, 147, 149, 156, 157, 158, dead_or_set: 146
insn=311, live_throughout: 13, 146, 147, 149, 156, 157, 158, dead_or_set: 208
insn=349, live_throughout: 13, 146, 147, 149, 156, 157, 158, 208, dead_or_set: 207
insn=313, live_throughout: 13, 146, 149, 156, 157, 158, dead_or_set: 145, 147, 207, 208
insn=264, live_throughout: 13, 145, 146, 149, 156, 157, 158, dead_or_set: 
insn=268, live_throughout: 13, 145, 146, 156, 157, 158, dead_or_set: 0, 149
insn=269, live_throughout: 0, 13, 145, 146, 157, 158, dead_or_set: 1, 156
insn=270, live_throughout: 0, 1, 13, 145, 146, 158, dead_or_set: 2, 157
insn=271, live_throughout: 0, 1, 2, 13, 145, 158, dead_or_set: 3, 146
insn=266, live_throughout: 0, 1, 2, 3, 13, 158, dead_or_set: 145
insn=267, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 158
insn=272, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=334, live_throughout: 13, 14, dead_or_set: 
insn=275, live_throughout: 13, 148, 156, 157, 158, dead_or_set: 
insn=277, live_throughout: 13, 156, 157, 158, dead_or_set: 0, 148
insn=278, live_throughout: 0, 13, 157, 158, dead_or_set: 1, 156
insn=279, live_throughout: 0, 1, 13, 158, dead_or_set: 2, 157
insn=280, live_throughout: 0, 1, 2, 13, dead_or_set: 3, 158
insn=281, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=282, live_throughout: 13, 14, dead_or_set: 
insn=288, live_throughout: 13, 14, dead_or_set: 0
insn=294, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 140: (insn_list:REG_DEP_TRUE 197 (nil))
init_insns for 142: (insn_list:REG_DEP_TRUE 166 (nil))
init_insns for 162: (insn_list:REG_DEP_TRUE 13 (nil))
init_insns for 178: (insn_list:REG_DEP_TRUE 82 (nil))
init_insns for 180: (insn_list:REG_DEP_TRUE 104 (nil))
init_insns for 187: (insn_list:REG_DEP_TRUE 132 (nil))
init_insns for 188: (insn_list:REG_DEP_TRUE 134 (nil))
init_insns for 189: (insn_list:REG_DEP_TRUE 139 (nil))
init_insns for 190: (insn_list:REG_DEP_TRUE 141 (nil))
init_insns for 192: (insn_list:REG_DEP_TRUE 146 (nil))
init_insns for 193: (insn_list:REG_DEP_TRUE 179 (nil))
init_insns for 196: (insn_list:REG_DEP_TRUE 210 (nil))
init_insns for 201: (insn_list:REG_DEP_TRUE 238 (nil))
init_insns for 205: (insn_list:REG_DEP_TRUE 300 (nil))
init_insns for 207: (insn_list:REG_DEP_TRUE 349 (nil))
init_insns for 208: (insn_list:REG_DEP_TRUE 311 (nil))
changing reg in insn 214
changing reg in insn 205
changing reg in insn 217
changing reg in insn 183
changing reg in insn 174
changing reg in insn 186
changing reg in insn 79
changing reg in insn 146
changing reg in insn 119
changing reg in insn 104
changing reg in insn 82
changing reg in insn 146
changing reg in insn 104
changing reg in insn 82
changing reg in insn 317
changing reg in insn 309
changing reg in insn 317
changing reg in insn 106
changing reg in insn 87
changing reg in insn 121
changing reg in insn 198
changing reg in insn 199
changing reg in insn 197
changing reg in insn 198
changing reg in insn 167
changing reg in insn 168
changing reg in insn 166
changing reg in insn 167
changing reg in insn 313
changing reg in insn 247
changing reg in insn 266
changing reg in insn 315
changing reg in insn 248
changing reg in insn 271
changing reg in insn 160
changing reg in insn 123
changing reg in insn 109
changing reg in insn 340
changing reg in insn 313
changing reg in insn 244
changing reg in insn 230
changing reg in insn 194
changing reg in insn 129
changing reg in insn 125
changing reg in insn 12
changing reg in insn 34
changing reg in insn 277
changing reg in insn 118
changing reg in insn 75
changing reg in insn 38
changing reg in insn 11
changing reg in insn 268
changing reg in insn 141
changing reg in insn 139
changing reg in insn 134
changing reg in insn 132
changing reg in insn 12
changing reg in insn 140
changing reg in insn 133
changing reg in insn 139
changing reg in insn 132
changing reg in insn 38
changing reg in insn 163
changing reg in insn 57
changing reg in insn 39
changing reg in insn 2
changing reg in insn 342
changing reg in insn 303
changing reg in insn 301
changing reg in insn 278
changing reg in insn 269
changing reg in insn 152
changing reg in insn 83
changing reg in insn 76
changing reg in insn 3
changing reg in insn 317
changing reg in insn 87
changing reg in insn 87
changing reg in insn 279
changing reg in insn 270
changing reg in insn 4
changing reg in insn 306
changing reg in insn 280
changing reg in insn 267
changing reg in insn 238
changing reg in insn 205
changing reg in insn 202
changing reg in insn 174
changing reg in insn 171
changing reg in insn 68
changing reg in insn 50
changing reg in insn 13
changing reg in insn 238
changing reg in insn 13
changing reg in insn 347
changing reg in insn 346
changing reg in insn 347
changing reg in insn 11
changing reg in insn 13
changing reg in insn 15
changing reg in insn 345
changing reg in insn 344
changing reg in insn 345
changing reg in insn 24
changing reg in insn 24
changing reg in insn 26
changing reg in insn 27
changing reg in insn 34
changing reg in insn 34
changing reg in insn 35
changing reg in insn 82
changing reg in insn 83
changing reg in insn 104
changing reg in insn 106
changing reg in insn 132
changing reg in insn 133
changing reg in insn 133
changing reg in insn 134
changing reg in insn 139
changing reg in insn 140
changing reg in insn 140
changing reg in insn 141
changing reg in insn 146
changing reg in insn 148
changing reg in insn 179
changing reg in insn 183
changing reg in insn 180
changing reg in insn 210
changing reg in insn 214
changing reg in insn 211
changing reg in insn 340
changing reg in insn 339
changing reg in insn 340
changing reg in insn 226
changing reg in insn 238
changing reg in insn 240
changing reg in insn 300
changing reg in insn 304
changing reg in insn 302
changing reg in insn 306
changing reg in insn 65
changing reg in insn 47
changing reg in insn 349
changing reg in insn 313
changing reg in insn 311
changing reg in insn 313
Spilling for insn 346.
Using reg 2 for reload 0
Spilling for insn 344.
Using reg 2 for reload 0
Spilling for insn 26.
Using reg 2 for reload 0
Spilling for insn 134.
Spilling for insn 141.
Spilling for insn 186.
Spilling for insn 301.
Spilling for insn 302.
Spilling for insn 217.
Spilling for insn 304.
Spilling for insn 303.
Spilling for insn 266.
Spilling for insn 267.

Reloads for insn # 346
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 344
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 26
Reload 0: reload_out (SI) = (scratch:SI)
	GENERAL_REGS, RELOAD_FOR_OUTPUT (opnum = 2)
	reload_out_reg: (scratch:SI)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 134
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                                                        (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                                                        (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])

Reloads for insn # 141
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                                                        (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                                                        (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])

Reloads for insn # 186
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 301
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A64])

Reloads for insn # 302
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])

Reloads for insn # 217
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 304
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])

Reloads for insn # 303
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A64])

Reloads for insn # 266
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 267
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
deleting insn with uid = 271.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 40.
verify found no changes in insn with uid = 51.
verify found no changes in insn with uid = 58.
verify found no changes in insn with uid = 69.
verify found no changes in insn with uid = 77.
verify found no changes in insn with uid = 122.
verify found no changes in insn with uid = 153.
verify found no changes in insn with uid = 164.
verify found no changes in insn with uid = 182.
verify found no changes in insn with uid = 190.
verify found no changes in insn with uid = 213.
verify found no changes in insn with uid = 221.
verify found no changes in insn with uid = 233.
verify found no changes in insn with uid = 272.
verify found no changes in insn with uid = 281.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 43 n_edges 65 count 81 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 43 n_edges 65 count 84 (    2)


do_page_fault

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={30d,24u} r1={29d,12u} r2={29d,13u} r3={44d,28u} r4={1d,11u,2d} r5={6d,12u,3d} r6={1d,8u} r7={1d,6u,4d} r8={1d,5u} r9={2d,5u} r10={1d,5u} r11={2d,4u} r12={16d} r13={1d,69u,2d} r14={16d,1u} r15={15d} r16={15d} r17={15d} r18={15d} r19={15d} r20={15d} r21={15d} r22={15d} r23={15d} r24={45d,25u} r25={4d} r27={15d} r28={15d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={15d} r37={15d} r38={15d} r39={15d} r40={15d} r41={15d} r42={15d} r43={15d} r44={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} r76={15d} r77={15d} r78={15d} r79={15d} r80={15d} r81={15d} r82={15d} r83={15d} r84={15d} r85={15d} r86={15d} r87={15d} r88={15d} r89={15d} r90={15d} r91={15d} r92={15d} r93={15d} r94={15d} r95={15d} r96={15d} r97={15d} r98={15d} r99={15d} r100={15d} r101={15d} r102={15d} r103={15d} r104={15d} r105={15d} r106={15d} r107={15d} r108={15d} r109={15d} r110={15d} r111={15d} r112={15d} r113={15d} r114={15d} r115={15d} r116={15d} r117={15d} r118={15d} r119={15d} r120={15d} r121={15d} r122={15d} r123={15d} r124={15d} r125={15d} r126={15d} r127={15d} 
;;    total ref usage 2118{1875d,228u,15e} in 162{147 regular + 15 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 5 14 2 NOTE_INSN_DELETED)

(note 14 9 4 2 NOTE_INSN_DELETED)

(insn 4 14 351 2 arch/arm/mm/fault.c:277 (set (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
        (reg:SI 2 r2 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 351 4 346 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 346 351 347 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 3 r3 [159])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 347 346 2 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 3 r3 [159])
        (and:SI (reg:SI 3 r3 [159])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 347 13 2 arch/arm/mm/fault.c:277 (set (reg/v:SI 6 r6 [orig:156 addr ] [156])
        (reg:SI 0 r0 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 13 2 3 2 arch/arm/mm/fault.c:289 (set (reg:SI 2 r2 [orig:162 <variable>.uregs+64 ] [162])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (nil)))

(insn 3 13 11 2 arch/arm/mm/fault.c:277 (set (reg/v:SI 10 sl [orig:157 fsr ] [157])
        (reg:SI 1 r1 [ fsr ])) 167 {*arm_movsi_insn} (nil))

(insn 11 3 15 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [159])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 15 11 12 2 arch/arm/mm/fault.c:289 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [orig:162 <variable>.uregs+64 ] [162])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 12 15 16 2 arch/arm/mm/fault.c:286 (set (reg/v/f:SI 8 r8 [orig:148 mm ] [148])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                (const_int 492 [0x1ec])) [0 <variable>.mm+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 16 12 17 2 arch/arm/mm/fault.c:289 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  3 [50.0%]  (fallthru)
;; Succ edge  4 [50.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	 24 [cc]

;; Pred edge  2 [50.0%]  (fallthru)
(note 17 16 18 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 18 17 19 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:26 (parallel [
            (asm_operands/v ("	cpsie i			@ arch_local_irq_enable") ("") 0 []
                 [] 1104506)
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 2 [r2] 24 [cc]

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [50.0%] 
(code_label 19 18 20 4 22 "" [1 uses])

(note 20 19 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 22 20 25 4 NOTE_INSN_DELETED)

(note 25 22 29 4 NOTE_INSN_DELETED)

(note 29 25 30 4 NOTE_INSN_DELETED)

(note 30 29 32 4 NOTE_INSN_DELETED)

(note 32 30 33 4 NOTE_INSN_DELETED)

(note 33 32 352 4 NOTE_INSN_DELETED)

(insn 352 33 344 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 344 352 345 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [163])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 345 344 24 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [163])
        (and:SI (reg:SI 3 r3 [163])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 24 345 26 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [orig:166 <variable>.preempt_count ] [166])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [163])
                (const_int 4 [0x4])) [0 <variable>.preempt_count+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 26 24 27 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 3 r3 [orig:166 <variable>.preempt_count ] [166])
                        (const_int -1073741825 [0xffffffffbfffffff]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 2 r2))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(insn 27 26 34 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/thread_info.h:97 (set (reg:SI 3 r3 [168])
        (ne:SI (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (nil))

(insn 34 27 35 4 arch/arm/mm/fault.c:296 (parallel [
            (set (reg:SI 3 r3 [173])
                (ior:SI (eq:SI (reg/v/f:SI 8 r8 [orig:148 mm ] [148])
                        (const_int 0 [0x0]))
                    (reg:SI 3 r3 [168])))
            (clobber (reg:CC 24 cc))
        ]) 280 {*cond_arith} (nil))

(insn 35 34 36 4 arch/arm/mm/fault.c:296 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [173])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 36 35 37 4 arch/arm/mm/fault.c:296 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 275)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 4 -> ( 41 5)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  41 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [50.0%]  (fallthru)
(note 37 36 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 41 37 38 5 NOTE_INSN_DELETED)

(insn 38 41 39 5 arch/arm/mm/fault.c:304 (set (reg/f:SI 9 r9 [orig:154 D.24547 ] [154])
        (plus:SI (reg/v/f:SI 8 r8 [orig:148 mm ] [148])
            (const_int 60 [0x3c]))) 4 {*arm_addsi3} (nil))

(insn 39 38 40 5 arch/arm/mm/fault.c:304 (set (reg:SI 0 r0)
        (reg/f:SI 9 r9 [orig:154 D.24547 ] [154])) 167 {*arm_movsi_insn} (nil))

(call_insn 40 39 306 5 arch/arm/mm/fault.c:304 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("down_read_trylock") [flags 0x41] <function_decl 0x10c30c80 down_read_trylock>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 306 40 42 5 (set (reg:SI 3 r3 [orig:206 <variable>.uregs+64 ] [206])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 306 43 5 arch/arm/mm/fault.c:304 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 43 42 44 5 arch/arm/mm/fault.c:304 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 5 -> ( 6 9)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  9 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 44 43 46 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 46 44 47 6 NOTE_INSN_DELETED)

(insn 47 46 48 6 arch/arm/mm/fault.c:305 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:206 <variable>.uregs+64 ] [206])
                (const_int 4 [0x4])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 48 47 49 6 arch/arm/mm/fault.c:305 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 55)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [50.0%]  (fallthru)
(note 49 48 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 52 49 50 7 NOTE_INSN_DELETED)

(insn 50 52 51 7 arch/arm/mm/fault.c:305 discrim 1 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 51 50 53 7 arch/arm/mm/fault.c:305 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_exception_tables") [flags 0x41] <function_decl 0x10e04f80 search_exception_tables>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 53 51 54 7 arch/arm/mm/fault.c:305 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 54 53 55 7 arch/arm/mm/fault.c:305 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 275)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 7 -> ( 41 8)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  41 [15.0%] 
;; Succ edge  8 [85.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [85.0%]  (fallthru)
(code_label 55 54 56 8 25 "" [1 uses])

(note 56 55 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 57 56 58 8 arch/arm/mm/fault.c:307 (set (reg:SI 0 r0)
        (reg/f:SI 9 r9 [orig:154 D.24547 ] [154])) 167 {*arm_movsi_insn} (nil))

(call_insn 58 57 318 8 arch/arm/mm/fault.c:307 (parallel [
            (call (mem:SI (symbol_ref:SI ("down_read") [flags 0x41] <function_decl 0x10c30c00 down_read>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 318 58 319 8 (set (pc)
        (label_ref 73)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 11)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 319 318 61)

;; Start of basic block ( 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%] 
(code_label 61 319 62 9 24 "" [1 uses])

(note 62 61 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 64 62 65 9 NOTE_INSN_DELETED)

(insn 65 64 66 9 arch/arm/mm/fault.c:316 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:206 <variable>.uregs+64 ] [206])
                (const_int 4 [0x4])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 66 65 67 9 arch/arm/mm/fault.c:316 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [29.0%]  (fallthru)
;; Succ edge  11 [71.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  9 [29.0%]  (fallthru)
(note 67 66 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 70 67 68 10 NOTE_INSN_DELETED)

(insn 68 70 69 10 arch/arm/mm/fault.c:317 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
                (const_int 60 [0x3c])) [0 <variable>.uregs+60 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 69 68 71 10 arch/arm/mm/fault.c:317 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("search_exception_tables") [flags 0x41] <function_decl 0x10e04f80 search_exception_tables>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 71 69 72 10 arch/arm/mm/fault.c:316 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 72 71 73 10 arch/arm/mm/fault.c:316 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 275)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
        (nil)))
;; End of basic block 10 -> ( 41 11)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  41 [15.0%] 
;; Succ edge  11 [85.0%]  (fallthru)

;; Start of basic block ( 9 10 8) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  9 [71.0%] 
;; Pred edge  10 [85.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 73 72 74 11 26 "" [2 uses])

(note 74 73 78 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 78 74 75 11 NOTE_INSN_DELETED)

(insn 75 78 76 11 arch/arm/mm/fault.c:238 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:148 mm ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 76 75 77 11 arch/arm/mm/fault.c:238 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:156 addr ] [156])) 167 {*arm_movsi_insn} (nil))

(call_insn 77 76 79 11 arch/arm/mm/fault.c:238 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("find_vma") [flags 0x41] <function_decl 0x10fe6c80 find_vma>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 79 77 80 11 arch/arm/mm/fault.c:240 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 5 r5 [orig:136 vma ] [136])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 80 79 81 11 arch/arm/mm/fault.c:240 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 11 -> ( 21 12)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  21 [0.0%] 
;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
(note 81 80 82 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 82 81 83 12 arch/arm/mm/fault.c:242 (set (reg:SI 3 r3 [orig:178 <variable>.vm_start ] [178])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 vma ] [136])
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 vma ] [136])
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn 83 82 84 12 arch/arm/mm/fault.c:242 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:178 <variable>.vm_start ] [178])
            (reg/v:SI 6 r6 [orig:156 addr ] [156]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 84 83 155 12 arch/arm/mm/fault.c:242 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 144)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 12 -> ( 19 13)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  19 [0.0%] 
;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 20) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 10 [sl] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  20 [50.0%] 
(code_label 155 84 85 13 35 "" [1 uses])

(note 85 155 86 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 86 85 98 13 NOTE_INSN_DELETED)

(note 98 86 105 13 NOTE_INSN_DELETED)

(note 105 98 87 13 NOTE_INSN_DELETED)

(insn 87 105 104 13 arch/arm/mm/fault.c:223 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 10 sl [orig:157 fsr ] [157])
                        (const_int 2048 [0x800]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [orig:138 D.24984 ] [138])
                (and:SI (reg/v:SI 10 sl [orig:157 fsr ] [157])
                    (const_int 2048 [0x800])))
        ]) 69 {*andsi3_compare0} (nil))

(insn 104 87 309 13 arch/arm/mm/fault.c:228 (set (reg:SI 1 r1 [orig:180 <variable>.vm_flags ] [180])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 vma ] [136])
                (const_int 24 [0x18])) [0 <variable>.vm_flags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 vma ] [136])
                (const_int 24 [0x18])) [0 <variable>.vm_flags+0 S4 A32])
        (nil)))

(insn 309 104 317 13 arch/arm/mm/fault.c:224 (set (reg/v:SI 2 r2 [orig:137 mask ] [137])
        (if_then_else:SI (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (const_int 7 [0x7])
            (const_int 2 [0x2]))) 240 {*movsicc_insn} (nil))

(insn 317 309 106 13 arch/arm/mm/fault.c:226 (parallel [
            (set (reg/v:SI 2 r2 [orig:137 mask ] [137])
                (if_then_else:SI (ge (reg/v:SI 10 sl [orig:157 fsr ] [157])
                        (const_int 0 [0x0]))
                    (reg/v:SI 2 r2 [orig:137 mask ] [137])
                    (const_int 4 [0x4])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))

(insn 106 317 107 13 arch/arm/mm/fault.c:228 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 2 r2 [orig:137 mask ] [137])
                        (reg:SI 1 r1 [orig:180 <variable>.vm_flags ] [180]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 107 106 108 13 arch/arm/mm/fault.c:228 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [71.0%]  (fallthru)
;; Succ edge  15 [29.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  13 [71.0%]  (fallthru)
(note 108 107 109 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 109 108 320 14 arch/arm/mm/fault.c:251 (set (reg/v:SI 5 r5 [orig:147 fault ] [147])
        (const_int 131072 [0x20000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 131072 [0x20000])
        (nil)))

(jump_insn 320 109 321 14 (set (pc)
        (label_ref 161)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  22 [100.0%] 

(barrier 321 320 112)

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  13 [29.0%] 
(code_label 112 321 113 15 32 "" [1 uses])

(note 113 112 114 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 114 113 115 15 NOTE_INSN_DELETED)

(note 115 114 116 15 NOTE_INSN_DELETED)

(note 116 115 117 15 NOTE_INSN_DELETED)

(note 117 116 124 15 NOTE_INSN_DELETED)

(note 124 117 342 15 NOTE_INSN_DELETED)

(insn 342 124 121 15 arch/arm/mm/fault.c:259 (set (reg:SI 2 r2)
        (and:SI (reg/v:SI 6 r6 [orig:156 addr ] [156])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 121 342 119 15 arch/arm/mm/fault.c:259 (parallel [
            (set (reg:SI 3 r3)
                (ne:SI (reg:SI 3 r3 [orig:138 D.24984 ] [138])
                    (const_int 0 [0x0])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (nil))

(insn 119 121 343 15 arch/arm/mm/fault.c:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 5 r5 [orig:136 vma ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 343 119 118 15 arch/arm/mm/fault.c:259 (set (reg:SI 2 r2)
        (and:SI (reg:SI 2 r2)
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 118 343 122 15 arch/arm/mm/fault.c:259 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:148 mm ] [148])) 167 {*arm_movsi_insn} (nil))

(call_insn 122 118 123 15 arch/arm/mm/fault.c:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("handle_mm_fault") [flags 0x41] <function_decl 0x10fbfc80 handle_mm_fault>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 123 122 125 15 arch/arm/mm/fault.c:259 (set (reg/v:SI 5 r5 [orig:147 fault ] [147])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 125 123 126 15 arch/arm/mm/fault.c:260 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 5 r5 [orig:147 fault ] [147])
                        (const_int 51 [0x33]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 70 {*andsi3_compare0_scratch} (nil))

(jump_insn 126 125 127 15 arch/arm/mm/fault.c:260 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 161)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 4 [0x4])
        (nil)))
;; End of basic block 15 -> ( 22 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  22 [0.0%] 
;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
(note 127 126 128 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(note 128 127 129 16 NOTE_INSN_DELETED)

(insn 129 128 130 16 arch/arm/mm/fault.c:262 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 5 r5 [orig:147 fault ] [147])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 130 129 131 16 arch/arm/mm/fault.c:262 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 137)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 16 -> ( 17 18)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  17 [50.0%]  (fallthru)
;; Succ edge  18 [50.0%] 

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  16 [50.0%]  (fallthru)
(note 131 130 132 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 132 131 133 17 arch/arm/mm/fault.c:263 (set (reg:SI 3 r3 [orig:187 <variable>.maj_flt ] [187])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])
        (nil)))

(insn 133 132 134 17 arch/arm/mm/fault.c:263 (set (reg:SI 3 r3 [188])
        (plus:SI (reg:SI 3 r3 [orig:187 <variable>.maj_flt ] [187])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])
        (nil)))

(insn 134 133 322 17 arch/arm/mm/fault.c:263 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                (const_int 696 [0x2b8])) [0 <variable>.maj_flt+0 S4 A64])
        (reg:SI 3 r3 [188])) 167 {*arm_movsi_insn} (nil))

(jump_insn 322 134 323 17 (set (pc)
        (label_ref 161)) 242 {*arm_jump} (nil))
;; End of basic block 17 -> ( 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  22 [100.0%] 

(barrier 323 322 137)

;; Start of basic block ( 16) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  16 [50.0%] 
(code_label 137 323 138 18 34 "" [1 uses])

(note 138 137 139 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 139 138 140 18 arch/arm/mm/fault.c:265 (set (reg:SI 3 r3 [orig:189 <variable>.min_flt ] [189])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])
        (nil)))

(insn 140 139 141 18 arch/arm/mm/fault.c:265 (set (reg:SI 3 r3 [190])
        (plus:SI (reg:SI 3 r3 [orig:189 <variable>.min_flt ] [189])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])
        (nil)))

(insn 141 140 324 18 arch/arm/mm/fault.c:265 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])
                (const_int 692 [0x2b4])) [0 <variable>.min_flt+0 S4 A32])
        (reg:SI 3 r3 [190])) 167 {*arm_movsi_insn} (nil))

(jump_insn 324 141 325 18 (set (pc)
        (label_ref 161)) 242 {*arm_jump} (nil))
;; End of basic block 18 -> ( 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  22 [100.0%] 

(barrier 325 324 144)

;; Start of basic block ( 12) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  12 [0.0%] 
(code_label 144 325 145 19 28 ("check_stack") [1 uses])

(note 145 144 147 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 147 145 146 19 NOTE_INSN_DELETED)

(insn 146 147 148 19 arch/arm/mm/fault.c:269 (set (reg:SI 3 r3 [orig:192 <variable>.vm_flags ] [192])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 vma ] [136])
                (const_int 24 [0x18])) [0 <variable>.vm_flags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:136 vma ] [136])
                (const_int 24 [0x18])) [0 <variable>.vm_flags+0 S4 A32])
        (nil)))

(insn 148 146 149 19 arch/arm/mm/fault.c:269 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:192 <variable>.vm_flags ] [192])
                (const_int 1 [0x1])
                (const_int 8 [0x8]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 149 148 150 19 arch/arm/mm/fault.c:269 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 158)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 19 -> ( 20 21)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  20 [29.0%]  (fallthru)
;; Succ edge  21 [71.0%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  19 [29.0%]  (fallthru)
(note 150 149 154 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 154 150 152 20 NOTE_INSN_DELETED)

(insn 152 154 153 20 arch/arm/mm/fault.c:269 discrim 1 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:156 addr ] [156])) 167 {*arm_movsi_insn} (nil))

(call_insn 153 152 156 20 arch/arm/mm/fault.c:269 discrim 1 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("expand_stack") [flags 0x41] <function_decl 0x10fe6b80 expand_stack>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 156 153 157 20 arch/arm/mm/fault.c:269 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 157 156 158 20 arch/arm/mm/fault.c:269 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 155)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 20 -> ( 13 21)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  13 [50.0%] 
;; Succ edge  21 [50.0%]  (fallthru)

;; Start of basic block ( 19 20 11) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 5 [r5]
;; live  kill	

;; Pred edge  19 [71.0%] 
;; Pred edge  20 [50.0%]  (fallthru)
;; Pred edge  11 [0.0%] 
(code_label 158 157 159 21 27 "" [2 uses])

(note 159 158 160 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 160 159 161 21 arch/arm/mm/fault.c:239 (set (reg/v:SI 5 r5 [orig:147 fault ] [147])
        (const_int 65536 [0x10000])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 21 -> ( 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  22 [100.0%]  (fallthru)

;; Start of basic block ( 21 15 14 17 18) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  21 [100.0%]  (fallthru)
;; Pred edge  15 [0.0%] 
;; Pred edge  14 [100.0%] 
;; Pred edge  17 [100.0%] 
;; Pred edge  18 [100.0%] 
(code_label 161 160 162 22 33 "" [4 uses])

(note 162 161 163 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(insn 163 162 300 22 arch/arm/mm/fault.c:323 (set (reg:SI 0 r0)
        (reg/f:SI 9 r9 [orig:154 D.24547 ] [154])) 167 {*arm_movsi_insn} (nil))

(insn 300 163 164 22 arch/arm/mm/fault.c:325 (set (reg:SI 9 r9 [orig:205 D.24563+4 ] [205])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(call_insn 164 300 166 22 arch/arm/mm/fault.c:323 (parallel [
            (call (mem:SI (symbol_ref:SI ("up_read") [flags 0x41] <function_decl 0x10c30e00 up_read>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 166 164 167 22 include/linux/jump_label.h:67 (set (reg/f:SI 3 r3 [orig:142 D.24830 ] [142])
        (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                (const_int 8 [0x8])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                (const_int 8 [0x8])))
        (nil)))

(insn 167 166 168 22 include/linux/jump_label.h:67 (set (reg:SI 3 r3 [orig:141 D.24831 ] [141])
        (mem/v:SI (reg/f:SI 3 r3 [orig:142 D.24830 ] [142]) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                    (const_int 8 [0x8]))) [0 S4 A32])
        (nil)))

(insn 168 167 169 22 include/linux/jump_label.h:67 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:141 D.24831 ] [141])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 169 168 170 22 include/linux/jump_label.h:67 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 191)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 22 -> ( 23 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  23 [0.0%]  (fallthru)
;; Succ edge  27 [100.0%] 

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  22 [0.0%]  (fallthru)
(note 170 169 171 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 171 170 172 23 include/linux/perf_event.h:1054 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 172 171 173 23 include/linux/perf_event.h:1054 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 177)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 672 [0x2a0])
        (nil)))
;; End of basic block 23 -> ( 25 24)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  25 [6.7%] 
;; Succ edge  24 [93.3%]  (fallthru)

;; Start of basic block ( 23) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  23 [93.3%]  (fallthru)
(note 173 172 174 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 174 173 326 24 include/linux/perf_event.h:1054 (set (reg/v/f:SI 1 r1 [orig:134 regs.462 ] [134])
        (reg/v/f:SI 4 r4 [orig:158 regs ] [158])) 167 {*arm_movsi_insn} (nil))

(jump_insn 326 174 327 24 (set (pc)
        (label_ref 184)) 242 {*arm_jump} (nil))
;; End of basic block 24 -> ( 26)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  26 [100.0%] 

(barrier 327 326 177)

;; Start of basic block ( 23) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 11 [fp]
;; live  kill	 14 [lr]

;; Pred edge  23 [6.7%] 
(code_label 177 327 178 25 37 "" [1 uses])

(note 178 177 179 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 179 178 181 25 include/linux/perf_event.h:1043 discrim 1 (set (reg/f:SI 11 fp [193])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 16 [0x10]))
        (nil)))

(insn 181 179 180 25 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(insn 180 181 182 25 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 11 fp [193])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))
        (nil)))

(call_insn 182 180 183 25 include/linux/perf_event.h:1043 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 183 182 184 25 include/linux/perf_event.h:1056 (set (reg/v/f:SI 1 r1 [orig:134 regs.462 ] [134])
        (reg/f:SI 11 fp [193])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))
        (nil)))
;; End of basic block 25 -> ( 26)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  26 [100.0%]  (fallthru)

;; Start of basic block ( 25 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  25 [100.0%]  (fallthru)
;; Pred edge  24 [100.0%] 
(code_label 184 183 185 26 38 "" [1 uses])

(note 185 184 188 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn 188 185 189 26 include/linux/perf_event.h:1058 (set (reg:SI 0 r0)
        (const_int 2 [0x2])) 167 {*arm_movsi_insn} (nil))

(insn 189 188 186 26 include/linux/perf_event.h:1058 (set (reg:DI 2 r2)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 186 189 301 26 include/linux/perf_event.h:1058 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v/f:SI 1 r1 [orig:134 regs.462 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 301 186 302 26 include/linux/perf_event.h:1058 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A64])
        (reg/v:SI 6 r6 [orig:156 addr ] [156])) 167 {*arm_movsi_insn} (nil))

(insn 302 301 190 26 include/linux/perf_event.h:1058 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 9 r9 [orig:205 D.24563+4 ] [205])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 190 302 191 26 include/linux/perf_event.h:1058 (parallel [
            (call (mem:SI (symbol_ref:SI ("__perf_sw_event") [flags 0x41] <function_decl 0x11436b00 __perf_sw_event>) [0 S4 A32])
                (const_int 16 [0x10]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 26 -> ( 27)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  27 [100.0%]  (fallthru)

;; Start of basic block ( 26 22) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  26 [100.0%]  (fallthru)
;; Pred edge  22 [100.0%] 
(code_label 191 190 192 27 36 "" [1 uses])

(note 192 191 193 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(note 193 192 194 27 NOTE_INSN_DELETED)

(insn 194 193 195 27 arch/arm/mm/fault.c:326 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 5 r5 [orig:147 fault ] [147])
                (const_int 1 [0x1])
                (const_int 2 [0x2]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 195 194 196 27 arch/arm/mm/fault.c:326 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 222)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 27 -> ( 28 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  28 [50.0%]  (fallthru)
;; Succ edge  33 [50.0%] 

;; Start of basic block ( 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  27 [50.0%]  (fallthru)
(note 196 195 197 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn 197 196 198 28 include/linux/jump_label.h:67 (set (reg/f:SI 3 r3 [orig:140 D.24847 ] [140])
        (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                (const_int 24 [0x18])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                (const_int 24 [0x18])))
        (nil)))

(insn 198 197 199 28 include/linux/jump_label.h:67 (set (reg:SI 3 r3 [orig:139 D.24848 ] [139])
        (mem/v:SI (reg/f:SI 3 r3 [orig:140 D.24847 ] [140]) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (const:SI (plus:SI (symbol_ref:SI ("perf_swevent_enabled") [flags 0xc0] <var_decl 0x1143b180 perf_swevent_enabled>)
                    (const_int 24 [0x18]))) [0 S4 A32])
        (nil)))

(insn 199 198 200 28 include/linux/jump_label.h:67 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:139 D.24848 ] [139])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 200 199 201 28 include/linux/jump_label.h:67 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 222)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 28 -> ( 29 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  29 [0.0%]  (fallthru)
;; Succ edge  33 [100.0%] 

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  28 [0.0%]  (fallthru)
(note 201 200 202 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 202 201 203 29 include/linux/perf_event.h:1054 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 203 202 204 29 include/linux/perf_event.h:1054 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 208)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 672 [0x2a0])
        (nil)))
;; End of basic block 29 -> ( 31 30)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  31 [6.7%] 
;; Succ edge  30 [93.3%]  (fallthru)

;; Start of basic block ( 29) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  29 [93.3%]  (fallthru)
(note 204 203 205 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 205 204 328 30 include/linux/perf_event.h:1054 (set (reg/v/f:SI 1 r1 [orig:133 regs.463 ] [133])
        (reg/v/f:SI 4 r4 [orig:158 regs ] [158])) 167 {*arm_movsi_insn} (nil))

(jump_insn 328 205 329 30 (set (pc)
        (label_ref 215)) 242 {*arm_jump} (nil))
;; End of basic block 30 -> ( 32)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  32 [100.0%] 

(barrier 329 328 208)

;; Start of basic block ( 29) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 11 [fp]
;; live  kill	 14 [lr]

;; Pred edge  29 [6.7%] 
(code_label 208 329 209 31 40 "" [1 uses])

(note 209 208 210 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 210 209 212 31 include/linux/perf_event.h:1043 discrim 1 (set (reg/f:SI 11 fp [196])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 16 [0x10]))
        (nil)))

(insn 212 210 211 31 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 1 r1)
        (const_int 72 [0x48])) 167 {*arm_movsi_insn} (nil))

(insn 211 212 213 31 include/linux/perf_event.h:1043 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 11 fp [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))
        (nil)))

(call_insn 213 211 214 31 include/linux/perf_event.h:1043 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 214 213 215 31 include/linux/perf_event.h:1056 (set (reg/v/f:SI 1 r1 [orig:133 regs.463 ] [133])
        (reg/f:SI 11 fp [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -72 [0xffffffffffffffb8]))
        (nil)))
;; End of basic block 31 -> ( 32)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  32 [100.0%]  (fallthru)

;; Start of basic block ( 31 30) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 6 [r6] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  31 [100.0%]  (fallthru)
;; Pred edge  30 [100.0%] 
(code_label 215 214 216 32 41 "" [1 uses])

(note 216 215 219 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 219 216 220 32 include/linux/perf_event.h:1058 (set (reg:SI 0 r0)
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (nil))

(insn 220 219 217 32 include/linux/perf_event.h:1058 (set (reg:DI 2 r2)
        (const_int 1 [0x1])) 163 {*arm_movdi} (nil))

(insn 217 220 304 32 include/linux/perf_event.h:1058 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v/f:SI 1 r1 [orig:133 regs.463 ] [133])) 167 {*arm_movsi_insn} (nil))

(insn 304 217 303 32 include/linux/perf_event.h:1058 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 9 r9 [orig:205 D.24563+4 ] [205])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 303 304 221 32 include/linux/perf_event.h:1058 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A64])
        (reg/v:SI 6 r6 [orig:156 addr ] [156])) 167 {*arm_movsi_insn} (nil))

(call_insn 221 303 222 32 include/linux/perf_event.h:1058 (parallel [
            (call (mem:SI (symbol_ref:SI ("__perf_sw_event") [flags 0x41] <function_decl 0x11436b00 __perf_sw_event>) [0 S4 A32])
                (const_int 16 [0x10]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 32 -> ( 33)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  33 [100.0%]  (fallthru)

;; Start of basic block ( 28 27 32) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  28 [100.0%] 
;; Pred edge  27 [50.0%] 
;; Pred edge  32 [100.0%]  (fallthru)
(code_label 222 221 223 33 39 "" [2 uses])

(note 223 222 339 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 339 223 340 33 arch/arm/mm/fault.c:334 (set (reg:SI 3 r3 [197])
        (const_int 196659 [0x30033])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 196659 [0x30033])
        (nil)))

(insn 340 339 226 33 arch/arm/mm/fault.c:334 (set (reg:SI 3 r3 [197])
        (and:SI (reg/v:SI 5 r5 [orig:147 fault ] [147])
            (reg:SI 3 r3 [197]))) 67 {*arm_andsi3_insn} (nil))

(insn 226 340 227 33 arch/arm/mm/fault.c:334 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [197])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 227 226 228 33 arch/arm/mm/fault.c:334 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 282)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 33 -> ( 42 34)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  42 [100.0%] 
;; Succ edge  34 [0.0%]  (fallthru)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  33 [0.0%]  (fallthru)
(note 228 227 229 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(note 229 228 230 34 NOTE_INSN_DELETED)

(insn 230 229 231 34 arch/arm/mm/fault.c:337 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 5 r5 [orig:147 fault ] [147])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 231 230 232 34 arch/arm/mm/fault.c:337 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 236)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7929 [0x1ef9])
        (nil)))
;; End of basic block 34 -> ( 35 36)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  35 [20.7%]  (fallthru)
;; Succ edge  36 [79.3%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  34 [20.7%]  (fallthru)
(note 232 231 233 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(call_insn 233 232 330 35 arch/arm/mm/fault.c:343 (parallel [
            (call (mem:SI (symbol_ref:SI ("pagefault_out_of_memory") [flags 0x41] <function_decl 0x10fb4d80 pagefault_out_of_memory>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 330 233 331 35 arch/arm/mm/fault.c:344 (set (pc)
        (label_ref 282)) 242 {*arm_jump} (nil))
;; End of basic block 35 -> ( 42)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  42 [100.0%] 

(barrier 331 330 236)

;; Start of basic block ( 34) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  34 [79.3%] 
(code_label 236 331 237 36 43 "" [1 uses])

(note 237 236 239 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(note 239 237 238 36 NOTE_INSN_DELETED)

(insn 238 239 240 36 arch/arm/mm/fault.c:351 (set (reg:SI 3 r3 [orig:201 <variable>.uregs+64 ] [201])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:158 regs ] [158])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (nil)))

(insn 240 238 241 36 arch/arm/mm/fault.c:351 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:201 <variable>.uregs+64 ] [201])
                (const_int 4 [0x4])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 241 240 242 36 arch/arm/mm/fault.c:351 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 275)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 36 -> ( 41 37)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  41 [50.0%] 
;; Succ edge  37 [50.0%]  (fallthru)

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  36 [50.0%]  (fallthru)
(note 242 241 243 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(note 243 242 244 37 NOTE_INSN_DELETED)

(insn 244 243 245 37 arch/arm/mm/fault.c:354 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 5 r5 [orig:147 fault ] [147])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 245 244 246 37 arch/arm/mm/fault.c:354 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 251)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 37 -> ( 38 39)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  38 [39.0%]  (fallthru)
;; Succ edge  39 [61.0%] 

;; Start of basic block ( 37) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  37 [39.0%]  (fallthru)
(note 246 245 247 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(insn 247 246 248 38 arch/arm/mm/fault.c:360 (set (reg/v:SI 5 r5 [orig:145 code ] [145])
        (const_int 196610 [0x30002])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 196610 [0x30002])
        (nil)))

(insn 248 247 332 38 arch/arm/mm/fault.c:359 (set (reg/v:SI 3 r3 [orig:146 sig ] [146])
        (const_int 7 [0x7])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 7 [0x7])
        (nil)))

(jump_insn 332 248 333 38 (set (pc)
        (label_ref 264)) 242 {*arm_jump} (nil))
;; End of basic block 38 -> ( 40)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  40 [100.0%] 

(barrier 333 332 251)

;; Start of basic block ( 37) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	 24 [cc]

;; Pred edge  37 [61.0%] 
(code_label 251 333 252 39 44 "" [1 uses])

(note 252 251 253 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(note 253 252 315 39 NOTE_INSN_DELETED)

(insn 315 253 311 39 arch/arm/mm/fault.c:367 discrim 2 (set (reg/v:SI 3 r3 [orig:146 sig ] [146])
        (const_int 11 [0xb])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 11 [0xb])
        (nil)))

(insn 311 315 349 39 arch/arm/mm/fault.c:367 discrim 2 (set (reg:SI 2 r2 [208])
        (const_int 196609 [0x30001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196609 [0x30001])
        (nil)))

(insn 349 311 313 39 arch/arm/mm/fault.c:367 discrim 2 (set (reg:SI 1 r1 [207])
        (const_int 196610 [0x30002])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196610 [0x30002])
        (nil)))

(insn 313 349 264 39 arch/arm/mm/fault.c:367 discrim 2 (parallel [
            (set (reg/v:SI 5 r5 [orig:145 code ] [145])
                (if_then_else:SI (eq (reg/v:SI 5 r5 [orig:147 fault ] [147])
                        (const_int 131072 [0x20000]))
                    (reg:SI 1 r1 [207])
                    (reg:SI 2 r2 [208])))
            (clobber (reg:CC 24 cc))
        ]) 292 {movcond} (nil))
;; End of basic block 39 -> ( 40)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  40 [100.0%]  (fallthru)

;; Start of basic block ( 39 38) -> 40
;; bb 40 artificial_defs: { }
;; bb 40 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  39 [100.0%]  (fallthru)
;; Pred edge  38 [100.0%] 
(code_label 264 313 265 40 45 "" [1 uses])

(note 265 264 268 40 [bb 40] NOTE_INSN_BASIC_BLOCK)

(insn 268 265 269 40 arch/arm/mm/fault.c:371 (set (reg:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:149 tsk ] [149])) 167 {*arm_movsi_insn} (nil))

(insn 269 268 270 40 arch/arm/mm/fault.c:371 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:156 addr ] [156])) 167 {*arm_movsi_insn} (nil))

(insn 270 269 266 40 arch/arm/mm/fault.c:371 (set (reg:SI 2 r2)
        (reg/v:SI 10 sl [orig:157 fsr ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 266 270 267 40 arch/arm/mm/fault.c:371 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/v:SI 5 r5 [orig:145 code ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 267 266 272 40 arch/arm/mm/fault.c:371 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v/f:SI 4 r4 [orig:158 regs ] [158])) 167 {*arm_movsi_insn} (nil))

(call_insn 272 267 334 40 arch/arm/mm/fault.c:371 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_user_fault") [flags 0x3] <function_decl 0x11459d80 __do_user_fault>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(jump_insn 334 272 335 40 arch/arm/mm/fault.c:372 (set (pc)
        (label_ref 282)) 242 {*arm_jump} (nil))
;; End of basic block 40 -> ( 42)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  42 [100.0%] 

(barrier 335 334 275)

;; Start of basic block ( 4 7 10 36) -> 41
;; bb 41 artificial_defs: { }
;; bb 41 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  4 [50.0%] 
;; Pred edge  7 [15.0%] 
;; Pred edge  10 [15.0%] 
;; Pred edge  36 [50.0%] 
(code_label 275 335 276 41 23 ("no_context") [4 uses])

(note 276 275 277 41 [bb 41] NOTE_INSN_BASIC_BLOCK)

(insn 277 276 278 41 arch/arm/mm/fault.c:375 (set (reg:SI 0 r0)
        (reg/v/f:SI 8 r8 [orig:148 mm ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 278 277 279 41 arch/arm/mm/fault.c:375 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:156 addr ] [156])) 167 {*arm_movsi_insn} (nil))

(insn 279 278 280 41 arch/arm/mm/fault.c:375 (set (reg:SI 2 r2)
        (reg/v:SI 10 sl [orig:157 fsr ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 280 279 281 41 arch/arm/mm/fault.c:375 (set (reg:SI 3 r3)
        (reg/v/f:SI 4 r4 [orig:158 regs ] [158])) 167 {*arm_movsi_insn} (nil))

(call_insn 281 280 282 41 arch/arm/mm/fault.c:375 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_kernel_fault") [flags 0x3] <function_decl 0x11459c80 __do_kernel_fault>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 41 -> ( 42)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  42 [100.0%]  (fallthru)

;; Start of basic block ( 41 33 35 40) -> 42
;; bb 42 artificial_defs: { }
;; bb 42 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  41 [100.0%]  (fallthru)
;; Pred edge  33 [100.0%] 
;; Pred edge  35 [100.0%] 
;; Pred edge  40 [100.0%] 
(code_label 282 281 283 42 42 "" [3 uses])

(note 283 282 288 42 [bb 42] NOTE_INSN_BASIC_BLOCK)

(insn 288 283 294 42 arch/arm/mm/fault.c:377 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 294 288 348 42 arch/arm/mm/fault.c:377 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 42 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 348 294 350 NOTE_INSN_DELETED)

(note 350 348 0 NOTE_INSN_DELETED)


;; Function do_bad_area (do_bad_area)[0:1290]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 48.
verify found no changes in insn with uid = 48.
deleting insn with uid = 18.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)

Pass 0 for finding allocno costs

    a4 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000


Pass 1 for finding allocno costs

    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS

  a0(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a6(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a7(r139,l0) costs: LO_REGS:2000,2000 BASE_REGS:2000,2000 HI_REGS:2000,2000 GENERAL_REGS:2000,2000 MEM:42000

   Insn 34(l0): point = 0
   Insn 33(l0): point = 2
   Insn 32(l0): point = 4
   Insn 31(l0): point = 6
   Insn 30(l0): point = 8
   Insn 25(l0): point = 11
   Insn 19(l0): point = 13
   Insn 48(l0): point = 15
   Insn 20(l0): point = 17
   Insn 24(l0): point = 19
   Insn 23(l0): point = 21
   Insn 22(l0): point = 23
   Insn 21(l0): point = 25
   Insn 16(l0): point = 28
   Insn 12(l0): point = 30
   Insn 15(l0): point = 32
   Insn 11(l0): point = 34
   Insn 3(l0): point = 36
   Insn 13(l0): point = 38
   Insn 2(l0): point = 40
   Insn 47(l0): point = 42
   Insn 46(l0): point = 44
   Insn 4(l0): point = 46
 a0(r138): [18..46] [3..10]
 a1(r137): [22..36] [5..10]
 a2(r136): [24..40] [7..10]
 a3(r134): [28..30] [9..10]
 a4(r143): [14..15]
 a5(r135): [26..34]
 a6(r142): [33..38]
 a7(r139): [35..44]
Compressing live ranges: from 49 to 21 - 42%
Ranges after the compression:
 a0(r138): [7..20] [0..4]
 a1(r137): [8..16] [1..4]
 a2(r136): [9..18] [2..4]
 a3(r134): [11..12] [3..4]
 a4(r143): [5..6]
 a5(r135): [10..14]
 a6(r142): [13..17]
 a7(r139): [15..19]
+++Allocating 64 bytes for conflict table (uncompressed size 64)
;; a0(r138,l0) conflicts: a1(r137,l0) a2(r136,l0) a3(r134,l0) a5(r135,l0) a6(r142,l0) a7(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r137,l0) conflicts: a0(r138,l0) a2(r136,l0) a3(r134,l0) a5(r135,l0) a6(r142,l0) a7(r139,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r136,l0) conflicts: a0(r138,l0) a1(r137,l0) a3(r134,l0) a5(r135,l0) a6(r142,l0) a7(r139,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a3(r134,l0) conflicts: a0(r138,l0) a1(r137,l0) a2(r136,l0) a5(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r143,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a5(r135,l0) conflicts: a0(r138,l0) a1(r137,l0) a2(r136,l0) a3(r134,l0) a6(r142,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r142,l0) conflicts: a0(r138,l0) a1(r137,l0) a2(r136,l0) a5(r135,l0) a7(r139,l0)
;;     total conflict hard regs: 1 14
;;     conflict hard regs: 1 14
;; a7(r139,l0) conflicts: a0(r138,l0) a1(r137,l0) a2(r136,l0) a6(r142,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14

  regions=1, blocks=5, points=21
    allocnos=8, copies=0, conflicts=0, ranges=12

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r138 1r137 2r136 3r134 4r143 5r135 6r142 7r139
    modified regnos: 134 135 136 137 138 139 142 143
    border:
    Pressure: GENERAL_REGS=6
    Reg 138 of GENERAL_REGS has 5 regs less
    Reg 137 of GENERAL_REGS has 3 regs less
    Reg 136 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 142 of GENERAL_REGS has 2 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
      Pushing a3(r134,l0)
      Pushing a5(r135,l0)
      Pushing a6(r142,l0)
      Pushing a2(r136,l0)
      Pushing a1(r137,l0)
      Pushing a7(r139,l0)
      Pushing a4(r143,l0)
      Pushing a0(r138,l0)
      Popping a0(r138,l0)  -- assign reg 12
      Popping a4(r143,l0)  -- assign reg 12
      Popping a7(r139,l0)  -- assign reg 3
      Popping a1(r137,l0)  -- assign reg 2
      Popping a2(r136,l0)  -- assign reg 4
      Popping a6(r142,l0)  -- assign reg 5
      Popping a5(r135,l0)  -- assign reg 3
      Popping a3(r134,l0)  -- assign reg 0
Disposition:
    3:r134 l0     0    5:r135 l0     3    2:r136 l0     4    1:r137 l0     2
    0:r138 l0    12    7:r139 l0     3    6:r142 l0     5    4:r143 l0    12
New iteration of spill/restore move
+++Costs: overall -10000, reg -10000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=4, live_throughout: 0, 1, 13, 14, dead_or_set: 2, 138
insn=46, live_throughout: 0, 1, 13, 14, 138, dead_or_set: 139
insn=47, live_throughout: 0, 1, 13, 14, 138, dead_or_set: 139
insn=2, live_throughout: 1, 13, 14, 138, 139, dead_or_set: 0, 136
insn=13, live_throughout: 1, 13, 14, 136, 138, 139, dead_or_set: 142
insn=3, live_throughout: 13, 14, 136, 138, 139, 142, dead_or_set: 1, 137
insn=11, live_throughout: 13, 14, 136, 137, 138, 142, dead_or_set: 135, 139
insn=15, live_throughout: 13, 14, 135, 136, 137, 138, dead_or_set: 142
insn=12, live_throughout: 13, 14, 24, 135, 136, 137, 138, dead_or_set: 134
insn=16, live_throughout: 13, 14, 134, 135, 136, 137, 138, dead_or_set: 
insn=21, live_throughout: 13, 136, 137, 138, dead_or_set: 0, 135
insn=22, live_throughout: 0, 13, 137, 138, dead_or_set: 1, 136
insn=23, live_throughout: 0, 1, 13, 138, dead_or_set: 2, 137
insn=24, live_throughout: 0, 1, 2, 13, 138, dead_or_set: 3
insn=20, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 138
insn=48, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 143
insn=19, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 143
insn=25, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=28, live_throughout: 13, 14, 134, 136, 137, 138, dead_or_set: 
insn=30, live_throughout: 13, 14, 136, 137, 138, dead_or_set: 0, 134
insn=31, live_throughout: 0, 13, 14, 137, 138, dead_or_set: 1, 136
insn=32, live_throughout: 0, 1, 13, 14, 138, dead_or_set: 2, 137
insn=33, live_throughout: 0, 1, 2, 13, 14, dead_or_set: 3, 138
insn=34, live_throughout: 13, 14, dead_or_set: 0, 1, 2, 3
init_insns for 142: (insn_list:REG_DEP_TRUE 13 (nil))
init_insns for 143: (insn_list:REG_DEP_TRUE 48 (nil))
changing reg in insn 12
changing reg in insn 30
changing reg in insn 11
changing reg in insn 21
changing reg in insn 12
changing reg in insn 2
changing reg in insn 31
changing reg in insn 22
changing reg in insn 3
changing reg in insn 32
changing reg in insn 23
changing reg in insn 4
changing reg in insn 33
changing reg in insn 20
changing reg in insn 13
changing reg in insn 13
changing reg in insn 47
changing reg in insn 46
changing reg in insn 47
changing reg in insn 11
changing reg in insn 13
changing reg in insn 15
changing reg in insn 48
changing reg in insn 19
Spilling for insn 46.
Using reg 2 for reload 0
Spilling for insn 20.
Spilling for insn 19.

Reloads for insn # 46
Reload 0: reload_in (SI) = (reg/f:SI 13 sp)
	GENERAL_REGS, RELOAD_FOR_INPUT (opnum = 1)
	reload_in_reg: (reg/f:SI 13 sp)
	reload_reg_rtx: (reg:SI 2 r2)

Reloads for insn # 20
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])

Reloads for insn # 19
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
deleting insn with uid = 23.
deleting insn with uid = 30.
deleting insn with uid = 32.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 25.
verify found no changes in insn with uid = 34.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


do_bad_area

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,3u} r1={5d,3u} r2={5d,4u} r3={8d,6u} r4={1d,2u} r5={1d,1u} r12={5d,4u,1d} r13={1d,9u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 291{256d,34u,1e} in 21{19 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 5 14 2 NOTE_INSN_DELETED)

(note 14 9 4 2 NOTE_INSN_DELETED)

(insn 4 14 50 2 arch/arm/mm/fault.c:196 (set (reg/v/f:SI 12 ip [orig:138 regs ] [138])
        (reg:SI 2 r2 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 50 4 46 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 2 r2)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 46 50 47 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 3 r3 [139])
        (and:SI (reg:SI 2 r2)
            (const_int -8129 [0xffffffffffffe03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 47 46 2 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg:SI 3 r3 [139])
        (and:SI (reg:SI 3 r3 [139])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 47 13 2 arch/arm/mm/fault.c:196 (set (reg/v:SI 4 r4 [orig:136 addr ] [136])
        (reg:SI 0 r0 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 13 2 3 2 arch/arm/mm/fault.c:204 (set (reg:SI 5 r5 [orig:142 <variable>.uregs+64 ] [142])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:138 regs ] [138])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:138 regs ] [138])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (nil)))

(insn 3 13 11 2 arch/arm/mm/fault.c:196 (set (reg/v:SI 2 r2 [orig:137 fsr ] [137])
        (reg:SI 1 r1 [ fsr ])) 167 {*arm_movsi_insn} (nil))

(insn 11 3 15 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/current.h:10 (set (reg/v/f:SI 3 r3 [orig:135 tsk ] [135])
        (mem/s/f/j:SI (plus:SI (reg:SI 3 r3 [139])
                (const_int 12 [0xc])) [0 <variable>.task+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 15 11 12 2 arch/arm/mm/fault.c:204 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 5 r5 [orig:142 <variable>.uregs+64 ] [142])
                (const_int 4 [0x4])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn 12 15 16 2 arch/arm/mm/fault.c:198 (set (reg/v/f:SI 0 r0 [orig:134 mm ] [134])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:135 tsk ] [135])
                (const_int 496 [0x1f0])) [0 <variable>.active_mm+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(jump_insn 16 12 17 2 arch/arm/mm/fault.c:204 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 28)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  2 [39.0%]  (fallthru)
(note 17 16 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 21 17 22 3 arch/arm/mm/fault.c:205 (set (reg:SI 0 r0)
        (reg/v/f:SI 3 r3 [orig:135 tsk ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 22 21 24 3 arch/arm/mm/fault.c:205 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:136 addr ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 24 22 20 3 arch/arm/mm/fault.c:205 (set (reg:SI 3 r3)
        (const_int 11 [0xb])) 167 {*arm_movsi_insn} (nil))

(insn 20 24 48 3 arch/arm/mm/fault.c:205 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v/f:SI 12 ip [orig:138 regs ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 48 20 19 3 arch/arm/mm/fault.c:205 (set (reg:SI 12 ip [143])
        (const_int 196609 [0x30001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 196609 [0x30001])
        (nil)))

(insn 19 48 25 3 arch/arm/mm/fault.c:205 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 196609 [0x30001])
        (nil)))

(call_insn 25 19 28 3 arch/arm/mm/fault.c:205 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_user_fault") [flags 0x3] <function_decl 0x11459d80 __do_user_fault>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 4 [r4] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 28 25 29 4 51 "" [1 uses])

(note 29 28 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 31 29 33 4 arch/arm/mm/fault.c:207 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:136 addr ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 33 31 34 4 arch/arm/mm/fault.c:207 (set (reg:SI 3 r3)
        (reg/v/f:SI 12 ip [orig:138 regs ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 34 33 35 4 arch/arm/mm/fault.c:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("__do_kernel_fault") [flags 0x3] <function_decl 0x11459c80 __do_kernel_fault>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 35 34 49)

(note 49 35 0 NOTE_INSN_DELETED)


;; Function do_translation_fault (do_translation_fault)[0:1294]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 78.
verify found no changes in insn with uid = 78.
deleting insn with uid = 28.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 15 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)

Pass 0 for finding allocno costs

    a4 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000


Pass 1 for finding allocno costs

    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a7(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a8(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a10(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a12(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000

   Insn 69(l0): point = 0
   Insn 63(l0): point = 2
   Insn 55(l0): point = 5
   Insn 54(l0): point = 7
   Insn 53(l0): point = 9
   Insn 52(l0): point = 11
   Insn 73(l0): point = 14
   Insn 46(l0): point = 16
   Insn 45(l0): point = 18
   Insn 44(l0): point = 20
   Insn 43(l0): point = 22
   Insn 42(l0): point = 24
   Insn 40(l0): point = 26
   Insn 39(l0): point = 28
   Insn 76(l0): point = 30
   Insn 41(l0): point = 32
   Insn 75(l0): point = 34
   Insn 35(l0): point = 37
   Insn 34(l0): point = 39
   Insn 33(l0): point = 41
   Insn 30(l0): point = 43
   Insn 25(l0): point = 45
   Insn 29(l0): point = 47
   Insn 78(l0): point = 49
   Insn 27(l0): point = 51
   Insn 32(l0): point = 53
   Insn 26(l0): point = 55
   Insn 23(l0): point = 58
   Insn 22(l0): point = 60
   Insn 20(l0): point = 62
   Insn 15(l0): point = 65
   Insn 10(l0): point = 68
   Insn 4(l0): point = 70
   Insn 9(l0): point = 72
   Insn 3(l0): point = 74
   Insn 2(l0): point = 76
 a0(r141): [68..70] [37..64] [8..13]
 a1(r140): [68..74] [37..64] [10..13]
 a2(r139): [68..76] [37..64] [12..13]
 a3(r135): [19..26]
 a4(r155): [21..22]
 a5(r134): [23..43]
 a6(r153): [25..28]
 a7(r145): [25..55]
 a8(r154): [25..32]
 a9(r136): [27..51]
 a10(r151): [29..34]
 a11(r147): [33..47]
 a12(r133): [35..45]
 a13(r150): [40..41]
 a14(r149): [42..53]
 a15(r146): [48..49]
 a16(r144): [61..62]
Compressing live ranges: from 79 to 36 - 45%
Ranges after the compression:
 a0(r141): [32..33] [17..31] [0..3]
 a1(r140): [32..34] [17..31] [1..3]
 a2(r139): [32..35] [17..31] [2..3]
 a3(r135): [4..9]
 a4(r155): [5..6]
 a5(r134): [7..21]
 a6(r153): [8..11]
 a7(r145): [8..28]
 a8(r154): [8..13]
 a9(r136): [10..26]
 a10(r151): [12..15]
 a11(r147): [14..23]
 a12(r133): [16..22]
 a13(r150): [18..19]
 a14(r149): [20..27]
 a15(r146): [24..25]
 a16(r144): [29..30]
+++Allocating 136 bytes for conflict table (uncompressed size 136)
;; a0(r141,l0) conflicts: a1(r140,l0) a2(r139,l0) a5(r134,l0) a7(r145,l0) a9(r136,l0) a11(r147,l0) a12(r133,l0) a13(r150,l0) a14(r149,l0) a15(r146,l0) a16(r144,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a1(r140,l0) conflicts: a0(r141,l0) a2(r139,l0) a5(r134,l0) a7(r145,l0) a9(r136,l0) a11(r147,l0) a12(r133,l0) a13(r150,l0) a14(r149,l0) a15(r146,l0) a16(r144,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a2(r139,l0) conflicts: a0(r141,l0) a1(r140,l0) a5(r134,l0) a7(r145,l0) a9(r136,l0) a11(r147,l0) a12(r133,l0) a13(r150,l0) a14(r149,l0) a15(r146,l0) a16(r144,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a3(r135,l0) conflicts: a4(r155,l0) a5(r134,l0) a6(r153,l0) a8(r154,l0) a7(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r155,l0) conflicts: a3(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r134,l0) conflicts: a0(r141,l0) a1(r140,l0) a2(r139,l0) a3(r135,l0) a6(r153,l0) a8(r154,l0) a7(r145,l0) a9(r136,l0) a10(r151,l0) a11(r147,l0) a12(r133,l0) a13(r150,l0) a14(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r153,l0) conflicts: a3(r135,l0) a5(r134,l0) a8(r154,l0) a7(r145,l0) a9(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r145,l0) conflicts: a0(r141,l0) a1(r140,l0) a2(r139,l0) a3(r135,l0) a5(r134,l0) a6(r153,l0) a8(r154,l0) a9(r136,l0) a10(r151,l0) a11(r147,l0) a12(r133,l0) a13(r150,l0) a14(r149,l0) a15(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r154,l0) conflicts: a3(r135,l0) a5(r134,l0) a6(r153,l0) a7(r145,l0) a9(r136,l0) a10(r151,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r136,l0) conflicts: a0(r141,l0) a1(r140,l0) a2(r139,l0) a5(r134,l0) a6(r153,l0) a8(r154,l0) a7(r145,l0) a10(r151,l0) a11(r147,l0) a12(r133,l0) a13(r150,l0) a14(r149,l0) a15(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r151,l0) conflicts: a5(r134,l0) a8(r154,l0) a7(r145,l0) a9(r136,l0) a11(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r147,l0) conflicts: a0(r141,l0) a1(r140,l0) a2(r139,l0) a5(r134,l0) a7(r145,l0) a9(r136,l0) a10(r151,l0) a12(r133,l0) a13(r150,l0) a14(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a12(r133,l0) conflicts: a0(r141,l0) a1(r140,l0) a2(r139,l0) a5(r134,l0) a7(r145,l0) a9(r136,l0) a11(r147,l0) a13(r150,l0) a14(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r150,l0) conflicts: a0(r141,l0) a1(r140,l0) a2(r139,l0) a5(r134,l0) a7(r145,l0) a9(r136,l0) a11(r147,l0) a12(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r149,l0) conflicts: a0(r141,l0) a1(r140,l0) a2(r139,l0) a5(r134,l0) a7(r145,l0) a9(r136,l0) a11(r147,l0) a12(r133,l0) a15(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r146,l0) conflicts: a0(r141,l0) a1(r140,l0) a2(r139,l0) a7(r145,l0) a9(r136,l0) a14(r149,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r144,l0) conflicts: a0(r141,l0) a1(r140,l0) a2(r139,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a10(r151)<->a12(r133)@125:shuffle
  cp1:a6(r153)<->a10(r151)@125:shuffle
  cp2:a3(r135)<->a9(r136)@125:shuffle
  regions=1, blocks=9, points=36
    allocnos=17, copies=3, conflicts=1, ranges=23

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 8 7 6 5 4 3 2
    all: 0r141 1r140 2r139 3r135 4r155 5r134 6r153 7r145 8r154 9r136 10r151 11r147 12r133 13r150 14r149 15r146 16r144
    modified regnos: 133 134 135 136 139 140 141 144 145 146 147 149 150 151 153 154 155
    border:
    Pressure: GENERAL_REGS=10
    Reg 141 of GENERAL_REGS has 4 regs less
    Reg 140 of GENERAL_REGS has 4 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
      Pushing a16(r144,l0)
      Pushing a15(r146,l0)
      Pushing a14(r149,l0)
      Pushing a13(r150,l0)
      Pushing a12(r133,l0)
      Pushing a8(r154,l0)
      Pushing a4(r155,l0)
      Pushing a11(r147,l0)
      Pushing a9(r136,l0)
      Pushing a6(r153,l0)
      Pushing a5(r134,l0)
      Pushing a3(r135,l0)
      Pushing a10(r151,l0)
      Pushing a7(r145,l0)
      Pushing a1(r140,l0)
      Pushing a0(r141,l0)
      Pushing a2(r139,l0)
      Popping a2(r139,l0)  -- assign reg 3
      Popping a0(r141,l0)  -- assign reg 12
      Popping a1(r140,l0)  -- assign reg 4
      Popping a7(r145,l0)  -- assign reg 2
      Popping a10(r151,l0)  -- assign reg 3
      Popping a3(r135,l0)  -- assign reg 1
      Popping a5(r134,l0)  -- assign reg 0
      Popping a6(r153,l0)  -- assign reg 3
      Popping a9(r136,l0)  -- assign reg 1
      Popping a11(r147,l0)  -- assign reg 5
      Popping a4(r155,l0)  -- assign reg 3
      Popping a8(r154,l0)  -- assign reg 12
      Popping a12(r133,l0)  -- assign reg 6
      Popping a13(r150,l0)  -- assign reg 7
      Popping a14(r149,l0)  -- assign reg 7
      Popping a15(r146,l0)  -- assign reg 0
      Popping a16(r144,l0)  -- assign reg 2
Disposition:
   12:r133 l0     6    5:r134 l0     0    3:r135 l0     1    9:r136 l0     1
    2:r139 l0     3    1:r140 l0     4    0:r141 l0    12   16:r144 l0     2
    7:r145 l0     2   15:r146 l0     0   11:r147 l0     5   14:r149 l0     7
   13:r150 l0     7   10:r151 l0     3    6:r153 l0     3    8:r154 l0    12
    4:r155 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 0, 1, 2, 13, 14, dead_or_set: 139
insn=3, live_throughout: 0, 1, 2, 13, 14, 139, dead_or_set: 140
insn=9, live_throughout: 0, 1, 2, 13, 14, 139, 140, dead_or_set: 
insn=4, live_throughout: 0, 1, 2, 13, 14, 24, 139, 140, dead_or_set: 141
insn=10, live_throughout: 0, 1, 2, 13, 14, 139, 140, 141, dead_or_set: 
insn=15, live_throughout: 13, 14, dead_or_set: 0, 1, 2
insn=18, live_throughout: 13, 14, 139, 140, 141, dead_or_set: 
insn=20, live_throughout: 13, 14, 139, 140, 141, dead_or_set: 144
insn=22, live_throughout: 13, 14, 139, 140, 141, dead_or_set: 144
insn=23, live_throughout: 13, 14, 139, 140, 141, dead_or_set: 
insn=26, live_throughout: 13, 14, 139, 140, 141, dead_or_set: 145
insn=32, live_throughout: 13, 14, 139, 140, 141, 145, dead_or_set: 149
insn=27, live_throughout: 13, 14, 139, 140, 141, 145, 149, dead_or_set: 136
insn=78, live_throughout: 13, 14, 136, 139, 140, 141, 145, 149, dead_or_set: 146
insn=29, live_throughout: 13, 14, 136, 139, 140, 141, 145, 149, dead_or_set: 146, 147
insn=25, live_throughout: 13, 14, 136, 139, 140, 141, 145, 147, 149, dead_or_set: 133
insn=30, live_throughout: 13, 14, 133, 136, 139, 140, 141, 145, 147, 149, dead_or_set: 134
insn=33, live_throughout: 13, 14, 133, 134, 136, 139, 140, 141, 145, 147, dead_or_set: 149, 150
insn=34, live_throughout: 13, 14, 133, 134, 136, 139, 140, 141, 145, 147, dead_or_set: 150
insn=35, live_throughout: 13, 14, 133, 134, 136, 139, 140, 141, 145, 147, dead_or_set: 
insn=75, live_throughout: 13, 14, 134, 136, 145, 147, dead_or_set: 133, 151
insn=41, live_throughout: 13, 14, 134, 136, 145, 151, dead_or_set: 147, 154
insn=76, live_throughout: 13, 14, 134, 136, 145, 154, dead_or_set: 151
insn=39, live_throughout: 13, 14, 134, 136, 145, 154, dead_or_set: 151, 153
insn=40, live_throughout: 13, 14, 134, 145, 153, 154, dead_or_set: 135, 136
insn=42, live_throughout: 13, 14, 134, 135, dead_or_set: 145, 153, 154
insn=43, live_throughout: 13, 14, 135, dead_or_set: 134, 155
insn=44, live_throughout: 13, 14, 135, dead_or_set: 155
insn=45, live_throughout: 13, 14, dead_or_set: 135
insn=46, live_throughout: 13, 14, dead_or_set: 
insn=73, live_throughout: 13, 14, dead_or_set: 
insn=50, live_throughout: 13, 139, 140, 141, dead_or_set: 
insn=52, live_throughout: 13, 140, 141, dead_or_set: 0, 139
insn=53, live_throughout: 0, 13, 141, dead_or_set: 1, 140
insn=54, live_throughout: 0, 1, 13, dead_or_set: 2, 141
insn=55, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=57, live_throughout: 13, 14, dead_or_set: 
insn=63, live_throughout: 13, 14, dead_or_set: 0
insn=69, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 144: (insn_list:REG_DEP_TRUE 20 (nil))
init_insns for 146: (insn_list:REG_DEP_TRUE 78 (nil))
init_insns for 155: (insn_list:REG_DEP_TRUE 44 (nil))
changing reg in insn 25
changing reg in insn 75
changing reg in insn 30
changing reg in insn 43
changing reg in insn 33
changing reg in insn 40
changing reg in insn 45
changing reg in insn 44
changing reg in insn 43
changing reg in insn 27
changing reg in insn 40
changing reg in insn 30
changing reg in insn 2
changing reg in insn 32
changing reg in insn 9
changing reg in insn 52
changing reg in insn 26
changing reg in insn 3
changing reg in insn 53
changing reg in insn 4
changing reg in insn 54
changing reg in insn 20
changing reg in insn 20
changing reg in insn 20
changing reg in insn 22
changing reg in insn 26
changing reg in insn 42
changing reg in insn 41
changing reg in insn 27
changing reg in insn 78
changing reg in insn 29
changing reg in insn 29
changing reg in insn 41
changing reg in insn 30
changing reg in insn 32
changing reg in insn 33
changing reg in insn 33
changing reg in insn 34
changing reg in insn 76
changing reg in insn 75
changing reg in insn 76
changing reg in insn 39
changing reg in insn 39
changing reg in insn 42
changing reg in insn 40
changing reg in insn 41
changing reg in insn 42
changing reg in insn 43
changing reg in insn 44
Spilling for insn 42.
Spilling for insn 44.

Reloads for insn # 42
Reload 0: reload_out (SI) = (mem:SI (plus:SI (mult:SI (reg:SI 2 r2 [145])
                                                            (const_int 8 [0x8]))
                                                        (reg:SI 3 r3 [153])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (mult:SI (reg:SI 2 r2 [145])
                                                            (const_int 8 [0x8]))
                                                        (reg:SI 3 r3 [153])) [0 S4 A32])

Reloads for insn # 44
Reload 0: reload_out (SI) = (mem:SI (plus:SI (reg/v/f:SI 1 r1 [orig:135 pmd ] [135])
                                                        (const_int 4 [0x4])) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (plus:SI (reg/v/f:SI 1 r1 [orig:135 pmd ] [135])
                                                        (const_int 4 [0x4])) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 15.
verify found no changes in insn with uid = 55.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 15 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 11 count 16 (  1.8)


do_translation_fault

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,8u} r1={6d,7u,1d} r2={6d,7u} r3={8d,9u} r4={1d,1u} r5={1d,2u} r6={1d,1u} r7={2d,2u} r12={5d,3u,1d} r13={1d,10u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={7d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 323{267d,54u,2e} in 36{34 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 5 2 2 NOTE_INSN_DELETED)

(insn 2 8 3 2 arch/arm/mm/fault.c:407 (set (reg/v:SI 3 r3 [orig:139 addr ] [139])
        (reg:SI 0 r0 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 9 2 arch/arm/mm/fault.c:407 (set (reg/v:SI 4 r4 [orig:140 fsr ] [140])
        (reg:SI 1 r1 [ fsr ])) 167 {*arm_movsi_insn} (nil))

(insn 9 3 4 2 arch/arm/mm/fault.c:413 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:139 addr ] [139])
            (const_int -1090519040 [0xffffffffbf000000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 4 9 10 2 arch/arm/mm/fault.c:407 (set (reg/v/f:SI 12 ip [orig:141 regs ] [141])
        (reg:SI 2 r2 [ regs ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 10 4 11 2 arch/arm/mm/fault.c:413 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7929 [0x1ef9])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [20.7%]  (fallthru)
;; Succ edge  4 [79.3%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [20.7%]  (fallthru)
(note 11 10 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(call_insn/j 15 11 16 3 arch/arm/mm/fault.c:414 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("do_page_fault") [flags 0x3] <function_decl 0x1147d180 do_page_fault>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 3 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 16 15 18)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  2 [79.3%] 
(code_label 18 16 19 4 57 "" [1 uses])

(note 19 18 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 21 19 20 4 NOTE_INSN_DELETED)

(insn 20 21 22 4 arch/arm/mm/fault.c:416 (set (reg:SI 2 r2 [orig:144 <variable>.uregs+64 ] [144])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:141 regs ] [141])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 12 ip [orig:141 regs ] [141])
                (const_int 64 [0x40])) [0 <variable>.uregs+64 S4 A32])
        (nil)))

(insn 22 20 23 4 arch/arm/mm/fault.c:416 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 2 r2 [orig:144 <variable>.uregs+64 ] [144])
                (const_int 4 [0x4])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 23 22 24 4 arch/arm/mm/fault.c:416 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2900 [0xb54])
        (nil)))
;; End of basic block 4 -> ( 7 5)
;; lr  out 	 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [29.0%] 
;; Succ edge  5 [71.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  4 [71.0%]  (fallthru)
(note 24 23 31 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 31 24 26 5 NOTE_INSN_DELETED)

(insn 26 31 32 5 arch/arm/mm/fault.c:424 (set (reg:SI 2 r2 [145])
        (lshiftrt:SI (reg/v:SI 3 r3 [orig:139 addr ] [139])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn 32 26 27 5 arch/arm/mm/fault.c:451 (set (reg:SI 7 r7 [149])
        (zero_extract:SI (reg/v:SI 3 r3 [orig:139 addr ] [139])
            (const_int 1 [0x1])
            (const_int 20 [0x14]))) 124 {extzv_t2} (nil))

(insn 27 32 78 5 arch/arm/mm/fault.c:424 (set (reg:SI 1 r1 [orig:136 D.24612 ] [136])
        (ashift:SI (reg:SI 2 r2 [145])
            (const_int 3 [0x3]))) 117 {*arm_shiftsi3} (nil))

(insn 78 27 29 5 arch/arm/mm/fault.c:441 (set (reg/f:SI 0 r0 [146])
        (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x111538a0 init_mm>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x111538a0 init_mm>)
        (nil)))

(insn 29 78 25 5 arch/arm/mm/fault.c:441 (set (reg/f:SI 5 r5 [orig:147 init_mm.pgd ] [147])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 0 r0 [146])
                (const_int 36 [0x24])) [0 init_mm.pgd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x111538a0 init_mm>)
                    (const_int 36 [0x24]))) [0 init_mm.pgd+0 S4 A32])
        (nil)))

(insn 25 29 30 5 arch/arm/mm/fault.c:424 (parallel [
            (set (reg/v:SI 6 r6 [orig:133 pg ] [133])
                (asm_operands:SI ("mrc	p15, 0, %0, c2, c0, 0") ("=r") 0 []
                     [] 8342805))
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 30 25 33 5 arch/arm/mm/fault.c:441 (set (reg/v/f:SI 0 r0 [orig:134 pmd_k ] [134])
        (plus:SI (reg/f:SI 5 r5 [orig:147 init_mm.pgd ] [147])
            (reg:SI 1 r1 [orig:136 D.24612 ] [136]))) 4 {*arm_addsi3} (nil))

(insn 33 30 34 5 arch/arm/mm/fault.c:451 (set (reg:SI 7 r7 [150])
        (mem:SI (plus:SI (mult:SI (reg:SI 7 r7 [149])
                    (const_int 4 [0x4]))
                (reg/v/f:SI 0 r0 [orig:134 pmd_k ] [134])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 34 33 35 5 arch/arm/mm/fault.c:451 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [150])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 35 34 36 5 arch/arm/mm/fault.c:451 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 5 -> ( 7 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [61.0%] 
;; Succ edge  6 [39.0%]  (fallthru)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  5 [39.0%]  (fallthru)
(note 36 35 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 37 36 75 6 NOTE_INSN_DELETED)

(insn 75 37 41 6 arch/arm/mm/fault.c:440 (set (reg:SI 3 r3 [151])
        (and:SI (reg/v:SI 6 r6 [orig:133 pg ] [133])
            (const_int -16321 [0xffffffffffffc03f]))) 67 {*arm_andsi3_insn} (nil))

(insn 41 75 76 6 arch/arm/mm/fault.c:455 (set (reg:SI 12 ip [154])
        (mem:SI (plus:SI (mult:SI (reg:SI 2 r2 [145])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:147 init_mm.pgd ] [147])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 76 41 39 6 arch/arm/mm/fault.c:440 (set (reg:SI 3 r3 [151])
        (and:SI (reg:SI 3 r3 [151])
            (const_int -64 [0xffffffffffffffc0]))) 67 {*arm_andsi3_insn} (nil))

(insn 39 76 40 6 arch/arm/mm/fault.c:440 (set (reg:SI 3 r3 [153])
        (plus:SI (reg:SI 3 r3 [151])
            (const_int -1073741824 [0xffffffffc0000000]))) 4 {*arm_addsi3} (nil))

(insn 40 39 42 6 arch/arm/mm/fault.c:440 (set (reg/v/f:SI 1 r1 [orig:135 pmd ] [135])
        (plus:SI (reg:SI 3 r3 [153])
            (reg:SI 1 r1 [orig:136 D.24612 ] [136]))) 4 {*arm_addsi3} (nil))

(insn 42 40 43 6 arch/arm/mm/fault.c:455 (set (mem:SI (plus:SI (mult:SI (reg:SI 2 r2 [145])
                    (const_int 8 [0x8]))
                (reg:SI 3 r3 [153])) [0 S4 A32])
        (reg:SI 12 ip [154])) 167 {*arm_movsi_insn} (nil))

(insn 43 42 44 6 arch/arm/mm/fault.c:455 (set (reg:SI 3 r3 [155])
        (mem:SI (plus:SI (reg/v/f:SI 0 r0 [orig:134 pmd_k ] [134])
                (const_int 4 [0x4])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/v/f:SI 1 r1 [orig:135 pmd ] [135])
                (const_int 4 [0x4])) [0 S4 A32])
        (nil)))

(insn 44 43 45 6 arch/arm/mm/fault.c:455 (set (mem:SI (plus:SI (reg/v/f:SI 1 r1 [orig:135 pmd ] [135])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 3 r3 [155])) 167 {*arm_movsi_insn} (nil))

(insn 45 44 46 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/tlbflush.h:479 (parallel [
            (asm_operands/v ("mcr	p15, 0, %0, c7, c10, 1	@ flush_pmd") ("") 0 [
                    (reg/v/f:SI 1 r1 [orig:135 pmd ] [135])
                ]
                 [
                    (asm_input:SI ("r") 0)
                ] 8282573)
            (clobber (reg:QI 24 cc))
        ]) -1 (nil))

(insn 46 45 73 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/tlbflush.h:487 (parallel [
            (asm_operands/v ("dsb") ("") 0 []
                 [] 8283597)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(jump_insn 73 46 74 6 arch/arm/mm/fault.c:456 (set (pc)
        (label_ref 57)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%] 

(barrier 74 73 50)

;; Start of basic block ( 4 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  4 [29.0%] 
;; Pred edge  5 [61.0%] 
(code_label 50 74 51 7 58 ("bad_area") [2 uses])

(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 52 51 53 7 arch/arm/mm/fault.c:459 (set (reg:SI 0 r0)
        (reg/v:SI 3 r3 [orig:139 addr ] [139])) 167 {*arm_movsi_insn} (nil))

(insn 53 52 54 7 arch/arm/mm/fault.c:459 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:140 fsr ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 54 53 55 7 arch/arm/mm/fault.c:459 (set (reg:SI 2 r2)
        (reg/v/f:SI 12 ip [orig:141 regs ] [141])) 167 {*arm_movsi_insn} (nil))

(call_insn 55 54 57 7 arch/arm/mm/fault.c:459 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_bad_area") [flags 0x3] <function_decl 0x11459880 do_bad_area>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 7 -> ( 8)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 57 55 58 8 59 "" [1 uses])

(note 58 57 63 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 63 58 69 8 arch/arm/mm/fault.c:461 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 69 63 77 8 arch/arm/mm/fault.c:461 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 77 69 79 NOTE_INSN_DELETED)

(note 79 77 0 NOTE_INSN_DELETED)


;; Function do_sect_fault (do_sect_fault)[0:1295]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 22(l0): point = 0
   Insn 16(l0): point = 2
   Insn 11(l0): point = 4
Compressing live ranges: from 7 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=4
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=11, live_throughout: 13, dead_or_set: 0, 1, 2, 14
insn=16, live_throughout: 13, 14, dead_or_set: 0
insn=22, live_throughout: 0, 13, 14, dead_or_set: 


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


do_sect_fault

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr]
;;  ref usage 	r0={3d,3u} r1={2d,1u} r2={2d,1u} r3={2d} r12={2d} r13={1d,3u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 134{125d,9u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 5 11 2 NOTE_INSN_DELETED)

(call_insn 11 12 16 2 arch/arm/mm/fault.c:478 (parallel [
            (call (mem:SI (symbol_ref:SI ("do_bad_area") [flags 0x3] <function_decl 0x11459880 do_bad_area>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 16 11 22 2 arch/arm/mm/fault.c:480 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 22 16 26 2 arch/arm/mm/fault.c:480 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 26 22 27 NOTE_INSN_DELETED)

(note 27 26 0 NOTE_INSN_DELETED)


;; Function do_PrefetchAbort (do_PrefetchAbort)[0:1300]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a3 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a7(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a7(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 46(l0): point = 1
   Insn 34(l0): point = 3
   Insn 41(l0): point = 5
   Insn 37(l0): point = 7
   Insn 33(l0): point = 9
   Insn 32(l0): point = 11
   Insn 36(l0): point = 13
   Insn 44(l0): point = 15
   Insn 42(l0): point = 17
   Insn 45(l0): point = 19
   Insn 43(l0): point = 21
   Insn 31(l0): point = 23
   Insn 35(l0): point = 25
   Insn 30(l0): point = 27
   Insn 26(l0): point = 29
   Insn 29(l0): point = 31
   Insn 28(l0): point = 33
   Insn 27(l0): point = 35
   Insn 23(l0): point = 38
   Insn 22(l0): point = 40
   Insn 20(l0): point = 42
   Insn 14(l0): point = 44
   Insn 4(l0): point = 46
   Insn 12(l0): point = 48
   Insn 2(l0): point = 50
   Insn 18(l0): point = 52
   Insn 11(l0): point = 54
   Insn 9(l0): point = 56
   Insn 8(l0): point = 58
   Insn 3(l0): point = 60
 a0(r148): [4..9]
 a1(r135): [8..50]
 a2(r147): [12..23]
 a3(r149): [14..25]
 a4(r136): [20..60]
 a5(r137): [22..46]
 a6(r133): [24..44]
 a7(r138): [43..58]
 a8(r142): [43..48]
 a9(r141): [49..54]
 a10(r139): [49..56]
Compressing live ranges: from 63 to 20 - 31%
Ranges after the compression:
 a0(r148): [0..2]
 a1(r135): [1..15]
 a2(r147): [3..7]
 a3(r149): [4..9]
 a4(r136): [5..19]
 a5(r137): [6..12]
 a6(r133): [8..11]
 a7(r138): [10..18]
 a8(r142): [10..13]
 a9(r141): [14..16]
 a10(r139): [14..17]
+++Allocating 88 bytes for conflict table (uncompressed size 88)
;; a0(r148,l0) conflicts: a1(r135,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r135,l0) conflicts: a0(r148,l0) a2(r147,l0) a3(r149,l0) a4(r136,l0) a5(r137,l0) a6(r133,l0) a8(r142,l0) a7(r138,l0) a9(r141,l0) a10(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r147,l0) conflicts: a1(r135,l0) a3(r149,l0) a4(r136,l0) a5(r137,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r149,l0) conflicts: a1(r135,l0) a2(r147,l0) a4(r136,l0) a5(r137,l0) a6(r133,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a4(r136,l0) conflicts: a1(r135,l0) a2(r147,l0) a3(r149,l0) a5(r137,l0) a6(r133,l0) a8(r142,l0) a7(r138,l0) a9(r141,l0) a10(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r137,l0) conflicts: a1(r135,l0) a2(r147,l0) a3(r149,l0) a4(r136,l0) a6(r133,l0) a8(r142,l0) a7(r138,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r133,l0) conflicts: a1(r135,l0) a3(r149,l0) a4(r136,l0) a5(r137,l0) a8(r142,l0) a7(r138,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r138,l0) conflicts: a1(r135,l0) a4(r136,l0) a5(r137,l0) a6(r133,l0) a8(r142,l0) a9(r141,l0) a10(r139,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a8(r142,l0) conflicts: a1(r135,l0) a4(r136,l0) a5(r137,l0) a6(r133,l0) a7(r138,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a9(r141,l0) conflicts: a1(r135,l0) a4(r136,l0) a7(r138,l0) a10(r139,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a10(r139,l0) conflicts: a1(r135,l0) a4(r136,l0) a7(r138,l0) a9(r141,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

  cp0:a8(r142)<->a9(r141)@125:shuffle
  cp1:a8(r142)<->a10(r139)@125:shuffle
  regions=1, blocks=5, points=20
    allocnos=11, copies=2, conflicts=1, ranges=11

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r148 1r135 2r147 3r149 4r136 5r137 6r133 7r138 8r142 9r141 10r139
    modified regnos: 133 135 136 137 138 139 141 142 147 148 149
    border:
    Pressure: GENERAL_REGS=10
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 5 regs less
    Reg 147 of GENERAL_REGS has 4 regs less
    Reg 149 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 133 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
    Reg 142 of GENERAL_REGS has 4 regs less
    Reg 141 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 3 regs less
      Pushing a10(r139,l0)
      Pushing a9(r141,l0)
      Pushing a3(r149,l0)
      Pushing a2(r147,l0)
      Pushing a8(r142,l0)
      Pushing a7(r138,l0)
      Pushing a0(r148,l0)
      Pushing a5(r137,l0)
      Pushing a1(r135,l0)
      Pushing a6(r133,l0)
      Pushing a4(r136,l0)
      Popping a4(r136,l0)  -- assign reg 4
      Popping a6(r133,l0)  -- assign reg 5
      Popping a1(r135,l0)  -- assign reg 6
      Popping a5(r137,l0)  -- assign reg 7
      Popping a0(r148,l0)  -- assign reg 12
      Popping a7(r138,l0)  -- assign reg 3
      Popping a8(r142,l0)  -- assign reg 12
      Popping a2(r147,l0)  -- assign reg 12
      Popping a3(r149,l0)  -- assign reg 14
      Popping a9(r141,l0)  -- assign reg 12
      Popping a10(r139,l0)  -- assign reg 14
Disposition:
    6:r133 l0     5    1:r135 l0     6    4:r136 l0     4    5:r137 l0     7
    7:r138 l0     3   10:r139 l0    14    9:r141 l0    12    8:r142 l0    12
    2:r147 l0    12    0:r148 l0    12    3:r149 l0    14
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 13, dead_or_set: 1, 136
insn=8, live_throughout: 0, 2, 13, 136, dead_or_set: 138
insn=9, live_throughout: 0, 2, 13, 136, 138, dead_or_set: 139
insn=11, live_throughout: 0, 2, 13, 136, 138, 139, dead_or_set: 141
insn=18, live_throughout: 0, 2, 13, 136, 138, 139, 141, dead_or_set: 1
insn=2, live_throughout: 0, 1, 2, 13, 136, 138, 139, 141, dead_or_set: 135
insn=12, live_throughout: 0, 1, 2, 13, 135, 136, 138, dead_or_set: 139, 141, 142
insn=4, live_throughout: 0, 1, 2, 13, 135, 136, 138, 142, dead_or_set: 137
insn=14, live_throughout: 0, 1, 2, 13, 135, 136, 137, 138, 142, dead_or_set: 133
insn=20, live_throughout: 13, 133, 135, 136, 137, dead_or_set: 0, 1, 2, 14, 138, 142
insn=22, live_throughout: 13, 14, 133, 135, 136, 137, dead_or_set: 0
insn=23, live_throughout: 13, 14, 133, 135, 136, 137, dead_or_set: 
insn=27, live_throughout: 13, 133, 135, 136, 137, dead_or_set: 1
insn=28, live_throughout: 1, 13, 133, 135, 136, 137, dead_or_set: 2
insn=29, live_throughout: 1, 2, 13, 133, 135, 136, 137, dead_or_set: 3
insn=26, live_throughout: 1, 2, 3, 13, 133, 135, 136, 137, dead_or_set: 0
insn=30, live_throughout: 13, 133, 135, 136, 137, dead_or_set: 0, 1, 2, 3, 14
insn=35, live_throughout: 13, 133, 135, 136, 137, dead_or_set: 149
insn=31, live_throughout: 13, 135, 136, 137, 149, dead_or_set: 133, 147
insn=43, live_throughout: 13, 135, 136, 147, 149, dead_or_set: 1, 137
insn=45, live_throughout: 1, 13, 135, 147, 149, dead_or_set: 3, 136
insn=42, live_throughout: 1, 3, 13, 135, 147, 149, dead_or_set: 0
insn=44, live_throughout: 0, 1, 3, 13, 135, 147, 149, dead_or_set: 2
insn=36, live_throughout: 0, 1, 2, 3, 13, 135, 147, dead_or_set: 149
insn=32, live_throughout: 0, 1, 2, 3, 13, 135, dead_or_set: 147
insn=33, live_throughout: 0, 1, 2, 3, 13, 135, dead_or_set: 148
insn=37, live_throughout: 0, 1, 2, 3, 13, 148, dead_or_set: 135
insn=41, live_throughout: 0, 1, 2, 3, 13, 148, dead_or_set: 
insn=34, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 148
insn=46, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=52, live_throughout: 13, 14, dead_or_set: 
init_insns for 138: (insn_list:REG_DEP_TRUE 8 (nil))
init_insns for 147: (insn_list:REG_DEP_TRUE 32 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 36 (nil))
changing reg in insn 14
changing reg in insn 35
changing reg in insn 31
changing reg in insn 27
changing reg in insn 2
changing reg in insn 37
changing reg in insn 29
changing reg in insn 3
changing reg in insn 18
changing reg in insn 45
changing reg in insn 28
changing reg in insn 11
changing reg in insn 9
changing reg in insn 4
changing reg in insn 43
changing reg in insn 8
changing reg in insn 20
changing reg in insn 14
changing reg in insn 9
changing reg in insn 12
changing reg in insn 11
changing reg in insn 12
changing reg in insn 12
changing reg in insn 20
changing reg in insn 14
changing reg in insn 31
changing reg in insn 32
changing reg in insn 33
changing reg in insn 41
changing reg in insn 34
changing reg in insn 35
changing reg in insn 36
Spilling for insn 36.
Spilling for insn 32.
Spilling for insn 37.
Spilling for insn 41.
Spilling for insn 34.

Reloads for insn # 36
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 info.si_code+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 info.si_code+0 S4 A64])

Reloads for insn # 32
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_signo+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_signo+0 S4 A64])

Reloads for insn # 37
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 info._sifields._sigfault._addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 info._sifields._sigfault._addr+0 S4 A32])

Reloads for insn # 41
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 34
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info.si_errno+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info.si_errno+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 20.
deleting insn with uid = 20.
verify found no changes in insn with uid = 30.
verify found no changes in insn with uid = 46.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


do_PrefetchAbort

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,5u} r1={7d,4u} r2={6d,4u} r3={7d,4u} r4={1d,5u} r5={1d,3u} r6={1d,2u} r7={1d,1u} r12={8d,6u} r13={1d,13u} r14={6d,3u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={4d,1u} r25={2d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 432{379d,51u,2e} in 30{27 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 5 13 2 NOTE_INSN_DELETED)

(note 13 10 15 2 NOTE_INSN_DELETED)

(note 15 13 16 2 NOTE_INSN_DELETED)

(note 16 15 21 2 NOTE_INSN_DELETED)

(note 21 16 3 2 NOTE_INSN_DELETED)

(insn 3 21 8 2 arch/arm/mm/fault.c:626 (set (reg/v:SI 4 r4 [orig:136 ifsr ] [136])
        (reg:SI 1 r1 [ ifsr ])) 167 {*arm_movsi_insn} (nil))

(insn 8 3 9 2 arch/arm/mm/fault.c:627 (set (reg/f:SI 3 r3 [138])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 9 8 11 2 arch/arm/mm/fault.c:627 (set (reg:SI 14 lr [139])
        (and:SI (reg/v:SI 4 r4 [orig:136 ifsr ] [136])
            (const_int 1024 [0x400]))) 67 {*arm_andsi3_insn} (nil))

(insn 11 9 18 2 arch/arm/mm/fault.c:627 (set (reg:SI 12 ip [141])
        (and:SI (reg/v:SI 4 r4 [orig:136 ifsr ] [136])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (nil))

(insn 18 11 2 2 arch/arm/mm/fault.c:630 (set (reg:SI 1 r1)
        (ior:SI (reg/v:SI 4 r4 [orig:136 ifsr ] [136])
            (const_int -2147483648 [0xffffffff80000000]))) 89 {*arm_iorsi3} (nil))

(insn 2 18 12 2 arch/arm/mm/fault.c:626 (set (reg/v:SI 6 r6 [orig:135 addr ] [135])
        (reg:SI 0 r0 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 12 2 4 2 arch/arm/mm/fault.c:627 (set (reg:SI 12 ip [142])
        (ior:SI (lshiftrt:SI (reg:SI 14 lr [139])
                (const_int 6 [0x6]))
            (reg:SI 12 ip [141]))) 270 {*arith_shiftsi} (nil))

(insn 4 12 14 2 arch/arm/mm/fault.c:626 (set (reg/v/f:SI 7 r7 [orig:137 regs ] [137])
        (reg:SI 2 r2 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 14 4 20 2 arch/arm/mm/fault.c:627 (set (reg/v/f:SI 5 r5 [orig:133 inf ] [133])
        (plus:SI (mult:SI (reg:SI 12 ip [142])
                (const_int 16 [0x10]))
            (reg/f:SI 3 r3 [138]))) 270 {*arith_shiftsi} (nil))

(call_insn 20 14 22 2 arch/arm/mm/fault.c:630 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 12 ip [142])
                                    (const_int 16 [0x10]))
                                (reg/f:SI 3 r3 [138])) [0 <variable>.fn+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 22 20 23 2 arch/arm/mm/fault.c:630 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 24 2 arch/arm/mm/fault.c:630 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 52)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 
;; Succ edge  3 [0.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 24 23 39 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 39 24 27 3 NOTE_INSN_DELETED)

(insn 27 39 28 3 arch/arm/mm/fault.c:633 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:133 inf ] [133])
                (const_int 12 [0xc])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 28 27 29 3 arch/arm/mm/fault.c:633 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:136 ifsr ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 29 28 26 3 arch/arm/mm/fault.c:633 (set (reg:SI 3 r3)
        (reg/v:SI 6 r6 [orig:135 addr ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 26 29 30 3 arch/arm/mm/fault.c:633 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x114abbe0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x114abbe0>)
        (nil)))

(call_insn 30 26 35 3 arch/arm/mm/fault.c:633 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 35 30 31 3 arch/arm/mm/fault.c:638 (set (reg:SI 14 lr [orig:149 <variable>.code ] [149])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:133 inf ] [133])
                (const_int 8 [0x8])) [0 <variable>.code+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -120 [0xffffffffffffff88])) [0 info.si_code+0 S4 A64])
        (nil)))

(insn 31 35 43 3 arch/arm/mm/fault.c:636 (set (reg:SI 12 ip [orig:147 <variable>.sig ] [147])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:133 inf ] [133])
                (const_int 4 [0x4])) [0 <variable>.sig+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -128 [0xffffffffffffff80])) [0 info.si_signo+0 S4 A64])
        (nil)))

(insn 43 31 45 3 arch/arm/mm/fault.c:640 (set (reg:SI 1 r1)
        (reg/v/f:SI 7 r7 [orig:137 regs ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 45 43 42 3 arch/arm/mm/fault.c:640 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:136 ifsr ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 42 45 44 3 arch/arm/mm/fault.c:640 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x1152d7e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x1152d7e0>)
        (nil)))

(insn 44 42 36 3 arch/arm/mm/fault.c:640 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 36 44 32 3 arch/arm/mm/fault.c:638 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 info.si_code+0 S4 A64])
        (reg:SI 14 lr [orig:149 <variable>.code ] [149])) 167 {*arm_movsi_insn} (nil))

(insn 32 36 33 3 arch/arm/mm/fault.c:636 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_signo+0 S4 A64])
        (reg:SI 12 ip [orig:147 <variable>.sig ] [147])) 167 {*arm_movsi_insn} (nil))

(insn 33 32 37 3 arch/arm/mm/fault.c:637 (set (reg:SI 12 ip [148])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 37 33 41 3 arch/arm/mm/fault.c:639 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg/v:SI 6 r6 [orig:135 addr ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 41 37 34 3 arch/arm/mm/fault.c:640 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [148])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 34 41 46 3 arch/arm/mm/fault.c:637 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info.si_errno+0 S4 A32])
        (reg:SI 12 ip [148])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 46 34 52 3 arch/arm/mm/fault.c:640 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_notify_die") [flags 0x41] <function_decl 0x512d9380 arm_notify_die>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 52 46 55 4 67 "" [1 uses])

(note 55 52 56 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 56 55 57 NOTE_INSN_DELETED)

(note 57 56 0 NOTE_INSN_DELETED)


;; Function do_DataAbort (do_DataAbort)[0:1298]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a3 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r148,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r142,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a7(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r148: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r142: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a2(r148,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a5(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:60000
  a7(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a9(r142,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 47(l0): point = 1
   Insn 35(l0): point = 3
   Insn 42(l0): point = 5
   Insn 38(l0): point = 7
   Insn 34(l0): point = 9
   Insn 33(l0): point = 11
   Insn 37(l0): point = 13
   Insn 45(l0): point = 15
   Insn 43(l0): point = 17
   Insn 46(l0): point = 19
   Insn 44(l0): point = 21
   Insn 32(l0): point = 23
   Insn 36(l0): point = 25
   Insn 31(l0): point = 27
   Insn 27(l0): point = 29
   Insn 30(l0): point = 31
   Insn 29(l0): point = 33
   Insn 28(l0): point = 35
   Insn 24(l0): point = 38
   Insn 23(l0): point = 40
   Insn 21(l0): point = 42
   Insn 15(l0): point = 44
   Insn 4(l0): point = 46
   Insn 13(l0): point = 48
   Insn 2(l0): point = 50
   Insn 19(l0): point = 52
   Insn 12(l0): point = 54
   Insn 10(l0): point = 56
   Insn 9(l0): point = 58
   Insn 3(l0): point = 60
 a0(r149): [4..9]
 a1(r135): [8..50]
 a2(r148): [12..23]
 a3(r150): [14..25]
 a4(r136): [20..60]
 a5(r137): [22..46]
 a6(r133): [24..44]
 a7(r139): [43..58]
 a8(r143): [43..48]
 a9(r142): [49..54]
 a10(r140): [49..56]
Compressing live ranges: from 63 to 20 - 31%
Ranges after the compression:
 a0(r149): [0..2]
 a1(r135): [1..15]
 a2(r148): [3..7]
 a3(r150): [4..9]
 a4(r136): [5..19]
 a5(r137): [6..12]
 a6(r133): [8..11]
 a7(r139): [10..18]
 a8(r143): [10..13]
 a9(r142): [14..16]
 a10(r140): [14..17]
+++Allocating 88 bytes for conflict table (uncompressed size 88)
;; a0(r149,l0) conflicts: a1(r135,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a1(r135,l0) conflicts: a0(r149,l0) a2(r148,l0) a3(r150,l0) a4(r136,l0) a5(r137,l0) a6(r133,l0) a8(r143,l0) a7(r139,l0) a9(r142,l0) a10(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r148,l0) conflicts: a1(r135,l0) a3(r150,l0) a4(r136,l0) a5(r137,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a3(r150,l0) conflicts: a1(r135,l0) a2(r148,l0) a4(r136,l0) a5(r137,l0) a6(r133,l0)
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3
;; a4(r136,l0) conflicts: a1(r135,l0) a2(r148,l0) a3(r150,l0) a5(r137,l0) a6(r133,l0) a8(r143,l0) a7(r139,l0) a9(r142,l0) a10(r140,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a5(r137,l0) conflicts: a1(r135,l0) a2(r148,l0) a3(r150,l0) a4(r136,l0) a6(r133,l0) a8(r143,l0) a7(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a6(r133,l0) conflicts: a1(r135,l0) a3(r150,l0) a4(r136,l0) a5(r137,l0) a8(r143,l0) a7(r139,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r139,l0) conflicts: a1(r135,l0) a4(r136,l0) a5(r137,l0) a6(r133,l0) a8(r143,l0) a9(r142,l0) a10(r140,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a8(r143,l0) conflicts: a1(r135,l0) a4(r136,l0) a5(r137,l0) a6(r133,l0) a7(r139,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a9(r142,l0) conflicts: a1(r135,l0) a4(r136,l0) a7(r139,l0) a10(r140,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2
;; a10(r140,l0) conflicts: a1(r135,l0) a4(r136,l0) a7(r139,l0) a9(r142,l0)
;;     total conflict hard regs: 0-2
;;     conflict hard regs: 0-2

  cp0:a8(r143)<->a9(r142)@125:shuffle
  cp1:a8(r143)<->a10(r140)@125:shuffle
  regions=1, blocks=5, points=20
    allocnos=11, copies=2, conflicts=1, ranges=11

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r149 1r135 2r148 3r150 4r136 5r137 6r133 7r139 8r143 9r142 10r140
    modified regnos: 133 135 136 137 139 140 142 143 148 149 150
    border:
    Pressure: GENERAL_REGS=10
    Reg 149 of GENERAL_REGS has 4 regs less
    Reg 135 of GENERAL_REGS has 5 regs less
    Reg 148 of GENERAL_REGS has 4 regs less
    Reg 150 of GENERAL_REGS has 4 regs less
    Reg 136 of GENERAL_REGS has 5 regs less
    Reg 137 of GENERAL_REGS has 5 regs less
    Reg 133 of GENERAL_REGS has 5 regs less
    Reg 139 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 4 regs less
    Reg 142 of GENERAL_REGS has 3 regs less
    Reg 140 of GENERAL_REGS has 3 regs less
      Pushing a10(r140,l0)
      Pushing a9(r142,l0)
      Pushing a3(r150,l0)
      Pushing a2(r148,l0)
      Pushing a8(r143,l0)
      Pushing a7(r139,l0)
      Pushing a0(r149,l0)
      Pushing a5(r137,l0)
      Pushing a1(r135,l0)
      Pushing a6(r133,l0)
      Pushing a4(r136,l0)
      Popping a4(r136,l0)  -- assign reg 4
      Popping a6(r133,l0)  -- assign reg 5
      Popping a1(r135,l0)  -- assign reg 6
      Popping a5(r137,l0)  -- assign reg 7
      Popping a0(r149,l0)  -- assign reg 12
      Popping a7(r139,l0)  -- assign reg 3
      Popping a8(r143,l0)  -- assign reg 12
      Popping a2(r148,l0)  -- assign reg 12
      Popping a3(r150,l0)  -- assign reg 14
      Popping a9(r142,l0)  -- assign reg 12
      Popping a10(r140,l0)  -- assign reg 14
Disposition:
    6:r133 l0     5    1:r135 l0     6    4:r136 l0     4    5:r137 l0     7
    7:r139 l0     3   10:r140 l0    14    9:r142 l0    12    8:r143 l0    12
    2:r148 l0    12    0:r149 l0    12    3:r150 l0    14
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 0, 2, 13, dead_or_set: 1, 136
insn=9, live_throughout: 0, 2, 13, 136, dead_or_set: 139
insn=10, live_throughout: 0, 2, 13, 136, 139, dead_or_set: 140
insn=12, live_throughout: 0, 2, 13, 136, 139, 140, dead_or_set: 142
insn=19, live_throughout: 0, 2, 13, 136, 139, 140, 142, dead_or_set: 1
insn=2, live_throughout: 0, 1, 2, 13, 136, 139, 140, 142, dead_or_set: 135
insn=13, live_throughout: 0, 1, 2, 13, 135, 136, 139, dead_or_set: 140, 142, 143
insn=4, live_throughout: 0, 1, 2, 13, 135, 136, 139, 143, dead_or_set: 137
insn=15, live_throughout: 0, 1, 2, 13, 135, 136, 137, 139, 143, dead_or_set: 133
insn=21, live_throughout: 13, 133, 135, 136, 137, dead_or_set: 0, 1, 2, 14, 139, 143
insn=23, live_throughout: 13, 14, 133, 135, 136, 137, dead_or_set: 0
insn=24, live_throughout: 13, 14, 133, 135, 136, 137, dead_or_set: 
insn=28, live_throughout: 13, 133, 135, 136, 137, dead_or_set: 1
insn=29, live_throughout: 1, 13, 133, 135, 136, 137, dead_or_set: 2
insn=30, live_throughout: 1, 2, 13, 133, 135, 136, 137, dead_or_set: 3
insn=27, live_throughout: 1, 2, 3, 13, 133, 135, 136, 137, dead_or_set: 0
insn=31, live_throughout: 13, 133, 135, 136, 137, dead_or_set: 0, 1, 2, 3, 14
insn=36, live_throughout: 13, 133, 135, 136, 137, dead_or_set: 150
insn=32, live_throughout: 13, 135, 136, 137, 150, dead_or_set: 133, 148
insn=44, live_throughout: 13, 135, 136, 148, 150, dead_or_set: 1, 137
insn=46, live_throughout: 1, 13, 135, 148, 150, dead_or_set: 3, 136
insn=43, live_throughout: 1, 3, 13, 135, 148, 150, dead_or_set: 0
insn=45, live_throughout: 0, 1, 3, 13, 135, 148, 150, dead_or_set: 2
insn=37, live_throughout: 0, 1, 2, 3, 13, 135, 148, dead_or_set: 150
insn=33, live_throughout: 0, 1, 2, 3, 13, 135, dead_or_set: 148
insn=34, live_throughout: 0, 1, 2, 3, 13, 135, dead_or_set: 149
insn=38, live_throughout: 0, 1, 2, 3, 13, 149, dead_or_set: 135
insn=42, live_throughout: 0, 1, 2, 3, 13, 149, dead_or_set: 
insn=35, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 149
insn=47, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=53, live_throughout: 13, 14, dead_or_set: 
init_insns for 139: (insn_list:REG_DEP_TRUE 9 (nil))
init_insns for 148: (insn_list:REG_DEP_TRUE 33 (nil))
init_insns for 149: (insn_list:REG_DEP_TRUE 34 (nil))
init_insns for 150: (insn_list:REG_DEP_TRUE 37 (nil))
changing reg in insn 15
changing reg in insn 36
changing reg in insn 32
changing reg in insn 28
changing reg in insn 2
changing reg in insn 38
changing reg in insn 30
changing reg in insn 3
changing reg in insn 19
changing reg in insn 46
changing reg in insn 29
changing reg in insn 12
changing reg in insn 10
changing reg in insn 4
changing reg in insn 44
changing reg in insn 9
changing reg in insn 21
changing reg in insn 15
changing reg in insn 10
changing reg in insn 13
changing reg in insn 12
changing reg in insn 13
changing reg in insn 13
changing reg in insn 21
changing reg in insn 15
changing reg in insn 32
changing reg in insn 33
changing reg in insn 34
changing reg in insn 42
changing reg in insn 35
changing reg in insn 36
changing reg in insn 37
Spilling for insn 37.
Spilling for insn 33.
Spilling for insn 38.
Spilling for insn 42.
Spilling for insn 35.

Reloads for insn # 37
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 info.si_code+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 info.si_code+0 S4 A64])

Reloads for insn # 33
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_signo+0 S4 A64])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 info.si_signo+0 S4 A64])

Reloads for insn # 38
Reload 0: reload_out (SI) = (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 info._sifields._sigfault._addr+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 info._sifields._sigfault._addr+0 S4 A32])

Reloads for insn # 42
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 35
Reload 0: reload_out (SI) = (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info.si_errno+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 info.si_errno+0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
rescanning insn with uid = 21.
deleting insn with uid = 21.
verify found no changes in insn with uid = 31.
verify found no changes in insn with uid = 47.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


do_DataAbort

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,5u} r1={7d,4u} r2={6d,4u} r3={7d,4u} r4={1d,5u} r5={1d,3u} r6={1d,2u} r7={1d,1u} r12={8d,6u} r13={1d,13u} r14={6d,3u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={4d,1u} r25={2d} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 432{379d,51u,2e} in 30{27 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 5 14 2 NOTE_INSN_DELETED)

(note 14 11 16 2 NOTE_INSN_DELETED)

(note 16 14 17 2 NOTE_INSN_DELETED)

(note 17 16 22 2 NOTE_INSN_DELETED)

(note 22 17 3 2 NOTE_INSN_DELETED)

(insn 3 22 9 2 arch/arm/mm/fault.c:558 (set (reg/v:SI 4 r4 [orig:136 fsr ] [136])
        (reg:SI 1 r1 [ fsr ])) 167 {*arm_movsi_insn} (nil))

(insn 9 3 10 2 arch/arm/mm/fault.c:559 (set (reg/f:SI 3 r3 [139])
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 512 [0x200])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 512 [0x200])))
        (nil)))

(insn 10 9 12 2 arch/arm/mm/fault.c:559 (set (reg:SI 14 lr [140])
        (and:SI (reg/v:SI 4 r4 [orig:136 fsr ] [136])
            (const_int 1024 [0x400]))) 67 {*arm_andsi3_insn} (nil))

(insn 12 10 19 2 arch/arm/mm/fault.c:559 (set (reg:SI 12 ip [142])
        (and:SI (reg/v:SI 4 r4 [orig:136 fsr ] [136])
            (const_int 15 [0xf]))) 67 {*arm_andsi3_insn} (nil))

(insn 19 12 2 2 arch/arm/mm/fault.c:562 (set (reg:SI 1 r1)
        (and:SI (reg/v:SI 4 r4 [orig:136 fsr ] [136])
            (const_int 2147483647 [0x7fffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 2 19 13 2 arch/arm/mm/fault.c:558 (set (reg/v:SI 6 r6 [orig:135 addr ] [135])
        (reg:SI 0 r0 [ addr ])) 167 {*arm_movsi_insn} (nil))

(insn 13 2 4 2 arch/arm/mm/fault.c:559 (set (reg:SI 12 ip [143])
        (ior:SI (lshiftrt:SI (reg:SI 14 lr [140])
                (const_int 6 [0x6]))
            (reg:SI 12 ip [142]))) 270 {*arith_shiftsi} (nil))

(insn 4 13 15 2 arch/arm/mm/fault.c:558 (set (reg/v/f:SI 7 r7 [orig:137 regs ] [137])
        (reg:SI 2 r2 [ regs ])) 167 {*arm_movsi_insn} (nil))

(insn 15 4 21 2 arch/arm/mm/fault.c:559 (set (reg/v/f:SI 5 r5 [orig:133 inf ] [133])
        (plus:SI (mult:SI (reg:SI 12 ip [143])
                (const_int 16 [0x10]))
            (reg/f:SI 3 r3 [139]))) 270 {*arith_shiftsi} (nil))

(call_insn 21 15 23 2 arch/arm/mm/fault.c:562 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (mem/s/f/j:SI (plus:SI (mult:SI (reg:SI 12 ip [143])
                                    (const_int 16 [0x10]))
                                (reg/f:SI 3 r3 [139])) [0 <variable>.fn+0 S4 A32]) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 251 {*call_value_mem} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 23 21 24 2 arch/arm/mm/fault.c:562 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 25 2 arch/arm/mm/fault.c:562 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 
;; Succ edge  3 [0.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 25 24 40 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 40 25 28 3 NOTE_INSN_DELETED)

(insn 28 40 29 3 arch/arm/mm/fault.c:565 (set (reg:SI 1 r1)
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:133 inf ] [133])
                (const_int 12 [0xc])) [0 <variable>.name+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 29 28 30 3 arch/arm/mm/fault.c:565 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:136 fsr ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 30 29 27 3 arch/arm/mm/fault.c:565 (set (reg:SI 3 r3)
        (reg/v:SI 6 r6 [orig:135 addr ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 27 30 31 3 arch/arm/mm/fault.c:565 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x114abc30>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x114abc30>)
        (nil)))

(call_insn 31 27 36 3 arch/arm/mm/fault.c:565 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 36 31 32 3 arch/arm/mm/fault.c:570 (set (reg:SI 14 lr [orig:150 <variable>.code ] [150])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:133 inf ] [133])
                (const_int 8 [0x8])) [0 <variable>.code+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -120 [0xffffffffffffff88])) [0 info.si_code+0 S4 A64])
        (nil)))

(insn 32 36 44 3 arch/arm/mm/fault.c:568 (set (reg:SI 12 ip [orig:148 <variable>.sig ] [148])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 5 r5 [orig:133 inf ] [133])
                (const_int 4 [0x4])) [0 <variable>.sig+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -128 [0xffffffffffffff80])) [0 info.si_signo+0 S4 A64])
        (nil)))

(insn 44 32 46 3 arch/arm/mm/fault.c:572 (set (reg:SI 1 r1)
        (reg/v/f:SI 7 r7 [orig:137 regs ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 46 44 43 3 arch/arm/mm/fault.c:572 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:136 fsr ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 43 46 45 3 arch/arm/mm/fault.c:572 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x1152d7e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x1152d7e0>)
        (nil)))

(insn 45 43 37 3 arch/arm/mm/fault.c:572 (set (reg:SI 2 r2)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 37 45 33 3 arch/arm/mm/fault.c:570 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 info.si_code+0 S4 A64])
        (reg:SI 14 lr [orig:150 <variable>.code ] [150])) 167 {*arm_movsi_insn} (nil))

(insn 33 37 34 3 arch/arm/mm/fault.c:568 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 info.si_signo+0 S4 A64])
        (reg:SI 12 ip [orig:148 <variable>.sig ] [148])) 167 {*arm_movsi_insn} (nil))

(insn 34 33 38 3 arch/arm/mm/fault.c:569 (set (reg:SI 12 ip [149])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn 38 34 42 3 arch/arm/mm/fault.c:571 (set (mem/s/f/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 info._sifields._sigfault._addr+0 S4 A32])
        (reg/v:SI 6 r6 [orig:135 addr ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 42 38 35 3 arch/arm/mm/fault.c:572 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 35 42 47 3 arch/arm/mm/fault.c:569 (set (mem/s/j/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 info.si_errno+0 S4 A32])
        (reg:SI 12 ip [149])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn 47 35 53 3 arch/arm/mm/fault.c:572 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_notify_die") [flags 0x41] <function_decl 0x512d9380 arm_notify_die>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [100.0%] 
(code_label 53 47 56 4 72 "" [1 uses])

(note 56 53 57 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 57 56 58 NOTE_INSN_DELETED)

(note 58 57 0 NOTE_INSN_DELETED)


;; Function hook_ifault_code (hook_ifault_code)[0:1299] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 48.
rescanning insn with uid = 48.
deleting insn with uid = 48.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 8 (  1.6)

Pass 0 for finding allocno costs

    a0 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r153: preferred GENERAL_REGS, alternative NO_REGS
    r147: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a2(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a3(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 39(l0): point = 0
   Insn 48(l0): point = 2
   Insn 31(l0): point = 4
   Insn 27(l0): point = 6
   Insn 21(l0): point = 8
   Insn 37(l0): point = 10
   Insn 25(l0): point = 12
   Insn 30(l0): point = 14
   Insn 20(l0): point = 16
   Insn 29(l0): point = 18
   Insn 16(l0): point = 21
   Insn 15(l0): point = 23
   Insn 14(l0): point = 25
   Insn 11(l0): point = 28
   Insn 5(l0): point = 30
   Insn 4(l0): point = 32
   Insn 10(l0): point = 34
   Insn 3(l0): point = 36
   Insn 2(l0): point = 38
 a0(r153): [1..10]
 a1(r137): [1..2]
 a2(r139): [5..16]
 a3(r147): [5..14]
 a4(r136): [28..30] [5..20]
 a5(r143): [7..12]
 a6(r135): [28..32] [7..20]
 a7(r133): [28..38] [9..20]
 a8(r134): [28..36] [9..20]
 a9(r146): [15..18]
Compressing live ranges: from 41 to 17 - 41%
Ranges after the compression:
 a0(r153): [0..5]
 a1(r137): [0..1]
 a2(r139): [2..9]
 a3(r147): [2..7]
 a4(r136): [12..13] [2..11]
 a5(r143): [3..6]
 a6(r135): [12..14] [3..11]
 a7(r133): [12..16] [4..11]
 a8(r134): [12..15] [4..11]
 a9(r146): [8..10]
+++Allocating 80 bytes for conflict table (uncompressed size 80)
;; a0(r153,l0) conflicts: a1(r137,l0) a3(r147,l0) a2(r139,l0) a4(r136,l0) a5(r143,l0) a6(r135,l0) a8(r134,l0) a7(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r137,l0) conflicts: a0(r153,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r139,l0) conflicts: a0(r153,l0) a3(r147,l0) a4(r136,l0) a5(r143,l0) a6(r135,l0) a8(r134,l0) a7(r133,l0) a9(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r147,l0) conflicts: a0(r153,l0) a2(r139,l0) a4(r136,l0) a5(r143,l0) a6(r135,l0) a8(r134,l0) a7(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r136,l0) conflicts: a0(r153,l0) a3(r147,l0) a2(r139,l0) a5(r143,l0) a6(r135,l0) a8(r134,l0) a7(r133,l0) a9(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r143,l0) conflicts: a0(r153,l0) a3(r147,l0) a2(r139,l0) a4(r136,l0) a6(r135,l0) a8(r134,l0) a7(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r135,l0) conflicts: a0(r153,l0) a3(r147,l0) a2(r139,l0) a4(r136,l0) a5(r143,l0) a8(r134,l0) a7(r133,l0) a9(r146,l0)
;;     total conflict hard regs: 3 14
;;     conflict hard regs: 3 14
;; a7(r133,l0) conflicts: a0(r153,l0) a3(r147,l0) a2(r139,l0) a4(r136,l0) a5(r143,l0) a6(r135,l0) a8(r134,l0) a9(r146,l0)
;;     total conflict hard regs: 1-3 14
;;     conflict hard regs: 1-3 14
;; a8(r134,l0) conflicts: a0(r153,l0) a3(r147,l0) a2(r139,l0) a4(r136,l0) a5(r143,l0) a6(r135,l0) a7(r133,l0) a9(r146,l0)
;;     total conflict hard regs: 2 3 14
;;     conflict hard regs: 2 3 14
;; a9(r146,l0) conflicts: a2(r139,l0) a4(r136,l0) a6(r135,l0) a8(r134,l0) a7(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a3(r147)<->a9(r146)@125:shuffle
  regions=1, blocks=5, points=17
    allocnos=10, copies=1, conflicts=1, ranges=14

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r153 1r137 2r139 3r147 4r136 5r143 6r135 7r133 8r134 9r146
    modified regnos: 133 134 135 136 137 139 143 146 147 153
    border:
    Pressure: GENERAL_REGS=9
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 146 of GENERAL_REGS has 1 regs less
      Pushing a9(r146,l0)
      Pushing a5(r143,l0)
      Pushing a4(r136,l0)
      Pushing a1(r137,l0)
      Pushing a0(r153,l0)
      Pushing a3(r147,l0)
      Pushing a2(r139,l0)
      Pushing a6(r135,l0)
      Pushing a8(r134,l0)
      Pushing a7(r133,l0)
      Popping a7(r133,l0)  -- assign reg 0
      Popping a8(r134,l0)  -- assign reg 1
      Popping a6(r135,l0)  -- assign reg 2
      Popping a2(r139,l0)  -- assign reg 12
      Popping a3(r147,l0)  -- assign reg 4
      Popping a0(r153,l0)  -- assign reg 5
      Popping a1(r137,l0)  -- assign reg 3
      Popping a4(r136,l0)  -- assign reg 3
      Popping a5(r143,l0)  -- assign reg 6
      Popping a9(r146,l0)  -- assign reg 4
Disposition:
    7:r133 l0     0    8:r134 l0     1    6:r135 l0     2    4:r136 l0     3
    1:r137 l0     3    2:r139 l0    12    5:r143 l0     6    9:r146 l0     4
    3:r147 l0     4    0:r153 l0     5
New iteration of spill/restore move
+++Costs: overall -16000, reg -16000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, 14, dead_or_set: 0, 133
insn=3, live_throughout: 2, 3, 13, 14, 133, dead_or_set: 1, 134
insn=10, live_throughout: 2, 3, 13, 14, 133, 134, dead_or_set: 
insn=4, live_throughout: 3, 13, 14, 24, 133, 134, dead_or_set: 2, 135
insn=5, live_throughout: 13, 14, 24, 133, 134, 135, dead_or_set: 3, 136
insn=11, live_throughout: 13, 14, 133, 134, 135, 136, dead_or_set: 
insn=14, live_throughout: 13, dead_or_set: 0
insn=15, live_throughout: 0, 13, dead_or_set: 1
insn=16, live_throughout: 13, dead_or_set: 0, 1, 14
insn=18, live_throughout: 13, 14, 133, 134, 135, 136, dead_or_set: 
insn=29, live_throughout: 13, 14, 133, 134, 135, 136, dead_or_set: 146
insn=20, live_throughout: 13, 14, 133, 134, 135, 136, 146, dead_or_set: 139
insn=30, live_throughout: 13, 14, 133, 134, 135, 136, 139, dead_or_set: 146, 147
insn=25, live_throughout: 13, 14, 133, 134, 135, 136, 139, 147, dead_or_set: 143
insn=37, live_throughout: 13, 14, 133, 134, 135, 136, 139, 143, 147, dead_or_set: 153
insn=21, live_throughout: 13, 14, 135, 136, 139, 143, 147, 153, dead_or_set: 133, 134
insn=27, live_throughout: 13, 14, 136, 139, 147, 153, dead_or_set: 135, 143
insn=31, live_throughout: 13, 14, 153, dead_or_set: 136, 139, 147
insn=48, live_throughout: 13, 14, 153, dead_or_set: 137
insn=39, live_throughout: 13, 14, dead_or_set: 137, 153
init_insns for 137: (insn_list:REG_DEP_TRUE 48 (nil))
init_insns for 139: (insn_list:REG_DEP_TRUE 20 (nil))
changing reg in insn 2
changing reg in insn 25
changing reg in insn 29
changing reg in insn 21
changing reg in insn 10
changing reg in insn 3
changing reg in insn 21
changing reg in insn 4
changing reg in insn 27
changing reg in insn 5
changing reg in insn 31
changing reg in insn 48
changing reg in insn 39
changing reg in insn 20
changing reg in insn 37
changing reg in insn 25
changing reg in insn 31
changing reg in insn 21
changing reg in insn 25
changing reg in insn 27
changing reg in insn 29
changing reg in insn 30
changing reg in insn 30
changing reg in insn 37
changing reg in insn 31
changing reg in insn 37
changing reg in insn 39
Spilling for insn 21.
Spilling for insn 27.
Spilling for insn 31.
Spilling for insn 39.

Reloads for insn # 21
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 0 r0 [orig:133 nr ] [133])
                                                            (const_int 16 [0x10]))
                                                        (reg/f:SI 12 ip [139])) [0 <variable>.fn+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 0 r0 [orig:133 nr ] [133])
                                                            (const_int 16 [0x10]))
                                                        (reg/f:SI 12 ip [139])) [0 <variable>.fn+0 S4 A32])

Reloads for insn # 27
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg:SI 6 r6 [143])
                                                        (const_int 4 [0x4])) [0 <variable>.sig+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg:SI 6 r6 [143])
                                                        (const_int 4 [0x4])) [0 <variable>.sig+0 S4 A32])

Reloads for insn # 31
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (mult:SI (reg:SI 4 r4 [147])
                                                            (const_int 8 [0x8]))
                                                        (reg/f:SI 12 ip [139])) [0 <variable>.code+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (mult:SI (reg:SI 4 r4 [147])
                                                            (const_int 8 [0x8]))
                                                        (reg/f:SI 12 ip [139])) [0 <variable>.code+0 S4 A32])

Reloads for insn # 39
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [153])
                                                        (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [153])
                                                        (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 5.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 16.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 8 (  1.6)


hook_ifault_code

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={3d,5u} r1={3d,2u} r2={2d,1u} r3={3d,2u} r4={2d,3u} r5={1d,1u} r6={1d,1u} r12={3d,4u} r13={1d,6u,1d} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 161{133d,27u,1e} in 15{14 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 7 11 2 arch/arm/mm/fault.c:615 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:133 nr ] [133])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 11 10 12 2 arch/arm/mm/fault.c:615 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 12 11 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 12 15 3 arch/arm/mm/fault.c:616 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11536b70>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11536b70>)
        (nil)))

(insn 15 14 16 3 arch/arm/mm/fault.c:616 (set (reg:SI 1 r1)
        (const_int 616 [0x268])) 167 {*arm_movsi_insn} (nil))

(call_insn 16 15 17 3 arch/arm/mm/fault.c:616 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 17 16 18)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 18 17 19 4 76 "" [1 uses])

(note 19 18 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 24 19 36 4 NOTE_INSN_DELETED)

(note 36 24 29 4 NOTE_INSN_DELETED)

(insn 29 36 20 4 arch/arm/mm/fault.c:620 (set (reg:SI 4 r4 [146])
        (ashift:SI (reg/v:SI 0 r0 [orig:133 nr ] [133])
            (const_int 1 [0x1]))) 117 {*arm_shiftsi3} (nil))

(insn 20 29 30 4 arch/arm/mm/fault.c:618 (set (reg/f:SI 12 ip [139])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 30 20 25 4 arch/arm/mm/fault.c:620 (set (reg:SI 4 r4 [147])
        (plus:SI (reg:SI 4 r4 [146])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 25 30 37 4 arch/arm/mm/fault.c:619 (set (reg:SI 6 r6 [143])
        (plus:SI (mult:SI (reg/v:SI 0 r0 [orig:133 nr ] [133])
                (const_int 16 [0x10]))
            (reg/f:SI 12 ip [139]))) 270 {*arith_shiftsi} (nil))

(insn 37 25 21 4 arch/arm/mm/fault.c:621 (set (reg:SI 5 r5 [153])
        (plus:SI (mult:SI (reg:SI 4 r4 [147])
                (const_int 8 [0x8]))
            (reg/f:SI 12 ip [139]))) 270 {*arith_shiftsi} (nil))

(insn 21 37 27 4 arch/arm/mm/fault.c:618 (set (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 0 r0 [orig:133 nr ] [133])
                    (const_int 16 [0x10]))
                (reg/f:SI 12 ip [139])) [0 <variable>.fn+0 S4 A32])
        (reg/v/f:SI 1 r1 [orig:134 fn ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 27 21 31 4 arch/arm/mm/fault.c:619 (set (mem/s/j:SI (plus:SI (reg:SI 6 r6 [143])
                (const_int 4 [0x4])) [0 <variable>.sig+0 S4 A32])
        (reg/v:SI 2 r2 [orig:135 sig ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 31 27 48 4 arch/arm/mm/fault.c:620 (set (mem/s/j:SI (plus:SI (mult:SI (reg:SI 4 r4 [147])
                    (const_int 8 [0x8]))
                (reg/f:SI 12 ip [139])) [0 <variable>.code+0 S4 A32])
        (reg/v:SI 3 r3 [orig:136 code ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 48 31 39 4 arch/arm/mm/fault.c:621 (set (reg/v/f:SI 3 r3 [orig:137 name ] [137])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 name+0 S4 A32])
        (nil)))

(insn 39 48 47 4 arch/arm/mm/fault.c:621 (set (mem/s/f/j:SI (plus:SI (reg:SI 5 r5 [153])
                (const_int 4 [0x4])) [0 <variable>.name+0 S4 A32])
        (reg/v/f:SI 3 r3 [orig:137 name ] [137])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 47 39 49 NOTE_INSN_DELETED)

(note 49 47 0 NOTE_INSN_DELETED)


;; Function hook_fault_code (hook_fault_code)[0:1297] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 60.
rescanning insn with uid = 60.
deleting insn with uid = 60.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 8 (  1.6)

Pass 0 for finding allocno costs

    a0 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000


Pass 1 for finding allocno costs

    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:10000
  a3(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a4(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a8(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000

   Insn 40(l0): point = 0
   Insn 48(l0): point = 2
   Insn 60(l0): point = 4
   Insn 26(l0): point = 6
   Insn 32(l0): point = 8
   Insn 38(l0): point = 10
   Insn 24(l0): point = 12
   Insn 37(l0): point = 14
   Insn 21(l0): point = 16
   Insn 17(l0): point = 19
   Insn 16(l0): point = 21
   Insn 15(l0): point = 23
   Insn 11(l0): point = 26
   Insn 5(l0): point = 28
   Insn 4(l0): point = 30
   Insn 10(l0): point = 32
   Insn 3(l0): point = 34
   Insn 2(l0): point = 36
 a0(r155): [1..10]
 a1(r136): [26..28] [1..18]
 a2(r137): [3..4]
 a3(r143): [7..12]
 a4(r134): [26..34] [7..18]
 a5(r135): [26..30] [9..18]
 a6(r154): [11..14]
 a7(r140): [13..16]
 a8(r133): [26..36] [13..18]
Compressing live ranges: from 39 to 17 - 43%
Ranges after the compression:
 a0(r155): [0..5]
 a1(r136): [12..13] [0..11]
 a2(r137): [1..2]
 a3(r143): [3..7]
 a4(r134): [12..15] [3..11]
 a5(r135): [12..14] [4..11]
 a6(r154): [6..9]
 a7(r140): [8..10]
 a8(r133): [12..16] [8..11]
+++Allocating 72 bytes for conflict table (uncompressed size 72)
;; a0(r155,l0) conflicts: a1(r136,l0) a2(r137,l0) a3(r143,l0) a4(r134,l0) a5(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r136,l0) conflicts: a0(r155,l0) a2(r137,l0) a3(r143,l0) a4(r134,l0) a5(r135,l0) a6(r154,l0) a7(r140,l0) a8(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r137,l0) conflicts: a0(r155,l0) a1(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r143,l0) conflicts: a0(r155,l0) a1(r136,l0) a4(r134,l0) a5(r135,l0) a6(r154,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r134,l0) conflicts: a0(r155,l0) a1(r136,l0) a3(r143,l0) a5(r135,l0) a6(r154,l0) a7(r140,l0) a8(r133,l0)
;;     total conflict hard regs: 2 3 14
;;     conflict hard regs: 2 3 14
;; a5(r135,l0) conflicts: a0(r155,l0) a1(r136,l0) a3(r143,l0) a4(r134,l0) a6(r154,l0) a7(r140,l0) a8(r133,l0)
;;     total conflict hard regs: 3 14
;;     conflict hard regs: 3 14
;; a6(r154,l0) conflicts: a1(r136,l0) a3(r143,l0) a4(r134,l0) a5(r135,l0) a7(r140,l0) a8(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r140,l0) conflicts: a1(r136,l0) a4(r134,l0) a5(r135,l0) a6(r154,l0) a8(r133,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r133,l0) conflicts: a1(r136,l0) a4(r134,l0) a5(r135,l0) a6(r154,l0) a7(r140,l0)
;;     total conflict hard regs: 1-3 14
;;     conflict hard regs: 1-3 14

  cp0:a3(r143)<->a7(r140)@125:shuffle
  cp1:a3(r143)<->a8(r133)@125:shuffle
  cp2:a0(r155)<->a6(r154)@125:shuffle
  regions=1, blocks=5, points=17
    allocnos=9, copies=3, conflicts=0, ranges=13

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r155 1r136 2r137 3r143 4r134 5r135 6r154 7r140 8r133
    modified regnos: 133 134 135 136 137 140 143 154 155
    border:
    Pressure: GENERAL_REGS=7
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 137 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
    Reg 134 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 133 of GENERAL_REGS has 4 regs less
      Pushing a6(r154,l0)
      Pushing a2(r137,l0)
      Pushing a1(r136,l0)
      Pushing a7(r140,l0)
      Pushing a3(r143,l0)
      Pushing a0(r155,l0)
      Pushing a5(r135,l0)
      Pushing a4(r134,l0)
      Pushing a8(r133,l0)
      Popping a8(r133,l0)  -- assign reg 0
      Popping a4(r134,l0)  -- assign reg 1
      Popping a5(r135,l0)  -- assign reg 2
      Popping a0(r155,l0)  -- assign reg 12
      Popping a3(r143,l0)  -- assign reg 0
      Popping a7(r140,l0)  -- assign reg 4
      Popping a1(r136,l0)  -- assign reg 3
      Popping a2(r137,l0)  -- assign reg 2
      Popping a6(r154,l0)  -- assign reg 12
Disposition:
    8:r133 l0     0    4:r134 l0     1    5:r135 l0     2    1:r136 l0     3
    2:r137 l0     2    7:r140 l0     4    3:r143 l0     0    6:r154 l0    12
    0:r155 l0    12
New iteration of spill/restore move
+++Costs: overall -16000, reg -16000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, 14, dead_or_set: 0, 133
insn=3, live_throughout: 2, 3, 13, 14, 133, dead_or_set: 1, 134
insn=10, live_throughout: 2, 3, 13, 14, 133, 134, dead_or_set: 
insn=4, live_throughout: 3, 13, 14, 24, 133, 134, dead_or_set: 2, 135
insn=5, live_throughout: 13, 14, 24, 133, 134, 135, dead_or_set: 3, 136
insn=11, live_throughout: 13, 14, 133, 134, 135, 136, dead_or_set: 
insn=15, live_throughout: 13, dead_or_set: 0
insn=16, live_throughout: 0, 13, dead_or_set: 1
insn=17, live_throughout: 13, dead_or_set: 0, 1, 14
insn=19, live_throughout: 13, 14, 133, 134, 135, 136, dead_or_set: 
insn=21, live_throughout: 13, 14, 133, 134, 135, 136, dead_or_set: 140
insn=37, live_throughout: 13, 14, 133, 134, 135, 136, 140, dead_or_set: 154
insn=24, live_throughout: 13, 14, 134, 135, 136, 154, dead_or_set: 133, 140, 143
insn=38, live_throughout: 13, 14, 134, 135, 136, 143, dead_or_set: 154, 155
insn=32, live_throughout: 13, 14, 134, 136, 143, 155, dead_or_set: 135
insn=26, live_throughout: 13, 14, 136, 155, dead_or_set: 134, 143
insn=60, live_throughout: 13, 14, 136, 155, dead_or_set: 137
insn=48, live_throughout: 13, 14, 136, 155, dead_or_set: 137
insn=40, live_throughout: 13, 14, dead_or_set: 136, 155
init_insns for 137: (insn_list:REG_DEP_TRUE 60 (nil))
init_insns for 140: (insn_list:REG_DEP_TRUE 21 (nil))
changing reg in insn 2
changing reg in insn 37
changing reg in insn 24
changing reg in insn 10
changing reg in insn 3
changing reg in insn 26
changing reg in insn 4
changing reg in insn 32
changing reg in insn 5
changing reg in insn 40
changing reg in insn 60
changing reg in insn 48
changing reg in insn 21
changing reg in insn 37
changing reg in insn 24
changing reg in insn 24
changing reg in insn 32
changing reg in insn 26
changing reg in insn 37
changing reg in insn 38
changing reg in insn 38
changing reg in insn 48
changing reg in insn 40
Spilling for insn 32.
Spilling for insn 26.
Spilling for insn 48.
Spilling for insn 40.

Reloads for insn # 32
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg:SI 0 r0 [143])
                                                        (const_int 516 [0x204])) [0 <variable>.sig+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg:SI 0 r0 [143])
                                                        (const_int 516 [0x204])) [0 <variable>.sig+0 S4 A32])

Reloads for insn # 26
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [143])
                                                        (const_int 512 [0x200])) [0 <variable>.fn+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [143])
                                                        (const_int 512 [0x200])) [0 <variable>.fn+0 S4 A32])

Reloads for insn # 48
Reload 0: reload_out (SI) = (mem/s/f/j:SI (plus:SI (reg:SI 12 ip [155])
                                                        (const_int 516 [0x204])) [0 <variable>.name+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/f/j:SI (plus:SI (reg:SI 12 ip [155])
                                                        (const_int 516 [0x204])) [0 <variable>.name+0 S4 A32])

Reloads for insn # 40
Reload 0: reload_out (SI) = (mem/s/j:SI (plus:SI (reg:SI 12 ip [155])
                                                        (const_int 512 [0x200])) [0 <variable>.code+0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem/s/j:SI (plus:SI (reg:SI 12 ip [155])
                                                        (const_int 512 [0x200])) [0 <variable>.code+0 S4 A32])
deleting insn with uid = 2.
deleting insn with uid = 3.
deleting insn with uid = 4.
deleting insn with uid = 5.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 17.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 4 count 8 (  1.6)


hook_fault_code

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={4d,6u} r1={3d,2u} r2={3d,2u} r3={2d,1u} r4={1d,2u} r12={4d,3u} r13={1d,6u,1d} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={2d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 157{132d,24u,1e} in 14{13 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 7 11 2 arch/arm/mm/fault.c:544 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:133 nr ] [133])
            (const_int 31 [0x1f]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 11 10 12 2 arch/arm/mm/fault.c:544 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 12 11 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 12 16 3 arch/arm/mm/fault.c:545 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11536b70>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11536b70>)
        (nil)))

(insn 16 15 17 3 arch/arm/mm/fault.c:545 (set (reg:SI 1 r1)
        (const_int 545 [0x221])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 545 [0x221])
        (nil)))

(call_insn 17 16 18 3 arch/arm/mm/fault.c:545 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_NORETURN (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 18 17 19)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 4 [r4] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 4 [r4] 12 [ip]
;; live  kill	

;; Pred edge  2 [100.0%] 
(code_label 19 18 20 4 81 "" [1 uses])

(note 20 19 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 23 20 34 4 NOTE_INSN_DELETED)

(note 34 23 35 4 NOTE_INSN_DELETED)

(note 35 34 21 4 NOTE_INSN_DELETED)

(insn 21 35 37 4 arch/arm/mm/fault.c:547 (set (reg/f:SI 4 r4 [140])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn 37 21 24 4 arch/arm/mm/fault.c:549 (set (reg:SI 12 ip [154])
        (plus:SI (mult:SI (reg/v:SI 0 r0 [orig:133 nr ] [133])
                (const_int 16 [0x10]))
            (reg/f:SI 4 r4 [140]))) 270 {*arith_shiftsi} (nil))

(insn 24 37 38 4 arch/arm/mm/fault.c:547 (set (reg:SI 0 r0 [143])
        (plus:SI (mult:SI (reg/v:SI 0 r0 [orig:133 nr ] [133])
                (const_int 16 [0x10]))
            (reg/f:SI 4 r4 [140]))) 270 {*arith_shiftsi} (nil))

(insn 38 24 32 4 arch/arm/mm/fault.c:549 (set (reg:SI 12 ip [155])
        (plus:SI (reg:SI 12 ip [154])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn 32 38 26 4 arch/arm/mm/fault.c:548 (set (mem/s/j:SI (plus:SI (reg:SI 0 r0 [143])
                (const_int 516 [0x204])) [0 <variable>.sig+0 S4 A32])
        (reg/v:SI 2 r2 [orig:135 sig ] [135])) 167 {*arm_movsi_insn} (nil))

(insn 26 32 60 4 arch/arm/mm/fault.c:547 (set (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [143])
                (const_int 512 [0x200])) [0 <variable>.fn+0 S4 A32])
        (reg/v/f:SI 1 r1 [orig:134 fn ] [134])) 167 {*arm_movsi_insn} (nil))

(insn 60 26 48 4 arch/arm/mm/fault.c:550 (set (reg/v/f:SI 2 r2 [orig:137 name ] [137])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 name+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 name+0 S4 A32])
        (nil)))

(insn 48 60 40 4 arch/arm/mm/fault.c:550 (set (mem/s/f/j:SI (plus:SI (reg:SI 12 ip [155])
                (const_int 516 [0x204])) [0 <variable>.name+0 S4 A32])
        (reg/v/f:SI 2 r2 [orig:137 name ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 40 48 59 4 arch/arm/mm/fault.c:549 (set (mem/s/j:SI (plus:SI (reg:SI 12 ip [155])
                (const_int 512 [0x200])) [0 <variable>.code+0 S4 A32])
        (reg/v:SI 3 r3 [orig:136 code ] [136])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 59 40 61 NOTE_INSN_DELETED)

(note 61 59 0 NOTE_INSN_DELETED)


;; Function exceptions_init (exceptions_init)[0:1301] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 64.
verify found no changes in insn with uid = 64.
deleting insn with uid = 12.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 9 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)

Pass 0 for finding allocno costs

    a0 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r141: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 56(l0): point = 0
   Insn 50(l0): point = 2
   Insn 43(l0): point = 5
   Insn 38(l0): point = 7
   Insn 42(l0): point = 9
   Insn 41(l0): point = 11
   Insn 40(l0): point = 13
   Insn 39(l0): point = 15
   Insn 34(l0): point = 17
   Insn 29(l0): point = 19
   Insn 33(l0): point = 21
   Insn 32(l0): point = 23
   Insn 31(l0): point = 25
   Insn 30(l0): point = 27
   Insn 28(l0): point = 29
   Insn 24(l0): point = 32
   Insn 23(l0): point = 34
   Insn 21(l0): point = 36
   Insn 18(l0): point = 39
   Insn 13(l0): point = 41
   Insn 64(l0): point = 43
   Insn 17(l0): point = 45
   Insn 16(l0): point = 47
   Insn 15(l0): point = 49
   Insn 14(l0): point = 51
   Insn 8(l0): point = 54
   Insn 7(l0): point = 56
   Insn 5(l0): point = 58
 a0(r141): [8..29]
 a1(r138): [42..43]
Compressing live ranges: from 61 to 4 - 6%
Ranges after the compression:
 a0(r141): [0..1]
 a1(r138): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r141,l0) conflicts:
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a1(r138,l0) conflicts:
;;     total conflict hard regs: 0-3
;;     conflict hard regs: 0-3

  regions=1, blocks=7, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 6 5 4 3 2
    all: 0r141 1r138
    modified regnos: 138 141
    border:
    Pressure: GENERAL_REGS=6
    Reg 141 of GENERAL_REGS has 5 regs less
    Reg 138 of GENERAL_REGS has 4 regs less
      Pushing a1(r138,l0)
      Pushing a0(r141,l0)
      Popping a0(r141,l0)  -- assign reg 4
      Popping a1(r138,l0)  -- assign reg 12
Disposition:
    1:r138 l0    12    0:r141 l0     4
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=5, live_throughout: 13, dead_or_set: 0, 14
insn=7, live_throughout: 13, dead_or_set: 0
insn=8, live_throughout: 13, dead_or_set: 
insn=14, live_throughout: 13, dead_or_set: 0
insn=15, live_throughout: 0, 13, dead_or_set: 1
insn=16, live_throughout: 0, 1, 13, dead_or_set: 2
insn=17, live_throughout: 0, 1, 2, 13, dead_or_set: 3
insn=64, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 138
insn=13, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 138
insn=18, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=19, live_throughout: 13, dead_or_set: 
insn=21, live_throughout: 13, dead_or_set: 0, 14
insn=23, live_throughout: 13, 14, dead_or_set: 0
insn=24, live_throughout: 13, 14, dead_or_set: 
insn=28, live_throughout: 13, dead_or_set: 141
insn=30, live_throughout: 13, 141, dead_or_set: 0
insn=31, live_throughout: 0, 13, 141, dead_or_set: 1
insn=32, live_throughout: 0, 1, 13, 141, dead_or_set: 2
insn=33, live_throughout: 0, 1, 2, 13, 141, dead_or_set: 3
insn=29, live_throughout: 0, 1, 2, 3, 13, 141, dead_or_set: 
insn=34, live_throughout: 13, 141, dead_or_set: 0, 1, 2, 3, 14
insn=39, live_throughout: 13, 141, dead_or_set: 0
insn=40, live_throughout: 0, 13, 141, dead_or_set: 1
insn=41, live_throughout: 0, 1, 13, 141, dead_or_set: 2
insn=42, live_throughout: 0, 1, 2, 13, 141, dead_or_set: 3
insn=38, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 141
insn=43, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=44, live_throughout: 13, 14, dead_or_set: 
insn=50, live_throughout: 13, 14, dead_or_set: 0
insn=56, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 138: (insn_list:REG_DEP_TRUE 64 (nil))
init_insns for 141: (insn_list:REG_DEP_TRUE 28 (nil))
changing reg in insn 64
changing reg in insn 13
changing reg in insn 28
changing reg in insn 38
changing reg in insn 29
Spilling for insn 13.
Spilling for insn 29.
Spilling for insn 38.

Reloads for insn # 13
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 29
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])

Reloads for insn # 38
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 5.
verify found no changes in insn with uid = 18.
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 34.
verify found no changes in insn with uid = 43.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 9 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 8 count 12 (  1.7)


exceptions_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,7u} r1={9d,3u} r2={9d,3u} r3={9d,3u} r4={1d,2u} r12={7d,1u} r13={1d,14u} r14={6d,1u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={7d,2u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 645{609d,36u,0e} in 28{23 regular + 5 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 2 5 2 NOTE_INSN_DELETED)

(call_insn 5 6 7 2 arch/arm/mm/fault.c:645 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_architecture") [flags 0x41] <function_decl 0x512d9700 cpu_architecture>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 7 5 8 2 arch/arm/mm/fault.c:645 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 7 [0x7]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 8 7 9 2 arch/arm/mm/fault.c:645 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 9 8 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 9 15 3 arch/arm/mm/fault.c:646 (set (reg:SI 0 r0)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(insn 15 14 16 3 arch/arm/mm/fault.c:646 (set (reg:SI 1 r1)
        (symbol_ref:SI ("do_translation_fault") [flags 0x3] <function_decl 0x1147d280 do_translation_fault>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("do_translation_fault") [flags 0x3] <function_decl 0x1147d280 do_translation_fault>)
        (nil)))

(insn 16 15 17 3 arch/arm/mm/fault.c:646 (set (reg:SI 2 r2)
        (const_int 11 [0xb])) 167 {*arm_movsi_insn} (nil))

(insn 17 16 64 3 arch/arm/mm/fault.c:646 (set (reg:SI 3 r3)
        (const_int 196609 [0x30001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 196609 [0x30001])
        (nil)))

(insn 64 17 13 3 arch/arm/mm/fault.c:646 (set (reg/f:SI 12 ip [138])
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x1154a280>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x1154a280>)
        (nil)))

(insn 13 64 18 3 arch/arm/mm/fault.c:646 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [138])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x1154a280>)
        (nil)))

(call_insn 18 13 19 3 arch/arm/mm/fault.c:646 (parallel [
            (call (mem:SI (symbol_ref:SI ("hook_fault_code") [flags 0x3] <function_decl 0x512d9400 hook_fault_code>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 19 18 20 4 86 "" [1 uses])

(note 20 19 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 22 20 21 4 NOTE_INSN_DELETED)

(call_insn 21 22 23 4 arch/arm/mm/fault.c:650 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("cpu_architecture") [flags 0x41] <function_decl 0x512d9700 cpu_architecture>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn 23 21 24 4 arch/arm/mm/fault.c:650 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 8 [0x8]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 25 4 arch/arm/mm/fault.c:650 (set (pc)
        (if_then_else (le (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.0%]  (fallthru)
(note 25 24 28 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 28 25 30 5 arch/arm/mm/fault.c:655 (set (reg/f:SI 4 r4 [141])
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x1154a2c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x1154a2c0>)
        (nil)))

(insn 30 28 31 5 arch/arm/mm/fault.c:655 (set (reg:SI 0 r0)
        (const_int 3 [0x3])) 167 {*arm_movsi_insn} (nil))

(insn 31 30 32 5 arch/arm/mm/fault.c:655 (set (reg:SI 1 r1)
        (symbol_ref:SI ("do_bad") [flags 0x3] <function_decl 0x1147d480 do_bad>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("do_bad") [flags 0x3] <function_decl 0x1147d480 do_bad>)
        (nil)))

(insn 32 31 33 5 arch/arm/mm/fault.c:655 (set (reg:SI 2 r2)
        (const_int 11 [0xb])) 167 {*arm_movsi_insn} (nil))

(insn 33 32 29 5 arch/arm/mm/fault.c:655 (set (reg:SI 3 r3)
        (const_int 196609 [0x30001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 196609 [0x30001])
        (nil)))

(insn 29 33 34 5 arch/arm/mm/fault.c:655 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 4 r4 [141])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x1154a2c0>)
        (nil)))

(call_insn 34 29 39 5 arch/arm/mm/fault.c:655 (parallel [
            (call (mem:SI (symbol_ref:SI ("hook_fault_code") [flags 0x3] <function_decl 0x512d9400 hook_fault_code>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 39 34 40 5 arch/arm/mm/fault.c:657 (set (reg:SI 0 r0)
        (const_int 6 [0x6])) 167 {*arm_movsi_insn} (nil))

(insn 40 39 41 5 arch/arm/mm/fault.c:657 (set (reg:SI 1 r1)
        (symbol_ref:SI ("do_bad") [flags 0x3] <function_decl 0x1147d480 do_bad>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("do_bad") [flags 0x3] <function_decl 0x1147d480 do_bad>)
        (nil)))

(insn 41 40 42 5 arch/arm/mm/fault.c:657 (set (reg:SI 2 r2)
        (const_int 11 [0xb])) 167 {*arm_movsi_insn} (nil))

(insn 42 41 38 5 arch/arm/mm/fault.c:657 (set (reg:SI 3 r3)
        (const_int 196609 [0x30001])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 196609 [0x30001])
        (nil)))

(insn 38 42 43 5 arch/arm/mm/fault.c:657 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 4 r4 [141])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x1154a2c0>)
        (nil)))

(call_insn 43 38 44 5 arch/arm/mm/fault.c:657 (parallel [
            (call (mem:SI (symbol_ref:SI ("hook_fault_code") [flags 0x3] <function_decl 0x512d9400 hook_fault_code>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 44 43 45 6 87 "" [1 uses])

(note 45 44 50 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 50 45 56 6 arch/arm/mm/fault.c:662 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 56 50 63 6 arch/arm/mm/fault.c:662 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 63 56 65 NOTE_INSN_DELETED)

(note 65 63 0 NOTE_INSN_DELETED)

