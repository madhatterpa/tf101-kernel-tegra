
;; Function dma_supported (dma_supported)[0:1293]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 41 to 9 -- before reload
;;   ======================================================

;;	  0-->     8 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  0-->    41 r137=r2                           :cortex_a8_default
;;	  1-->     7 r136=0x0                          :cortex_a8_default
;;	  2-->     9 pc={(cc!=0x0)?L18:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 41
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 12 to 13 -- before reload
;;   ======================================================

;;	  0-->    12 cc=cmp(r137,0xfffffffffffffffe)   :cortex_a8_default
;;	  2-->    13 pc={(leu(cc,0x0))?L20:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 12
;;   new tail = 13

;;   ======================================================
;;   -- basic block 4 from 19 to 19 -- before reload
;;   ======================================================

;;	  0-->    19 r136=0x1                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 19
;;   new tail = 19

;;   ======================================================
;;   -- basic block 5 from 25 to 31 -- before reload
;;   ======================================================

;;	  0-->    25 r0=r136                           :cortex_a8_default
;;	  0-->    31 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 25
;;   new tail = 31


;; Procedure interblock/speculative motions == 0/0 




dma_supported

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d,1u} r3={1d,1u} r11={1d,5u} r12={1d} r13={1d,5u} r14={1d,1u} r24={2d,2u} r25={1d,5u} r26={1d,4u} r136={2d,1u} r137={1d,1u} 
;;    total ref usage 44{16d,28u,0e} in 9{9 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 136 137
;; live  in  	 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 136 137
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 42 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 42 5 4 2 NOTE_INSN_DELETED)

(note 4 42 8 2 NOTE_INSN_FUNCTION_BEG)

(insn 8 4 41 2 arch/arm/mm/dma-mapping.c:682 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ mask+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ mask+4 ])
        (nil)))

(insn 41 8 7 2 arch/arm/mm/dma-mapping.c:678 (set (reg:SI 137 [ mask ])
        (reg:SI 2 r2 [ mask ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ mask ])
        (nil)))

(insn 7 41 9 2 arch/arm/mm/dma-mapping.c:682 (set (reg:SI 136)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 9 7 34 2 arch/arm/mm/dma-mapping.c:682 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137


;; Succ edge  4 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 34 9 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 34 13 3 arch/arm/mm/dma-mapping.c:682 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 137 [ mask ])
            (const_int -2 [0xfffffffffffffffe]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 137 [ mask ])
        (nil)))

(jump_insn 13 12 18 3 arch/arm/mm/dma-mapping.c:682 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  5 [50.0%] 

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u14(11){ }u15(13){ }u16(25){ }u17(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 136
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%]  (fallthru)
(code_label 18 13 37 4 3 "" [1 uses])

(note 37 18 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 19 37 20 4 arch/arm/mm/dma-mapping.c:682 (set (reg:SI 136)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u18(11){ }u19(13){ }u20(25){ }u21(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [50.0%] 
(code_label 20 19 38 5 2 "" [1 uses])

(note 38 20 25 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 25 38 31 5 arch/arm/mm/dma-mapping.c:682 (set (reg/i:SI 0 r0)
        (reg:SI 136)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 136)
        (nil)))

(insn 31 25 61 5 arch/arm/mm/dma-mapping.c:682 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 61 31 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_set_mask (dma_set_mask)[0:1294]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 52 to 9 -- before reload
;;   ======================================================

;;	  0-->     7 r134=[r0+0x114]                   :cortex_a8_load_store_1
;;	  0-->    52 r139=r2                           :cortex_a8_default
;;	  1-->    53 r140=r3                           :cortex_a8_default
;;	  2-->     8 cc=cmp(r134,0x0)                  :cortex_a8_default
;;	  4-->     9 pc={(cc==0x0)?L22:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 52
;;   new tail = 9

;;   ======================================================
;;   -- basic block 3 from 11 to 12 -- before reload
;;   ======================================================

;;	  0-->    11 cc=cmp(r140,0x0)                  :cortex_a8_default
;;	  2-->    12 pc={(cc!=0x0)?L29:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 11
;;   new tail = 12

;;   ======================================================
;;   -- basic block 4 from 15 to 16 -- before reload
;;   ======================================================

;;	  0-->    15 cc=cmp(r139,0xfffffffffffffffe)   :cortex_a8_default
;;	  2-->    16 pc={(gtu(cc,0x0))?L29:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 15
;;   new tail = 16

;;   ======================================================
;;   -- basic block 5 from 24 to 24 -- before reload
;;   ======================================================

;;	  0-->    24 r133=0xfffffffffffffffb           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 24
;;   new tail = 24

;;   ======================================================
;;   -- basic block 6 from 37 to 43 -- before reload
;;   ======================================================

;;	  0-->    37 r0=r133                           :cortex_a8_default
;;	  0-->    43 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 37
;;   new tail = 43

;;   ======================================================
;;   -- basic block 7 from 54 to 56 -- before reload
;;   ======================================================

;;	  0-->    55 [r134+0x4]=r140                   :cortex_a8_load_store_1
;;	  0-->    32 r133=0x0                          :cortex_a8_default
;;	  1-->    54 [r134]=r139                       :cortex_a8_load_store_1
;;	  1-->    56 pc=L33                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 54
;;   new tail = 56


;; Procedure interblock/speculative motions == 0/0 




dma_set_mask

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d,1u} r3={1d,1u} r11={1d,7u} r12={1d} r13={1d,7u} r14={1d,1u} r24={3d,3u} r25={1d,7u} r26={1d,6u} r133={2d,1u} r134={1d,3u} r139={1d,2u} r140={1d,2u} 
;;    total ref usage 63{19d,44u,0e} in 16{16 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 134 139 140
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 134 139 140
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 7 2 NOTE_INSN_FUNCTION_BEG)

(insn 7 4 52 2 arch/arm/mm/dma-mapping.c:687 (set (reg/f:SI 134 [ D.24963 ])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ dev ])
                (const_int 276 [0x114])) [0 <variable>.dma_mask+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dev ])
        (nil)))

(insn 52 7 53 2 arch/arm/mm/dma-mapping.c:686 (set (reg:SI 139 [ dma_mask ])
        (reg:SI 2 r2 [ dma_mask ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dma_mask ])
        (nil)))

(insn 53 52 8 2 arch/arm/mm/dma-mapping.c:686 (set (reg:SI 140 [ dma_mask+4 ])
        (reg:SI 3 r3 [ dma_mask+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dma_mask+4 ])
        (nil)))

(insn 8 53 9 2 arch/arm/mm/dma-mapping.c:687 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 134 [ D.24963 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 9 8 10 2 arch/arm/mm/dma-mapping.c:687 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8090 [0x1f9a])
            (nil))))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140


;; Succ edge  5 [80.9%] 
;; Succ edge  3 [19.1%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u10(11){ }u11(13){ }u12(25){ }u13(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [19.1%]  (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 11 10 12 3 arch/arm/mm/dma-mapping.c:679 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 140 [ dma_mask+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 12 11 46 3 arch/arm/mm/dma-mapping.c:679 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 7 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140


;; Succ edge  7 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u16(11){ }u17(13){ }u18(25){ }u19(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 46 12 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 15 46 16 4 arch/arm/mm/dma-mapping.c:679 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 139 [ dma_mask ])
            (const_int -2 [0xfffffffffffffffe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 16 15 22 4 arch/arm/mm/dma-mapping.c:679 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 7 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140


;; Succ edge  7 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u22(11){ }u23(13){ }u24(25){ }u25(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
;; Pred edge  2 [80.9%] 
(code_label 22 16 23 5 7 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 33 5 arch/arm/mm/dma-mapping.c:688 (set (reg:SI 133 [ D.24966 ])
        (const_int -5 [0xfffffffffffffffb])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u26(11){ }u27(13){ }u28(25){ }u29(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  7 [100.0%] 
(code_label 33 24 25 6 10 "" [1 uses])

(note 25 33 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 37 25 43 6 arch/arm/mm/dma-mapping.c:695 (set (reg/i:SI 0 r0)
        (reg:SI 133 [ D.24966 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.24966 ])
        (nil)))

(insn 43 37 29 6 arch/arm/mm/dma-mapping.c:695 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u32(11){ }u33(13){ }u34(25){ }u35(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 139 140
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 139 140
;; live  gen 	 133
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [50.0%] 
(code_label 29 43 30 7 8 "" [2 uses])

(note 30 29 55 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 55 30 32 7 arch/arm/mm/dma-mapping.c:691 (set (mem:SI (plus:SI (reg/f:SI 134 [ D.24963 ])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 140 [ dma_mask+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 140 [ dma_mask+4 ])
        (expr_list:REG_DEAD (reg/f:SI 134 [ D.24963 ])
            (nil))))

(insn 32 55 54 7 arch/arm/mm/dma-mapping.c:694 (set (reg:SI 133 [ D.24966 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 54 32 56 7 arch/arm/mm/dma-mapping.c:691 (set (mem:SI (reg/f:SI 134 [ D.24963 ]) [0 S4 A64])
        (reg:SI 139 [ dma_mask ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139 [ dma_mask ])
        (nil)))

(jump_insn 56 54 57 7 arch/arm/mm/dma-mapping.c:694 (set (pc)
        (label_ref 33)) 242 {*arm_jump} (nil))
;; End of basic block 7 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133


;; Succ edge  6 [100.0%] 

(barrier 57 56 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_debug_do_init (dma_debug_do_init)[0:1295] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 9 to 15 -- before reload
;;   ======================================================

;;	  0-->     9 r0=0x0                            :cortex_a8_default
;;	  0-->    15 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 9
;;   new tail = 15


;; Procedure interblock/speculative motions == 0/0 




dma_debug_do_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r11={1d,2u} r12={1d} r13={1d,2u} r14={1d,1u} r25={1d,2u} r26={1d,1u} 
;;    total ref usage 21{11d,10u,0e} in 2{2 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(note 5 2 9 2 NOTE_INSN_DELETED)

(insn 9 5 15 2 arch/arm/mm/dma-mapping.c:704 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 15 9 19 2 arch/arm/mm/dma-mapping.c:704 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 19 15 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function consistent_init (consistent_init)[0:1274] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 26 (  1.9)


consistent_init

Dataflow summary:
def_info->table_size = 518, use_info->table_size = 115
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,7u} r1={9d,4u} r2={5d} r3={5d} r11={1d,13u} r12={5d} r13={1d,17u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={10d,6u} r25={1d,13u} r26={1d,12u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r166={2d,2u} r167={2d,5u} r168={1d,1u} r170={1d,1u} r171={3d,1u} r175={1d,5u} r177={1d,5u} r180={1d,1u} r182={1d,1u} r183={2d,2u} r184={1d,1u} r186={1d,2u} r188={1d,2u} r195={1d,1u} r198={1d,1u} 
;;    total ref usage 617{513d,104u,0e} in 47{43 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d9(0){ }d18(1){ }d23(2){ }d28(3){ }d29(11){ }d34(12){ }d35(13){ }d40(14){ }d87(25){ }d88(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 0 )->[2]->( 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 166 167 195 198
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 166 167 195 198
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198

( 2 11 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u4(11){ }u5(13){ }u6(25){ }u7(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 195
;; lr  def 	 24 [cc] 170 175 177
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
;; live  gen 	 24 [cc] 170 175 177
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198

( 3 )->[4]->( 13 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u15(11){ }u16(13){ }u17(25){ }u18(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 171
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171

( 3 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u22(11){ }u23(13){ }u24(25){ }u25(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177
;; lr  def 	 24 [cc] 180
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  gen 	 24 [cc] 180
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u29(11){ }u30(13){ }u31(25){ }u32(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198

( 5 6 )->[7]->( 9 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177
;; lr  def 	 24 [cc] 182
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  gen 	 24 [cc] 182
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198

( 7 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u43(11){ }u44(13){ }u45(25){ }u46(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 170
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 175 177 195 198

( 7 8 )->[9]->( 10 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u55(11){ }u56(13){ }u57(25){ }u58(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 175 177
;; lr  def 	 24 [cc] 168 183 184 186 188
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 175 177 195 198
;; live  gen 	 24 [cc] 168 183 184 186 188
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 168 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 168 195 198

( 9 8 )->[10]->( 13 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u73(11){ }u74(13){ }u75(25){ }u76(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 171
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171

( 9 )->[11]->( 3 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u80(11){ }u81(13){ }u82(25){ }u83(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 168 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 168 198
;; lr  def 	 24 [cc] 166 167
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 168 195 198
;; live  gen 	 24 [cc] 166 167
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198

( 11 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 171
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 171
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171

( 4 12 10 )->[13]->( 1 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u95(11){ }u96(13){ }u97(25){ }u98(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]

( 13 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u101(0){ }u102(11){ }u103(13){ }u104(14){ }u105(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 47 to worklist
  Adding insn 137 to worklist
  Adding insn 53 to worklist
  Adding insn 62 to worklist
  Adding insn 67 to worklist
  Adding insn 72 to worklist
  Adding insn 79 to worklist
  Adding insn 76 to worklist
  Adding insn 92 to worklist
  Adding insn 139 to worklist
  Adding insn 99 to worklist
  Adding insn 111 to worklist
  Adding insn 106 to worklist
  Adding insn 126 to worklist
Finished finding needed instructions:
processing block 13 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 120 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
  Adding insn 54 to worklist
  Adding insn 52 to worklist
  Adding insn 51 to worklist
processing block 10 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
  Adding insn 100 to worklist
  Adding insn 98 to worklist
  Adding insn 97 to worklist
processing block 12 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
  Adding insn 113 to worklist
processing block 11 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
  Adding insn 110 to worklist
  Adding insn 108 to worklist
  Adding insn 107 to worklist
processing block 9 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 168 195 198
  Adding insn 91 to worklist
  Adding insn 88 to worklist
  Adding insn 85 to worklist
  Adding insn 142 to worklist
  Adding insn 141 to worklist
  Adding insn 82 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 175 177 195 198
  Adding insn 78 to worklist
  Adding insn 75 to worklist
  Adding insn 74 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
  Adding insn 71 to worklist
  Adding insn 70 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
  Adding insn 135 to worklist
  Adding insn 134 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
  Adding insn 61 to worklist
  Adding insn 60 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
  Adding insn 46 to worklist
  Adding insn 44 to worklist
  Adding insn 42 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
  Adding insn 105 to worklist
  Adding insn 41 to worklist
  Adding insn 39 to worklist
  Adding insn 38 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 19 count 36 (  2.6)
;;   ======================================================
;;   -- basic block 3 from 42 to 47 -- before reload
;;   ======================================================

;;	  0-->    44 r177=[r195+0x24]                  :cortex_a8_load_store_1
;;	  0-->    42 r175=r167 0>>0x15                 :cortex_a8_default
;;	  3-->    46 {cc=cmp(r175*0x8+r177,0x0);r170=r1:cortex_a8_default
;;	  5-->    47 pc={(cc!=0x0)?L57:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 42
;;   new tail = 47

;;   ======================================================
;;   -- basic block 5 from 60 to 62 -- before reload
;;   ======================================================

;;	  0-->    60 r180=[r175*0x8+r177]              :cortex_a8_load_store_1
;;	  2-->    61 cc=cmp(r180,0x0)                  :cortex_a8_default
;;	  4-->    62 pc={(cc==0x0)?L68:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 60
;;   new tail = 62

;;   ======================================================
;;   -- basic block 6 from 134 to 67 -- before reload
;;   ======================================================

;;	  0-->   134 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  0-->   135 r1=0xb0                           :cortex_a8_default
;;	  1-->    67 call [`warn_slowpath_null']       :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 134
;;   new tail = 67

;;   ======================================================
;;   -- basic block 7 from 70 to 72 -- before reload
;;   ======================================================

;;	  0-->    70 r182=[r175*0x8+r177]              :cortex_a8_load_store_1
;;	  2-->    71 cc=cmp(r182,0x0)                  :cortex_a8_default
;;	  4-->    72 pc={(cc!=0x0)?L80:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 70
;;   new tail = 72

;;   ======================================================
;;   -- basic block 8 from 74 to 79 -- before reload
;;   ======================================================

;;	  0-->    74 r0=r170                           :cortex_a8_default
;;	  0-->    75 r1=r167                           :cortex_a8_default
;;	  1-->    76 r0=call [`__pte_alloc_kernel']    :cortex_a8_issue_branch
;;	 33-->    78 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->    79 pc={(cc!=0x0)?L93:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 74
;;   new tail = 79

;;   ======================================================
;;   -- basic block 9 from 82 to 92 -- before reload
;;   ======================================================

;;	  0-->    82 r184=[r175*0x8+r177]              :cortex_a8_load_store_1
;;	  0-->    88 r188=zxt(r167,0x9,0xc)            :cortex_a8_default
changing bb of uid 107
  from 11 to 9
;;	  1-->   107 r167=r167+0x200000                :cortex_a8_default
;;	  2-->   141 r183=r184&0xfffffffffffff00f      :cortex_a8_default
;;	  3-->   142 r183=r183&0xfffffffffffffff0      :cortex_a8_default
;;	  4-->    85 r186=r183-0x40000000              :cortex_a8_default
;;	  6-->    91 {cc=cmp(r188*0x4+r186,0x0);r168=r1:cortex_a8_default
;;	  8-->    92 pc={(cc!=0x0)?L103:pc}            :cortex_a8_branch
;;	Ready list (final):    110/b6
;;   total time = 8
;;   new head = 82
;;   new tail = 92

;;   ======================================================
;;   -- basic block 11 from 106 to 111 -- before reload
;;   ======================================================

;;	  0-->   110 cc=cmp(r167,0xffffffffffe00000)   :cortex_a8_default
;;	  0-->   106 [r198+r166]=r168                  :cortex_a8_load_store_1
;;	  1-->   108 r166=r166+0x4                     :cortex_a8_default
;;	  2-->   111 pc={(cc!=0x0)?L109:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 106
;;   new tail = 111

;;   ======================================================
;;   -- basic block 2 from 38 to 105 -- before reload
;;   ======================================================

;;	  0-->    41 r195=`init_mm'                    :cortex_a8_load_store_1
;;	  0-->    38 r166=0x0                          :cortex_a8_default
;;	  1-->   105 r198=`*.LANCHOR1'                 :cortex_a8_load_store_1
;;	  1-->    39 r167=0xffffffffff000000           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 38
;;   new tail = 105

;;   ======================================================
;;   -- basic block 4 from 51 to 137 -- before reload
;;   ======================================================

;;	  0-->    51 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  1-->    52 r1=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->    53 r0=call [`printk']                :cortex_a8_issue_branch
;;	  2-->    54 r171=0xfffffffffffffff4           :cortex_a8_default
;;	  3-->   137 pc=L114                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 51
;;   new tail = 137

;;   ======================================================
;;   -- basic block 10 from 97 to 139 -- before reload
;;   ======================================================

;;	  0-->    97 r0=`*.LC2'                        :cortex_a8_load_store_1
;;	  1-->    98 r1=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->    99 r0=call [`printk']                :cortex_a8_issue_branch
;;	  2-->   100 r171=0xfffffffffffffff4           :cortex_a8_default
;;	  3-->   139 pc=L114                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 97
;;   new tail = 139

;;   ======================================================
;;   -- basic block 12 from 113 to 113 -- before reload
;;   ======================================================

;;	  0-->   113 r171=0x0                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 113
;;   new tail = 113

;;   ======================================================
;;   -- basic block 13 from 120 to 126 -- before reload
;;   ======================================================

;;	  0-->   120 r0=r171                           :cortex_a8_default
;;	  0-->   126 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 120
;;   new tail = 126


;; Procedure interblock/speculative motions == 1/1 




consistent_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,7u} r1={9d,4u} r2={5d} r3={5d} r11={1d,13u} r12={5d} r13={1d,17u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={10d,6u} r25={1d,13u} r26={1d,12u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r166={2d,2u} r167={2d,5u} r168={1d,1u} r170={1d,1u} r171={3d,1u} r175={1d,5u} r177={1d,5u} r180={1d,1u} r182={1d,1u} r183={2d,2u} r184={1d,1u} r186={1d,2u} r188={1d,2u} r195={1d,1u} r198={1d,1u} 
;;    total ref usage 617{513d,104u,0e} in 47{43 regular + 4 call} insns.
(note 34 0 36 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 166 167 195 198
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 166 167 195 198
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 36 34 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 35 36 41 2 NOTE_INSN_FUNCTION_BEG)

(insn 41 35 38 2 arch/arm/mm/dma-mapping.c:161 (set (reg/f:SI 195)
        (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x113e8c00 init_mm>)) 167 {*arm_movsi_insn} (nil))

(insn 38 41 105 2 arch/arm/mm/dma-mapping.c:151 (set (reg:SI 166 [ ivtmp.521 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 105 38 39 2 arch/arm/mm/dma-mapping.c:185 (set (reg/f:SI 198)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 39 105 109 2 arch/arm/mm/dma-mapping.c:158 (set (reg/v:SI 167 [ base ])
        (const_int -16777216 [0xffffffffff000000])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 11) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u4(11){ }u5(13){ }u6(25){ }u7(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 195
;; lr  def 	 24 [cc] 170 175 177
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
;; live  gen 	 24 [cc] 170 175 177
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  11 [85.7%]  (dfs_back)
(code_label 109 39 40 3 21 "" [1 uses])

(note 40 109 43 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 43 40 45 3 NOTE_INSN_DELETED)

(note 45 43 44 3 NOTE_INSN_DELETED)

(insn 44 45 42 3 arch/arm/mm/dma-mapping.c:161 (set (reg/f:SI 177 [ init_mm.pgd ])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 195)
                (const_int 36 [0x24])) [0 init_mm.pgd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x113e8c00 init_mm>)
                    (const_int 36 [0x24]))) [0 init_mm.pgd+0 S4 A32])
        (nil)))

(insn 42 44 46 3 arch/arm/mm/dma-mapping.c:161 (set (reg:SI 175)
        (lshiftrt:SI (reg/v:SI 167 [ base ])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn 46 42 47 3 arch/arm/mm/dma-mapping.c:164 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (mult:SI (reg:SI 175)
                            (const_int 8 [0x8]))
                        (reg/f:SI 177 [ init_mm.pgd ]))
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 170 [ pgd ])
                (plus:SI (mult:SI (reg:SI 175)
                        (const_int 8 [0x8]))
                    (reg/f:SI 177 [ init_mm.pgd ])))
        ]) 271 {*arith_shiftsi_compare0} (nil))

(jump_insn 47 46 48 3 arch/arm/mm/dma-mapping.c:164 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 57)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198


;; Succ edge  4 [0.0%]  (fallthru,loop_exit)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u15(11){ }u16(13){ }u17(25){ }u18(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 171
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru,loop_exit)
(note 48 47 51 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 51 48 52 4 arch/arm/mm/dma-mapping.c:165 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114c1c90>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114c1c90>)
        (nil)))

(insn 52 51 53 4 arch/arm/mm/dma-mapping.c:165 (set (reg:SI 1 r1)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 53 52 54 4 arch/arm/mm/dma-mapping.c:165 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 54 53 137 4 arch/arm/mm/dma-mapping.c:166 (set (reg/v:SI 171 [ ret ])
        (const_int -12 [0xfffffffffffffff4])) 167 {*arm_movsi_insn} (nil))

(jump_insn 137 54 138 4 arch/arm/mm/dma-mapping.c:167 (set (pc)
        (label_ref 114)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171


;; Succ edge  13 [100.0%] 

(barrier 138 137 57)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u22(11){ }u23(13){ }u24(25){ }u25(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177
;; lr  def 	 24 [cc] 180
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  gen 	 24 [cc] 180
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 57 138 58 5 15 "" [1 uses])

(note 58 57 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 60 58 61 5 arch/arm/mm/dma-mapping.c:176 (set (reg:SI 180)
        (mem:SI (plus:SI (mult:SI (reg:SI 175)
                    (const_int 8 [0x8]))
                (reg/f:SI 177 [ init_mm.pgd ])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 61 60 62 5 arch/arm/mm/dma-mapping.c:176 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 180)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 180)
        (nil)))

(jump_insn 62 61 63 5 arch/arm/mm/dma-mapping.c:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u29(11){ }u30(13){ }u31(25){ }u32(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 63 62 134 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 134 63 135 6 arch/arm/mm/dma-mapping.c:176 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (nil))

(insn 135 134 67 6 arch/arm/mm/dma-mapping.c:176 discrim 1 (set (reg:SI 1 r1)
        (const_int 176 [0xb0])) 167 {*arm_movsi_insn} (nil))

(call_insn 67 135 68 6 arch/arm/mm/dma-mapping.c:176 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a67280 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 175 177
;; lr  def 	 24 [cc] 182
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  gen 	 24 [cc] 182
;; live  kill	

;; Pred edge  5 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 68 67 69 7 17 "" [1 uses])

(note 69 68 70 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 71 7 arch/arm/mm/dma-mapping.c:178 (set (reg:SI 182)
        (mem:SI (plus:SI (mult:SI (reg:SI 175)
                    (const_int 8 [0x8]))
                (reg/f:SI 177 [ init_mm.pgd ])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 71 70 72 7 arch/arm/mm/dma-mapping.c:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 182)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 182)
        (nil)))

(jump_insn 72 71 73 7 arch/arm/mm/dma-mapping.c:178 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198


;; Succ edge  9 [100.0%] 
;; Succ edge  8 [0.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u43(11){ }u44(13){ }u45(25){ }u46(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 170
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 170 175 177 195 198
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [0.0%]  (fallthru)
(note 73 72 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 77 73 74 8 NOTE_INSN_DELETED)

(insn 74 77 75 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 170 [ pgd ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 170 [ pgd ])
        (nil)))

(insn 75 74 76 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (reg:SI 1 r1)
        (reg/v:SI 167 [ base ])) 167 {*arm_movsi_insn} (nil))

(call_insn 76 75 78 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__pte_alloc_kernel") [flags 0x41] <function_decl 0x10f97d80 __pte_alloc_kernel>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 78 76 79 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 79 78 80 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 175 177 195 198
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 175 177 195 198


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%]  (loop_exit)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u55(11){ }u56(13){ }u57(25){ }u58(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 175 177 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 167 175 177
;; lr  def 	 24 [cc] 168 183 184 186 188
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 175 177 195 198
;; live  gen 	 24 [cc] 168 183 184 186 188
;; live  kill	

;; Pred edge  7 [100.0%] 
;; Pred edge  8 [50.0%]  (fallthru)
(code_label 80 79 81 9 18 "" [1 uses])

(note 81 80 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 83 81 86 9 NOTE_INSN_DELETED)

(note 86 83 87 9 NOTE_INSN_DELETED)

(note 87 86 89 9 NOTE_INSN_DELETED)

(note 89 87 90 9 NOTE_INSN_DELETED)

(note 90 89 82 9 NOTE_INSN_DELETED)

(insn 82 90 88 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 184)
        (mem:SI (plus:SI (mult:SI (reg:SI 175)
                    (const_int 8 [0x8]))
                (reg/f:SI 177 [ init_mm.pgd ])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 177 [ init_mm.pgd ])
        (expr_list:REG_DEAD (reg:SI 175)
            (nil))))

(insn 88 82 107 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 188)
        (zero_extract:SI (reg/v:SI 167 [ base ])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (nil))

(insn 107 88 141 9 arch/arm/mm/dma-mapping.c:186 (set (reg/v:SI 167 [ base ])
        (plus:SI (reg/v:SI 167 [ base ])
            (const_int 2097152 [0x200000]))) 4 {*arm_addsi3} (nil))

(insn 141 107 142 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 183)
        (and:SI (reg:SI 184)
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 184)
        (nil)))

(insn 142 141 85 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 183)
        (and:SI (reg:SI 183)
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 85 142 91 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 186)
        (plus:SI (reg:SI 183)
            (const_int -1073741824 [0xffffffffc0000000]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 183)
        (nil)))

(insn 91 85 92 9 arch/arm/mm/dma-mapping.c:179 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (mult:SI (reg:SI 188)
                            (const_int 4 [0x4]))
                        (reg:SI 186))
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 168 [ pte ])
                (plus:SI (mult:SI (reg:SI 188)
                        (const_int 4 [0x4]))
                    (reg:SI 186)))
        ]) 271 {*arith_shiftsi_compare0} (expr_list:REG_DEAD (reg:SI 188)
        (expr_list:REG_DEAD (reg:SI 186)
            (nil))))

(jump_insn 92 91 93 9 arch/arm/mm/dma-mapping.c:179 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9998 [0x270e])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 168 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 168 195 198


;; Succ edge  10 [0.0%]  (fallthru,loop_exit)
;; Succ edge  11 [100.0%] 

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u73(11){ }u74(13){ }u75(25){ }u76(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 171
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 171
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%]  (fallthru,loop_exit)
;; Pred edge  8 [50.0%]  (loop_exit)
(code_label 93 92 94 10 19 "" [1 uses])

(note 94 93 97 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 97 94 98 10 arch/arm/mm/dma-mapping.c:180 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1152dba0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1152dba0>)
        (nil)))

(insn 98 97 99 10 arch/arm/mm/dma-mapping.c:180 (set (reg:SI 1 r1)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn 99 98 100 10 arch/arm/mm/dma-mapping.c:180 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 100 99 139 10 arch/arm/mm/dma-mapping.c:181 (set (reg/v:SI 171 [ ret ])
        (const_int -12 [0xfffffffffffffff4])) 167 {*arm_movsi_insn} (nil))

(jump_insn 139 100 140 10 arch/arm/mm/dma-mapping.c:182 (set (pc)
        (label_ref 114)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171


;; Succ edge  13 [100.0%] 

(barrier 140 139 103)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u80(11){ }u81(13){ }u82(25){ }u83(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 168 195 198
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 166 167 168 198
;; lr  def 	 24 [cc] 166 167
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 168 195 198
;; live  gen 	 24 [cc] 166 167
;; live  kill	

;; Pred edge  9 [100.0%] 
(code_label 103 140 104 11 20 "" [1 uses])

(note 104 103 110 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 110 104 106 11 arch/arm/mm/dma-mapping.c:187 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 167 [ base ])
            (const_int -2097152 [0xffffffffffe00000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 106 110 108 11 arch/arm/mm/dma-mapping.c:185 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 198)
                (reg:SI 166 [ ivtmp.521 ])) [0 consistent_pte S4 A32])
        (reg/v/f:SI 168 [ pte ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 168 [ pte ])
        (nil)))

(insn 108 106 111 11 arch/arm/mm/dma-mapping.c:186 (set (reg:SI 166 [ ivtmp.521 ])
        (plus:SI (reg:SI 166 [ ivtmp.521 ])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 111 108 112 11 arch/arm/mm/dma-mapping.c:187 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8571 [0x217b])
            (nil))))
;; End of basic block 11 -> ( 3 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 166 167 195 198


;; Succ edge  3 [85.7%]  (dfs_back)
;; Succ edge  12 [14.3%]  (fallthru,loop_exit)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 171
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 171
;; live  kill	

;; Pred edge  11 [14.3%]  (fallthru,loop_exit)
(note 112 111 113 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 113 112 114 12 arch/arm/mm/dma-mapping.c:152 (set (reg/v:SI 171 [ ret ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 4 12 10) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u95(11){ }u96(13){ }u97(25){ }u98(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 171
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 171
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 114 113 115 13 16 "" [2 uses])

(note 115 114 120 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 120 115 126 13 arch/arm/mm/dma-mapping.c:190 (set (reg/i:SI 0 r0)
        (reg/v:SI 171 [ ret ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 171 [ ret ])
        (nil)))

(insn 126 120 143 13 arch/arm/mm/dma-mapping.c:190 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 13 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 143 126 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ___dma_single_dev_to_cpu (___dma_single_dev_to_cpu)[0:1285]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 18 count 20 (  1.4)


___dma_single_dev_to_cpu

Dataflow summary:
def_info->table_size = 387, use_info->table_size = 83
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,5u} r1={7d,4u} r2={5d,2u} r3={4d} r11={1d,13u} r12={4d} r13={1d,16u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={9d,6u} r25={1d,13u} r26={1d,12u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r133={1d,2u} r134={1d,1u} r135={1d,2u} r136={1d,2u} r138={1d,5u} r139={1d,3u} r140={1d,2u} r141={1d,1u} r144={1d,1u} r146={1d,1u} r148={1d,1u} 
;;    total ref usage 478{385d,93u,0e} in 36{33 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d6(0){ }d13(1){ }d18(2){ }d22(3){ }d23(11){ }d27(12){ }d28(13){ }d32(14){ }d69(25){ }d70(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 6 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 138 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 138 139 140
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140

( 2 )->[3]->( 4 10 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u9(11){ }u10(13){ }u11(25){ }u12(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc] 136 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	 24 [cc] 136 141
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 140

( 3 )->[4]->( 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 10 )->[5]->( 6 12 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 138 139 140
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140

( 2 4 5 11 )->[6]->( )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]

( 12 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u31(11){ }u32(13){ }u33(25){ }u34(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	 24 [cc] 133 144
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139 140

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u38(11){ }u39(13){ }u40(25){ }u41(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139 140
;; live  gen 	 0 [r0] 1 [r1] 134
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140

( 8 7 13 )->[9]->( 1 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u51(11){ }u52(13){ }u53(25){ }u54(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 146
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 3 )->[10]->( 11 5 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u64(11){ }u65(13){ }u66(25){ }u67(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139
;; lr  def 	 24 [cc] 135 148
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 140
;; live  gen 	 24 [cc] 135 148
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 138 139 140

( 10 )->[11]->( 6 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 5 )->[12]->( 7 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u73(11){ }u74(13){ }u75(25){ }u76(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140

( 12 )->[13]->( 9 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140

( 9 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u79(11){ }u80(13){ }u81(14){ }u82(25){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 10 to worklist
  Adding insn 15 to worklist
  Adding insn 78 to worklist
  Adding insn 21 to worklist
  Adding insn 28 to worklist
  Adding insn 34 to worklist
  Adding insn 40 to worklist
  Adding insn 48 to worklist
  Adding insn 56 to worklist
  Adding insn 82 to worklist
  Adding insn 65 to worklist
  Adding insn 85 to worklist
Finished finding needed instructions:
processing block 6 lr out =  13 [sp] 25 [sfp] 26 [afp]
  Adding insn 27 to worklist
  Adding insn 26 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp]
processing block 11 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp]
processing block 9 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 47 to worklist
  Adding insn 46 to worklist
  Adding insn 45 to worklist
  Adding insn 43 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
  Adding insn 39 to worklist
  Adding insn 38 to worklist
  Adding insn 36 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139 140
  Adding insn 33 to worklist
  Adding insn 32 to worklist
  Adding insn 31 to worklist
processing block 13 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
processing block 12 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
  Adding insn 64 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
  Adding insn 20 to worklist
processing block 10 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 138 139 140
  Adding insn 55 to worklist
  Adding insn 54 to worklist
  Adding insn 53 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 140
  Adding insn 14 to worklist
  Adding insn 13 to worklist
  Adding insn 12 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
  Adding insn 9 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 14 n_edges 18 count 26 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 2 to 10 -- before reload
;;   ======================================================

;;	  0-->     2 r138=r0                           :cortex_a8_default
;;	  0-->     3 r139=r1                           :cortex_a8_default
;;	  1-->     9 cc=cmp(r138,0xffffffffbfffffff)   :cortex_a8_default
;;	  1-->     4 r140=r2                           :cortex_a8_default
;;	  3-->    10 pc={(leu(cc,0x0))?L22:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 2
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 12 to 15 -- before reload
;;   ======================================================

;;	  0-->    12 r141=`high_memory'                :cortex_a8_load_store_1
;;	  3-->    13 r136=[r141]                       :cortex_a8_load_store_1
;;	  5-->    14 cc=cmp(r138,r136)                 :cortex_a8_default
;;	  7-->    15 pc={(ltu(cc,0x0))?L76:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 12
;;   new tail = 15

;;   ======================================================
;;   -- basic block 4 from 78 to 78 -- before reload
;;   ======================================================

;;	  0-->    78 pc=L22                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 78
;;   new tail = 78

;;   ======================================================
;;   -- basic block 5 from 20 to 21 -- before reload
;;   ======================================================

;;	  0-->    20 cc=cmp(r135,r136)                 :cortex_a8_default
;;	  2-->    21 pc={(ltu(cc,0x0))?L61:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 20
;;   new tail = 21

;;   ======================================================
;;   -- basic block 6 from 26 to 28 -- before reload
;;   ======================================================

;;	  0-->    26 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  0-->    27 r1=0x1ce                          :cortex_a8_default
;;	  1-->    28 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 26
;;   new tail = 28

;;   ======================================================
;;   -- basic block 7 from 31 to 34 -- before reload
;;   ======================================================

;;	  0-->    31 r144=`outer_cache'                :cortex_a8_load_store_1
;;	  3-->    32 r133=[r144]                       :cortex_a8_load_store_1
;;	  5-->    33 cc=cmp(r133,0x0)                  :cortex_a8_default
;;	  7-->    34 pc={(cc==0x0)?L41:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 31
;;   new tail = 34

;;   ======================================================
;;   -- basic block 8 from 36 to 40 -- before reload
;;   ======================================================

;;	  0-->    36 r134=r138+0x40000000              :cortex_a8_default
;;	  1-->    38 r0=r134                           :cortex_a8_default
;;	  2-->    39 r1=r0+r139                        :cortex_a8_default
;;	  3-->    40 call [r133]                       :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 36
;;   new tail = 40

;;   ======================================================
;;   -- basic block 9 from 43 to 48 -- before reload
;;   ======================================================

;;	  0-->    45 r0=r138                           :cortex_a8_default
;;	  0-->    46 r1=r139                           :cortex_a8_default
;;	  1-->    47 r2=r140                           :cortex_a8_default
;;	  1-->    43 r146=`cpu_cache'                  :cortex_a8_load_store_1
;;	  2-->    48 call [[r146+0x20]]                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 43
;;   new tail = 48

;;   ======================================================
;;   -- basic block 10 from 53 to 56 -- before reload
;;   ======================================================

;;	  0-->    53 r148=r139-0x1                     :cortex_a8_default
;;	  1-->    54 r135=r138+r148                    :cortex_a8_default
;;	  2-->    55 cc=cmp(r135,0xffffffffbfffffff)   :cortex_a8_default
;;	  4-->    56 pc={(gtu(cc,0x0))?L80:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 53
;;   new tail = 56

;;   ======================================================
;;   -- basic block 11 from 82 to 82 -- before reload
;;   ======================================================

;;	  0-->    82 pc=L22                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 82
;;   new tail = 82

;;   ======================================================
;;   -- basic block 12 from 64 to 65 -- before reload
;;   ======================================================

;;	  0-->    64 cc=cmp(r140,0x1)                  :cortex_a8_default
;;	  2-->    65 pc={(cc!=0x0)?L63:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 64
;;   new tail = 65

;;   ======================================================
;;   -- basic block 13 from 85 to 85 -- before reload
;;   ======================================================

;;	  0-->    85 pc=L41                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 85
;;   new tail = 85


;; Procedure interblock/speculative motions == 0/0 




___dma_single_dev_to_cpu

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,5u} r1={7d,4u} r2={5d,2u} r3={4d} r11={1d,13u} r12={4d} r13={1d,16u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={9d,6u} r25={1d,13u} r26={1d,12u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r133={1d,2u} r134={1d,1u} r135={1d,2u} r136={1d,2u} r138={1d,5u} r139={1d,3u} r140={1d,2u} r141={1d,1u} r144={1d,1u} r146={1d,1u} r148={1d,1u} 
;;    total ref usage 478{385d,93u,0e} in 36{33 regular + 3 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 138 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 138 139 140
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 5 3 2 arch/arm/mm/dma-mapping.c:461 (set (reg/v/f:SI 138 [ kaddr ])
        (reg:SI 0 r0 [ kaddr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ kaddr ])
        (nil)))

(insn 3 2 9 2 arch/arm/mm/dma-mapping.c:461 (set (reg/v:SI 139 [ size ])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ size ])
        (nil)))

(insn 9 3 4 2 arch/arm/mm/dma-mapping.c:462 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 138 [ kaddr ])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn 4 9 10 2 arch/arm/mm/dma-mapping.c:461 (set (reg/v:SI 140 [ dir ])
        (reg:SI 2 r2 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dir ])
        (nil)))

(jump_insn 10 4 11 2 arch/arm/mm/dma-mapping.c:462 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140


;; Succ edge  6 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u9(11){ }u10(13){ }u11(25){ }u12(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc] 136 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	 24 [cc] 136 141
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (reg/f:SI 141)
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)) 167 {*arm_movsi_insn} (nil))

(insn 13 12 14 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (reg:SI 136 [ high_memory.383 ])
        (mem/f/c/i:SI (reg/f:SI 141) [0 high_memory+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 141)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>) [0 high_memory+0 S4 A32])
            (nil))))

(insn 14 13 15 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 138 [ kaddr ])
            (reg:SI 136 [ high_memory.383 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 77 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 140


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  10 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [0.0%]  (fallthru)
(note 77 15 78 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 78 77 79 4 (set (pc)
        (label_ref 22)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  6 [100.0%] 

(barrier 79 78 80)

;; Start of basic block ( 10) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 138 139 140
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%] 
(code_label 80 79 19 5 36 "" [1 uses])

(note 19 80 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 5 arch/arm/mm/dma-mapping.c:462 discrim 8 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.24740 ])
            (reg:SI 136 [ high_memory.383 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 136 [ high_memory.383 ])
        (expr_list:REG_DEAD (reg:SI 135 [ D.24740 ])
            (nil))))

(jump_insn 21 20 22 5 arch/arm/mm/dma-mapping.c:462 discrim 8 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

;; Start of basic block ( 2 4 5 11) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [0.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 22 21 23 6 28 "" [3 uses])

(note 23 22 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 23 27 6 arch/arm/mm/dma-mapping.c:462 discrim 5 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 27 26 28 6 arch/arm/mm/dma-mapping.c:462 discrim 5 (set (reg:SI 1 r1)
        (const_int 462 [0x1ce])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 462 [0x1ce])
        (nil)))

(call_insn 28 27 29 6 arch/arm/mm/dma-mapping.c:462 discrim 5 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 29 28 63)

;; Start of basic block ( 12) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u31(11){ }u32(13){ }u33(25){ }u34(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	 24 [cc] 133 144
;; live  kill	

;; Pred edge  12 [80.1%] 
(code_label 63 29 30 7 33 "" [1 uses])

(note 30 63 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 31 30 32 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 144)
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (nil))

(insn 32 31 33 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 133 [ D.25042 ])
        (mem/s/f/j/c:SI (reg/f:SI 144) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 144)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
            (nil))))

(insn 33 32 34 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 133 [ D.25042 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 34 33 35 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139 140


;; Succ edge  8 [78.3%]  (fallthru)
;; Succ edge  9 [21.6%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u38(11){ }u39(13){ }u40(25){ }u41(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138 139 140
;; live  gen 	 0 [r0] 1 [r1] 134
;; live  kill	 14 [lr]

;; Pred edge  7 [78.3%]  (fallthru)
(note 35 34 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 37 35 36 8 NOTE_INSN_DELETED)

(insn 36 37 38 8 arch/arm/mm/dma-mapping.c:467 (set (reg/v:SI 134 [ paddr ])
        (plus:SI (reg/v/f:SI 138 [ kaddr ])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 38 36 39 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 0 r0)
        (reg/v:SI 134 [ paddr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ paddr ])
        (nil)))

(insn 39 38 40 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 139 [ size ]))) 4 {*arm_addsi3} (nil))

(call_insn 40 39 41 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 133 [ D.25042 ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 133 [ D.25042 ])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 7 13) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u51(11){ }u52(13){ }u53(25){ }u54(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 146
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 146
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  7 [21.6%] 
;; Pred edge  13 [100.0%] 
(code_label 41 40 42 9 31 "" [2 uses])

(note 42 41 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 44 42 45 9 NOTE_INSN_DELETED)

(insn 45 44 46 9 arch/arm/mm/dma-mapping.c:471 (set (reg:SI 0 r0)
        (reg/v/f:SI 138 [ kaddr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 138 [ kaddr ])
        (nil)))

(insn 46 45 47 9 arch/arm/mm/dma-mapping.c:471 (set (reg:SI 1 r1)
        (reg/v:SI 139 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ size ])
        (nil)))

(insn 47 46 43 9 arch/arm/mm/dma-mapping.c:471 (set (reg:SI 2 r2)
        (reg/v:SI 140 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 140 [ dir ])
        (nil)))

(insn 43 47 48 9 arch/arm/mm/dma-mapping.c:471 (set (reg/f:SI 146)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (nil))

(call_insn 48 43 76 9 arch/arm/mm/dma-mapping.c:471 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 146)
                            (const_int 32 [0x20])) [0 cpu_cache.dma_unmap_area+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 146)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 9 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 3) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u64(11){ }u65(13){ }u66(25){ }u67(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139
;; lr  def 	 24 [cc] 135 148
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 140
;; live  gen 	 24 [cc] 135 148
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 76 48 52 10 35 "" [1 uses])

(note 52 76 53 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 53 52 54 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (reg:SI 148)
        (plus:SI (reg/v:SI 139 [ size ])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 54 53 55 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (reg:SI 135 [ D.24740 ])
        (plus:SI (reg/v/f:SI 138 [ kaddr ])
            (reg:SI 148))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 148)
        (nil)))

(insn 55 54 56 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 135 [ D.24740 ])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 56 55 81 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 10 -> ( 11 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 138 139 140


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  10 [0.0%]  (fallthru)
(note 81 56 82 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(jump_insn 82 81 83 11 (set (pc)
        (label_ref 22)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  6 [100.0%] 

(barrier 83 82 61)

;; Start of basic block ( 5) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u73(11){ }u74(13){ }u75(25){ }u76(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
(code_label 61 83 62 12 30 "" [1 uses])

(note 62 61 64 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 64 62 65 12 arch/arm/mm/dma-mapping.c:466 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ dir ])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 65 64 84 12 arch/arm/mm/dma-mapping.c:466 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
            (nil))))
;; End of basic block 12 -> ( 7 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140


;; Succ edge  7 [80.1%] 
;; Succ edge  13 [19.9%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  gen 	
;; live  kill	

;; Pred edge  12 [19.9%]  (fallthru)
(note 84 65 85 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(jump_insn 85 84 86 13 (set (pc)
        (label_ref 41)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 140


;; Succ edge  9 [100.0%] 

(barrier 86 85 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ___dma_single_cpu_to_dev (___dma_single_cpu_to_dev)[0:1284]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 26 (  1.6)


___dma_single_cpu_to_dev

Dataflow summary:
def_info->table_size = 506, use_info->table_size = 99
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,7u} r1={8d,5u} r2={5d,2u} r3={5d} r11={1d,15u} r12={5d} r13={1d,19u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={11d,7u} r25={1d,15u} r26={1d,14u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={1d,2u} r134={1d,2u} r135={1d,2u} r136={1d,2u} r137={1d,2u} r139={1d,4u} r140={1d,3u} r141={1d,1u} r142={1d,1u} r149={1d,1u} r150={1d,1u} r152={1d,2u} 
;;    total ref usage 611{503d,108u,0e} in 41{37 regular + 4 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d7(0){ }d15(1){ }d20(2){ }d25(3){ }d26(11){ }d31(12){ }d32(13){ }d37(14){ }d85(25){ }d86(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 6 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 139 140 141
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 139 140 141
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141

( 2 )->[3]->( 4 11 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u9(11){ }u10(13){ }u11(25){ }u12(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 137 142
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  gen 	 24 [cc] 137 142
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 141
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 141

( 3 )->[4]->( 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 11 )->[5]->( 6 13 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 141
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141

( 2 4 5 12 )->[6]->( )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]

( 14 )->[7]->( 8 15 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u31(11){ }u32(13){ }u33(25){ }u34(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152
;; live  gen 	 24 [cc] 134
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 140

( 7 )->[8]->( 15 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u38(11){ }u39(13){ }u40(25){ }u41(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 140
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 13 )->[9]->( 10 15 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u50(11){ }u51(13){ }u52(25){ }u53(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152
;; live  gen 	 24 [cc] 133
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140

( 9 )->[10]->( 15 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u57(11){ }u58(13){ }u59(25){ }u60(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 3 )->[11]->( 12 5 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u69(11){ }u70(13){ }u71(25){ }u72(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140
;; lr  def 	 24 [cc] 136 149
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 141
;; live  gen 	 24 [cc] 136 149
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 141
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 141

( 11 )->[12]->( 6 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 5 )->[13]->( 14 9 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u78(11){ }u79(13){ }u80(25){ }u81(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 150 152
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  gen 	 24 [cc] 135 150 152
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152

( 13 )->[14]->( 7 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152

( 8 7 9 10 )->[15]->( 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 15 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u95(11){ }u96(13){ }u97(14){ }u98(25){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 10 to worklist
  Adding insn 15 to worklist
  Adding insn 94 to worklist
  Adding insn 21 to worklist
  Adding insn 28 to worklist
  Adding insn 34 to worklist
  Adding insn 96 to worklist
  Adding insn 39 to worklist
  Adding insn 46 to worklist
  Adding insn 98 to worklist
  Adding insn 51 to worklist
  Adding insn 61 to worklist
  Adding insn 102 to worklist
  Adding insn 77 to worklist
  Adding insn 73 to worklist
  Adding insn 106 to worklist
Finished finding needed instructions:
processing block 6 lr out =  13 [sp] 25 [sfp] 26 [afp]
  Adding insn 27 to worklist
  Adding insn 26 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp]
processing block 12 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp]
processing block 15 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
processing block 8 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 38 to worklist
  Adding insn 37 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 140
  Adding insn 33 to worklist
  Adding insn 32 to worklist
processing block 14 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
processing block 10 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 50 to worklist
  Adding insn 49 to worklist
processing block 9 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 140
  Adding insn 45 to worklist
  Adding insn 44 to worklist
processing block 13 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
  Adding insn 90 to worklist
  Adding insn 76 to worklist
  Adding insn 74 to worklist
  Adding insn 68 to worklist
processing block 5 lr out =  0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
  Adding insn 20 to worklist
processing block 11 lr out =  0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 141
  Adding insn 60 to worklist
  Adding insn 59 to worklist
  Adding insn 58 to worklist
processing block 3 lr out =  0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 141
  Adding insn 14 to worklist
  Adding insn 13 to worklist
  Adding insn 12 to worklist
processing block 2 lr out =  0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
  Adding insn 9 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 21 count 30 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 2 to 10 -- before reload
;;   ======================================================

;;	  0-->     2 r139=r0                           :cortex_a8_default
;;	  0-->     3 r140=r1                           :cortex_a8_default
;;	  1-->     9 cc=cmp(r139,0xffffffffbfffffff)   :cortex_a8_default
;;	  1-->     4 r141=r2                           :cortex_a8_default
;;	  3-->    10 pc={(leu(cc,0x0))?L22:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 2
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 12 to 15 -- before reload
;;   ======================================================

;;	  0-->    12 r142=`high_memory'                :cortex_a8_load_store_1
;;	  3-->    13 r137=[r142]                       :cortex_a8_load_store_1
;;	  5-->    14 cc=cmp(r139,r137)                 :cortex_a8_default
;;	  7-->    15 pc={(ltu(cc,0x0))?L92:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 12
;;   new tail = 15

;;   ======================================================
;;   -- basic block 4 from 94 to 94 -- before reload
;;   ======================================================

;;	  0-->    94 pc=L22                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 94
;;   new tail = 94

;;   ======================================================
;;   -- basic block 5 from 20 to 21 -- before reload
;;   ======================================================

;;	  0-->    20 cc=cmp(r136,r137)                 :cortex_a8_default
;;	  2-->    21 pc={(ltu(cc,0x0))?L66:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 20
;;   new tail = 21

;;   ======================================================
;;   -- basic block 6 from 26 to 28 -- before reload
;;   ======================================================

;;	  0-->    26 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  0-->    27 r1=0x1bd                          :cortex_a8_default
;;	  1-->    28 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 26
;;   new tail = 28

;;   ======================================================
;;   -- basic block 7 from 32 to 34 -- before reload
;;   ======================================================

;;	  0-->    32 r134=[r152]                       :cortex_a8_load_store_1
;;	  2-->    33 cc=cmp(r134,0x0)                  :cortex_a8_default
;;	  4-->    34 pc={(cc==0x0)?L85:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 32
;;   new tail = 34

;;   ======================================================
;;   -- basic block 8 from 37 to 96 -- before reload
;;   ======================================================

;;	  0-->    37 r0=r135                           :cortex_a8_default
;;	  1-->    38 r1=r0+r140                        :cortex_a8_default
;;	  2-->    39 call [r134]                       :cortex_a8_issue_branch
;;	  2-->    96 pc=L85                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 37
;;   new tail = 96

;;   ======================================================
;;   -- basic block 9 from 44 to 46 -- before reload
;;   ======================================================

;;	  0-->    44 r133=[r152+0x4]                   :cortex_a8_load_store_1
;;	  2-->    45 cc=cmp(r133,0x0)                  :cortex_a8_default
;;	  4-->    46 pc={(cc==0x0)?L85:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 44
;;   new tail = 46

;;   ======================================================
;;   -- basic block 10 from 49 to 98 -- before reload
;;   ======================================================

;;	  0-->    49 r0=r135                           :cortex_a8_default
;;	  1-->    50 r1=r0+r140                        :cortex_a8_default
;;	  2-->    51 call [r133]                       :cortex_a8_issue_branch
;;	  2-->    98 pc=L85                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 49
;;   new tail = 98

;;   ======================================================
;;   -- basic block 11 from 58 to 61 -- before reload
;;   ======================================================

;;	  0-->    58 r149=r140-0x1                     :cortex_a8_default
;;	  1-->    59 r136=r139+r149                    :cortex_a8_default
;;	  2-->    60 cc=cmp(r136,0xffffffffbfffffff)   :cortex_a8_default
;;	  4-->    61 pc={(gtu(cc,0x0))?L100:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 58
;;   new tail = 61

;;   ======================================================
;;   -- basic block 12 from 102 to 102 -- before reload
;;   ======================================================

;;	  0-->   102 pc=L22                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 102
;;   new tail = 102

;;   ======================================================
;;   -- basic block 13 from 68 to 77 -- before reload
;;   ======================================================

;;	  0-->    68 r150=`cpu_cache'                  :cortex_a8_load_store_1
;;	  1-->    73 call [[r150+0x1c]]                :cortex_a8_issue_branch
;;	  1-->    76 cc=cmp(r141,0x2)                  :cortex_a8_default
;;	  2-->    74 r135=r139+0x40000000              :cortex_a8_default
;;	  2-->    90 r152=`outer_cache'                :cortex_a8_load_store_1
;;	  3-->    77 pc={(cc!=0x0)?L104:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 68
;;   new tail = 77

;;   ======================================================
;;   -- basic block 14 from 106 to 106 -- before reload
;;   ======================================================

;;	  0-->   106 pc=L75                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 106
;;   new tail = 106


;; Procedure interblock/speculative motions == 0/0 




___dma_single_cpu_to_dev

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,7u} r1={8d,5u} r2={5d,2u} r3={5d} r11={1d,15u} r12={5d} r13={1d,19u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={11d,7u} r25={1d,15u} r26={1d,14u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={1d,2u} r134={1d,2u} r135={1d,2u} r136={1d,2u} r137={1d,2u} r139={1d,4u} r140={1d,3u} r141={1d,1u} r142={1d,1u} r149={1d,1u} r150={1d,1u} r152={1d,2u} 
;;    total ref usage 611{503d,108u,0e} in 41{37 regular + 4 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 139 140 141
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 139 140 141
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 2 2 NOTE_INSN_FUNCTION_BEG)

(insn 2 5 3 2 arch/arm/mm/dma-mapping.c:442 (set (reg/v/f:SI 139 [ kaddr ])
        (reg:SI 0 r0 [ kaddr ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 9 2 arch/arm/mm/dma-mapping.c:442 (set (reg/v:SI 140 [ size ])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 9 3 4 2 arch/arm/mm/dma-mapping.c:445 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 139 [ kaddr ])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn 4 9 10 2 arch/arm/mm/dma-mapping.c:442 (set (reg/v:SI 141 [ dir ])
        (reg:SI 2 r2 [ dir ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 10 4 11 2 arch/arm/mm/dma-mapping.c:445 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141


;; Succ edge  6 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u9(11){ }u10(13){ }u11(25){ }u12(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 137 142
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  gen 	 24 [cc] 137 142
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (reg/f:SI 142)
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)) 167 {*arm_movsi_insn} (nil))

(insn 13 12 14 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (reg:SI 137 [ high_memory.377 ])
        (mem/f/c/i:SI (reg/f:SI 142) [0 high_memory+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 142)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>) [0 high_memory+0 S4 A32])
            (nil))))

(insn 14 13 15 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 139 [ kaddr ])
            (reg:SI 137 [ high_memory.377 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 93 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 11)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 141
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 141


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  11 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [0.0%]  (fallthru)
(note 93 15 94 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 94 93 95 4 (set (pc)
        (label_ref 22)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  6 [100.0%] 

(barrier 95 94 100)

;; Start of basic block ( 11) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 141
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [100.0%] 
(code_label 100 95 19 5 49 "" [1 uses])

(note 19 100 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 20 19 21 5 arch/arm/mm/dma-mapping.c:445 discrim 8 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 136 [ D.24698 ])
            (reg:SI 137 [ high_memory.377 ]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 137 [ high_memory.377 ])
        (expr_list:REG_DEAD (reg:SI 136 [ D.24698 ])
            (nil))))

(jump_insn 21 20 22 5 arch/arm/mm/dma-mapping.c:445 discrim 8 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 13)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  13 [100.0%] 

;; Start of basic block ( 2 4 5 12) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [0.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 22 21 23 6 40 "" [3 uses])

(note 23 22 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 26 23 27 6 arch/arm/mm/dma-mapping.c:445 discrim 5 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 27 26 28 6 arch/arm/mm/dma-mapping.c:445 discrim 5 (set (reg:SI 1 r1)
        (const_int 445 [0x1bd])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 445 [0x1bd])
        (nil)))

(call_insn 28 27 29 6 arch/arm/mm/dma-mapping.c:445 discrim 5 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 29 28 75)

;; Start of basic block ( 14) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u31(11){ }u32(13){ }u33(25){ }u34(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152
;; live  gen 	 24 [cc] 134
;; live  kill	

;; Pred edge  14 [100.0%] 
(code_label 75 29 30 7 45 "" [1 uses])

(note 30 75 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 32 30 33 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 134 [ D.25045 ])
        (mem/s/f/j/c:SI (reg/f:SI 152) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 152)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
            (nil))))

(insn 33 32 34 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 134 [ D.25045 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 34 33 35 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 7 -> ( 8 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 140


;; Succ edge  8 [69.8%]  (fallthru)
;; Succ edge  15 [30.2%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u38(11){ }u39(13){ }u40(25){ }u41(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 140
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  7 [69.8%]  (fallthru)
(note 35 34 36 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 36 35 37 8 NOTE_INSN_DELETED)

(insn 37 36 38 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ paddr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ paddr ])
        (nil)))

(insn 38 37 39 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 140 [ size ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 140 [ size ])
        (nil)))

(call_insn 39 38 96 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 134 [ D.25045 ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 134 [ D.25045 ])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 96 39 97 8 (set (pc)
        (label_ref 85)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  15 [100.0%] 

(barrier 97 96 104)

;; Start of basic block ( 13) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u50(11){ }u51(13){ }u52(25){ }u53(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152
;; live  gen 	 24 [cc] 133
;; live  kill	

;; Pred edge  13 [72.0%] 
(code_label 104 97 42 9 50 "" [1 uses])

(note 42 104 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 44 42 45 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg/f:SI 133 [ D.25048 ])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 152)
                (const_int 4 [0x4])) [0 outer_cache.clean_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 152)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
                        (const_int 4 [0x4]))) [0 outer_cache.clean_range+0 S4 A32])
            (nil))))

(insn 45 44 46 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 133 [ D.25048 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 46 45 47 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 9 -> ( 10 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 140
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140


;; Succ edge  10 [78.3%]  (fallthru)
;; Succ edge  15 [21.6%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u57(11){ }u58(13){ }u59(25){ }u60(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 140
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  9 [78.3%]  (fallthru)
(note 47 46 48 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 48 47 49 10 NOTE_INSN_DELETED)

(insn 49 48 50 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ paddr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ paddr ])
        (nil)))

(insn 50 49 51 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 140 [ size ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 140 [ size ])
        (nil)))

(call_insn 51 50 98 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (parallel [
            (call (mem:SI (reg/f:SI 133 [ D.25048 ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 133 [ D.25048 ])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 98 51 99 10 (set (pc)
        (label_ref 85)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  15 [100.0%] 

(barrier 99 98 92)

;; Start of basic block ( 3) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u69(11){ }u70(13){ }u71(25){ }u72(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 141
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140
;; lr  def 	 24 [cc] 136 149
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 141
;; live  gen 	 24 [cc] 136 149
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 92 99 57 11 48 "" [1 uses])

(note 57 92 58 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 58 57 59 11 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (reg:SI 149)
        (plus:SI (reg/v:SI 140 [ size ])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 59 58 60 11 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (reg:SI 136 [ D.24698 ])
        (plus:SI (reg/v/f:SI 139 [ kaddr ])
            (reg:SI 149))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 149)
        (nil)))

(insn 60 59 61 11 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 136 [ D.24698 ])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 61 60 101 11 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 11 -> ( 12 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 141
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 141


;; Succ edge  12 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [0.0%]  (fallthru)
(note 101 61 102 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(jump_insn 102 101 103 12 (set (pc)
        (label_ref 22)) 242 {*arm_jump} (nil))
;; End of basic block 12 -> ( 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  6 [100.0%] 

(barrier 103 102 66)

;; Start of basic block ( 5) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u78(11){ }u79(13){ }u80(25){ }u81(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 150 152
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140 141
;; live  gen 	 24 [cc] 135 150 152
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%] 
(code_label 66 103 67 13 42 "" [1 uses])

(note 67 66 69 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 69 67 68 13 NOTE_INSN_DELETED)

(insn 68 69 73 13 arch/arm/mm/dma-mapping.c:447 (set (reg/f:SI 150)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (nil))

(call_insn 73 68 76 13 arch/arm/mm/dma-mapping.c:447 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 150)
                            (const_int 28 [0x1c])) [0 cpu_cache.dma_map_area+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 150)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 76 73 74 13 arch/arm/mm/dma-mapping.c:450 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 141 [ dir ])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 141 [ dir ])
        (nil)))

(insn 74 76 90 13 arch/arm/mm/dma-mapping.c:449 (set (reg/v:SI 135 [ paddr ])
        (plus:SI (reg/v/f:SI 139 [ kaddr ])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v/f:SI 139 [ kaddr ])
        (nil)))

(insn 90 74 77 13 (set (reg/f:SI 152)
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (nil))

(jump_insn 77 90 105 13 arch/arm/mm/dma-mapping.c:450 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 104)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 13 -> ( 14 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152


;; Succ edge  14 [28.0%]  (fallthru)
;; Succ edge  9 [72.0%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152
;; live  gen 	
;; live  kill	

;; Pred edge  13 [28.0%]  (fallthru)
(note 105 77 106 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn 106 105 107 14 (set (pc)
        (label_ref 75)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 140 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 140 152


;; Succ edge  7 [100.0%] 

(barrier 107 106 85)

;; Start of basic block ( 8 7 9 10) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [100.0%] 
;; Pred edge  7 [30.2%] 
;; Pred edge  9 [21.6%] 
;; Pred edge  10 [100.0%] 
(code_label 85 107 88 15 47 "" [4 uses])

(note 88 85 109 15 [bb 15] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 15 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 109 88 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_cache_maint_page (dma_cache_maint_page)[0:1286]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 2 to 32 -- before reload
;;   ======================================================

;;	  0-->     6 r143=[afp+0x4]                    :cortex_a8_load_store_1
;;	  0-->     2 r139=r0                           :cortex_a8_default
;;	  1-->    16 r163=`contig_page_data'           :cortex_a8_load_store_1
;;	  1-->     3 r140=r1                           :cortex_a8_default
;;	  2-->    63 r164=`cacheid'                    :cortex_a8_load_store_1
;;	  2-->     5 r142=r3                           :cortex_a8_default
;;	  3-->    10 r137=r2                           :cortex_a8_default
;;	  3-->    14 r162=0x300                        :cortex_a8_default
;;	  4-->    32 r165=0xfff                        :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 2
;;   new tail = 32

;;   ======================================================
;;   -- basic block 3 from 12 to 21 -- before reload
;;   ======================================================

;;	  0-->    12 r145=[r139]                       :cortex_a8_load_store_1
;;	  3-->    13 r144=r145 0>>0x1e                 :cortex_a8_default
;;	  5-->    17 r134=r162*r144+r163               :cortex_a8_multiply_2
;;	 11-->    18 r150=[r134+0x2ec]                 :cortex_a8_load_store_1
;;	 13-->    19 r149=r134-r150                    :cortex_a8_default
;;	 14-->    20 cc=cmp(r149,0x300)                :cortex_a8_default
;;	 16-->    21 pc={(cc!=0x0)?L94:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 16
;;   new head = 12
;;   new tail = 21

;;   ======================================================
;;   -- basic block 4 from 23 to 25 -- before reload
;;   ======================================================

;;	  0-->    23 r151=r137+r140                    :cortex_a8_default
;;	  1-->    24 cc=cmp(r151,0x1000)               :cortex_a8_default
;;	  3-->    25 pc={(gtu(cc,0x0))?L30:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 23
;;   new tail = 25

;;   ======================================================
;;   -- basic block 5 from 27 to 119 -- before reload
;;   ======================================================

;;	  0-->    27 r136=r137                         :cortex_a8_default
;;	  0-->   119 pc=L44                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 27
;;   new tail = 119

;;   ======================================================
;;   -- basic block 6 from 33 to 34 -- before reload
;;   ======================================================

;;	  0-->    33 cc=cmp(r140,r165)                 :cortex_a8_default
;;	  2-->    34 pc={(leu(cc,0x0))?L41:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 33
;;   new tail = 34

;;   ======================================================
;;   -- basic block 7 from 36 to 40 -- before reload
;;   ======================================================

;;	  0-->    39 r155=r140<<0x14                   :cortex_a8_default
;;	  0-->    36 r153=r140 0>>0xc                  :cortex_a8_default
;;	  2-->    38 r139=r153*0x20+r139               :cortex_a8_default
;;	  2-->    40 r140=r155 0>>0x14                 :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 36
;;   new tail = 40

;;   ======================================================
;;   -- basic block 8 from 43 to 43 -- before reload
;;   ======================================================

;;	  0-->    43 r136=0x1000-r140                  :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 43
;;   new tail = 43

;;   ======================================================
;;   -- basic block 9 from 46 to 50 -- before reload
;;   ======================================================

;;	  0-->    46 r0=r139                           :cortex_a8_default
;;	  1-->    47 r0=call [`kmap_high_get']         :cortex_a8_issue_branch
;;	 33-->    49 {cc=cmp(r0,0x0);r135=r0;}         :cortex_a8_default
;;	 35-->    50 pc={(cc==0x0)?L61:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 46
;;   new tail = 50

;;   ======================================================
;;   -- basic block 10 from 53 to 121 -- before reload
;;   ======================================================

;;	  0-->    53 r0=r135+r140                      :cortex_a8_default
;;	  0-->    54 r1=r136                           :cortex_a8_default
;;	  1-->    55 r2=r142                           :cortex_a8_default
;;	  2-->    56 call [r143]                       :cortex_a8_issue_branch
;;	  2-->    57 r0=r139                           :cortex_a8_default
;;	  3-->    58 call [`kunmap_high']              :cortex_a8_issue_branch
;;	  3-->   121 pc=L79                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 53
;;   new tail = 121

;;   ======================================================
;;   -- basic block 11 from 64 to 67 -- before reload
;;   ======================================================

;;	  0-->    64 r159=[r164]                       :cortex_a8_load_store_1
;;	  2-->    66 cc=cmp(zxt(r159,0x1,0x1),0x0)     :cortex_a8_default
;;	  4-->    67 pc={(cc==0x0)?L79:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 64
;;   new tail = 67

;;   ======================================================
;;   -- basic block 12 from 69 to 78 -- before reload
;;   ======================================================

;;	  0-->    69 r0=r139                           :cortex_a8_default
;;	  1-->    70 r0=call [`__kmap_atomic']         :cortex_a8_issue_branch
;;	  1-->    71 r133=r0                           :cortex_a8_default
;;	  2-->    73 r0=r133+r140                      :cortex_a8_default
;;	  2-->    74 r1=r136                           :cortex_a8_default
;;	  3-->    75 r2=r142                           :cortex_a8_default
;;	  4-->    76 call [r143]                       :cortex_a8_issue_branch
;;	  4-->    77 r0=r133                           :cortex_a8_default
;;	  5-->    78 call [`__kunmap_atomic']          :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 69
;;   new tail = 78

;;   ======================================================
;;   -- basic block 13 from 82 to 83 -- before reload
;;   ======================================================

;;	  0-->    82 {cc=cmp(r137-r136,0x0);r137=r137-r:cortex_a8_default
;;	  2-->    83 pc={(cc==0x0)?L110:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 82
;;   new tail = 83

;;   ======================================================
;;   -- basic block 14 from 85 to 123 -- before reload
;;   ======================================================

;;	  0-->    85 r139=r139+0x20                    :cortex_a8_default
;;	  0-->   118 r140=0x0                          :cortex_a8_default
;;	  1-->   123 pc=L87                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 85
;;   new tail = 123

;;   ======================================================
;;   -- basic block 15 from 96 to 125 -- before reload
;;   ======================================================

;;	  0-->    96 r0=r139                           :cortex_a8_default
;;	  0-->   104 r136=r137                         :cortex_a8_default
;;	  1-->    97 r0=call [`page_address']          :cortex_a8_issue_branch
;;	  1-->   101 r1=r137                           :cortex_a8_default
;;	  2-->   102 r2=r142                           :cortex_a8_default
;;	 33-->   100 r0=r0+r140                        :cortex_a8_default
;;	 34-->   103 call [r143]                       :cortex_a8_issue_branch
;;	 34-->   125 pc=L79                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 34
;;   new head = 96
;;   new tail = 125


;; Procedure interblock/speculative motions == 0/0 




dma_cache_maint_page

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={17d,13u} r1={12d,4u} r2={12d,4u} r3={9d,1u} r11={1d,16u} r12={9d} r13={1d,24u} r14={9d,1u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={14d,6u} r25={1d,16u} r26={1d,16u,1d} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} r133={1d,2u} r134={1d,2u} r135={1d,1u} r136={3d,4u} r137={2d,6u} r139={3d,7u} r140={3d,8u,2d} r142={1d,3u} r143={1d,3u} r144={1d,1u} r145={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r153={1d,1u} r155={1d,1u} r159={1d,1u} r162={1d,1u} r163={1d,1u} r164={1d,1u} r165={1d,1u} 
;;    total ref usage 1146{994d,149u,3e} in 64{56 regular + 8 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 137 139 140 142 143 162 163 164 165
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 137 139 140 142 143 162 163 164 165
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 8 7 2 NOTE_INSN_DELETED)

(note 7 4 6 2 NOTE_INSN_FUNCTION_BEG)

(insn 6 7 2 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v/f:SI 143 [ op ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 op+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 op+0 S4 A32])
        (nil)))

(insn 2 6 16 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v/f:SI 139 [ page ])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ page ])
        (nil)))

(insn 16 2 3 2 include/linux/mm.h:692 (set (reg/f:SI 163)
        (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)) 167 {*arm_movsi_insn} (nil))

(insn 3 16 63 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v:SI 140 [ offset ])
        (reg:SI 1 r1 [ offset ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ offset ])
        (nil)))

(insn 63 3 5 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg/f:SI 164)
        (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x11249780 cacheid>)) 167 {*arm_movsi_insn} (nil))

(insn 5 63 10 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v:SI 142 [ dir ])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(insn 10 5 14 2 arch/arm/mm/dma-mapping.c:485 (set (reg/v:SI 137 [ left ])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ size ])
        (nil)))

(insn 14 10 32 2 include/linux/mm.h:692 (set (reg:SI 162)
        (const_int 768 [0x300])) 167 {*arm_movsi_insn} (nil))

(insn 32 14 87 2 arch/arm/mm/dma-mapping.c:492 (set (reg:SI 165)
        (const_int 4095 [0xfff])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 14) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(11){ }u12(13){ }u13(25){ }u14(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 162 163
;; lr  def 	 24 [cc] 134 144 145 149 150
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  gen 	 24 [cc] 134 144 145 149 150
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%]  (dfs_back)
(code_label 87 32 11 3 66 "" [1 uses])

(note 11 87 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 15 11 12 3 NOTE_INSN_DELETED)

(insn 12 15 13 3 include/linux/mm.h:692 (set (reg:SI 145 [ <variable>.flags ])
        (mem/s/j:SI (reg/v/f:SI 139 [ page ]) [0 <variable>.flags+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 13 12 17 3 include/linux/mm.h:692 (set (reg:SI 144)
        (lshiftrt:SI (reg:SI 145 [ <variable>.flags ])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 145 [ <variable>.flags ])
        (nil)))

(insn 17 13 18 3 include/linux/mm.h:692 (set (reg/f:SI 134 [ D.25051 ])
        (plus:SI (mult:SI (reg:SI 162)
                (reg:SI 144))
            (reg/f:SI 163))) 40 {*mulsi3addsi_v6} (expr_list:REG_DEAD (reg:SI 144)
        (nil)))

(insn 18 17 19 3 include/linux/mmzone.h:741 (set (reg/f:SI 150 [ <variable>.zone_pgdat ])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 134 [ D.25051 ])
                (const_int 748 [0x2ec])) [0 <variable>.zone_pgdat+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 19 18 20 3 include/linux/mmzone.h:741 (set (reg:SI 149)
        (minus:SI (reg/f:SI 134 [ D.25051 ])
            (reg/f:SI 150 [ <variable>.zone_pgdat ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 150 [ <variable>.zone_pgdat ])
        (expr_list:REG_DEAD (reg/f:SI 134 [ D.25051 ])
            (nil))))

(insn 20 19 21 3 include/linux/mmzone.h:741 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 149)
            (const_int 768 [0x300]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 149)
        (nil)))

(jump_insn 21 20 22 3 include/linux/mmzone.h:741 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 3 -> ( 4 15)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165


;; Succ edge  4 [28.0%]  (fallthru)
;; Succ edge  15 [72.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u28(11){ }u29(13){ }u30(25){ }u31(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 140
;; lr  def 	 24 [cc] 151
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  gen 	 24 [cc] 151
;; live  kill	

;; Pred edge  3 [28.0%]  (fallthru)
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 23 22 24 4 arch/arm/mm/dma-mapping.c:491 (set (reg:SI 151)
        (plus:SI (reg/v:SI 137 [ left ])
            (reg/v:SI 140 [ offset ]))) 4 {*arm_addsi3} (nil))

(insn 24 23 25 4 arch/arm/mm/dma-mapping.c:491 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 151)
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 151)
        (nil)))

(jump_insn 25 24 26 4 arch/arm/mm/dma-mapping.c:491 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 30)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165


;; Succ edge  6 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  gen 	 136
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 26 25 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 26 119 5 arch/arm/mm/dma-mapping.c:487 (set (reg/v:SI 136 [ len ])
        (reg/v:SI 137 [ left ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 119 27 120 5 (set (pc)
        (label_ref 44)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165


;; Succ edge  9 [100.0%] 

(barrier 120 119 30)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u41(11){ }u42(13){ }u43(25){ }u44(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140 165
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%] 
(code_label 30 120 31 6 60 "" [1 uses])

(note 31 30 33 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 33 31 34 6 arch/arm/mm/dma-mapping.c:492 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 140 [ offset ])
            (reg:SI 165))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 140 [ offset ])
            (const_int 4095 [0xfff]))
        (nil)))

(jump_insn 34 33 35 6 arch/arm/mm/dma-mapping.c:492 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u49(11){ }u50(13){ }u51(25){ }u52(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 140
;; lr  def 	 139 140 153 155
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  gen 	 139 140 153 155
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 35 34 37 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 37 35 39 7 NOTE_INSN_DELETED)

(insn 39 37 36 7 arch/arm/mm/dma-mapping.c:494 (set (reg:SI 155)
        (ashift:SI (reg/v:SI 140 [ offset ])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 140 [ offset ])
        (nil)))

(insn 36 39 38 7 arch/arm/mm/dma-mapping.c:493 (set (reg:SI 153)
        (lshiftrt:SI (reg/v:SI 140 [ offset ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 38 36 40 7 arch/arm/mm/dma-mapping.c:493 (set (reg/v/f:SI 139 [ page ])
        (plus:SI (mult:SI (reg:SI 153)
                (const_int 32 [0x20]))
            (reg/v/f:SI 139 [ page ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 153)
        (nil)))

(insn 40 38 41 7 arch/arm/mm/dma-mapping.c:494 (set (reg/v:SI 140 [ offset ])
        (lshiftrt:SI (reg:SI 155)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 155)
        (expr_list:REG_EQUAL (and:SI (reg/v:SI 140 [ offset ])
                (const_int 4095 [0xfff]))
            (nil))))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u60(11){ }u61(13){ }u62(25){ }u63(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 140
;; lr  def 	 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  gen 	 136
;; live  kill	

;; Pred edge  6 [50.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 41 40 42 8 62 "" [1 uses])

(note 42 41 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 43 42 44 8 arch/arm/mm/dma-mapping.c:496 (set (reg/v:SI 136 [ len ])
        (minus:SI (const_int 4096 [0x1000])
            (reg/v:SI 140 [ offset ]))) 28 {*arm_subsi3_insn} (nil))
;; End of basic block 8 -> ( 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165


;; Succ edge  9 [100.0%]  (fallthru)

;; Start of basic block ( 8 5) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165
;; live  gen 	 0 [r0] 24 [cc] 135
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
(code_label 44 43 45 9 61 "" [1 uses])

(note 45 44 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 48 45 46 9 NOTE_INSN_DELETED)

(insn 46 48 47 9 arch/arm/mm/dma-mapping.c:498 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ page ])) 167 {*arm_movsi_insn} (nil))

(call_insn 47 46 49 9 arch/arm/mm/dma-mapping.c:498 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmap_high_get") [flags 0x41] <function_decl 0x11268f00 kmap_high_get>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 49 47 50 9 arch/arm/mm/dma-mapping.c:499 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 135 [ vaddr ])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 50 49 51 9 arch/arm/mm/dma-mapping.c:499 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 136 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 139 140 142 143 162 163 164 165


;; Succ edge  10 [69.8%]  (fallthru)
;; Succ edge  11 [30.2%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u75(11){ }u76(13){ }u77(25){ }u78(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 139 140 142 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 139 140 142 143 162 163 164 165
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  9 [69.8%]  (fallthru)
(note 51 50 52 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 52 51 53 10 NOTE_INSN_DELETED)

(insn 53 52 54 10 arch/arm/mm/dma-mapping.c:501 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 135 [ vaddr ])
            (reg/v:SI 140 [ offset ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 140 [ offset ])
        (expr_list:REG_DEAD (reg/v/f:SI 135 [ vaddr ])
            (nil))))

(insn 54 53 55 10 arch/arm/mm/dma-mapping.c:501 (set (reg:SI 1 r1)
        (reg/v:SI 136 [ len ])) 167 {*arm_movsi_insn} (nil))

(insn 55 54 56 10 arch/arm/mm/dma-mapping.c:501 (set (reg:SI 2 r2)
        (reg/v:SI 142 [ dir ])) 167 {*arm_movsi_insn} (nil))

(call_insn 56 55 57 10 arch/arm/mm/dma-mapping.c:501 (parallel [
            (call (mem:SI (reg/v/f:SI 143 [ op ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 57 56 58 10 arch/arm/mm/dma-mapping.c:502 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ page ])) 167 {*arm_movsi_insn} (nil))

(call_insn 58 57 121 10 arch/arm/mm/dma-mapping.c:502 (parallel [
            (call (mem:SI (symbol_ref:SI ("kunmap_high") [flags 0x41] <function_decl 0x11268e80 kunmap_high>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 121 58 122 10 (set (pc)
        (label_ref 79)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137 139 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 142 143 162 163 164 165


;; Succ edge  13 [100.0%] 

(barrier 122 121 61)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u92(11){ }u93(13){ }u94(25){ }u95(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 164
;; lr  def 	 24 [cc] 159
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165
;; live  gen 	 24 [cc] 159
;; live  kill	

;; Pred edge  9 [30.2%] 
(code_label 61 122 62 11 63 "" [1 uses])

(note 62 61 65 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 65 62 64 11 NOTE_INSN_DELETED)

(insn 64 65 66 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:SI 159 [ cacheid ])
        (mem/c/i:SI (reg/f:SI 164) [0 cacheid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x11249780 cacheid>) [0 cacheid+0 S4 A32])
        (nil)))

(insn 66 64 67 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 159 [ cacheid ])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 159 [ cacheid ])
        (nil)))

(jump_insn 67 66 68 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165


;; Succ edge  12 [29.0%]  (fallthru)
;; Succ edge  13 [71.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u100(11){ }u101(13){ }u102(25){ }u103(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 140 142 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 140 142 143 162 163 164 165
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 133
;; live  kill	 14 [lr]

;; Pred edge  11 [29.0%]  (fallthru)
(note 68 67 72 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 72 68 69 12 NOTE_INSN_DELETED)

(insn 69 72 70 12 arch/arm/mm/dma-mapping.c:505 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ page ])) 167 {*arm_movsi_insn} (nil))

(call_insn 70 69 71 12 arch/arm/mm/dma-mapping.c:505 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__kmap_atomic") [flags 0x41] <function_decl 0x11273080 __kmap_atomic>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 71 70 73 12 arch/arm/mm/dma-mapping.c:505 (set (reg/v/f:SI 133 [ vaddr.608 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 73 71 74 12 arch/arm/mm/dma-mapping.c:506 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 133 [ vaddr.608 ])
            (reg/v:SI 140 [ offset ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 140 [ offset ])
        (nil)))

(insn 74 73 75 12 arch/arm/mm/dma-mapping.c:506 (set (reg:SI 1 r1)
        (reg/v:SI 136 [ len ])) 167 {*arm_movsi_insn} (nil))

(insn 75 74 76 12 arch/arm/mm/dma-mapping.c:506 (set (reg:SI 2 r2)
        (reg/v:SI 142 [ dir ])) 167 {*arm_movsi_insn} (nil))

(call_insn 76 75 77 12 arch/arm/mm/dma-mapping.c:506 (parallel [
            (call (mem:SI (reg/v/f:SI 143 [ op ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 77 76 78 12 arch/arm/mm/dma-mapping.c:507 discrim 1 (set (reg:SI 0 r0)
        (reg/v/f:SI 133 [ vaddr.608 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 133 [ vaddr.608 ])
        (nil)))

(call_insn 78 77 79 12 arch/arm/mm/dma-mapping.c:507 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__kunmap_atomic") [flags 0x41] <function_decl 0x11273100 __kunmap_atomic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137 139 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 142 143 162 163 164 165


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 10 12 15) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u121(11){ }u122(13){ }u123(25){ }u124(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137 139 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137
;; lr  def 	 24 [cc] 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 142 143 162 163 164 165
;; live  gen 	 24 [cc] 137
;; live  kill	

;; Pred edge  11 [71.0%] 
;; Pred edge  10 [100.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  15 [100.0%] 
(code_label 79 78 80 13 64 "" [3 uses])

(note 80 79 81 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 81 80 82 13 NOTE_INSN_DELETED)

(insn 82 81 83 13 arch/arm/mm/dma-mapping.c:516 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 137 [ left ])
                        (reg/v:SI 136 [ len ]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 137 [ left ])
                (minus:SI (reg/v:SI 137 [ left ])
                    (reg/v:SI 136 [ len ])))
        ]) 29 {*subsi3_compare0} (expr_list:REG_DEAD (reg/v:SI 136 [ len ])
        (nil)))

(jump_insn 83 82 84 13 arch/arm/mm/dma-mapping.c:516 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 110)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 1400 [0x578])
            (nil))))
;; End of basic block 13 -> ( 14 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 139 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 142 143 162 163 164 165


;; Succ edge  14 [86.0%]  (fallthru)
;; Succ edge  16 [14.0%]  (loop_exit)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u129(11){ }u130(13){ }u131(25){ }u132(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 139 140
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 142 143 162 163 164 165
;; live  gen 	 139 140
;; live  kill	

;; Pred edge  13 [86.0%]  (fallthru)
(note 84 83 85 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 85 84 118 14 arch/arm/mm/dma-mapping.c:514 (set (reg/v/f:SI 139 [ page ])
        (plus:SI (reg/v/f:SI 139 [ page ])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 118 85 123 14 arch/arm/mm/dma-mapping.c:513 (set (reg/v:SI 140 [ offset ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 123 118 124 14 (set (pc)
        (label_ref 87)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 3)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165


;; Succ edge  3 [100.0%]  (dfs_back)

(barrier 124 123 94)

;; Start of basic block ( 3) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u134(11){ }u135(13){ }u136(25){ }u137(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 139 140 142 143 162 163 164 165
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 136
;; live  kill	 14 [lr]

;; Pred edge  3 [72.0%] 
(code_label 94 124 95 15 59 "" [1 uses])

(note 95 94 98 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 98 95 99 15 NOTE_INSN_DELETED)

(note 99 98 96 15 NOTE_INSN_DELETED)

(insn 96 99 104 15 arch/arm/mm/dma-mapping.c:510 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ page ])) 167 {*arm_movsi_insn} (nil))

(insn 104 96 97 15 arch/arm/mm/dma-mapping.c:487 (set (reg/v:SI 136 [ len ])
        (reg/v:SI 137 [ left ])) 167 {*arm_movsi_insn} (nil))

(call_insn 97 104 101 15 arch/arm/mm/dma-mapping.c:510 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("page_address") [flags 0x41] <function_decl 0x10f7b880 page_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 101 97 102 15 arch/arm/mm/dma-mapping.c:511 (set (reg:SI 1 r1)
        (reg/v:SI 137 [ left ])) 167 {*arm_movsi_insn} (nil))

(insn 102 101 100 15 arch/arm/mm/dma-mapping.c:511 (set (reg:SI 2 r2)
        (reg/v:SI 142 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 100 102 103 15 arch/arm/mm/dma-mapping.c:511 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 140 [ offset ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 140 [ offset ])
        (nil)))

(call_insn 103 100 125 15 arch/arm/mm/dma-mapping.c:511 (parallel [
            (call (mem:SI (reg/v/f:SI 143 [ op ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 125 103 126 15 (set (pc)
        (label_ref 79)) 242 {*arm_jump} (nil))
;; End of basic block 15 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137 139 142 143 162 163 164 165
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 139 142 143 162 163 164 165


;; Succ edge  13 [100.0%] 

(barrier 126 125 110)

;; Start of basic block ( 13) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u153(11){ }u154(13){ }u155(25){ }u156(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  13 [14.0%]  (loop_exit)
(code_label 110 126 113 16 67 "" [1 uses])

(note 113 110 128 16 [bb 16] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 16 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 128 113 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ___dma_page_dev_to_cpu (___dma_page_dev_to_cpu)[0:1288]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 13 (  1.4)


___dma_page_dev_to_cpu

Dataflow summary:
def_info->table_size = 395, use_info->table_size = 87
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,5u} r1={7d,4u} r2={5d,2u} r3={5d,2u} r11={1d,8u} r12={4d} r13={1d,12u} r14={3d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={8d,4u} r25={1d,8u} r26={1d,7u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r133={1d,2u} r134={1d,1u} r135={1d,1u} r136={1d,3u} r137={1d,3u} r138={1d,3u} r139={1d,3u} r140={1d,1u} r141={1d,1u} r142={1d,1u,1d} r144={1d,1u} r147={1d,1u} r148={1d,1u} r155={1d,1u} 
;;    total ref usage 464{387d,76u,1e} in 34{31 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d6(0){ }d13(1){ }d18(2){ }d23(3){ }d24(11){ }d28(12){ }d29(13){ }d32(14){ }d69(25){ }d70(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 3 5 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 135 136 137 138 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 135 136 137 138 139 140
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 138 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 138 139

( 2 )->[3]->( 4 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(11){ }u12(13){ }u13(25){ }u14(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 138 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 138 139
;; live  gen 	 24 [cc] 133 141
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138 139

( 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u18(11){ }u19(13){ }u20(25){ }u21(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 142 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138 139
;; live  gen 	 0 [r0] 1 [r1] 134 142 144
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139

( 2 3 4 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u37(11){ }u38(13){ }u39(25){ }u40(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 147 148 155
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 147 148 155
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138

( 5 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u63(11){ }u64(13){ }u65(25){ }u66(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136

( 6 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u71(11){ }u72(13){ }u73(25){ }u74(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 6 5 )->[8]->( 1 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u79(11){ }u80(13){ }u81(25){ }u82(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 7 8 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u83(11){ }u84(13){ }u85(14){ }u86(25){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 12 to worklist
  Adding insn 17 to worklist
  Adding insn 26 to worklist
  Adding insn 47 to worklist
  Adding insn 36 to worklist
  Adding insn 31 to worklist
  Adding insn 51 to worklist
  Adding insn 55 to worklist
Finished finding needed instructions:
processing block 7 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 54 to worklist
  Adding insn 53 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
processing block 6 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
  Adding insn 50 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 138
  Adding insn 46 to worklist
  Adding insn 45 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
  Adding insn 33 to worklist
  Adding insn 32 to worklist
  Adding insn 30 to worklist
  Adding insn 29 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
  Adding insn 25 to worklist
  Adding insn 24 to worklist
  Adding insn 22 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138 139
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 14 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 138 139
  Adding insn 11 to worklist
  Adding insn 10 to worklist
  Adding insn 9 to worklist
  Adding insn 5 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 9 n_edges 12 count 16 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 2 to 12 -- before reload
;;   ======================================================

;;	  0-->     5 r139=r3                           :cortex_a8_default
;;	  0-->     9 r140=`mem_map'                    :cortex_a8_load_store_1
;;	  1-->    11 cc=cmp(r139,0x1)                  :cortex_a8_default
;;	  1-->     2 r136=r0                           :cortex_a8_default
;;	  2-->     3 r137=r1                           :cortex_a8_default
;;	  2-->     4 r138=r2                           :cortex_a8_default
;;	  3-->    10 r135=[r140]                       :cortex_a8_load_store_1
;;	  3-->    12 pc={(cc==0x0)?L27:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 2
;;   new tail = 12

;;   ======================================================
;;   -- basic block 3 from 14 to 17 -- before reload
;;   ======================================================

;;	  0-->    14 r141=`outer_cache'                :cortex_a8_load_store_1
;;	  3-->    15 r133=[r141]                       :cortex_a8_load_store_1
;;	  5-->    16 cc=cmp(r133,0x0)                  :cortex_a8_default
;;	  7-->    17 pc={(cc==0x0)?L27:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 14
;;   new tail = 17

;;   ======================================================
;;   -- basic block 4 from 19 to 26 -- before reload
;;   ======================================================

;;	  0-->    19 r142=r136-r135                    :cortex_a8_default
;;	  2-->    20 r144=r142>>0x5                    :cortex_a8_default
;;	  4-->    22 r134=r144*0x1000+r137             :cortex_a8_default
;;	  5-->    24 r0=r134                           :cortex_a8_default
;;	  6-->    25 r1=r0+r138                        :cortex_a8_default
;;	  7-->    26 call [r133]                       :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 19
;;   new tail = 26

;;   ======================================================
;;   -- basic block 5 from 29 to 47 -- before reload
;;   ======================================================

;;	  0-->    29 r147=`cpu_cache'                  :cortex_a8_load_store_1
;;	  0-->    32 r0=r136                           :cortex_a8_default
;;	  1-->    33 r1=r137                           :cortex_a8_default
;;	  1-->    34 r2=r138                           :cortex_a8_default
;;	  2-->    35 r3=r139                           :cortex_a8_default
;;	  3-->    30 r148=[r147+0x20]                  :cortex_a8_load_store_1
;;	  6-->    31 [sp]=r148                         :cortex_a8_load_store_1
;;	  6-->    36 call [`dma_cache_maint_page']     :cortex_a8_issue_branch
;;	  7-->    45 {r155=r139!=0x1&r137==0x0;clobber :cortex_a8_default
;;	  8-->    46 cc=cmp(r155,0x0)                  :cortex_a8_default
;;	 10-->    47 pc={(cc==0x0)?L62:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 10
;;   new head = 29
;;   new tail = 47

;;   ======================================================
;;   -- basic block 6 from 50 to 51 -- before reload
;;   ======================================================

;;	  0-->    50 cc=cmp(r138,0x1000)               :cortex_a8_default
;;	  2-->    51 pc={(ltu(cc,0x0))?L62:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 50
;;   new tail = 51

;;   ======================================================
;;   -- basic block 7 from 53 to 55 -- before reload
;;   ======================================================

;;	  0-->    54 r1=r136                           :cortex_a8_default
;;	  0-->    53 r0=0x9                            :cortex_a8_default
;;	  1-->    55 call [`_set_bit']                 :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 53
;;   new tail = 55


;; Procedure interblock/speculative motions == 0/0 




___dma_page_dev_to_cpu

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,5u} r1={7d,4u} r2={5d,2u} r3={5d,2u} r11={1d,8u} r12={4d} r13={1d,12u} r14={3d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={8d,4u} r25={1d,8u} r26={1d,7u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r133={1d,2u} r134={1d,1u} r135={1d,1u} r136={1d,3u} r137={1d,3u} r138={1d,3u} r139={1d,3u} r140={1d,1u} r141={1d,1u} r142={1d,1u,1d} r144={1d,1u} r147={1d,1u} r148={1d,1u} r155={1d,1u} 
;;    total ref usage 464{387d,76u,1e} in 34{31 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 135 136 137 138 139 140
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 135 136 137 138 139 140
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 6 9 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v:SI 139 [ dir ])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(insn 9 5 11 2 arch/arm/mm/dma-mapping.c:539 (set (reg/f:SI 140)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn 11 9 2 2 arch/arm/mm/dma-mapping.c:543 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 139 [ dir ])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(insn 2 11 3 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v/f:SI 136 [ page ])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ page ])
        (nil)))

(insn 3 2 4 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v:SI 137 [ off ])
        (reg:SI 1 r1 [ off ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ off ])
        (nil)))

(insn 4 3 10 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v:SI 138 [ size ])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ size ])
        (nil)))

(insn 10 4 12 2 arch/arm/mm/dma-mapping.c:539 (set (reg/f:SI 135 [ mem_map.393 ])
        (mem/f/c/i:SI (reg/f:SI 140) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(jump_insn 12 10 13 2 arch/arm/mm/dma-mapping.c:543 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 138 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 138 139


;; Succ edge  3 [72.0%]  (fallthru)
;; Succ edge  5 [28.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(11){ }u12(13){ }u13(25){ }u14(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 138 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 133 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 137 138 139
;; live  gen 	 24 [cc] 133 141
;; live  kill	

;; Pred edge  2 [72.0%]  (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 141)
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (nil))

(insn 15 14 16 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 133 [ D.25071 ])
        (mem/s/f/j/c:SI (reg/f:SI 141) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 141)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
            (nil))))

(insn 16 15 17 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 133 [ D.25071 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138 139


;; Succ edge  4 [69.8%]  (fallthru)
;; Succ edge  5 [30.2%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u18(11){ }u19(13){ }u20(25){ }u21(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 142 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 136 137 138 139
;; live  gen 	 0 [r0] 1 [r1] 134 142 144
;; live  kill	 14 [lr]

;; Pred edge  3 [69.8%]  (fallthru)
(note 18 17 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 21 18 23 4 NOTE_INSN_DELETED)

(note 23 21 19 4 NOTE_INSN_DELETED)

(insn 19 23 20 4 arch/arm/mm/dma-mapping.c:539 (set (reg:SI 142)
        (minus:SI (reg/v/f:SI 136 [ page ])
            (reg/f:SI 135 [ mem_map.393 ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 135 [ mem_map.393 ])
        (nil)))

(insn 20 19 22 4 arch/arm/mm/dma-mapping.c:539 (set (reg:SI 144)
        (ashiftrt:SI (reg:SI 142)
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 142)
        (expr_list:REG_EQUAL (div:SI (reg:SI 142)
                (const_int 32 [0x20]))
            (nil))))

(insn 22 20 24 4 arch/arm/mm/dma-mapping.c:539 (set (reg/v:SI 134 [ paddr ])
        (plus:SI (mult:SI (reg:SI 144)
                (const_int 4096 [0x1000]))
            (reg/v:SI 137 [ off ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 144)
        (nil)))

(insn 24 22 25 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 0 r0)
        (reg/v:SI 134 [ paddr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 134 [ paddr ])
        (nil)))

(insn 25 24 26 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 138 [ size ]))) 4 {*arm_addsi3} (nil))

(call_insn 26 25 27 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 133 [ D.25071 ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 133 [ D.25071 ])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 2 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u37(11){ }u38(13){ }u39(25){ }u40(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 147 148 155
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 147 148 155
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [28.0%] 
;; Pred edge  3 [30.2%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 27 26 28 5 71 "" [2 uses])

(note 28 27 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 37 28 38 5 NOTE_INSN_DELETED)

(note 38 37 40 5 NOTE_INSN_DELETED)

(note 40 38 41 5 NOTE_INSN_DELETED)

(note 41 40 43 5 NOTE_INSN_DELETED)

(note 43 41 44 5 NOTE_INSN_DELETED)

(note 44 43 29 5 NOTE_INSN_DELETED)

(insn 29 44 32 5 arch/arm/mm/dma-mapping.c:546 (set (reg/f:SI 147)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (nil))

(insn 32 29 33 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 0 r0)
        (reg/v/f:SI 136 [ page ])) 167 {*arm_movsi_insn} (nil))

(insn 33 32 34 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 1 r1)
        (reg/v:SI 137 [ off ])) 167 {*arm_movsi_insn} (nil))

(insn 34 33 35 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 2 r2)
        (reg/v:SI 138 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 35 34 30 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 3 r3)
        (reg/v:SI 139 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 30 35 31 5 arch/arm/mm/dma-mapping.c:546 (set (reg/f:SI 148 [ cpu_cache.dma_unmap_area ])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 147)
                (const_int 32 [0x20])) [0 cpu_cache.dma_unmap_area+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 147)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
                        (const_int 32 [0x20]))) [0 cpu_cache.dma_unmap_area+0 S4 A32])
            (nil))))

(insn 31 30 36 5 arch/arm/mm/dma-mapping.c:546 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 148 [ cpu_cache.dma_unmap_area ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 148 [ cpu_cache.dma_unmap_area ])
        (nil)))

(call_insn 36 31 45 5 arch/arm/mm/dma-mapping.c:546 (parallel [
            (call (mem:SI (symbol_ref:SI ("dma_cache_maint_page") [flags 0x3] <function_decl 0x1145ee00 dma_cache_maint_page>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 45 36 46 5 arch/arm/mm/dma-mapping.c:551 (parallel [
            (set (reg:SI 155)
                (and:SI (ne:SI (reg/v:SI 139 [ dir ])
                        (const_int 1 [0x1]))
                    (eq:SI (reg/v:SI 137 [ off ])
                        (const_int 0 [0x0]))))
            (clobber (reg:CC 24 cc))
        ]) 290 {*and_scc_scc_nodom} (expr_list:REG_DEAD (reg/v:SI 139 [ dir ])
        (expr_list:REG_DEAD (reg/v:SI 137 [ off ])
            (expr_list:REG_UNUSED (reg:CC 24 cc)
                (nil)))))

(insn 46 45 47 5 arch/arm/mm/dma-mapping.c:551 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 155)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 155)
        (nil)))

(jump_insn 47 46 48 5 arch/arm/mm/dma-mapping.c:551 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138


;; Succ edge  6 [61.0%]  (fallthru)
;; Succ edge  8 [39.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u63(11){ }u64(13){ }u65(25){ }u66(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [61.0%]  (fallthru)
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 49 48 50 6 NOTE_INSN_DELETED)

(insn 50 49 51 6 arch/arm/mm/dma-mapping.c:551 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ size ])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 138 [ size ])
        (nil)))

(jump_insn 51 50 52 6 arch/arm/mm/dma-mapping.c:551 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u71(11){ }u72(13){ }u73(25){ }u74(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 52 51 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn 54 52 53 7 arch/arm/mm/dma-mapping.c:552 (set (reg:SI 1 r1)
        (reg/v/f:SI 136 [ page ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 136 [ page ])
        (nil)))

(insn 53 54 55 7 arch/arm/mm/dma-mapping.c:552 (set (reg:SI 0 r0)
        (const_int 9 [0x9])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 55 53 56 7 arch/arm/mm/dma-mapping.c:552 (parallel [
            (call (mem:SI (symbol_ref:SI ("_set_bit") [flags 0x41] <function_decl 0x109c0500 _set_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 56 55 62)

;; Start of basic block ( 6 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u79(11){ }u80(13){ }u81(25){ }u82(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [61.0%] 
;; Pred edge  5 [39.0%] 
(code_label 62 56 65 8 73 "" [2 uses])

(note 65 62 66 8 [bb 8] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 8 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 66 65 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_sync_sg_for_cpu (dma_sync_sg_for_cpu)[0:1291]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 4 to 62 -- before reload
;;   ======================================================

;;	  0-->     4 r138=r2                           :cortex_a8_default
;;	  0-->     5 r139=r3                           :cortex_a8_default
;;	  1-->     9 r135=r1                           :cortex_a8_default
;;	  1-->    10 r134=0x0                          :cortex_a8_default
;;	  2-->    14 r146=0xffffffff87654321           :cortex_a8_load_store_1
;;	  2-->    62 pc=L48                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 4
;;   new tail = 62

;;   ======================================================
;;   -- basic block 3 from 15 to 17 -- before reload
;;   ======================================================

;;	  0-->    15 r141=[r135]                       :cortex_a8_load_store_1
;;	  2-->    16 cc=cmp(r141,r146)                 :cortex_a8_default
;;	  4-->    17 pc={(cc==0x0)?L24:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 15
;;   new tail = 17

;;   ======================================================
;;   -- basic block 4 from 20 to 22 -- before reload
;;   ======================================================

;;	  0-->    20 r0=`*.LC3'                        :cortex_a8_load_store_1
;;	  0-->    21 r1=0x60                           :cortex_a8_default
;;	  1-->    22 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 20
;;   new tail = 22

;;   ======================================================
;;   -- basic block 5 from 26 to 29 -- before reload
;;   ======================================================

;;	  0-->    26 r133=[r135+0x4]                   :cortex_a8_load_store_1
;;	  2-->    28 cc=cmp(zxt(r133,0x1,0x0),0x0)     :cortex_a8_default
;;	  4-->    29 pc={(cc==0x0)?L36:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 26
;;   new tail = 29

;;   ======================================================
;;   -- basic block 6 from 32 to 34 -- before reload
;;   ======================================================

;;	  0-->    32 r0=`*.LC3'                        :cortex_a8_load_store_1
;;	  0-->    33 r1=0x61                           :cortex_a8_default
;;	  1-->    34 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 32
;;   new tail = 34

;;   ======================================================
;;   -- basic block 7 from 39 to 47 -- before reload
;;   ======================================================

;;	  0-->    39 r0=r133&0xfffffffffffffffc        :cortex_a8_default
;;	  0-->    40 r1=[r135+0x8]                     :cortex_a8_load_store_1
;;	  1-->    41 r2=[r135+0xc]                     :cortex_a8_load_store_1
;;	  1-->    42 r3=r139                           :cortex_a8_default
;;	  2-->    43 call [`___dma_page_dev_to_cpu']   :cortex_a8_issue_branch
;;	  2-->    45 r0=r135                           :cortex_a8_default
;;	  3-->    44 r134=r134+0x1                     :cortex_a8_default
;;	  3-->    46 r0=call [`sg_next']               :cortex_a8_issue_branch
;;	  4-->    47 r135=r0                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 39
;;   new tail = 47

;;   ======================================================
;;   -- basic block 8 from 51 to 52 -- before reload
;;   ======================================================

;;	  0-->    51 cc=cmp(r134,r138)                 :cortex_a8_default
;;	  2-->    52 pc={(cc<0x0)?L50:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 51
;;   new tail = 52


;; Procedure interblock/speculative motions == 0/0 




dma_sync_sg_for_cpu

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,5u} r1={8d,4u} r2={6d,2u} r3={6d,2u} r11={1d,9u} r12={5d} r13={1d,13u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={7d,3u} r25={1d,9u} r26={1d,8u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={1d,2u} r134={2d,2u} r135={2d,5u} r138={1d,1u} r139={1d,1u} r141={1d,1u,1d} r146={1d,1u} 
;;    total ref usage 569{499d,69u,1e} in 29{25 regular + 4 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 134 135 138 139 146
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 134 135 138 139 146
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 4 2 NOTE_INSN_FUNCTION_BEG)

(insn 4 6 5 2 arch/arm/mm/dma-mapping.c:628 (set (reg/v:SI 138 [ nents ])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ nents ])
        (nil)))

(insn 5 4 9 2 arch/arm/mm/dma-mapping.c:628 (set (reg/v:SI 139 [ dir ])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(insn 9 5 10 2 arch/arm/mm/dma-mapping.c:632 (set (reg/v/f:SI 135 [ s ])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ sg ])
        (nil)))

(insn 10 9 14 2 arch/arm/mm/dma-mapping.c:632 (set (reg/v:SI 134 [ i ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 14 10 62 2 include/linux/scatterlist.h:96 (set (reg:SI 146)
        (const_int -2023406815 [0xffffffff87654321])) 167 {*arm_movsi_insn} (nil))

(jump_insn 62 14 63 2 arch/arm/mm/dma-mapping.c:632 (set (pc)
        (label_ref 48)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146


;; Succ edge  8 [100.0%] 

(barrier 63 62 50)

;; Start of basic block ( 8) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  gen 	 24 [cc] 141
;; live  kill	

;; Pred edge  8 [97.0%] 
(code_label 50 63 13 3 80 "" [1 uses])

(note 13 50 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 13 16 3 include/linux/scatterlist.h:96 (set (reg:SI 141 [ <variable>.sg_magic ])
        (mem/s/j:SI (reg/v/f:SI 135 [ s ]) [0 <variable>.sg_magic+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 16 15 17 3 include/linux/scatterlist.h:96 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 141 [ <variable>.sg_magic ])
            (reg:SI 146))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 141 [ <variable>.sg_magic ])
        (expr_list:REG_EQUAL (compare:CC (reg:SI 141 [ <variable>.sg_magic ])
                (const_int -2023406815 [0xffffffff87654321]))
            (nil))))

(jump_insn 17 16 18 3 include/linux/scatterlist.h:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146


;; Succ edge  4 [0.0%]  (fallthru,loop_exit)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru,loop_exit)
(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 18 21 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 21 20 22 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 1 r1)
        (const_int 96 [0x60])) 167 {*arm_movsi_insn} (nil))

(call_insn 22 21 23 4 include/linux/scatterlist.h:96 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 23 22 24)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  gen 	 24 [cc] 133
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 24 23 25 5 78 "" [1 uses])

(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 27 25 26 5 NOTE_INSN_DELETED)

(insn 26 27 28 5 include/linux/scatterlist.h:97 (set (reg:SI 133 [ D.25085 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 135 [ s ])
                (const_int 4 [0x4])) [0 <variable>.page_link+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 28 26 29 5 include/linux/scatterlist.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 133 [ D.25085 ])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 29 28 30 5 include/linux/scatterlist.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 146


;; Succ edge  6 [0.0%]  (fallthru,loop_exit)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u32(11){ }u33(13){ }u34(25){ }u35(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru,loop_exit)
(note 30 29 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 30 33 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 33 32 34 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 1 r1)
        (const_int 97 [0x61])) 167 {*arm_movsi_insn} (nil))

(call_insn 34 33 35 6 include/linux/scatterlist.h:97 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 35 34 36)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u39(11){ }u40(13){ }u41(25){ }u42(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 146
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 134 135
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%] 
(code_label 36 35 37 7 79 "" [1 uses])

(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 38 37 39 7 NOTE_INSN_DELETED)

(insn 39 38 40 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 0 r0)
        (and:SI (reg:SI 133 [ D.25085 ])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.25085 ])
        (nil)))

(insn 40 39 41 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 135 [ s ])
                (const_int 8 [0x8])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 41 40 42 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 135 [ s ])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 41 43 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 3 r3)
        (reg/v:SI 139 [ dir ])) 167 {*arm_movsi_insn} (nil))

(call_insn 43 42 45 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_dev_to_cpu") [flags 0x3] <function_decl 0x11060f80 ___dma_page_dev_to_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 45 43 44 7 arch/arm/mm/dma-mapping.c:632 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ s ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 135 [ s ])
        (nil)))

(insn 44 45 46 7 arch/arm/mm/dma-mapping.c:632 (set (reg/v:SI 134 [ i ])
        (plus:SI (reg/v:SI 134 [ i ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(call_insn 46 44 47 7 arch/arm/mm/dma-mapping.c:632 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 47 46 48 7 arch/arm/mm/dma-mapping.c:632 (set (reg/v/f:SI 135 [ s ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146


;; Succ edge  8 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 7 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u58(11){ }u59(13){ }u60(25){ }u61(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 48 47 49 8 77 "" [1 uses])

(note 49 48 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 51 49 52 8 arch/arm/mm/dma-mapping.c:632 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 134 [ i ])
            (reg/v:SI 138 [ nents ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 52 51 60 8 arch/arm/mm/dma-mapping.c:632 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9700 [0x25e4])
            (nil))))
;; End of basic block 8 -> ( 3 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146


;; Succ edge  3 [97.0%] 
;; Succ edge  9 [3.0%]  (fallthru,loop_exit)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [3.0%]  (fallthru,loop_exit)
(note 60 52 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 9 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 65 60 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_unmap_sg (dma_unmap_sg)[0:1290]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 4 from 34 to 35 -- before reload
;;   ======================================================

changing bb of uid 25
  from 3 to 4
;;	  0-->    25 r3=r139                           :cortex_a8_default
;;	  0-->    34 cc=cmp(r133,r138)                 :cortex_a8_default
changing bb of uid 27
  from 3 to 4
;;	  1-->    27 r133=r133+0x1                     :cortex_a8_default
;;	  2-->    35 pc={(cc<0x0)?L33:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 34
;;   new tail = 35

;;   ======================================================
;;   -- basic block 3 from 14 to 30 -- before reload
;;   ======================================================

;;	  0-->    14 r135=[r134+0x10]                  :cortex_a8_load_store_1
;;	  1-->    18 r144=[r147]                       :cortex_a8_load_store_1
;;	  2-->    24 r2=[r134+0xc]                     :cortex_a8_load_store_1
;;	  3-->    20 r146=r135<<0x14                   :cortex_a8_default
;;	  3-->    16 r141=r135 0>>0xc                  :cortex_a8_default
;;	  5-->    22 r0=r141*0x20+r144                 :cortex_a8_default
;;	  5-->    23 r1=r146 0>>0x14                   :cortex_a8_default
;;	  6-->    26 call [`___dma_page_dev_to_cpu']   :cortex_a8_issue_branch
;;	  6-->    28 r0=r134                           :cortex_a8_default
;;	  7-->    29 r0=call [`sg_next']               :cortex_a8_issue_branch
;;	  7-->    30 r134=r0                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 14
;;   new tail = 30

;;   ======================================================
;;   -- basic block 2 from 4 to 45 -- before reload
;;   ======================================================

;;	  0-->     4 r138=r2                           :cortex_a8_default
;;	  0-->     5 r139=r3                           :cortex_a8_default
;;	  1-->     9 r134=r1                           :cortex_a8_default
;;	  1-->    10 r133=0x0                          :cortex_a8_default
;;	  2-->    15 r147=`mem_map'                    :cortex_a8_load_store_1
;;	  2-->    45 pc=L31                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 4
;;   new tail = 45


;; Procedure interblock/speculative motions == 2/2 




dma_unmap_sg

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,3u} r1={4d,2u} r2={4d,2u} r3={4d,2u} r11={1d,5u} r12={3d} r13={1d,7u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r25={1d,5u} r26={1d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={2d,2u} r134={2d,3u} r135={1d,2u} r138={1d,1u} r139={1d,1u} r141={1d,1u} r144={1d,1u} r146={1d,1u} r147={1d,1u} 
;;    total ref usage 306{261d,45u,0e} in 21{19 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133 134 138 139 147
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 133 134 138 139 147
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 4 2 NOTE_INSN_FUNCTION_BEG)

(insn 4 6 5 2 arch/arm/mm/dma-mapping.c:608 (set (reg/v:SI 138 [ nents ])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ nents ])
        (nil)))

(insn 5 4 9 2 arch/arm/mm/dma-mapping.c:608 (set (reg/v:SI 139 [ dir ])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(insn 9 5 10 2 arch/arm/mm/dma-mapping.c:614 (set (reg/v/f:SI 134 [ s ])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ sg ])
        (nil)))

(insn 10 9 15 2 arch/arm/mm/dma-mapping.c:614 (set (reg/v:SI 133 [ i ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 15 10 45 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 147)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (nil))

(jump_insn 45 15 46 2 arch/arm/mm/dma-mapping.c:614 (set (pc)
        (label_ref 31)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138 139 147
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138 139 147


;; Succ edge  4 [100.0%] 

(barrier 46 45 33)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 138 139 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 139 147
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 134 135 141 144 146
;; live  in  	 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 138 139 147
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 133 134 135 141 144 146
;; live  kill	 14 [lr]

;; Pred edge  4 [91.0%] 
(code_label 33 46 13 3 87 "" [1 uses])

(note 13 33 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 13 19 3 NOTE_INSN_DELETED)

(note 19 17 21 3 NOTE_INSN_DELETED)

(note 21 19 14 3 NOTE_INSN_DELETED)

(insn 14 21 18 3 arch/arm/mm/dma-mapping.c:615 (set (reg:SI 135 [ D.24893 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ s ])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 18 14 24 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 144 [ mem_map ])
        (mem/f/c/i:SI (reg/f:SI 147) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 24 18 20 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ s ])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 20 24 16 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 146)
        (ashift:SI (reg:SI 135 [ D.24893 ])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 135 [ D.24893 ])
        (nil)))

(insn 16 20 22 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 141)
        (lshiftrt:SI (reg:SI 135 [ D.24893 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 22 16 23 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 0 r0)
        (plus:SI (mult:SI (reg:SI 141)
                (const_int 32 [0x20]))
            (reg/f:SI 144 [ mem_map ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/f:SI 144 [ mem_map ])
        (expr_list:REG_DEAD (reg:SI 141)
            (nil))))

(insn 23 22 26 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg:SI 146)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 146)
        (nil)))

(call_insn 26 23 28 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_dev_to_cpu") [flags 0x3] <function_decl 0x11060f80 ___dma_page_dev_to_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 28 26 29 3 arch/arm/mm/dma-mapping.c:614 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 134 [ s ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 134 [ s ])
        (nil)))

(call_insn 29 28 30 3 arch/arm/mm/dma-mapping.c:614 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 30 29 31 3 arch/arm/mm/dma-mapping.c:614 discrim 2 (set (reg/v/f:SI 134 [ s ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138 139 147
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 138 139 147


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u35(11){ }u36(13){ }u37(25){ }u38(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138 139 147
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138 139 147
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 31 30 32 4 86 "" [1 uses])

(note 32 31 25 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 25 32 34 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 3 r3)
        (reg/v:SI 139 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 34 25 27 4 arch/arm/mm/dma-mapping.c:614 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 133 [ i ])
            (reg/v:SI 138 [ nents ]))) 219 {*arm_cmpsi_insn} (nil))

(insn 27 34 35 4 arch/arm/mm/dma-mapping.c:614 discrim 2 (set (reg/v:SI 133 [ i ])
        (plus:SI (reg/v:SI 133 [ i ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 35 27 43 4 arch/arm/mm/dma-mapping.c:614 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138 139 147
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 138 139 147


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u42(11){ }u43(13){ }u44(25){ }u45(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 43 35 47 5 [bb 5] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 5 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 47 43 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function ___dma_page_cpu_to_dev (___dma_page_cpu_to_dev)[0:1287]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 13 (  1.6)


___dma_page_cpu_to_dev

Dataflow summary:
def_info->table_size = 385, use_info->table_size = 72
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,6u} r1={6d,4u} r2={4d,2u} r3={4d,2u} r11={1d,7u} r12={4d} r13={1d,11u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r25={1d,7u} r26={1d,6u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r133={1d,2u} r134={1d,2u} r135={1d,2u} r136={1d,1u} r137={1d,1u} r138={1d,2u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u,1d} r144={1d,1u} r146={1d,1u} r152={1d,2u} 
;;    total ref usage 451{382d,68u,1e} in 29{26 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d5(0){ }d11(1){ }d15(2){ }d19(3){ }d20(11){ }d24(12){ }d25(13){ }d29(14){ }d63(25){ }d64(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 3 5 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 137 138 139 140 141 142 143 144 146 152
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 135 136 137 138 139 140 141 142 143 144 146 152
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 138 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 152

( 2 )->[3]->( 4 7 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u26(11){ }u27(13){ }u28(25){ }u29(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 138 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 152
;; live  gen 	 24 [cc] 134
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138

( 3 )->[4]->( 7 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u33(11){ }u34(13){ }u35(25){ }u36(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 2 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u45(11){ }u46(13){ }u47(25){ }u48(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 138 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 152
;; live  gen 	 24 [cc] 133
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138

( 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u52(11){ }u53(13){ }u54(25){ }u55(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 6 3 5 4 )->[7]->( 1 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u64(11){ }u65(13){ }u66(25){ }u67(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 7 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u68(11){ }u69(13){ }u70(14){ }u71(25){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 24 to worklist
  Adding insn 16 to worklist
  Adding insn 11 to worklist
  Adding insn 29 to worklist
  Adding insn 60 to worklist
  Adding insn 34 to worklist
  Adding insn 42 to worklist
  Adding insn 47 to worklist
Finished finding needed instructions:
processing block 7 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
processing block 4 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 33 to worklist
  Adding insn 32 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138
  Adding insn 28 to worklist
  Adding insn 27 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 46 to worklist
  Adding insn 45 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 138
  Adding insn 41 to worklist
  Adding insn 40 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 138 152
  Adding insn 58 to worklist
  Adding insn 23 to worklist
  Adding insn 22 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 17 to worklist
  Adding insn 10 to worklist
  Adding insn 9 to worklist
  Adding insn 5 to worklist
  Adding insn 4 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 8 n_edges 10 count 14 (  1.8)
;;   ======================================================
;;   -- basic block 2 from 2 to 24 -- before reload
;;   ======================================================

;;	  0-->     9 r140=`cpu_cache'                  :cortex_a8_load_store_1
;;	  0-->     2 r136=r0                           :cortex_a8_default
;;	  1-->     3 r137=r1                           :cortex_a8_default
;;	  1-->     5 r139=r3                           :cortex_a8_default
;;	  2-->     4 r138=r2                           :cortex_a8_default
;;	  3-->    10 r141=[r140+0x1c]                  :cortex_a8_load_store_1
;;	  6-->    11 [sp]=r141                         :cortex_a8_load_store_1
;;	  6-->    16 call [`dma_cache_maint_page']     :cortex_a8_issue_branch
;;	  7-->    17 r142=`mem_map'                    :cortex_a8_load_store_1
;;	  7-->    23 cc=cmp(r139,0x2)                  :cortex_a8_default
;;	  8-->    58 r152=`outer_cache'                :cortex_a8_load_store_1
;;	 10-->    18 r144=[r142]                       :cortex_a8_load_store_1
;;	 12-->    19 r143=r136-r144                    :cortex_a8_default
;;	 14-->    20 r146=r143>>0x5                    :cortex_a8_default
;;	 16-->    22 r135=r146*0x1000+r137             :cortex_a8_default
;;	 16-->    24 pc={(cc!=0x0)?L37:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 16
;;   new head = 2
;;   new tail = 24

;;   ======================================================
;;   -- basic block 3 from 27 to 29 -- before reload
;;   ======================================================

;;	  0-->    27 r134=[r152]                       :cortex_a8_load_store_1
;;	  2-->    28 cc=cmp(r134,0x0)                  :cortex_a8_default
;;	  4-->    29 pc={(cc==0x0)?L53:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 27
;;   new tail = 29

;;   ======================================================
;;   -- basic block 4 from 32 to 60 -- before reload
;;   ======================================================

;;	  0-->    32 r0=r135                           :cortex_a8_default
;;	  1-->    33 r1=r0+r138                        :cortex_a8_default
;;	  2-->    34 call [r134]                       :cortex_a8_issue_branch
;;	  2-->    60 pc=L53                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 32
;;   new tail = 60

;;   ======================================================
;;   -- basic block 5 from 40 to 42 -- before reload
;;   ======================================================

;;	  0-->    40 r133=[r152+0x4]                   :cortex_a8_load_store_1
;;	  2-->    41 cc=cmp(r133,0x0)                  :cortex_a8_default
;;	  4-->    42 pc={(cc==0x0)?L53:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 40
;;   new tail = 42

;;   ======================================================
;;   -- basic block 6 from 45 to 47 -- before reload
;;   ======================================================

;;	  0-->    45 r0=r135                           :cortex_a8_default
;;	  1-->    46 r1=r0+r138                        :cortex_a8_default
;;	  2-->    47 call [r133]                       :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 45
;;   new tail = 47


;; Procedure interblock/speculative motions == 0/0 




___dma_page_cpu_to_dev

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,6u} r1={6d,4u} r2={4d,2u} r3={4d,2u} r11={1d,7u} r12={4d} r13={1d,11u} r14={4d,1u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r25={1d,7u} r26={1d,6u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} r133={1d,2u} r134={1d,2u} r135={1d,2u} r136={1d,1u} r137={1d,1u} r138={1d,2u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u,1d} r144={1d,1u} r146={1d,1u} r152={1d,2u} 
;;    total ref usage 451{382d,68u,1e} in 29{26 regular + 3 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 136 137 138 139 140 141 142 143 144 146 152
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 135 136 137 138 139 140 141 142 143 144 146 152
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 21 2 NOTE_INSN_FUNCTION_BEG)

(note 21 6 9 2 NOTE_INSN_DELETED)

(insn 9 21 2 2 arch/arm/mm/dma-mapping.c:524 (set (reg/f:SI 140)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (nil))

(insn 2 9 3 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v/f:SI 136 [ page ])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 5 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v:SI 137 [ off ])
        (reg:SI 1 r1 [ off ])) 167 {*arm_movsi_insn} (nil))

(insn 5 3 4 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v:SI 139 [ dir ])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 4 5 10 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v:SI 138 [ size ])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 10 4 11 2 arch/arm/mm/dma-mapping.c:524 (set (reg/f:SI 141 [ cpu_cache.dma_map_area ])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 140)
                (const_int 28 [0x1c])) [0 cpu_cache.dma_map_area+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 140)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
                        (const_int 28 [0x1c]))) [0 cpu_cache.dma_map_area+0 S4 A32])
            (nil))))

(insn 11 10 16 2 arch/arm/mm/dma-mapping.c:524 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 141 [ cpu_cache.dma_map_area ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 141 [ cpu_cache.dma_map_area ])
        (nil)))

(call_insn 16 11 17 2 arch/arm/mm/dma-mapping.c:524 (parallel [
            (call (mem:SI (symbol_ref:SI ("dma_cache_maint_page") [flags 0x3] <function_decl 0x1145ee00 dma_cache_maint_page>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 17 16 23 2 arch/arm/mm/dma-mapping.c:526 (set (reg/f:SI 142)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn 23 17 58 2 arch/arm/mm/dma-mapping.c:527 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 139 [ dir ])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ dir ])
        (nil)))

(insn 58 23 18 2 (set (reg/f:SI 152)
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (nil))

(insn 18 58 19 2 arch/arm/mm/dma-mapping.c:526 (set (reg/f:SI 144 [ mem_map ])
        (mem/f/c/i:SI (reg/f:SI 142) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 142)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 19 18 20 2 arch/arm/mm/dma-mapping.c:526 (set (reg:SI 143)
        (minus:SI (reg/v/f:SI 136 [ page ])
            (reg/f:SI 144 [ mem_map ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 144 [ mem_map ])
        (expr_list:REG_DEAD (reg/v/f:SI 136 [ page ])
            (nil))))

(insn 20 19 22 2 arch/arm/mm/dma-mapping.c:526 (set (reg:SI 146)
        (ashiftrt:SI (reg:SI 143)
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 143)
        (expr_list:REG_EQUAL (div:SI (reg:SI 143)
                (const_int 32 [0x20]))
            (nil))))

(insn 22 20 24 2 arch/arm/mm/dma-mapping.c:526 (set (reg/v:SI 135 [ paddr ])
        (plus:SI (mult:SI (reg:SI 146)
                (const_int 4096 [0x1000]))
            (reg/v:SI 137 [ off ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 146)
        (expr_list:REG_DEAD (reg/v:SI 137 [ off ])
            (nil))))

(jump_insn 24 22 25 2 arch/arm/mm/dma-mapping.c:527 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 37)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 138 152
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 152


;; Succ edge  3 [28.0%]  (fallthru)
;; Succ edge  5 [72.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u26(11){ }u27(13){ }u28(25){ }u29(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 138 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 152
;; live  gen 	 24 [cc] 134
;; live  kill	

;; Pred edge  2 [28.0%]  (fallthru)
(note 25 24 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 27 25 28 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 134 [ D.25126 ])
        (mem/s/f/j/c:SI (reg/f:SI 152) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 152)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
            (nil))))

(insn 28 27 29 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 134 [ D.25126 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 3 -> ( 4 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138


;; Succ edge  4 [69.8%]  (fallthru)
;; Succ edge  7 [30.2%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u33(11){ }u34(13){ }u35(25){ }u36(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [69.8%]  (fallthru)
(note 30 29 31 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 31 30 32 4 NOTE_INSN_DELETED)

(insn 32 31 33 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ paddr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ paddr ])
        (nil)))

(insn 33 32 34 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 138 [ size ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 138 [ size ])
        (nil)))

(call_insn 34 33 60 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 134 [ D.25126 ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 134 [ D.25126 ])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 60 34 61 4 (set (pc)
        (label_ref 53)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  7 [100.0%] 

(barrier 61 60 37)

;; Start of basic block ( 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u45(11){ }u46(13){ }u47(25){ }u48(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 135 138 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 24 [cc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 152
;; live  gen 	 24 [cc] 133
;; live  kill	

;; Pred edge  2 [72.0%] 
(code_label 37 61 38 5 92 "" [1 uses])

(note 38 37 40 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 40 38 41 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg/f:SI 133 [ D.25129 ])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 152)
                (const_int 4 [0x4])) [0 outer_cache.clean_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 152)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
                        (const_int 4 [0x4]))) [0 outer_cache.clean_range+0 S4 A32])
            (nil))))

(insn 41 40 42 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 133 [ D.25129 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 42 41 43 5 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 135 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138


;; Succ edge  6 [78.3%]  (fallthru)
;; Succ edge  7 [21.6%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u52(11){ }u53(13){ }u54(25){ }u55(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [78.3%]  (fallthru)
(note 43 42 44 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 44 43 45 6 NOTE_INSN_DELETED)

(insn 45 44 46 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (set (reg:SI 0 r0)
        (reg/v:SI 135 [ paddr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ paddr ])
        (nil)))

(insn 46 45 47 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 138 [ size ]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 138 [ size ])
        (nil)))

(call_insn 47 46 53 6 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (parallel [
            (call (mem:SI (reg/f:SI 133 [ D.25129 ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 133 [ D.25129 ])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 6 3 5 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u64(11){ }u65(13){ }u66(25){ }u67(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  3 [30.2%] 
;; Pred edge  5 [21.6%] 
;; Pred edge  4 [100.0%] 
(code_label 53 47 56 7 94 "" [3 uses])

(note 56 53 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 7 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 62 56 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_sync_sg_for_device (dma_sync_sg_for_device)[0:1292]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 4 to 62 -- before reload
;;   ======================================================

;;	  0-->     4 r138=r2                           :cortex_a8_default
;;	  0-->     5 r139=r3                           :cortex_a8_default
;;	  1-->     9 r135=r1                           :cortex_a8_default
;;	  1-->    10 r134=0x0                          :cortex_a8_default
;;	  2-->    14 r146=0xffffffff87654321           :cortex_a8_load_store_1
;;	  2-->    62 pc=L48                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 4
;;   new tail = 62

;;   ======================================================
;;   -- basic block 3 from 15 to 17 -- before reload
;;   ======================================================

;;	  0-->    15 r141=[r135]                       :cortex_a8_load_store_1
;;	  2-->    16 cc=cmp(r141,r146)                 :cortex_a8_default
;;	  4-->    17 pc={(cc==0x0)?L24:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 15
;;   new tail = 17

;;   ======================================================
;;   -- basic block 4 from 20 to 22 -- before reload
;;   ======================================================

;;	  0-->    20 r0=`*.LC3'                        :cortex_a8_load_store_1
;;	  0-->    21 r1=0x60                           :cortex_a8_default
;;	  1-->    22 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 20
;;   new tail = 22

;;   ======================================================
;;   -- basic block 5 from 26 to 29 -- before reload
;;   ======================================================

;;	  0-->    26 r133=[r135+0x4]                   :cortex_a8_load_store_1
;;	  2-->    28 cc=cmp(zxt(r133,0x1,0x0),0x0)     :cortex_a8_default
;;	  4-->    29 pc={(cc==0x0)?L36:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 26
;;   new tail = 29

;;   ======================================================
;;   -- basic block 6 from 32 to 34 -- before reload
;;   ======================================================

;;	  0-->    32 r0=`*.LC3'                        :cortex_a8_load_store_1
;;	  0-->    33 r1=0x61                           :cortex_a8_default
;;	  1-->    34 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 32
;;   new tail = 34

;;   ======================================================
;;   -- basic block 7 from 39 to 47 -- before reload
;;   ======================================================

;;	  0-->    39 r0=r133&0xfffffffffffffffc        :cortex_a8_default
;;	  0-->    40 r1=[r135+0x8]                     :cortex_a8_load_store_1
;;	  1-->    41 r2=[r135+0xc]                     :cortex_a8_load_store_1
;;	  1-->    42 r3=r139                           :cortex_a8_default
;;	  2-->    43 call [`___dma_page_cpu_to_dev']   :cortex_a8_issue_branch
;;	  2-->    45 r0=r135                           :cortex_a8_default
;;	  3-->    44 r134=r134+0x1                     :cortex_a8_default
;;	  3-->    46 r0=call [`sg_next']               :cortex_a8_issue_branch
;;	  4-->    47 r135=r0                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 39
;;   new tail = 47

;;   ======================================================
;;   -- basic block 8 from 51 to 52 -- before reload
;;   ======================================================

;;	  0-->    51 cc=cmp(r134,r138)                 :cortex_a8_default
;;	  2-->    52 pc={(cc<0x0)?L50:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 51
;;   new tail = 52


;; Procedure interblock/speculative motions == 0/0 




dma_sync_sg_for_device

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,5u} r1={8d,4u} r2={6d,2u} r3={6d,2u} r11={1d,9u} r12={5d} r13={1d,13u} r14={5d,1u} r15={4d} r16={4d} r17={4d} r18={4d} r19={4d} r20={4d} r21={4d} r22={4d} r23={4d} r24={7d,3u} r25={1d,9u} r26={1d,8u} r27={4d} r28={4d} r29={4d} r30={4d} r31={4d} r32={4d} r33={4d} r34={4d} r35={4d} r36={4d} r37={4d} r38={4d} r39={4d} r40={4d} r41={4d} r42={4d} r43={4d} r44={4d} r45={4d} r46={4d} r47={4d} r48={4d} r49={4d} r50={4d} r51={4d} r52={4d} r53={4d} r54={4d} r55={4d} r56={4d} r57={4d} r58={4d} r59={4d} r60={4d} r61={4d} r62={4d} r63={4d} r64={4d} r65={4d} r66={4d} r67={4d} r68={4d} r69={4d} r70={4d} r71={4d} r72={4d} r73={4d} r74={4d} r75={4d} r76={4d} r77={4d} r78={4d} r79={4d} r80={4d} r81={4d} r82={4d} r83={4d} r84={4d} r85={4d} r86={4d} r87={4d} r88={4d} r89={4d} r90={4d} r91={4d} r92={4d} r93={4d} r94={4d} r95={4d} r96={4d} r97={4d} r98={4d} r99={4d} r100={4d} r101={4d} r102={4d} r103={4d} r104={4d} r105={4d} r106={4d} r107={4d} r108={4d} r109={4d} r110={4d} r111={4d} r112={4d} r113={4d} r114={4d} r115={4d} r116={4d} r117={4d} r118={4d} r119={4d} r120={4d} r121={4d} r122={4d} r123={4d} r124={4d} r125={4d} r126={4d} r127={4d} r133={1d,2u} r134={2d,2u} r135={2d,5u} r138={1d,1u} r139={1d,1u} r141={1d,1u,1d} r146={1d,1u} 
;;    total ref usage 569{499d,69u,1e} in 29{25 regular + 4 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 134 135 138 139 146
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 134 135 138 139 146
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 4 2 NOTE_INSN_FUNCTION_BEG)

(insn 4 6 5 2 arch/arm/mm/dma-mapping.c:654 (set (reg/v:SI 138 [ nents ])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ nents ])
        (nil)))

(insn 5 4 9 2 arch/arm/mm/dma-mapping.c:654 (set (reg/v:SI 139 [ dir ])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(insn 9 5 10 2 arch/arm/mm/dma-mapping.c:658 (set (reg/v/f:SI 135 [ s ])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ sg ])
        (nil)))

(insn 10 9 14 2 arch/arm/mm/dma-mapping.c:658 (set (reg/v:SI 134 [ i ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 14 10 62 2 include/linux/scatterlist.h:96 (set (reg:SI 146)
        (const_int -2023406815 [0xffffffff87654321])) 167 {*arm_movsi_insn} (nil))

(jump_insn 62 14 63 2 arch/arm/mm/dma-mapping.c:658 (set (pc)
        (label_ref 48)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146


;; Succ edge  8 [100.0%] 

(barrier 63 62 50)

;; Start of basic block ( 8) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u8(11){ }u9(13){ }u10(25){ }u11(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 146
;; lr  def 	 24 [cc] 141
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  gen 	 24 [cc] 141
;; live  kill	

;; Pred edge  8 [97.0%] 
(code_label 50 63 13 3 104 "" [1 uses])

(note 13 50 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 15 13 16 3 include/linux/scatterlist.h:96 (set (reg:SI 141 [ <variable>.sg_magic ])
        (mem/s/j:SI (reg/v/f:SI 135 [ s ]) [0 <variable>.sg_magic+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 16 15 17 3 include/linux/scatterlist.h:96 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 141 [ <variable>.sg_magic ])
            (reg:SI 146))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 141 [ <variable>.sg_magic ])
        (expr_list:REG_EQUAL (compare:CC (reg:SI 141 [ <variable>.sg_magic ])
                (const_int -2023406815 [0xffffffff87654321]))
            (nil))))

(jump_insn 17 16 18 3 include/linux/scatterlist.h:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146


;; Succ edge  4 [0.0%]  (fallthru,loop_exit)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u17(11){ }u18(13){ }u19(25){ }u20(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [0.0%]  (fallthru,loop_exit)
(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 18 21 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 21 20 22 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 1 r1)
        (const_int 96 [0x60])) 167 {*arm_movsi_insn} (nil))

(call_insn 22 21 23 4 include/linux/scatterlist.h:96 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 23 22 24)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  gen 	 24 [cc] 133
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 24 23 25 5 102 "" [1 uses])

(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 27 25 26 5 NOTE_INSN_DELETED)

(insn 26 27 28 5 include/linux/scatterlist.h:97 (set (reg:SI 133 [ D.25143 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 135 [ s ])
                (const_int 4 [0x4])) [0 <variable>.page_link+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 28 26 29 5 include/linux/scatterlist.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 133 [ D.25143 ])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 29 28 30 5 include/linux/scatterlist.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 146


;; Succ edge  6 [0.0%]  (fallthru,loop_exit)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u32(11){ }u33(13){ }u34(25){ }u35(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru,loop_exit)
(note 30 29 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 32 30 33 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 33 32 34 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 1 r1)
        (const_int 97 [0x61])) 167 {*arm_movsi_insn} (nil))

(call_insn 34 33 35 6 include/linux/scatterlist.h:97 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 35 34 36)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u39(11){ }u40(13){ }u41(25){ }u42(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 146
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 134 135
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%] 
(code_label 36 35 37 7 103 "" [1 uses])

(note 37 36 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 38 37 39 7 NOTE_INSN_DELETED)

(insn 39 38 40 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 0 r0)
        (and:SI (reg:SI 133 [ D.25143 ])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 133 [ D.25143 ])
        (nil)))

(insn 40 39 41 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 135 [ s ])
                (const_int 8 [0x8])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 41 40 42 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 135 [ s ])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 41 43 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 3 r3)
        (reg/v:SI 139 [ dir ])) 167 {*arm_movsi_insn} (nil))

(call_insn 43 42 45 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_cpu_to_dev") [flags 0x3] <function_decl 0x11060e00 ___dma_page_cpu_to_dev>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 45 43 44 7 arch/arm/mm/dma-mapping.c:658 (set (reg:SI 0 r0)
        (reg/v/f:SI 135 [ s ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 135 [ s ])
        (nil)))

(insn 44 45 46 7 arch/arm/mm/dma-mapping.c:658 (set (reg/v:SI 134 [ i ])
        (plus:SI (reg/v:SI 134 [ i ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(call_insn 46 44 47 7 arch/arm/mm/dma-mapping.c:658 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 47 46 48 7 arch/arm/mm/dma-mapping.c:658 (set (reg/v/f:SI 135 [ s ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 135 138 139 146


;; Succ edge  8 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 7 2) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u58(11){ }u59(13){ }u60(25){ }u61(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 48 47 49 8 101 "" [1 uses])

(note 49 48 51 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 51 49 52 8 arch/arm/mm/dma-mapping.c:658 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 134 [ i ])
            (reg/v:SI 138 [ nents ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 52 51 60 8 arch/arm/mm/dma-mapping.c:658 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9700 [0x25e4])
            (nil))))
;; End of basic block 8 -> ( 3 9)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 135 138 139 146


;; Succ edge  3 [97.0%] 
;; Succ edge  9 [3.0%]  (fallthru,loop_exit)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  8 [3.0%]  (fallthru,loop_exit)
(note 60 52 65 9 [bb 9] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 9 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 65 60 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_map_sg (dma_map_sg)[0:1289]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 3 to 10 -- before reload
;;   ======================================================

;;	  0-->     5 r146=r3                           :cortex_a8_default
;;	  0-->     3 r144=r1                           :cortex_a8_default
;;	  1-->     9 cc=cmp(r146,0x2)                  :cortex_a8_default
;;	  1-->     4 r145=r2                           :cortex_a8_default
;;	  3-->    10 pc={(gtu(cc,0x0))?L16:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 3
;;   new tail = 10

;;   ======================================================
;;   -- basic block 3 from 12 to 128 -- before reload
;;   ======================================================

;;	  0-->    12 r139=r144                         :cortex_a8_default
;;	  0-->    13 r138=0x0                          :cortex_a8_default
;;	  1-->    25 r169=0xffffffff87654321           :cortex_a8_load_store_1
;;	  2-->    56 r170=`mem_map'                    :cortex_a8_load_store_1
;;	  2-->   128 pc=L76                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 12
;;   new tail = 128

;;   ======================================================
;;   -- basic block 4 from 20 to 22 -- before reload
;;   ======================================================

;;	  0-->    20 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  0-->    21 r1=0x242                          :cortex_a8_default
;;	  1-->    22 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 20
;;   new tail = 22

;;   ======================================================
;;   -- basic block 5 from 26 to 28 -- before reload
;;   ======================================================

;;	  0-->    26 r150=[r139]                       :cortex_a8_load_store_1
;;	  2-->    27 cc=cmp(r150,r169)                 :cortex_a8_default
;;	  4-->    28 pc={(cc==0x0)?L35:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 26
;;   new tail = 28

;;   ======================================================
;;   -- basic block 6 from 31 to 33 -- before reload
;;   ======================================================

;;	  0-->    31 r0=`*.LC3'                        :cortex_a8_load_store_1
;;	  0-->    32 r1=0x60                           :cortex_a8_default
;;	  1-->    33 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 31
;;   new tail = 33

;;   ======================================================
;;   -- basic block 7 from 37 to 40 -- before reload
;;   ======================================================

;;	  0-->    37 r135=[r139+0x4]                   :cortex_a8_load_store_1
;;	  2-->    39 {cc=cmp(r135&0x1,0x0);r152=r135&0x:cortex_a8_default
;;	  4-->    40 pc={(cc==0x0)?L47:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 37
;;   new tail = 40

;;   ======================================================
;;   -- basic block 8 from 43 to 45 -- before reload
;;   ======================================================

;;	  0-->    43 r0=`*.LC3'                        :cortex_a8_load_store_1
;;	  0-->    44 r1=0x61                           :cortex_a8_default
;;	  1-->    45 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 43
;;   new tail = 45

;;   ======================================================
;;   -- basic block 9 from 49 to 64 -- before reload
;;   ======================================================

;;	  0-->    50 r141=[r139+0x8]                   :cortex_a8_load_store_1
;;	  0-->    49 r136=r135&0xfffffffffffffffc      :cortex_a8_default
;;	  1-->    51 r0=r136                           :cortex_a8_default
;;	  1-->    53 r2=[r139+0xc]                     :cortex_a8_load_store_1
;;	  2-->    52 r1=r141                           :cortex_a8_default
;;	  2-->    54 r3=r146                           :cortex_a8_default
;;	  3-->    55 call [`___dma_page_cpu_to_dev']   :cortex_a8_issue_branch
;;	  3-->    57 r156=[r170]                       :cortex_a8_load_store_1
;;	  5-->    58 r155=r136-r156                    :cortex_a8_default
;;	  7-->    59 r158=r155>>0x5                    :cortex_a8_default
;;	  9-->    61 r134=r158*0x1000+r141             :cortex_a8_default
;;	  9-->    62 [r139+0x10]=r134                  :cortex_a8_load_store_1
;;	 10-->    63 cc=cmp(r134,0xffffffffffffffff)   :cortex_a8_default
;;	 12-->    64 pc={(cc!=0x0)?L70:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 12
;;   new head = 49
;;   new tail = 64

;;   ======================================================
;;   -- basic block 10 from 66 to 130 -- before reload
;;   ======================================================

;;	  0-->    66 r133=r144                         :cortex_a8_default
;;	  0-->    67 r137=r152                         :cortex_a8_default
;;	  1-->    86 r168=`mem_map'                    :cortex_a8_load_store_1
;;	  1-->   130 pc=L102                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 66
;;   new tail = 130

;;   ======================================================
;;   -- basic block 11 from 72 to 75 -- before reload
;;   ======================================================

;;	  0-->    73 r0=r139                           :cortex_a8_default
;;	  0-->    72 r138=r138+0x1                     :cortex_a8_default
;;	  1-->    74 r0=call [`sg_next']               :cortex_a8_issue_branch
;;	  1-->    75 r139=r0                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 72
;;   new tail = 75

;;   ======================================================
;;   -- basic block 12 from 79 to 80 -- before reload
;;   ======================================================

;;	  0-->    79 cc=cmp(r138,r145)                 :cortex_a8_default
;;	  2-->    80 pc={(cc<0x0)?L78:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 79
;;   new tail = 80

;;   ======================================================
;;   -- basic block 13 from 133 to 133 -- before reload
;;   ======================================================

;;	  0-->   133 pc=L109                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 133
;;   new tail = 133

;;   ======================================================
;;   -- basic block 14 from 85 to 101 -- before reload
;;   ======================================================

;;	  0-->    85 r140=[r133+0x10]                  :cortex_a8_load_store_1
;;	  0-->    96 r3=r146                           :cortex_a8_default
;;	  1-->    89 r164=[r168]                       :cortex_a8_load_store_1
;;	  1-->    98 r137=r137+0x1                     :cortex_a8_default
;;	  2-->    95 r2=[r133+0xc]                     :cortex_a8_load_store_1
;;	  3-->    91 r166=r140<<0x14                   :cortex_a8_default
;;	  3-->    87 r161=r140 0>>0xc                  :cortex_a8_default
;;	  5-->    93 r0=r161*0x20+r164                 :cortex_a8_default
;;	  5-->    94 r1=r166 0>>0x14                   :cortex_a8_default
;;	  6-->    97 call [`___dma_page_dev_to_cpu']   :cortex_a8_issue_branch
;;	  6-->    99 r0=r133                           :cortex_a8_default
;;	  7-->   100 r0=call [`sg_next']               :cortex_a8_issue_branch
;;	  7-->   101 r133=r0                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 85
;;   new tail = 101

;;   ======================================================
;;   -- basic block 15 from 105 to 106 -- before reload
;;   ======================================================

;;	  0-->   105 cc=cmp(r137,r138)                 :cortex_a8_default
;;	  2-->   106 pc={(cc<0x0)?L104:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 105
;;   new tail = 106

;;   ======================================================
;;   -- basic block 16 from 108 to 108 -- before reload
;;   ======================================================

;;	  0-->   108 r145=0x0                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 108
;;   new tail = 108

;;   ======================================================
;;   -- basic block 17 from 115 to 121 -- before reload
;;   ======================================================

;;	  0-->   115 r0=r145                           :cortex_a8_default
;;	  0-->   121 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 115
;;   new tail = 121


;; Procedure interblock/speculative motions == 0/0 




dma_map_sg

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={16d,11u} r1={13d,6u} r2={10d,3u} r3={10d,3u} r11={1d,17u} r12={8d} r13={1d,24u} r14={8d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={13d,6u} r25={1d,17u} r26={1d,16u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} r133={2d,3u} r134={1d,2u} r135={1d,3u} r136={1d,2u} r137={2d,2u} r138={2d,3u} r139={2d,6u} r140={1d,2u} r141={1d,2u} r144={1d,2u} r145={2d,2u} r146={1d,3u} r150={1d,1u,1d} r152={1d,1u} r155={1d,1u,1d} r156={1d,1u} r158={1d,1u} r161={1d,1u} r164={1d,1u} r166={1d,1u} r168={1d,1u} r169={1d,1u} r170={1d,1u} 
;;    total ref usage 1029{880d,147u,2e} in 68{61 regular + 7 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 144 145 146
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 144 145 146
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 5 2 NOTE_INSN_FUNCTION_BEG)

(insn 5 6 3 2 arch/arm/mm/dma-mapping.c:574 (set (reg/v:SI 146 [ dir ])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(insn 3 5 9 2 arch/arm/mm/dma-mapping.c:574 (set (reg/v/f:SI 144 [ sg ])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ sg ])
        (nil)))

(insn 9 3 4 2 arch/arm/mm/dma-mapping.c:578 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 146 [ dir ])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(insn 4 9 10 2 arch/arm/mm/dma-mapping.c:574 (set (reg/v:SI 145 [ nents ])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ nents ])
        (nil)))

(jump_insn 10 4 11 2 arch/arm/mm/dma-mapping.c:578 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 16)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 145 146
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 145 146


;; Succ edge  4 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u9(11){ }u10(13){ }u11(25){ }u12(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 145 146
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144
;; lr  def 	 138 139 169 170
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 144 145 146
;; live  gen 	 138 139 169 170
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 10 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 12 11 13 3 arch/arm/mm/dma-mapping.c:578 (set (reg/v/f:SI 139 [ s ])
        (reg/v/f:SI 144 [ sg ])) 167 {*arm_movsi_insn} (nil))

(insn 13 12 25 3 arch/arm/mm/dma-mapping.c:578 (set (reg/v:SI 138 [ i ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 25 13 56 3 include/linux/scatterlist.h:96 (set (reg:SI 169)
        (const_int -2023406815 [0xffffffff87654321])) 167 {*arm_movsi_insn} (nil))

(insn 56 25 128 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg/f:SI 170)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (nil))

(jump_insn 128 56 129 3 (set (pc)
        (label_ref 76)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170


;; Succ edge  12 [100.0%] 

(barrier 129 128 16)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u14(11){ }u15(13){ }u16(25){ }u17(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
(code_label 16 129 17 4 110 "" [1 uses])

(note 17 16 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 20 17 21 4 arch/arm/mm/dma-mapping.c:578 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 21 20 22 4 arch/arm/mm/dma-mapping.c:578 discrim 1 (set (reg:SI 1 r1)
        (const_int 578 [0x242])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 578 [0x242])
        (nil)))

(call_insn 22 21 23 4 arch/arm/mm/dma-mapping.c:578 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 23 22 78)

;; Start of basic block ( 12) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u21(11){ }u22(13){ }u23(25){ }u24(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139 169
;; lr  def 	 24 [cc] 150
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; live  gen 	 24 [cc] 150
;; live  kill	

;; Pred edge  12 [97.8%] 
(code_label 78 23 24 5 116 "" [1 uses])

(note 24 78 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 26 24 27 5 include/linux/scatterlist.h:96 (set (reg:SI 150 [ <variable>.sg_magic ])
        (mem/s/j:SI (reg/v/f:SI 139 [ s ]) [0 <variable>.sg_magic+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 27 26 28 5 include/linux/scatterlist.h:96 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 150 [ <variable>.sg_magic ])
            (reg:SI 169))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 150 [ <variable>.sg_magic ])
        (expr_list:REG_EQUAL (compare:CC (reg:SI 150 [ <variable>.sg_magic ])
                (const_int -2023406815 [0xffffffff87654321]))
            (nil))))

(jump_insn 28 27 29 5 include/linux/scatterlist.h:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170


;; Succ edge  6 [0.0%]  (fallthru,loop_exit)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u30(11){ }u31(13){ }u32(25){ }u33(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru,loop_exit)
(note 29 28 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 31 29 32 6 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 32 31 33 6 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 1 r1)
        (const_int 96 [0x60])) 167 {*arm_movsi_insn} (nil))

(call_insn 33 32 34 6 include/linux/scatterlist.h:96 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 34 33 35)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u37(11){ }u38(13){ }u39(25){ }u40(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 24 [cc] 135 152
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; live  gen 	 24 [cc] 135 152
;; live  kill	

;; Pred edge  5 [100.0%] 
(code_label 35 34 36 7 112 "" [1 uses])

(note 36 35 38 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 38 36 37 7 NOTE_INSN_DELETED)

(insn 37 38 39 7 include/linux/scatterlist.h:97 (set (reg:SI 135 [ D.25174 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 139 [ s ])
                (const_int 4 [0x4])) [0 <variable>.page_link+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 39 37 40 7 include/linux/scatterlist.h:97 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 135 [ D.25174 ])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg:SI 152)
                (and:SI (reg:SI 135 [ D.25174 ])
                    (const_int 1 [0x1])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 40 39 41 7 include/linux/scatterlist.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 139 144 145 146 152 169 170
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 139 144 145 146 152 169 170


;; Succ edge  8 [0.0%]  (fallthru,loop_exit)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u45(11){ }u46(13){ }u47(25){ }u48(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  7 [0.0%]  (fallthru,loop_exit)
(note 41 40 43 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 43 41 44 8 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 44 43 45 8 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 1 r1)
        (const_int 97 [0x61])) 167 {*arm_movsi_insn} (nil))

(call_insn 45 44 46 8 include/linux/scatterlist.h:97 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 8 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 46 45 47)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u52(11){ }u53(13){ }u54(25){ }u55(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 139 144 145 146 152 169 170
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 139 146 170
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 136 141 155 156 158
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 138 139 144 145 146 152 169 170
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 134 136 141 155 156 158
;; live  kill	 14 [lr]

;; Pred edge  7 [100.0%] 
(code_label 47 46 48 9 113 "" [1 uses])

(note 48 47 60 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 60 48 50 9 NOTE_INSN_DELETED)

(insn 50 60 49 9 arch/arm/mm/dma-mapping.c:581 (set (reg:SI 141 [ D.24869 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 139 [ s ])
                (const_int 8 [0x8])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 49 50 51 9 include/linux/scatterlist.h:99 (set (reg/f:SI 136 [ D.25168 ])
        (and:SI (reg:SI 135 [ D.25174 ])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 135 [ D.25174 ])
        (nil)))

(insn 51 49 53 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 0 r0)
        (reg/f:SI 136 [ D.25168 ])) 167 {*arm_movsi_insn} (nil))

(insn 53 51 52 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 139 [ s ])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 52 53 54 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 1 r1)
        (reg:SI 141 [ D.24869 ])) 167 {*arm_movsi_insn} (nil))

(insn 54 52 55 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 3 r3)
        (reg/v:SI 146 [ dir ])) 167 {*arm_movsi_insn} (nil))

(call_insn 55 54 57 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_cpu_to_dev") [flags 0x3] <function_decl 0x11060e00 ___dma_page_cpu_to_dev>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 57 55 58 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg/f:SI 156 [ mem_map ])
        (mem/f/c/i:SI (reg/f:SI 170) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 58 57 59 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 155)
        (minus:SI (reg/f:SI 136 [ D.25168 ])
            (reg/f:SI 156 [ mem_map ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 156 [ mem_map ])
        (expr_list:REG_DEAD (reg/f:SI 136 [ D.25168 ])
            (nil))))

(insn 59 58 61 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 158)
        (ashiftrt:SI (reg:SI 155)
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 155)
        (expr_list:REG_EQUAL (div:SI (reg:SI 155)
                (const_int 32 [0x20]))
            (nil))))

(insn 61 59 62 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 134 [ D.25188 ])
        (plus:SI (mult:SI (reg:SI 158)
                (const_int 4096 [0x1000]))
            (reg:SI 141 [ D.24869 ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 158)
        (expr_list:REG_DEAD (reg:SI 141 [ D.24869 ])
            (nil))))

(insn 62 61 63 9 arch/arm/mm/dma-mapping.c:581 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 139 [ s ])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])
        (reg:SI 134 [ D.25188 ])) 167 {*arm_movsi_insn} (nil))

(insn 63 62 64 9 arch/arm/mm/dma-mapping.c:583 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 134 [ D.25188 ])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 134 [ D.25188 ])
        (nil)))

(jump_insn 64 63 65 9 arch/arm/mm/dma-mapping.c:583 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 70)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 144 145 146 152 169 170
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 152 169 170


;; Succ edge  10 [2.2%]  (fallthru,loop_exit)
;; Succ edge  11 [97.8%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u79(11){ }u80(13){ }u81(25){ }u82(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 144 146 152
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 144 152
;; lr  def 	 133 137 168
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 144 146 152
;; live  gen 	 133 137 168
;; live  kill	

;; Pred edge  9 [2.2%]  (fallthru,loop_exit)
(note 65 64 66 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 66 65 67 10 arch/arm/mm/dma-mapping.c:583 (set (reg/v/f:SI 133 [ s.771 ])
        (reg/v/f:SI 144 [ sg ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 144 [ sg ])
        (nil)))

(insn 67 66 86 10 arch/arm/mm/dma-mapping.c:583 (set (reg/v:SI 137 [ j ])
        (reg:SI 152)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 152)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 86 67 130 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 168)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (nil))

(jump_insn 130 86 131 10 (set (pc)
        (label_ref 102)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 138 146 168
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 138 146 168


;; Succ edge  15 [100.0%] 

(barrier 131 130 70)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u85(11){ }u86(13){ }u87(25){ }u88(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138 139
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; live  gen 	 0 [r0] 138 139
;; live  kill	 14 [lr]

;; Pred edge  9 [97.8%] 
(code_label 70 131 71 11 114 "" [1 uses])

(note 71 70 73 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 73 71 72 11 arch/arm/mm/dma-mapping.c:580 (set (reg:SI 0 r0)
        (reg/v/f:SI 139 [ s ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 139 [ s ])
        (nil)))

(insn 72 73 74 11 arch/arm/mm/dma-mapping.c:580 (set (reg/v:SI 138 [ i ])
        (plus:SI (reg/v:SI 138 [ i ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(call_insn 74 72 75 11 arch/arm/mm/dma-mapping.c:580 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 75 74 76 11 arch/arm/mm/dma-mapping.c:580 (set (reg/v/f:SI 139 [ s ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170


;; Succ edge  12 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 11 3) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u94(11){ }u95(13){ }u96(25){ }u97(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 145
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 76 75 77 12 111 "" [1 uses])

(note 77 76 79 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 79 77 80 12 arch/arm/mm/dma-mapping.c:580 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ i ])
            (reg/v:SI 145 [ nents ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 80 79 132 12 arch/arm/mm/dma-mapping.c:580 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
            (nil))))
;; End of basic block 12 -> ( 5 13)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 144 145 146 169 170


;; Succ edge  5 [97.8%] 
;; Succ edge  13 [2.2%]  (fallthru,loop_exit)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 145
;; live  gen 	
;; live  kill	

;; Pred edge  12 [2.2%]  (fallthru,loop_exit)
(note 132 80 133 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(jump_insn 133 132 134 13 (set (pc)
        (label_ref 109)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 17)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 145
;; live  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 145


;; Succ edge  17 [100.0%] 

(barrier 134 133 104)

;; Start of basic block ( 15) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u101(11){ }u102(13){ }u103(25){ }u104(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 138 146 168
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 146 168
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 137 140 161 164 166
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 138 146 168
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 133 137 140 161 164 166
;; live  kill	 14 [lr]

;; Pred edge  15 [91.0%] 
(code_label 104 134 84 14 118 "" [1 uses])

(note 84 104 88 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 88 84 90 14 NOTE_INSN_DELETED)

(note 90 88 92 14 NOTE_INSN_DELETED)

(note 92 90 85 14 NOTE_INSN_DELETED)

(insn 85 92 96 14 arch/arm/mm/dma-mapping.c:591 (set (reg:SI 140 [ D.24872 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ s.771 ])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 96 85 89 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 3 r3)
        (reg/v:SI 146 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 89 96 98 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 164 [ mem_map ])
        (mem/f/c/i:SI (reg/f:SI 168) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 98 89 95 14 arch/arm/mm/dma-mapping.c:590 discrim 2 (set (reg/v:SI 137 [ j ])
        (plus:SI (reg/v:SI 137 [ j ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 95 98 91 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 133 [ s.771 ])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 91 95 87 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 166)
        (ashift:SI (reg:SI 140 [ D.24872 ])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 140 [ D.24872 ])
        (nil)))

(insn 87 91 93 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 161)
        (lshiftrt:SI (reg:SI 140 [ D.24872 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 93 87 94 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 0 r0)
        (plus:SI (mult:SI (reg:SI 161)
                (const_int 32 [0x20]))
            (reg/f:SI 164 [ mem_map ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/f:SI 164 [ mem_map ])
        (expr_list:REG_DEAD (reg:SI 161)
            (nil))))

(insn 94 93 97 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg:SI 166)
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 166)
        (nil)))

(call_insn 97 94 99 14 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_dev_to_cpu") [flags 0x3] <function_decl 0x11060f80 ___dma_page_dev_to_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 99 97 100 14 arch/arm/mm/dma-mapping.c:590 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 133 [ s.771 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 133 [ s.771 ])
        (nil)))

(call_insn 100 99 101 14 arch/arm/mm/dma-mapping.c:590 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 101 100 102 14 arch/arm/mm/dma-mapping.c:590 discrim 2 (set (reg/v/f:SI 133 [ s.771 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 14 -> ( 15)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 138 146 168
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 138 146 168


;; Succ edge  15 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 14 10) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u128(11){ }u129(13){ }u130(25){ }u131(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 138 146 168
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 138 146 168
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru,dfs_back)
;; Pred edge  10 [100.0%] 
(code_label 102 101 103 15 115 "" [1 uses])

(note 103 102 105 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 105 103 106 15 arch/arm/mm/dma-mapping.c:590 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 137 [ j ])
            (reg/v:SI 138 [ i ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 106 105 107 15 arch/arm/mm/dma-mapping.c:590 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 104)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 15 -> ( 14 16)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 137 138 146 168
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 137 138 146 168


;; Succ edge  14 [91.0%] 
;; Succ edge  16 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u135(11){ }u136(13){ }u137(25){ }u138(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 145
;; live  kill	

;; Pred edge  15 [9.0%]  (fallthru,loop_exit)
(note 107 106 108 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 108 107 109 16 arch/arm/mm/dma-mapping.c:592 (set (reg/v:SI 145 [ nents ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 16 -> ( 17)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 145
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16 13) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u139(11){ }u140(13){ }u141(25){ }u142(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 145
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 145
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  13 [100.0%] 
(code_label 109 108 110 17 117 "" [1 uses])

(note 110 109 115 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 115 110 121 17 arch/arm/mm/dma-mapping.c:593 (set (reg/i:SI 0 r0)
        (reg/v:SI 145 [ nents ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ nents ])
        (nil)))

(insn 121 115 137 17 arch/arm/mm/dma-mapping.c:593 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 17 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 137 121 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_free_coherent (dma_free_coherent)[0:1283]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 34 count 53 (  2.1)


dma_free_coherent

Dataflow summary:
def_info->table_size = 1502, use_info->table_size = 227
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={23d,14u} r1={23d,12u} r2={17d,5u} r3={14d,2u} r11={1d,24u} r12={13d} r13={1d,36u} r14={13d,1u} r15={12d} r16={12d} r17={12d} r18={12d} r19={12d} r20={12d} r21={12d} r22={12d} r23={12d} r24={23d,10u} r25={1d,24u} r26={1d,23u} r27={12d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={12d} r38={12d} r39={12d} r40={12d} r41={12d} r42={12d} r43={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} r81={12d} r82={12d} r83={12d} r84={12d} r85={12d} r86={12d} r87={12d} r88={12d} r89={12d} r90={12d} r91={12d} r92={12d} r93={12d} r94={12d} r95={12d} r96={12d} r97={12d} r98={12d} r99={12d} r100={12d} r101={12d} r102={12d} r103={12d} r104={12d} r105={12d} r106={12d} r107={12d} r108={12d} r109={12d} r110={12d} r111={12d} r112={12d} r113={12d} r114={12d} r115={12d} r116={12d} r117={12d} r118={12d} r119={12d} r120={12d} r121={12d} r122={12d} r123={12d} r124={12d} r125={12d} r126={12d} r127={12d} r135={3d,2u} r136={2d,5u} r137={1d,1u} r138={2d,4u} r139={1d,2u} r140={1d,2u} r141={1d,8u} r142={3d,3u} r143={2d,3u,2d} r144={3d,3u} r145={1d,2u} r146={2d,2u} r147={2d,2u} r148={1d,1u} r149={1d,1u} r151={1d,1u} r152={1d,2u,1d} r153={1d,3u} r154={1d,1u} r157={1d,1u} r158={1d,1u} r164={1d,1u} r165={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r174={1d,2u} r176={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r191={1d,1u} 
;;    total ref usage 1709{1493d,213u,3e} in 101{89 regular + 12 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d22(0){ }d45(1){ }d62(2){ }d76(3){ }d77(11){ }d90(12){ }d91(13){ }d104(14){ }d236(25){ }d237(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 3 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 148 151 152 153 154
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 148 151 152 153 154
;; live  kill	 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154

( 2 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(11){ }u12(13){ }u13(25){ }u14(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154

( 2 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u18(11){ }u19(13){ }u20(25){ }u21(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 146 147 157
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; live  gen 	 146 147 157
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154

( 4 5 )->[5]->( 5 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147
;; lr  def 	 24 [cc] 146 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
;; live  gen 	 24 [cc] 146 147
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154

( 5 )->[6]->( 24 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u32(11){ }u33(13){ }u34(25){ }u35(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 151 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 151 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 151 152 153 154
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153 154

( 6 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u46(11){ }u47(13){ }u48(25){ }u49(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 141 149 158
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153 154
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 136 141 149 158
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 153 154

( 7 )->[8]->( 21 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u63(11){ }u64(13){ }u65(25){ }u66(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 153 154
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 154

( 7 )->[9]->( 11 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u73(11){ }u74(13){ }u75(25){ }u76(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141
;; lr  def 	 24 [cc] 139 164 165
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; live  gen 	 24 [cc] 139 164 165
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141 154

( 9 )->[10]->( 12 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u84(11){ }u85(13){ }u86(25){ }u87(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; live  gen 	 135
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154

( 9 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u89(11){ }u90(13){ }u91(25){ }u92(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 169 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141 154
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 135 169 170
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154

( 11 10 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u105(11){ }u106(13){ }u107(25){ }u108(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 140 142 143 144 171 174 176 191
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
;; live  gen 	 140 142 143 144 171 174 176 191
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191

( 12 19 )->[13]->( 15 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u123(11){ }u124(13){ }u125(25){ }u126(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 144 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 144 145
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191

( 13 )->[14]->( 16 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u137(11){ }u138(13){ }u139(25){ }u140(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  gen 	 142
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191

( 13 )->[15]->( 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u142(11){ }u143(13){ }u144(25){ }u145(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 143 145 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 191
;; lr  def 	 142 143 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 143 145 154 191
;; live  gen 	 142 143 144
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191

( 15 14 )->[16]->( 18 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u150(11){ }u151(13){ }u152(25){ }u153(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191

( 16 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u156(11){ }u157(13){ }u158(25){ }u159(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191

( 16 17 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u163(11){ }u164(13){ }u165(25){ }u166(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191

( 17 18 )->[19]->( 13 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u170(11){ }u171(13){ }u172(25){ }u173(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  gen 	 24 [cc] 135
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191

( 19 )->[20]->( 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u177(11){ }u178(13){ }u179(25){ }u180(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 154

( 20 8 )->[21]->( 23 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u190(11){ }u191(13){ }u192(25){ }u193(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 154
;; lr  def 	 137 138 183 184 186
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 154
;; live  gen 	 137 138 183 184 186
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138

( 23 )->[22]->( 23 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u203(11){ }u204(13){ }u205(25){ }u206(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; live  gen 	 0 [r0] 1 [r1] 138
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138

( 22 21 )->[23]->( 22 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u212(11){ }u213(13){ }u214(25){ }u215(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138

( 23 6 )->[24]->( 1 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u219(11){ }u220(13){ }u221(25){ }u222(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 24 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u223(11){ }u224(13){ }u225(14){ }u226(25){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 14 to worklist
  Adding insn 11 to worklist
  Adding insn 19 to worklist
  Adding insn 30 to worklist
  Adding insn 38 to worklist
  Adding insn 35 to worklist
  Adding insn 50 to worklist
  Adding insn 47 to worklist
  Adding insn 189 to worklist
  Adding insn 59 to worklist
  Adding insn 58 to worklist
  Adding insn 68 to worklist
  Adding insn 191 to worklist
  Adding insn 83 to worklist
  Adding insn 82 to worklist
  Adding insn 107 to worklist
  Adding insn 104 to worklist
  Adding insn 193 to worklist
  Adding insn 121 to worklist
  Adding insn 125 to worklist
  Adding insn 133 to worklist
  Adding insn 139 to worklist
  Adding insn 147 to worklist
  Adding insn 143 to worklist
  Adding insn 195 to worklist
  Adding insn 163 to worklist
  Adding insn 169 to worklist
Finished finding needed instructions:
processing block 24 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
processing block 22 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
  Adding insn 164 to worklist
  Adding insn 183 to worklist
  Adding insn 161 to worklist
processing block 23 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
  Adding insn 168 to worklist
processing block 21 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
  Adding insn 157 to worklist
  Adding insn 154 to worklist
  Adding insn 153 to worklist
  Adding insn 151 to worklist
  Adding insn 150 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 154
  Adding insn 57 to worklist
  Adding insn 56 to worklist
  Adding insn 55 to worklist
processing block 20 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 154
  Adding insn 146 to worklist
  Adding insn 145 to worklist
  Adding insn 142 to worklist
  Adding insn 141 to worklist
processing block 19 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
  Adding insn 138 to worklist
processing block 18 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
  Adding insn 188 to worklist
  Adding insn 187 to worklist
processing block 17 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
  Adding insn 124 to worklist
processing block 16 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
  Adding insn 120 to worklist
processing block 15 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
  Adding insn 186 to worklist
  Adding insn 116 to worklist
  Adding insn 114 to worklist
processing block 14 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
  Adding insn 109 to worklist
processing block 13 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
  Adding insn 106 to worklist
  Adding insn 105 to worklist
  Adding insn 103 to worklist
  Adding insn 184 to worklist
  Adding insn 101 to worklist
  Adding insn 100 to worklist
processing block 12 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
  Adding insn 115 to worklist
  Adding insn 98 to worklist
  Adding insn 97 to worklist
  Adding insn 95 to worklist
  Adding insn 94 to worklist
  Adding insn 91 to worklist
  Adding insn 90 to worklist
  Adding insn 89 to worklist
processing block 11 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
  Adding insn 86 to worklist
  Adding insn 85 to worklist
  Adding insn 84 to worklist
  Adding insn 81 to worklist
  Adding insn 80 to worklist
  Adding insn 79 to worklist
  Adding insn 78 to worklist
processing block 10 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
  Adding insn 70 to worklist
processing block 9 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141 154
  Adding insn 67 to worklist
  Adding insn 66 to worklist
  Adding insn 65 to worklist
  Adding insn 64 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 153 154
  Adding insn 49 to worklist
  Adding insn 46 to worklist
  Adding insn 45 to worklist
  Adding insn 198 to worklist
  Adding insn 197 to worklist
  Adding insn 41 to worklist
  Adding insn 40 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 152 153 154
  Adding insn 37 to worklist
  Adding insn 34 to worklist
  Adding insn 33 to worklist
  Adding insn 32 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
  Adding insn 29 to worklist
  Adding insn 27 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
  Adding insn 24 to worklist
  Adding insn 23 to worklist
  Adding insn 22 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
  Adding insn 18 to worklist
  Adding insn 17 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
  Adding insn 13 to worklist
  Adding insn 7 to worklist
  Adding insn 6 to worklist
  Adding insn 5 to worklist
  Adding insn 4 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 25 n_edges 34 count 49 (    2)
;;   ======================================================
;;   -- basic block 13 from 100 to 107 -- before reload
;;   ======================================================

;;	  0-->   184 r1=0x0                            :cortex_a8_default
;;	  0-->   105 r144=r144+0x1                     :cortex_a8_default
;;	  1-->   101 r0=r142                           :cortex_a8_default
;;	  1-->   103 r2=r1                             :cortex_a8_default
;;	  2-->   100 r145=[r142]                       :cortex_a8_load_store_1
;;	  2-->   104 call [`cpu_v7_set_pte_ext']       :cortex_a8_issue_branch
;;	  3-->   106 cc=cmp(r144,0x200)                :cortex_a8_default
changing bb of uid 109
  from 14 to 13
;;	  3-->   109 r142=r142+0x4                     :cortex_a8_default
;;	  5-->   107 pc={(cc==0x0)?L112:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 100
;;   new tail = 107

;;   ======================================================
;;   -- basic block 14 from 193 to 193 -- before reload
;;   ======================================================

;;	  0-->   193 pc=L118                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 193
;;   new tail = 193

;;   ======================================================
;;   -- basic block 15 from 114 to 186 -- before reload
;;   ======================================================

;;	  0-->   114 r143=r143+0x1                     :cortex_a8_default
;;	  0-->   186 r144=0x0                          :cortex_a8_default
;;	  2-->   116 r142=[r143*0x4+r191]              :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 114
;;   new tail = 186

;;   ======================================================
;;   -- basic block 16 from 120 to 121 -- before reload
;;   ======================================================

;;	  0-->   120 cc=cmp(r145,0x0)                  :cortex_a8_default
;;	  2-->   121 pc={(cc==0x0)?L126:pc}            :cortex_a8_branch
;;	Ready list (final):    124/b4
;;   total time = 2
;;   new head = 120
;;   new tail = 121

;;   ======================================================
;;   -- basic block 17 from 124 to 125 -- before reload
;;   ======================================================

;;	  0-->   124 cc=cmp(zxt(r145,0x1,0x0),0x0)     :cortex_a8_default
;;	  2-->   125 pc={(cc!=0x0)?L134:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 124
;;   new tail = 125

;;   ======================================================
;;   -- basic block 18 from 187 to 133 -- before reload
;;   ======================================================

;;	  0-->   187 r0=`*.LC6'                        :cortex_a8_load_store_1
;;	  1-->   188 r1=const(`*.LANCHOR0'+0x10)       :cortex_a8_load_store_1
;;	  2-->   133 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 187
;;   new tail = 133

;;   ======================================================
;;   -- basic block 19 from 138 to 139 -- before reload
;;   ======================================================

;;	  0-->   138 {cc=cmp(r135-0x1000,0x0);r135=r135:cortex_a8_default
;;	  2-->   139 pc={(cc!=0x0)?L137:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 138
;;   new tail = 139

;;   ======================================================
;;   -- basic block 23 from 168 to 169 -- before reload
;;   ======================================================

changing bb of uid 161
  from 22 to 23
;;	  0-->   161 r0=r138                           :cortex_a8_default
changing bb of uid 183
  from 22 to 23
;;	  0-->   183 r1=0x0                            :cortex_a8_default
;;	  1-->   168 cc=cmp(r138,r137)                 :cortex_a8_default
changing bb of uid 164
  from 22 to 23
;;	  1-->   164 r138=r138+0x20                    :cortex_a8_default
;;	  3-->   169 pc={(ltu(cc,0x0))?L167:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 168
;;   new tail = 169

;;   ======================================================
;;   -- basic block 22 from 163 to 163 -- before reload
;;   ======================================================

;;	  0-->   163 call [`__free_pages']             :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 163
;;   new tail = 163

;;   ======================================================
;;   -- basic block 2 from 4 to 14 -- before reload
;;   ======================================================

;;	  0-->     4 r151=r0                           :cortex_a8_default
;;	  0-->     5 r152=r1                           :cortex_a8_default
;;	  1-->     6 r153=r2                           :cortex_a8_default
;;	  1-->     7 r154=r3                           :cortex_a8_default
;;	  2-->    11 {r148=asm_operands;clobber cc;clob:nothing
;;	  3-->    13 cc=cmp(zxt(r148,0x1,0x7),0x0)     :cortex_a8_default
;;	  5-->    14 pc={(cc==0x0)?L20:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 4
;;   new tail = 14

;;   ======================================================
;;   -- basic block 3 from 17 to 19 -- before reload
;;   ======================================================

;;	  0-->    17 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  0-->    18 r1=0x1a4                          :cortex_a8_default
;;	  1-->    19 call [`warn_slowpath_null']       :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 17
;;   new tail = 19

;;   ======================================================
;;   -- basic block 4 from 22 to 24 -- before reload
;;   ======================================================

;;	  0-->    22 r157=r152-0x1                     :cortex_a8_default
;;	  0-->    24 r146=0xffffffffffffffff           :cortex_a8_default
;;	  2-->    23 r147=r157 0>>0xb                  :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 22
;;   new tail = 24

;;   ======================================================
;;   -- basic block 5 from 27 to 30 -- before reload
;;   ======================================================

;;	  0-->    29 {cc=cmp(r147 0>>0x1,0x0);r147=r147:cortex_a8_default
;;	  0-->    27 r146=r146+0x1                     :cortex_a8_default
;;	  2-->    30 pc={(cc!=0x0)?L28:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 27
;;   new tail = 30

;;   ======================================================
;;   -- basic block 6 from 32 to 38 -- before reload
;;   ======================================================

;;	  0-->    32 r0=r151                           :cortex_a8_default
;;	  0-->    33 r1=r146                           :cortex_a8_default
;;	  1-->    34 r2=r153                           :cortex_a8_default
;;	  2-->    35 r0=call [`dma_release_from_coheren:cortex_a8_issue_branch
;;	 34-->    37 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    38 pc={(cc!=0x0)?L175:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 32
;;   new tail = 38

;;   ======================================================
;;   -- basic block 7 from 40 to 50 -- before reload
;;   ======================================================

;;	  0-->    40 r158=r152+0xff0                   :cortex_a8_default
;;	  0-->    45 r0=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  1-->    41 r149=r158+0xf                     :cortex_a8_default
;;	  1-->    46 r1=r153                           :cortex_a8_default
;;	  2-->   197 r136=r149&0xfffffffffffff00f      :cortex_a8_default
;;	  2-->    47 r0=call [`arm_vmregion_find_remove:cortex_a8_issue_branch
;;	  3-->   198 r136=r136&0xfffffffffffffff0      :cortex_a8_default
;;	 34-->    49 {cc=cmp(r0,0x0);r141=r0;}         :cortex_a8_default
;;	 36-->    50 pc={(cc!=0x0)?L62:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 40
;;   new tail = 50

;;   ======================================================
;;   -- basic block 8 from 55 to 189 -- before reload
;;   ======================================================

;;	  0-->    57 r2=r153                           :cortex_a8_default
;;	  0-->    56 r1=const(`*.LANCHOR0'+0x10)       :cortex_a8_load_store_1
;;	  1-->    55 r0=`*.LC4'                        :cortex_a8_load_store_1
;;	  2-->    58 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->    59 call [`dump_stack']               :cortex_a8_issue_branch
;;	  3-->   189 pc=L148                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 55
;;   new tail = 189

;;   ======================================================
;;   -- basic block 9 from 64 to 68 -- before reload
;;   ======================================================

;;	  0-->    64 r164=[r141+0xc]                   :cortex_a8_load_store_1
;;	  1-->    65 r165=[r141+0x8]                   :cortex_a8_load_store_1
;;	  3-->    66 r139=r164-r165                    :cortex_a8_default
;;	  4-->    67 cc=cmp(r139,r136)                 :cortex_a8_default
;;	  6-->    68 pc={(cc!=0x0)?L73:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 64
;;   new tail = 68

;;   ======================================================
;;   -- basic block 10 from 70 to 191 -- before reload
;;   ======================================================

;;	  0-->    70 r135=r136                         :cortex_a8_default
;;	  0-->   191 pc=L87                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 70
;;   new tail = 191

;;   ======================================================
;;   -- basic block 11 from 78 to 86 -- before reload
;;   ======================================================

;;	  0-->    80 r2=r139                           :cortex_a8_default
;;	  0-->    79 r1=const(`*.LANCHOR0'+0x10)       :cortex_a8_load_store_1
;;	  1-->    81 r3=r136                           :cortex_a8_default
;;	  1-->    78 r0=`*.LC5'                        :cortex_a8_load_store_1
;;	  2-->    82 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->    83 call [`dump_stack']               :cortex_a8_issue_branch
;;	  3-->    84 r169=[r141+0xc]                   :cortex_a8_load_store_1
;;	  4-->    85 r170=[r141+0x8]                   :cortex_a8_load_store_1
;;	  6-->    86 r135=r169-r170                    :cortex_a8_default
;;	Ready list (final):  
;;   total time = 6
;;   new head = 78
;;   new tail = 86

;;   ======================================================
;;   -- basic block 12 from 89 to 115 -- before reload
;;   ======================================================

;;	  0-->    89 r171=[r141+0x8]                   :cortex_a8_load_store_1
;;	  1-->    95 r174=`*.LANCHOR1'                 :cortex_a8_load_store_1
;;	  2-->    90 r140=r171+0x1000000               :cortex_a8_default
;;	  3-->    94 r144=zxt(r140,0x9,0xc)            :cortex_a8_default
;;	  3-->   115 r191=r174                         :cortex_a8_default
;;	  4-->    91 r143=r140 0>>0x15                 :cortex_a8_default
;;	  6-->    97 r176=[r143*0x4+r174]              :cortex_a8_load_store_1
;;	  8-->    98 r142=r144*0x4+r176                :cortex_a8_default
;;	Ready list (final):  
;;   total time = 8
;;   new head = 89
;;   new tail = 115

;;   ======================================================
;;   -- basic block 20 from 141 to 147 -- before reload
;;   ======================================================

;;	  0-->   141 r0=[r141+0x8]                     :cortex_a8_load_store_1
;;	  1-->   142 r1=[r141+0xc]                     :cortex_a8_load_store_1
;;	  2-->   143 call [`flush_tlb_kernel_range']   :cortex_a8_issue_branch
;;	  2-->   146 r1=r141                           :cortex_a8_default
;;	  3-->   145 r0=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  4-->   147 call [`arm_vmregion_free']        :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 141
;;   new tail = 147

;;   ======================================================
;;   -- basic block 21 from 150 to 195 -- before reload
;;   ======================================================

;;	  0-->   150 r183=`mem_map'                    :cortex_a8_load_store_1
;;	  0-->   151 r184=r154 0>>0xc                  :cortex_a8_default
;;	  3-->   153 r186=[r183]                       :cortex_a8_load_store_1
;;	  5-->   154 r138=r184*0x20+r186               :cortex_a8_default
;;	  6-->   157 r137=r136 0>>0x7+r138             :cortex_a8_default
;;	  6-->   195 pc=L165                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 6
;;   new head = 150
;;   new tail = 195


;; Procedure interblock/speculative motions == 4/4 




dma_free_coherent

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={23d,14u} r1={23d,12u} r2={17d,5u} r3={14d,2u} r11={1d,24u} r12={13d} r13={1d,36u} r14={13d,1u} r15={12d} r16={12d} r17={12d} r18={12d} r19={12d} r20={12d} r21={12d} r22={12d} r23={12d} r24={23d,10u} r25={1d,24u} r26={1d,23u} r27={12d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={12d} r38={12d} r39={12d} r40={12d} r41={12d} r42={12d} r43={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} r81={12d} r82={12d} r83={12d} r84={12d} r85={12d} r86={12d} r87={12d} r88={12d} r89={12d} r90={12d} r91={12d} r92={12d} r93={12d} r94={12d} r95={12d} r96={12d} r97={12d} r98={12d} r99={12d} r100={12d} r101={12d} r102={12d} r103={12d} r104={12d} r105={12d} r106={12d} r107={12d} r108={12d} r109={12d} r110={12d} r111={12d} r112={12d} r113={12d} r114={12d} r115={12d} r116={12d} r117={12d} r118={12d} r119={12d} r120={12d} r121={12d} r122={12d} r123={12d} r124={12d} r125={12d} r126={12d} r127={12d} r135={3d,2u} r136={2d,5u} r137={1d,1u} r138={2d,4u} r139={1d,2u} r140={1d,2u} r141={1d,8u} r142={3d,3u} r143={2d,3u,2d} r144={3d,3u} r145={1d,2u} r146={2d,2u} r147={2d,2u} r148={1d,1u} r149={1d,1u} r151={1d,1u} r152={1d,2u,1d} r153={1d,3u} r154={1d,1u} r157={1d,1u} r158={1d,1u} r164={1d,1u} r165={1d,1u} r169={1d,1u} r170={1d,1u} r171={1d,1u} r174={1d,2u} r176={1d,1u} r183={1d,1u} r184={1d,1u} r186={1d,1u} r191={1d,1u} 
;;    total ref usage 1709{1493d,213u,3e} in 101{89 regular + 12 call} insns.
(note 3 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 148 151 152 153 154
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 24 [cc] 148 151 152 153 154
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 3 8 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 8 9 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 8 4 2 NOTE_INSN_DELETED)

(insn 4 12 5 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v/f:SI 151 [ dev ])
        (reg:SI 0 r0 [ dev ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dev ])
        (nil)))

(insn 5 4 6 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v:SI 152 [ size ])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ size ])
        (nil)))

(insn 6 5 7 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v/f:SI 153 [ cpu_addr ])
        (reg:SI 2 r2 [ cpu_addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ cpu_addr ])
        (nil)))

(insn 7 6 11 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v:SI 154 [ handle ])
        (reg:SI 3 r3 [ handle ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ handle ])
        (nil)))

(insn 11 7 13 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:131 (parallel [
            (set (reg/v:SI 148 [ _flags ])
                (asm_operands/v:SI ("	mrs	%0, cpsr	@ local_save_flags") ("=r") 0 []
                     [] 1118080))
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(insn 13 11 14 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 148 [ _flags ])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 148 [ _flags ])
        (nil)))

(jump_insn 14 13 15 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u11(11){ }u12(13){ }u13(25){ }u14(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 15 14 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 17 15 18 3 arch/arm/mm/dma-mapping.c:420 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 18 17 19 3 arch/arm/mm/dma-mapping.c:420 discrim 1 (set (reg:SI 1 r1)
        (const_int 420 [0x1a4])) 167 {*arm_movsi_insn} (nil))

(call_insn 19 18 20 3 arch/arm/mm/dma-mapping.c:420 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a67280 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u18(11){ }u19(13){ }u20(25){ }u21(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152
;; lr  def 	 146 147 157
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 153 154
;; live  gen 	 146 147 157
;; live  kill	

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 20 19 21 4 124 "" [1 uses])

(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 22 21 24 4 include/asm-generic/getorder.h:13 (set (reg:SI 157)
        (plus:SI (reg/v:SI 152 [ size ])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 24 22 23 4 include/asm-generic/getorder.h:14 (set (reg/v:SI 146 [ order ])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn 23 24 28 4 include/asm-generic/getorder.h:13 (set (reg/v:SI 147 [ size ])
        (lshiftrt:SI (reg:SI 157)
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 157)
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 5) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147
;; lr  def 	 24 [cc] 146 147
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
;; live  gen 	 24 [cc] 146 147
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  5 [86.0%]  (dfs_back)
(code_label 28 23 25 5 125 "" [1 uses])

(note 25 28 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 26 25 29 5 NOTE_INSN_DELETED)

(insn 29 26 27 5 include/asm-generic/getorder.h:18 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 147 [ size ])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 147 [ size ])
                (lshiftrt:SI (reg/v:SI 147 [ size ])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn 27 29 30 5 include/asm-generic/getorder.h:17 (set (reg/v:SI 146 [ order ])
        (plus:SI (reg/v:SI 146 [ order ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 30 27 31 5 include/asm-generic/getorder.h:18 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 28)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 5 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 147 151 152 153 154


;; Succ edge  5 [86.0%]  (dfs_back)
;; Succ edge  6 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u32(11){ }u33(13){ }u34(25){ }u35(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 151 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 151 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 146 151 152 153 154
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [14.0%]  (fallthru,loop_exit)
(note 31 30 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 36 31 32 6 NOTE_INSN_DELETED)

(insn 32 36 33 6 arch/arm/mm/dma-mapping.c:422 (set (reg:SI 0 r0)
        (reg/v/f:SI 151 [ dev ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 151 [ dev ])
        (nil)))

(insn 33 32 34 6 arch/arm/mm/dma-mapping.c:422 (set (reg:SI 1 r1)
        (reg/v:SI 146 [ order ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 146 [ order ])
        (nil)))

(insn 34 33 35 6 arch/arm/mm/dma-mapping.c:422 (set (reg:SI 2 r2)
        (reg/v/f:SI 153 [ cpu_addr ])) 167 {*arm_movsi_insn} (nil))

(call_insn 35 34 37 6 arch/arm/mm/dma-mapping.c:422 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_release_from_coherent") [flags 0x41] <function_decl 0x11060400 dma_release_from_coherent>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 37 35 38 6 arch/arm/mm/dma-mapping.c:422 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 38 37 39 6 arch/arm/mm/dma-mapping.c:422 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 175)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 6 -> ( 24 7)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 152 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153 154


;; Succ edge  24 [61.0%] 
;; Succ edge  7 [39.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u46(11){ }u47(13){ }u48(25){ }u49(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 141 149 158
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153 154
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 136 141 149 158
;; live  kill	 14 [lr]

;; Pred edge  6 [39.0%]  (fallthru)
(note 39 38 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 42 39 48 7 NOTE_INSN_DELETED)

(note 48 42 40 7 NOTE_INSN_DELETED)

(insn 40 48 45 7 arch/arm/mm/dma-mapping.c:425 (set (reg:SI 158)
        (plus:SI (reg/v:SI 152 [ size ])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 152 [ size ])
        (nil)))

(insn 45 40 41 7 arch/arm/mm/dma-mapping.c:259 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 41 45 46 7 arch/arm/mm/dma-mapping.c:425 (set (reg:SI 149 [ D.24661 ])
        (plus:SI (reg:SI 158)
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 158)
        (expr_list:REG_EQUAL (plus:SI (reg/v:SI 152 [ size ])
                (const_int 4095 [0xfff]))
            (nil))))

(insn 46 41 197 7 arch/arm/mm/dma-mapping.c:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 153 [ cpu_addr ])) 167 {*arm_movsi_insn} (nil))

(insn 197 46 47 7 arch/arm/mm/dma-mapping.c:425 (set (reg/v:SI 136 [ size.823 ])
        (and:SI (reg:SI 149 [ D.24661 ])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 149 [ D.24661 ])
        (nil)))

(call_insn 47 197 198 7 arch/arm/mm/dma-mapping.c:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arm_vmregion_find_remove") [flags 0x41] <function_decl 0x11440d00 arm_vmregion_find_remove>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 198 47 49 7 arch/arm/mm/dma-mapping.c:425 (set (reg/v:SI 136 [ size.823 ])
        (and:SI (reg/v:SI 136 [ size.823 ])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 49 198 50 7 arch/arm/mm/dma-mapping.c:260 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 141 [ c ])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 50 49 51 7 arch/arm/mm/dma-mapping.c:260 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 153 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 153 154


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u63(11){ }u64(13){ }u65(25){ }u66(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 153 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 153 154
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  7 [0.0%]  (fallthru)
(note 51 50 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 57 51 56 8 arch/arm/mm/dma-mapping.c:261 (set (reg:SI 2 r2)
        (reg/v/f:SI 153 [ cpu_addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 153 [ cpu_addr ])
        (nil)))

(insn 56 57 55 8 arch/arm/mm/dma-mapping.c:261 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 55 56 58 8 arch/arm/mm/dma-mapping.c:261 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114ecc80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114ecc80>)
        (nil)))

(call_insn 58 55 59 8 arch/arm/mm/dma-mapping.c:261 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(call_insn 59 58 189 8 arch/arm/mm/dma-mapping.c:263 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 189 59 190 8 (set (pc)
        (label_ref 148)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 21)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 154


;; Succ edge  21 [100.0%] 

(barrier 190 189 62)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u73(11){ }u74(13){ }u75(25){ }u76(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141
;; lr  def 	 24 [cc] 139 164 165
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; live  gen 	 24 [cc] 139 164 165
;; live  kill	

;; Pred edge  7 [100.0%] 
(code_label 62 190 63 9 127 "" [1 uses])

(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 64 63 65 9 arch/arm/mm/dma-mapping.c:267 (set (reg:SI 164 [ <variable>.vm_end ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 65 64 66 9 arch/arm/mm/dma-mapping.c:267 (set (reg:SI 165 [ <variable>.vm_start ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 66 65 67 9 arch/arm/mm/dma-mapping.c:267 (set (reg:SI 139 [ D.25252 ])
        (minus:SI (reg:SI 164 [ <variable>.vm_end ])
            (reg:SI 165 [ <variable>.vm_start ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 165 [ <variable>.vm_start ])
        (expr_list:REG_DEAD (reg:SI 164 [ <variable>.vm_end ])
            (nil))))

(insn 67 66 68 9 arch/arm/mm/dma-mapping.c:267 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 139 [ D.25252 ])
            (reg/v:SI 136 [ size.823 ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 68 67 69 9 arch/arm/mm/dma-mapping.c:267 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141 154


;; Succ edge  11 [0.0%] 
;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u84(11){ }u85(13){ }u86(25){ }u87(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; live  gen 	 135
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru)
(note 69 68 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 70 69 191 10 arch/arm/mm/dma-mapping.c:267 (set (reg/v:SI 135 [ size.827 ])
        (reg/v:SI 136 [ size.823 ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 191 70 192 10 (set (pc)
        (label_ref 87)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154


;; Succ edge  12 [100.0%] 

(barrier 192 191 73)

;; Start of basic block ( 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u89(11){ }u90(13){ }u91(25){ }u92(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 169 170
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 139 141 154
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 135 169 170
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%] 
(code_label 73 192 74 11 129 "" [1 uses])

(note 74 73 80 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 80 74 79 11 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 2 r2)
        (reg:SI 139 [ D.25252 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 139 [ D.25252 ])
        (nil)))

(insn 79 80 81 11 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn 81 79 78 11 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 3 r3)
        (reg/v:SI 136 [ size.823 ])) 167 {*arm_movsi_insn} (nil))

(insn 78 81 82 11 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114ecd20>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114ecd20>)
        (nil)))

(call_insn 82 78 83 11 arch/arm/mm/dma-mapping.c:268 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(call_insn 83 82 84 11 arch/arm/mm/dma-mapping.c:270 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 84 83 85 11 arch/arm/mm/dma-mapping.c:271 (set (reg:SI 169 [ <variable>.vm_end ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 85 84 86 11 arch/arm/mm/dma-mapping.c:271 (set (reg:SI 170 [ <variable>.vm_start ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 86 85 87 11 arch/arm/mm/dma-mapping.c:271 (set (reg/v:SI 135 [ size.827 ])
        (minus:SI (reg:SI 169 [ <variable>.vm_end ])
            (reg:SI 170 [ <variable>.vm_start ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 170 [ <variable>.vm_start ])
        (expr_list:REG_DEAD (reg:SI 169 [ <variable>.vm_end ])
            (nil))))
;; End of basic block 11 -> ( 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u105(11){ }u106(13){ }u107(25){ }u108(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 140 142 143 144 171 174 176 191
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 154
;; live  gen 	 140 142 143 144 171 174 176 191
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  10 [100.0%] 
(code_label 87 86 88 12 130 "" [1 uses])

(note 88 87 92 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 92 88 93 12 NOTE_INSN_DELETED)

(note 93 92 96 12 NOTE_INSN_DELETED)

(note 96 93 89 12 NOTE_INSN_DELETED)

(insn 89 96 95 12 arch/arm/mm/dma-mapping.c:274 (set (reg:SI 171 [ <variable>.vm_start ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 95 89 90 12 arch/arm/mm/dma-mapping.c:276 (set (reg/f:SI 174)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 90 95 94 12 arch/arm/mm/dma-mapping.c:274 (set (reg:SI 140 [ D.25251 ])
        (plus:SI (reg:SI 171 [ <variable>.vm_start ])
            (const_int 16777216 [0x1000000]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 171 [ <variable>.vm_start ])
        (nil)))

(insn 94 90 115 12 arch/arm/mm/dma-mapping.c:275 (set (reg/v:SI 144 [ off ])
        (zero_extract:SI (reg:SI 140 [ D.25251 ])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (expr_list:REG_DEAD (reg:SI 140 [ D.25251 ])
        (nil)))

(insn 115 94 91 12 arch/arm/mm/dma-mapping.c:286 (set (reg/f:SI 191)
        (reg/f:SI 174)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 174)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
            (nil))))

(insn 91 115 97 12 arch/arm/mm/dma-mapping.c:274 (set (reg/v:SI 143 [ idx ])
        (lshiftrt:SI (reg:SI 140 [ D.25251 ])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn 97 91 98 12 arch/arm/mm/dma-mapping.c:276 (set (reg/f:SI 176)
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 143 [ idx ])
                    (const_int 4 [0x4]))
                (reg/f:SI 174)) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 143 [ idx ])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
        (nil)))

(insn 98 97 137 12 arch/arm/mm/dma-mapping.c:276 (set (reg/v/f:SI 142 [ ptep ])
        (plus:SI (mult:SI (reg/v:SI 144 [ off ])
                (const_int 4 [0x4]))
            (reg/f:SI 176))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/f:SI 176)
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 19) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u123(11){ }u124(13){ }u125(25){ }u126(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142 144
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 144 145
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 144 145
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  19 [86.0%]  (dfs_back)
(code_label 137 98 99 13 135 "" [1 uses])

(note 99 137 184 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 184 99 105 13 include/asm-generic/pgtable.h:77 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 105 184 101 13 arch/arm/mm/dma-mapping.c:283 (set (reg/v:SI 144 [ off ])
        (plus:SI (reg/v:SI 144 [ off ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 101 105 103 13 include/asm-generic/pgtable.h:77 (set (reg:SI 0 r0)
        (reg/v/f:SI 142 [ ptep ])) 167 {*arm_movsi_insn} (nil))

(insn 103 101 100 13 include/asm-generic/pgtable.h:77 (set (reg:SI 2 r2)
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 100 103 104 13 include/asm-generic/pgtable.h:76 (set (reg/v:SI 145 [ pte ])
        (mem:SI (reg/v/f:SI 142 [ ptep ]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 104 100 106 13 include/asm-generic/pgtable.h:77 (parallel [
            (call (mem:SI (symbol_ref:SI ("cpu_v7_set_pte_ext") [flags 0x41] <function_decl 0x10e63d00 cpu_v7_set_pte_ext>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 106 104 109 13 arch/arm/mm/dma-mapping.c:284 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 144 [ off ])
            (const_int 512 [0x200]))) 219 {*arm_cmpsi_insn} (nil))

(insn 109 106 107 13 arch/arm/mm/dma-mapping.c:281 (set (reg/v/f:SI 142 [ ptep ])
        (plus:SI (reg/v/f:SI 142 [ ptep ])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn 107 109 108 13 arch/arm/mm/dma-mapping.c:284 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 112)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 13 -> ( 15 14)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191


;; Succ edge  15 [50.0%] 
;; Succ edge  14 [50.0%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u137(11){ }u138(13){ }u139(25){ }u140(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 142
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  gen 	 142
;; live  kill	

;; Pred edge  13 [50.0%]  (fallthru)
(note 108 107 193 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn 193 108 194 14 (set (pc)
        (label_ref 118)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191


;; Succ edge  16 [100.0%] 

(barrier 194 193 112)

;; Start of basic block ( 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u142(11){ }u143(13){ }u144(25){ }u145(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 143 145 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 191
;; lr  def 	 142 143 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 143 145 154 191
;; live  gen 	 142 143 144
;; live  kill	

;; Pred edge  13 [50.0%] 
(code_label 112 194 113 15 131 "" [1 uses])

(note 113 112 114 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 114 113 186 15 arch/arm/mm/dma-mapping.c:286 (set (reg/v:SI 143 [ idx ])
        (plus:SI (reg/v:SI 143 [ idx ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 186 114 116 15 arch/arm/mm/dma-mapping.c:285 (set (reg/v:SI 144 [ off ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 116 186 118 15 arch/arm/mm/dma-mapping.c:286 (set (reg/v/f:SI 142 [ ptep ])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 143 [ idx ])
                    (const_int 4 [0x4]))
                (reg/f:SI 191)) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 143 [ idx ])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191


;; Succ edge  16 [100.0%]  (fallthru)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u150(11){ }u151(13){ }u152(25){ }u153(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 118 116 119 16 132 "" [1 uses])

(note 119 118 120 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 120 119 121 16 arch/arm/mm/dma-mapping.c:289 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 145 [ pte ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 121 120 122 16 arch/arm/mm/dma-mapping.c:289 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 126)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 16 -> ( 18 17)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191


;; Succ edge  18 [0.0%] 
;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u156(11){ }u157(13){ }u158(25){ }u159(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 145
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 145 154 191
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
(note 122 121 123 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 123 122 124 17 NOTE_INSN_DELETED)

(insn 124 123 125 17 arch/arm/mm/dma-mapping.c:289 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 145 [ pte ])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 145 [ pte ])
        (nil)))

(jump_insn 125 124 126 17 arch/arm/mm/dma-mapping.c:289 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 134)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191


;; Succ edge  18 [0.0%]  (fallthru)
;; Succ edge  19 [100.0%] 

;; Start of basic block ( 16 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u163(11){ }u164(13){ }u165(25){ }u166(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  16 [0.0%] 
;; Pred edge  17 [0.0%]  (fallthru)
(code_label 126 125 127 18 133 "" [1 uses])

(note 127 126 187 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 187 127 188 18 arch/arm/mm/dma-mapping.c:290 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114f1ac0>)) 167 {*arm_movsi_insn} (nil))

(insn 188 187 133 18 arch/arm/mm/dma-mapping.c:290 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (nil))

(call_insn 133 188 134 18 arch/arm/mm/dma-mapping.c:290 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 18 -> ( 19)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 17 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u170(11){ }u171(13){ }u172(25){ }u173(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135
;; lr  def 	 24 [cc] 135
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  gen 	 24 [cc] 135
;; live  kill	

;; Pred edge  17 [100.0%] 
;; Pred edge  18 [100.0%]  (fallthru)
(code_label 134 133 135 19 134 "" [1 uses])

(note 135 134 136 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 136 135 138 19 NOTE_INSN_DELETED)

(insn 138 136 139 19 arch/arm/mm/dma-mapping.c:292 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (reg/v:SI 135 [ size.827 ])
                        (const_int -4096 [0xfffffffffffff000]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 135 [ size.827 ])
                (plus:SI (reg/v:SI 135 [ size.827 ])
                    (const_int -4096 [0xfffffffffffff000])))
        ]) 6 {*addsi3_compare0} (nil))

(jump_insn 139 138 140 19 arch/arm/mm/dma-mapping.c:292 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 137)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 19 -> ( 13 20)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 135 136 141 142 143 144 154 191


;; Succ edge  13 [86.0%]  (dfs_back)
;; Succ edge  20 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u177(11){ }u178(13){ }u179(25){ }u180(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 141 154
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  19 [14.0%]  (fallthru,loop_exit)
(note 140 139 141 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(insn 141 140 142 20 arch/arm/mm/dma-mapping.c:294 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 142 141 143 20 arch/arm/mm/dma-mapping.c:294 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 143 142 146 20 arch/arm/mm/dma-mapping.c:294 (parallel [
            (call (mem:SI (symbol_ref:SI ("flush_tlb_kernel_range") [flags 0x41] <function_decl 0x11440480 flush_tlb_kernel_range>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 146 143 145 20 arch/arm/mm/dma-mapping.c:296 (set (reg:SI 1 r1)
        (reg/v/f:SI 141 [ c ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 141 [ c ])
        (nil)))

(insn 145 146 147 20 arch/arm/mm/dma-mapping.c:296 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(call_insn 147 145 148 20 arch/arm/mm/dma-mapping.c:296 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_vmregion_free") [flags 0x41] <function_decl 0x11440d80 arm_vmregion_free>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 20 -> ( 21)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 154
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 154


;; Succ edge  21 [100.0%]  (fallthru)

;; Start of basic block ( 20 8) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u190(11){ }u191(13){ }u192(25){ }u193(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 154
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 154
;; lr  def 	 137 138 183 184 186
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 154
;; live  gen 	 137 138 183 184 186
;; live  kill	

;; Pred edge  20 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 148 147 149 21 128 "" [1 uses])

(note 149 148 152 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(note 152 149 155 21 NOTE_INSN_DELETED)

(note 155 152 156 21 NOTE_INSN_DELETED)

(note 156 155 150 21 NOTE_INSN_DELETED)

(insn 150 156 151 21 arch/arm/mm/dma-mapping.c:430 (set (reg/f:SI 183)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn 151 150 153 21 arch/arm/mm/dma-mapping.c:430 (set (reg:SI 184)
        (lshiftrt:SI (reg/v:SI 154 [ handle ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 154 [ handle ])
        (nil)))

(insn 153 151 154 21 arch/arm/mm/dma-mapping.c:430 (set (reg/f:SI 186 [ mem_map ])
        (mem/f/c/i:SI (reg/f:SI 183) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 183)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 154 153 157 21 arch/arm/mm/dma-mapping.c:430 (set (reg/v/f:SI 138 [ page ])
        (plus:SI (mult:SI (reg:SI 184)
                (const_int 32 [0x20]))
            (reg/f:SI 186 [ mem_map ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/f:SI 186 [ mem_map ])
        (expr_list:REG_DEAD (reg:SI 184)
            (nil))))

(insn 157 154 195 21 arch/arm/mm/dma-mapping.c:111 (set (reg/v/f:SI 137 [ e ])
        (plus:SI (lshiftrt:SI (reg/v:SI 136 [ size.823 ])
                (const_int 7 [0x7]))
            (reg/v/f:SI 138 [ page ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/v:SI 136 [ size.823 ])
        (nil)))

(jump_insn 195 157 196 21 (set (pc)
        (label_ref 165)) 242 {*arm_jump} (nil))
;; End of basic block 21 -> ( 23)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138


;; Succ edge  23 [100.0%] 

(barrier 196 195 167)

;; Start of basic block ( 23) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u203(11){ }u204(13){ }u205(25){ }u206(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 138
;; live  in  	 0 [r0] 1 [r1] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; live  gen 	 0 [r0] 1 [r1] 138
;; live  kill	 14 [lr]

;; Pred edge  23 [91.0%] 
(code_label 167 196 160 22 137 "" [1 uses])

(note 160 167 163 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(call_insn 163 160 165 22 arch/arm/mm/dma-mapping.c:114 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10cd6800 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 22 -> ( 23)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138


;; Succ edge  23 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 22 21) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u212(11){ }u213(13){ }u214(25){ }u215(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  22 [100.0%]  (fallthru,dfs_back)
;; Pred edge  21 [100.0%] 
(code_label 165 163 166 23 136 "" [1 uses])

(note 166 165 161 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn 161 166 183 23 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 0 r0)
        (reg/v/f:SI 138 [ page ])) 167 {*arm_movsi_insn} (nil))

(insn 183 161 168 23 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 168 183 164 23 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 138 [ page ])
            (reg/v/f:SI 137 [ e ]))) 219 {*arm_cmpsi_insn} (nil))

(insn 164 168 169 23 arch/arm/mm/dma-mapping.c:115 (set (reg/v/f:SI 138 [ page ])
        (plus:SI (reg/v/f:SI 138 [ page ])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(jump_insn 169 164 175 23 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 23 -> ( 22 24)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 137 138
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138


;; Succ edge  22 [91.0%] 
;; Succ edge  24 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 23 6) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u219(11){ }u220(13){ }u221(25){ }u222(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	
;; live  kill	

;; Pred edge  23 [9.0%]  (fallthru,loop_exit)
;; Pred edge  6 [61.0%] 
(code_label 175 169 178 24 138 "" [1 uses])

(note 178 175 199 24 [bb 24] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 24 -> ( 1)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 199 178 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_mmap (dma_mmap)[0:1280]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 10 (  1.4)


dma_mmap

Dataflow summary:
def_info->table_size = 274, use_info->table_size = 75
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={5d,3u} r2={4d,2u} r3={4d,1u} r11={1d,6u} r12={3d} r13={1d,8u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,3u} r25={1d,6u} r26={1d,6u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={1d,3u} r134={1d,3u} r135={1d,2u} r136={1d,2u} r138={1d,1u} r139={1d,1u} r142={1d,5u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r160={1d,1u} 
;;    total ref usage 340{270d,70u,0e} in 33{31 regular + 2 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d5(0){ }d10(1){ }d14(2){ }d18(3){ }d19(11){ }d22(12){ }d23(13){ }d25(14){ }d49(25){ }d50(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 3 6 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 138 139 142
;; live  in  	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 138 139 142
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 139 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 139 142

( 2 )->[3]->( 4 6 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(11){ }u16(13){ }u17(25){ }u18(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 139 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142
;; lr  def 	 24 [cc] 133 135 147 148 149
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 139 142
;; live  gen 	 24 [cc] 133 135 147 148 149
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 135 138 139 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 142

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u28(11){ }u29(13){ }u30(25){ }u31(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 135 138 139 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138 139
;; lr  def 	 24 [cc] 136 150 151
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 142
;; live  gen 	 24 [cc] 136 150 151
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 142

( 4 )->[5]->( 1 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u40(11){ }u41(13){ }u42(25){ }u43(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 142
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 152 153 154 155 160
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 142
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 152 153 154 155 160
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 2 3 4 )->[6]->( 1 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 5 6 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u70(0){ }u71(11){ }u72(13){ }u73(14){ }u74(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 18 to worklist
  Adding insn 15 to worklist
  Adding insn 26 to worklist
  Adding insn 32 to worklist
  Adding insn 47 to worklist
  Adding insn 42 to worklist
  Adding insn 64 to worklist
Finished finding needed instructions:
processing block 5 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 46 to worklist
  Adding insn 45 to worklist
  Adding insn 44 to worklist
  Adding insn 43 to worklist
  Adding insn 41 to worklist
  Adding insn 37 to worklist
  Adding insn 36 to worklist
  Adding insn 35 to worklist
  Adding insn 34 to worklist
processing block 6 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 58 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 142
  Adding insn 31 to worklist
  Adding insn 30 to worklist
  Adding insn 29 to worklist
  Adding insn 28 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 135 138 139 142
  Adding insn 25 to worklist
  Adding insn 24 to worklist
  Adding insn 23 to worklist
  Adding insn 22 to worklist
  Adding insn 21 to worklist
  Adding insn 20 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 139 142
  Adding insn 17 to worklist
  Adding insn 14 to worklist
  Adding insn 13 to worklist
  Adding insn 11 to worklist
  Adding insn 10 to worklist
  Adding insn 3 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 7 n_edges 9 count 12 (  1.7)
;;   ======================================================
;;   -- basic block 2 from 3 to 18 -- before reload
;;   ======================================================

;;	  0-->     3 r142=r1                           :cortex_a8_default
;;	  0-->    14 r1=r2                             :cortex_a8_default
;;	  1-->    13 r0=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  2-->    10 r139=[r142+0x8]                   :cortex_a8_load_store_1
;;	  3-->    11 r138=[r142+0x4]                   :cortex_a8_load_store_1
;;	  3-->    15 r0=call [`arm_vmregion_find']     :cortex_a8_issue_branch
;;	 35-->    17 {cc=cmp(r0,0x0);r134=r0;}         :cortex_a8_default
;;	 37-->    18 pc={(cc==0x0)?L50:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 37
;;   new head = 3
;;   new tail = 18

;;   ======================================================
;;   -- basic block 3 from 20 to 26 -- before reload
;;   ======================================================

;;	  0-->    21 r148=[r134+0xc]                   :cortex_a8_load_store_1
;;	  1-->    22 r149=[r134+0x8]                   :cortex_a8_load_store_1
;;	  2-->    20 r133=[r142+0x48]                  :cortex_a8_load_store_1
;;	  3-->    23 r147=r148-r149                    :cortex_a8_default
;;	  5-->    24 r135=r147 0>>0xc                  :cortex_a8_default
;;	  6-->    25 cc=cmp(r133,r135)                 :cortex_a8_default
;;	  8-->    26 pc={(geu(cc,0x0))?L50:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 20
;;   new tail = 26

;;   ======================================================
;;   -- basic block 4 from 28 to 32 -- before reload
;;   ======================================================

;;	  0-->    28 r150=r139-r138                    :cortex_a8_default
;;	  0-->    30 r151=r135-r133                    :cortex_a8_default
;;	  2-->    29 r136=r150 0>>0xc                  :cortex_a8_default
;;	  3-->    31 cc=cmp(r136,r151)                 :cortex_a8_default
;;	  5-->    32 pc={(gtu(cc,0x0))?L50:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 28
;;   new tail = 32

;;   ======================================================
;;   -- basic block 5 from 34 to 47 -- before reload
;;   ======================================================

;;	  0-->    34 r152=`mem_map'                    :cortex_a8_load_store_1
;;	  0-->    43 r0=r142                           :cortex_a8_default
;;	  1-->    35 r154=[r134+0x10]                  :cortex_a8_load_store_1
;;	  1-->    46 r3=r136<<0xc                      :cortex_a8_default
;;	  2-->    41 r160=[r142+0x14]                  :cortex_a8_load_store_1
;;	  3-->    36 r155=[r152]                       :cortex_a8_load_store_1
;;	  5-->    37 r153=r154-r155                    :cortex_a8_default
;;	  5-->    42 [afp+0x4]=r160                    :cortex_a8_load_store_1
;;	  6-->    44 r1=[r0+0x4]                       :cortex_a8_load_store_1
;;	  7-->    45 r2=r153>>0x5+r133                 :cortex_a8_default
;;	  8-->    47 r0=call [`remap_pfn_range']       :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 34
;;   new tail = 47

;;   ======================================================
;;   -- basic block 6 from 58 to 64 -- before reload
;;   ======================================================

;;	  0-->    58 r0=0xfffffffffffffffa             :cortex_a8_default
;;	  0-->    64 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 58
;;   new tail = 64


;; Procedure interblock/speculative motions == 0/0 




dma_mmap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,7u} r1={5d,3u} r2={4d,2u} r3={4d,1u} r11={1d,6u} r12={3d} r13={1d,8u} r14={2d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,3u} r25={1d,6u} r26={1d,6u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={1d,3u} r134={1d,3u} r135={1d,2u} r136={1d,2u} r138={1d,1u} r139={1d,1u} r142={1d,5u} r147={1d,1u} r148={1d,1u} r149={1d,1u} r150={1d,1u} r151={1d,1u} r152={1d,1u} r153={1d,1u} r154={1d,1u} r155={1d,1u} r160={1d,1u} 
;;    total ref usage 340{270d,70u,0e} in 33{31 regular + 2 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 134 138 139 142
;; live  in  	 1 [r1] 2 [r2] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 134 138 139 142
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 8 7 2 NOTE_INSN_DELETED)

(note 7 4 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 7 3 2 NOTE_INSN_DELETED)

(insn 3 16 14 2 arch/arm/mm/dma-mapping.c:371 (set (reg/v/f:SI 142 [ vma ])
        (reg:SI 1 r1 [ vma ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ vma ])
        (nil)))

(insn 14 3 13 2 arch/arm/mm/dma-mapping.c:379 (set (reg:SI 1 r1)
        (reg:SI 2 r2 [ cpu_addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ cpu_addr ])
        (nil)))

(insn 13 14 10 2 arch/arm/mm/dma-mapping.c:379 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 10 13 11 2 arch/arm/mm/dma-mapping.c:377 (set (reg:SI 139 [ D.24577 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 142 [ vma ])
                (const_int 8 [0x8])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 11 10 15 2 arch/arm/mm/dma-mapping.c:377 (set (reg:SI 138 [ D.24578 ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 142 [ vma ])
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 15 11 17 2 arch/arm/mm/dma-mapping.c:379 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arm_vmregion_find") [flags 0x41] <function_decl 0x11440c80 arm_vmregion_find>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 17 15 18 2 arch/arm/mm/dma-mapping.c:380 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 134 [ c ])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 18 17 19 2 arch/arm/mm/dma-mapping.c:380 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8090 [0x1f9a])
            (nil))))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 139 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 139 142


;; Succ edge  3 [19.1%]  (fallthru)
;; Succ edge  6 [80.9%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u15(11){ }u16(13){ }u17(25){ }u18(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 139 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142
;; lr  def 	 24 [cc] 133 135 147 148 149
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 139 142
;; live  gen 	 24 [cc] 133 135 147 148 149
;; live  kill	

;; Pred edge  2 [19.1%]  (fallthru)
(note 19 18 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 21 19 22 3 arch/arm/mm/dma-mapping.c:383 (set (reg:SI 148 [ <variable>.vm_end ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ c ])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 22 21 20 3 arch/arm/mm/dma-mapping.c:383 (set (reg:SI 149 [ <variable>.vm_start ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 134 [ c ])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 20 22 23 3 arch/arm/mm/dma-mapping.c:381 (set (reg/v:SI 133 [ off ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 142 [ vma ])
                (const_int 72 [0x48])) [0 <variable>.vm_pgoff+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 23 20 24 3 arch/arm/mm/dma-mapping.c:383 (set (reg:SI 147)
        (minus:SI (reg:SI 148 [ <variable>.vm_end ])
            (reg:SI 149 [ <variable>.vm_start ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 149 [ <variable>.vm_start ])
        (expr_list:REG_DEAD (reg:SI 148 [ <variable>.vm_end ])
            (nil))))

(insn 24 23 25 3 arch/arm/mm/dma-mapping.c:383 (set (reg/v:SI 135 [ kern_size ])
        (lshiftrt:SI (reg:SI 147)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 147)
        (nil)))

(insn 25 24 26 3 arch/arm/mm/dma-mapping.c:385 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 133 [ off ])
            (reg/v:SI 135 [ kern_size ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 26 25 27 3 arch/arm/mm/dma-mapping.c:385 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9600 [0x2580])
            (nil))))
;; End of basic block 3 -> ( 4 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 135 138 139 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 142


;; Succ edge  4 [4.0%]  (fallthru)
;; Succ edge  6 [96.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u28(11){ }u29(13){ }u30(25){ }u31(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 135 138 139 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 135 138 139
;; lr  def 	 24 [cc] 136 150 151
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 135 138 139 142
;; live  gen 	 24 [cc] 136 150 151
;; live  kill	

;; Pred edge  3 [4.0%]  (fallthru)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 30 4 arch/arm/mm/dma-mapping.c:377 (set (reg:SI 150)
        (minus:SI (reg:SI 139 [ D.24577 ])
            (reg:SI 138 [ D.24578 ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 139 [ D.24577 ])
        (expr_list:REG_DEAD (reg:SI 138 [ D.24578 ])
            (nil))))

(insn 30 28 29 4 arch/arm/mm/dma-mapping.c:386 (set (reg:SI 151)
        (minus:SI (reg/v:SI 135 [ kern_size ])
            (reg/v:SI 133 [ off ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ kern_size ])
        (nil)))

(insn 29 30 31 4 arch/arm/mm/dma-mapping.c:377 (set (reg/v:SI 136 [ user_size ])
        (lshiftrt:SI (reg:SI 150)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 150)
        (nil)))

(insn 31 29 32 4 arch/arm/mm/dma-mapping.c:386 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 136 [ user_size ])
            (reg:SI 151))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 151)
        (nil)))

(jump_insn 32 31 33 4 arch/arm/mm/dma-mapping.c:386 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 142
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 142


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  6 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u40(11){ }u41(13){ }u42(25){ }u43(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133 134 136 142
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 142
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 152 153 154 155 160
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133 134 136 142
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 152 153 154 155 160
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 33 32 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 38 33 39 5 NOTE_INSN_DELETED)

(note 39 38 40 5 NOTE_INSN_DELETED)

(note 40 39 34 5 NOTE_INSN_DELETED)

(insn 34 40 43 5 arch/arm/mm/dma-mapping.c:387 (set (reg/f:SI 152)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn 43 34 35 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 0 r0)
        (reg/v/f:SI 142 [ vma ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 142 [ vma ])
        (nil)))

(insn 35 43 46 5 arch/arm/mm/dma-mapping.c:387 (set (reg/f:SI 154 [ <variable>.vm_pages ])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 134 [ c ])
                (const_int 16 [0x10])) [0 <variable>.vm_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 134 [ c ])
        (nil)))

(insn 46 35 41 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 3 r3)
        (ashift:SI (reg/v:SI 136 [ user_size ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 136 [ user_size ])
        (nil)))

(insn 41 46 36 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 160 [ <variable>.vm_page_prot ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 142 [ vma ])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 36 41 37 5 arch/arm/mm/dma-mapping.c:387 (set (reg/f:SI 155 [ mem_map ])
        (mem/f/c/i:SI (reg/f:SI 152) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 152)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 37 36 42 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 153)
        (minus:SI (reg/f:SI 154 [ <variable>.vm_pages ])
            (reg/f:SI 155 [ mem_map ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 155 [ mem_map ])
        (expr_list:REG_DEAD (reg/f:SI 154 [ <variable>.vm_pages ])
            (nil))))

(insn 42 37 44 5 arch/arm/mm/dma-mapping.c:387 (set (mem:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 160 [ <variable>.vm_page_prot ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 160 [ <variable>.vm_page_prot ])
        (nil)))

(insn 44 42 45 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 0 r0)
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 45 44 47 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 2 r2)
        (plus:SI (ashiftrt:SI (reg:SI 153)
                (const_int 5 [0x5]))
            (reg/v:SI 133 [ off ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 153)
        (expr_list:REG_DEAD (reg/v:SI 133 [ off ])
            (nil))))

(call_insn/j 47 45 48 5 arch/arm/mm/dma-mapping.c:387 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("remap_pfn_range") [flags 0x41] <function_decl 0x10fb1200 remap_pfn_range>) [0 S4 A32])
                    (const_int 4 [0x4])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 48 47 50)

;; Start of basic block ( 2 3 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [80.9%] 
;; Pred edge  3 [96.0%] 
;; Pred edge  4 [61.0%] 
(code_label 50 48 51 6 144 "" [3 uses])

(note 51 50 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 58 51 64 6 arch/arm/mm/dma-mapping.c:396 (set (reg/i:SI 0 r0)
        (const_int -6 [0xfffffffffffffffa])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -6 [0xfffffffffffffffa])
        (nil)))

(insn 64 58 68 6 arch/arm/mm/dma-mapping.c:396 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 68 64 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_mmap_writecombine (dma_mmap_writecombine)[0:1282]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 3 to 19 -- before reload
;;   ======================================================

;;	  0-->     3 r136=r1                           :cortex_a8_default
;;	  0-->     6 r139=[afp+0x4]                    :cortex_a8_load_store_1
;;	  2-->    10 r141=[r136+0x14]                  :cortex_a8_load_store_1
;;	  3-->    14 [afp+0x4]=r139                    :cortex_a8_load_store_1
;;	  4-->    11 r140=r141&0xffffffffffffffc3      :cortex_a8_default
;;	  5-->    12 r142=r140|0x4                     :cortex_a8_default
;;	  5-->    13 [r136+0x14]=r142                  :cortex_a8_load_store_1
;;	  6-->    19 r0=call [`dma_mmap']              :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 3
;;   new tail = 19


;; Procedure interblock/speculative motions == 0/0 




dma_mmap_writecombine

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,2u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,3u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r136={1d,2u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} 
;;    total ref usage 154{131d,23u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 139 140 141 142
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 136 139 140 141 142
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 3 2 NOTE_INSN_FUNCTION_BEG)

(insn 3 7 6 2 arch/arm/mm/dma-mapping.c:408 (set (reg/v/f:SI 136 [ vma ])
        (reg:SI 1 r1 [ vma ])) 167 {*arm_movsi_insn} (nil))

(insn 6 3 10 2 arch/arm/mm/dma-mapping.c:408 (set (reg/v:SI 139 [ size ])
        (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 10 6 14 2 arch/arm/mm/dma-mapping.c:409 (set (reg:SI 141 [ <variable>.vm_page_prot ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 14 10 11 2 arch/arm/mm/dma-mapping.c:410 (set (mem:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 139 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ size ])
        (nil)))

(insn 11 14 12 2 arch/arm/mm/dma-mapping.c:409 (set (reg:SI 140)
        (and:SI (reg:SI 141 [ <variable>.vm_page_prot ])
            (const_int -61 [0xffffffffffffffc3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 141 [ <variable>.vm_page_prot ])
        (nil)))

(insn 12 11 13 2 arch/arm/mm/dma-mapping.c:409 (set (reg:SI 142)
        (ior:SI (reg:SI 140)
            (const_int 4 [0x4]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 140)
        (nil)))

(insn 13 12 19 2 arch/arm/mm/dma-mapping.c:409 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
        (reg:SI 142)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 142)
        (expr_list:REG_DEAD (reg/v/f:SI 136 [ vma ])
            (nil))))

(call_insn/j 19 13 20 2 arch/arm/mm/dma-mapping.c:410 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_mmap") [flags 0x3] <function_decl 0x1145e500 dma_mmap>) [0 S4 A32])
                    (const_int 4 [0x4])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 20 19 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_mmap_coherent (dma_mmap_coherent)[0:1281]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 3 to 19 -- before reload
;;   ======================================================

;;	  0-->     3 r136=r1                           :cortex_a8_default
;;	  0-->     6 r139=[afp+0x4]                    :cortex_a8_load_store_1
;;	  2-->    10 r141=[r136+0x14]                  :cortex_a8_load_store_1
;;	  3-->    14 [afp+0x4]=r139                    :cortex_a8_load_store_1
;;	  4-->    11 r140=r141&0xfffffffffffffdc3      :cortex_a8_default
;;	  5-->    12 r142=r140|0x204                   :cortex_a8_default
;;	  5-->    13 [r136+0x14]=r142                  :cortex_a8_load_store_1
;;	  6-->    19 r0=call [`dma_mmap']              :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 3
;;   new tail = 19


;; Procedure interblock/speculative motions == 0/0 




dma_mmap_coherent

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp]
;;  ref usage 	r0={2d,2u} r1={2d,2u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,3u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r136={1d,2u} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} 
;;    total ref usage 154{131d,23u,0e} in 8{7 regular + 1 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 139 140 141 142
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 136 139 140 141 142
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 3 2 NOTE_INSN_FUNCTION_BEG)

(insn 3 7 6 2 arch/arm/mm/dma-mapping.c:400 (set (reg/v/f:SI 136 [ vma ])
        (reg:SI 1 r1 [ vma ])) 167 {*arm_movsi_insn} (nil))

(insn 6 3 10 2 arch/arm/mm/dma-mapping.c:400 (set (reg/v:SI 139 [ size ])
        (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 10 6 14 2 arch/arm/mm/dma-mapping.c:401 (set (reg:SI 141 [ <variable>.vm_page_prot ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 14 10 11 2 arch/arm/mm/dma-mapping.c:402 (set (mem:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg/v:SI 139 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ size ])
        (nil)))

(insn 11 14 12 2 arch/arm/mm/dma-mapping.c:401 (set (reg:SI 140)
        (and:SI (reg:SI 141 [ <variable>.vm_page_prot ])
            (const_int -573 [0xfffffffffffffdc3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 141 [ <variable>.vm_page_prot ])
        (nil)))

(insn 12 11 13 2 arch/arm/mm/dma-mapping.c:401 (set (reg:SI 142)
        (ior:SI (reg:SI 140)
            (const_int 516 [0x204]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 140)
        (nil)))

(insn 13 12 19 2 arch/arm/mm/dma-mapping.c:401 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 136 [ vma ])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
        (reg:SI 142)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 142)
        (expr_list:REG_DEAD (reg/v/f:SI 136 [ vma ])
            (nil))))

(call_insn/j 19 13 20 2 arch/arm/mm/dma-mapping.c:402 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_mmap") [flags 0x3] <function_decl 0x1145e500 dma_mmap>) [0 S4 A32])
                    (const_int 4 [0x4])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 20 19 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function __dma_alloc (__dma_alloc)[0:1277]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 38 n_edges 53 count 76 (    2)


__dma_alloc

Dataflow summary:
def_info->table_size = 1903, use_info->table_size = 363
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={29d,22u} r1={29d,14u} r2={20d,5u} r3={19d,4u} r11={1d,37u} r12={16d} r13={1d,53u} r14={16d,1u} r15={15d} r16={15d} r17={15d} r18={15d} r19={15d} r20={15d} r21={15d} r22={15d} r23={15d} r24={33d,17u} r25={1d,37u} r26={1d,37u,1d} r27={15d} r28={15d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={15d} r37={15d} r38={15d} r39={15d} r40={15d} r41={15d} r42={15d} r43={15d} r44={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} r76={15d} r77={15d} r78={15d} r79={15d} r80={15d} r81={15d} r82={15d} r83={15d} r84={15d} r85={15d} r86={15d} r87={15d} r88={15d} r89={15d} r90={15d} r91={15d} r92={15d} r93={15d} r94={15d} r95={15d} r96={15d} r97={15d} r98={15d} r99={15d} r100={15d} r101={15d} r102={15d} r103={15d} r104={15d} r105={15d} r106={15d} r107={15d} r108={15d} r109={15d} r110={15d} r111={15d} r112={15d} r113={15d} r114={15d} r115={15d} r116={15d} r117={15d} r118={15d} r119={15d} r120={15d} r121={15d} r122={15d} r123={15d} r124={15d} r125={15d} r126={15d} r127={15d} r134={2d,2u} r135={1d,1u} r136={2d,3u} r137={2d,1u} r138={3d,10u} r139={1d,3u} r140={1d,2u} r141={1d,3u} r142={3d,3u} r143={2d,3u,2d} r144={3d,3u} r145={1d,1u} r148={1d,2u} r149={1d,1u} r150={1d,4u} r152={2d,4u} r153={2d,4u} r154={1d,2u} r155={1d,2u} r156={4d,2u} r157={2d,9u} r158={1d,1u} r160={1d,5u} r161={1d} r162={1d,2u} r164={1d,1u} r165={1d,2u} r166={1d,1u} r168={1d,2u} r174={1d,1u} r176={1d,1u} r179={1d,1u} r180={1d,1u} r183={1d,1u} r185={1d,1u} r191={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r200={1d,1u} r201={1d,3u} r204={1d,1u,1d} r205={1d,1u} r207={1d,1u} r211={1d,1u} r212={1d,1u,1d} r213={1d,1u} r215={1d,1u} r216={1d,1u} r218={1d,3u} r219={1d,1u} r221={1d,1u} r222={1d,1u} r225={1d,4u} r226={1d,3u} r227={1d,1u} r228={1d,1u} r229={1d,1u} 
;;    total ref usage 2239{1889d,344u,6e} in 166{151 regular + 15 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d28(0){ }d57(1){ }d77(2){ }d96(3){ }d97(11){ }d113(12){ }d114(13){ }d130(14){ }d299(25){ }d300(26){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 0 )->[2]->( 3 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138 139 152 153 154 158 160 162 164 165 166
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 138 139 152 153 154 158 160 162 164 165 166
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164

( 2 3 )->[3]->( 3 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u22(11){ }u23(13){ }u24(25){ }u25(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153
;; lr  def 	 24 [cc] 152 153
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  gen 	 24 [cc] 152 153
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164

( 3 )->[4]->( 5 12 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u30(11){ }u31(13){ }u32(25){ }u33(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164

( 4 )->[5]->( 6 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160
;; lr  def 	 24 [cc] 168 225 226 227 228 229
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  gen 	 24 [cc] 151 168
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 151 152 153 154 160 162 164

( 5 )->[6]->( 35 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u48(11){ }u49(13){ }u50(25){ }u51(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160
;; live  gen 	 0 [r0] 1 [r1] 156
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156

( 5 )->[7]->( 8 9 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u57(11){ }u58(13){ }u59(25){ }u60(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 225
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 151 152 153 154 160 162 164
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 151 152 153 154 160 162 164

( 7 )->[8]->( 35 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160 225 226
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160 225 226
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 156 174
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 151 152 160
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 156 174
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156

( 7 )->[9]->( 12 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u79(11){ }u80(13){ }u81(25){ }u82(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225 226
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 226
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 151 153 154 162 164
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 151 153 154 162 164

( 9 )->[10]->( 12 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u85(11){ }u86(13){ }u87(25){ }u88(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 225
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 151 153 154 162 164
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164

( 10 )->[11]->( 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; live  gen 	 137
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164

( 4 9 10 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u96(11){ }u97(13){ }u98(25){ }u99(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; live  gen 	 137
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164

( 12 11 )->[13]->( 34 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u101(11){ }u102(13){ }u103(25){ }u104(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 157
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 157
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 153 154 157 162 164
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 157 162 164

( 13 )->[14]->( 16 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u115(11){ }u116(13){ }u117(25){ }u118(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 157 162 164
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 153 157
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 148 149 176 179
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 157 162 164
;; live  gen 	 1 [r1] 136 148 149 176 179
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164

( 16 )->[15]->( 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u133(11){ }u134(13){ }u135(25){ }u136(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  gen 	 0 [r0] 1 [r1] 136
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164

( 15 14 )->[16]->( 15 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u142(11){ }u143(13){ }u144(25){ }u145(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 149
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164

( 16 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u149(11){ }u150(13){ }u151(25){ }u152(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 157
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 150
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; live  gen 	 0 [r0] 24 [cc] 150
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164

( 17 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u159(11){ }u160(13){ }u161(25){ }u162(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164

( 17 18 )->[19]->( 20 36 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u167(11){ }u168(13){ }u169(25){ }u170(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 150
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 155 180 183
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 155 180 183
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 155 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 155 157 162 164

( 19 )->[20]->( 36 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u183(11){ }u184(13){ }u185(25){ }u186(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 155 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 150 155
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 155 157 162 164
;; live  gen 	 0 [r0] 1 [r1] 185
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164

( 37 )->[21]->( 33 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u197(11){ }u198(13){ }u199(25){ }u200(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157

( 36 )->[22]->( 23 33 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u205(11){ }u206(13){ }u207(25){ }u208(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164 218
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 154
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 141 145 191 193 194
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164 218
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 135 141 145 191 193 194
;; live  kill	 14 [lr] 24 [cc]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 141 148 157 162 164 218
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141 148 157 162 164 218

( 22 )->[23]->( 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u227(11){ }u228(13){ }u229(25){ }u230(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141 148 157 162 164 218
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 157 218
;; lr  def 	 134 140 142 143 144 195 200 221 222
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141 148 157 162 164 218
;; live  gen 	 134 140 142 143 144 195 200 221 222
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222

( 23 29 )->[24]->( 25 26 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u248(11){ }u249(13){ }u250(25){ }u251(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc] 201
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  gen 	 24 [cc] 201
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222

( 24 )->[25]->( )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u255(11){ }u256(13){ }u257(25){ }u258(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]

( 24 )->[26]->( 27 28 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u262(11){ }u263(13){ }u264(25){ }u265(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 144 164 201 221
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142 144 204 205 207
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 142 144 204 205 207
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222

( 26 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u285(11){ }u286(13){ }u287(25){ }u288(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 143 148 157 162 164 201 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 201 222
;; lr  def 	 142 143 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 143 148 157 162 164 201 221 222
;; live  gen 	 142 143 144
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222

( 26 27 )->[28]->( 29 30 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u294(11){ }u295(13){ }u296(25){ }u297(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc] 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  gen 	 24 [cc] 138
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222

( 28 )->[29]->( 24 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u301(11){ }u302(13){ }u303(25){ }u304(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  gen 	 134
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222

( 28 )->[30]->( 31 33 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u306(11){ }u307(13){ }u308(25){ }u309(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 148 157 162
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 148 157 162
;; live  gen 	 24 [cc] 156
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 156 157 162
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 156 157 162

( 30 )->[31]->( 35 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u313(11){ }u314(13){ }u315(25){ }u316(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156 157 162
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157 162
;; lr  def 	 211 212 213 215 216
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 157 162
;; live  gen 	 211 212 213 215 216
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156

( 33 )->[32]->( 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u325(11){ }u326(13){ }u327(25){ }u328(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 157
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  gen 	 0 [r0] 1 [r1] 157
;; live  kill	 14 [lr]
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157

( 30 32 22 21 )->[33]->( 32 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u334(11){ }u335(13){ }u336(25){ }u337(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157

( 13 33 )->[34]->( 35 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u341(11){ }u342(13){ }u343(25){ }u344(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 156
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156

( 34 8 6 31 )->[35]->( 1 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u345(11){ }u346(13){ }u347(25){ }u348(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156
;; live  gen 	 0 [r0]
;; live  kill	
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]

( 19 20 )->[36]->( 37 22 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u351(11){ }u352(13){ }u353(25){ }u354(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 218 219
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; live  gen 	 24 [cc] 218 219
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164 218
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164 218

( 36 )->[37]->( 21 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  gen 	
;; live  kill	
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157

( 35 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u358(0){ }u359(11){ }u360(13){ }u361(14){ }u362(25){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;; lr  def 	
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 13 to worklist
  Adding insn 26 to worklist
  Adding insn 29 to worklist
  Adding insn 36 to worklist
  Adding insn 299 to worklist
  Adding insn 41 to worklist
  Adding insn 50 to worklist
  Adding insn 301 to worklist
  Adding insn 58 to worklist
  Adding insn 54 to worklist
  Adding insn 65 to worklist
  Adding insn 69 to worklist
  Adding insn 303 to worklist
  Adding insn 93 to worklist
  Adding insn 90 to worklist
  Adding insn 305 to worklist
  Adding insn 97 to worklist
  Adding insn 110 to worklist
  Adding insn 116 to worklist
  Adding insn 122 to worklist
  Adding insn 119 to worklist
  Adding insn 126 to worklist
  Adding insn 138 to worklist
  Adding insn 134 to worklist
  Adding insn 307 to worklist
  Adding insn 146 to worklist
  Adding insn 309 to worklist
  Adding insn 156 to worklist
  Adding insn 155 to worklist
  Adding insn 174 to worklist
  Adding insn 171 to worklist
  Adding insn 186 to worklist
  Adding insn 191 to worklist
  Adding insn 196 to worklist
  Adding insn 213 to worklist
  Adding insn 209 to worklist
  Adding insn 223 to worklist
  Adding insn 311 to worklist
  Adding insn 234 to worklist
  Adding insn 231 to worklist
  Adding insn 313 to worklist
  Adding insn 241 to worklist
  Adding insn 247 to worklist
  Adding insn 253 to worklist
  Adding insn 280 to worklist
  Adding insn 268 to worklist
  Adding insn 317 to worklist
Finished finding needed instructions:
processing block 35 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
  Adding insn 274 to worklist
processing block 6 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
  Adding insn 42 to worklist
  Adding insn 40 to worklist
  Adding insn 39 to worklist
processing block 8 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
  Adding insn 59 to worklist
  Adding insn 327 to worklist
  Adding insn 326 to worklist
  Adding insn 56 to worklist
  Adding insn 55 to worklist
  Adding insn 53 to worklist
processing block 34 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
  Adding insn 256 to worklist
processing block 15 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
  Adding insn 111 to worklist
  Adding insn 297 to worklist
  Adding insn 108 to worklist
processing block 32 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
  Adding insn 248 to worklist
  Adding insn 293 to worklist
  Adding insn 245 to worklist
processing block 33 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
  Adding insn 252 to worklist
processing block 21 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
  Adding insn 154 to worklist
  Adding insn 153 to worklist
processing block 37 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
processing block 25 lr out =  13 [sp] 25 [sfp] 26 [afp]
  Adding insn 195 to worklist
  Adding insn 194 to worklist
processing block 29 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
  Adding insn 225 to worklist
processing block 31 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
  Adding insn 240 to worklist
  Adding insn 239 to worklist
  Adding insn 238 to worklist
  Adding insn 237 to worklist
  Adding insn 236 to worklist
processing block 30 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 156 157 162
  Adding insn 233 to worklist
  Adding insn 232 to worklist
processing block 28 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
  Adding insn 222 to worklist
processing block 27 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
  Adding insn 296 to worklist
  Adding insn 217 to worklist
  Adding insn 215 to worklist
processing block 26 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
  Adding insn 212 to worklist
  Adding insn 211 to worklist
  Adding insn 210 to worklist
  Adding insn 208 to worklist
  Adding insn 207 to worklist
  Adding insn 206 to worklist
  Adding insn 203 to worklist
  Adding insn 202 to worklist
  Adding insn 201 to worklist
processing block 24 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
  Adding insn 190 to worklist
  Adding insn 189 to worklist
processing block 23 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
  Adding insn 216 to worklist
  Adding insn 200 to worklist
  Adding insn 187 to worklist
  Adding insn 185 to worklist
  Adding insn 184 to worklist
  Adding insn 181 to worklist
  Adding insn 178 to worklist
  Adding insn 177 to worklist
  Adding insn 176 to worklist
processing block 22 lr out =  11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 141 148 157 162 164 218
  Adding insn 173 to worklist
  Adding insn 170 to worklist
  Adding insn 169 to worklist
  Adding insn 168 to worklist
  Adding insn 167 to worklist
  Adding insn 166 to worklist
  Adding insn 164 to worklist
  Adding insn 163 to worklist
  Adding insn 161 to worklist
  Adding insn 160 to worklist
processing block 36 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164 218
  Adding insn 267 to worklist
  Adding insn 266 to worklist
  Adding insn 265 to worklist
processing block 20 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
  Adding insn 145 to worklist
  Adding insn 144 to worklist
  Adding insn 142 to worklist
processing block 19 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 155 157 162 164
  Adding insn 137 to worklist
  Adding insn 136 to worklist
  Adding insn 135 to worklist
  Adding insn 133 to worklist
  Adding insn 132 to worklist
  Adding insn 129 to worklist
processing block 18 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
  Adding insn 125 to worklist
processing block 17 lr out =  0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
  Adding insn 121 to worklist
  Adding insn 120 to worklist
  Adding insn 118 to worklist
processing block 16 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
  Adding insn 115 to worklist
processing block 14 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
  Adding insn 104 to worklist
  Adding insn 103 to worklist
  Adding insn 101 to worklist
  Adding insn 100 to worklist
  Adding insn 98 to worklist
  Adding insn 96 to worklist
processing block 13 lr out =  0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 153 154 157 162 164
  Adding insn 92 to worklist
  Adding insn 89 to worklist
  Adding insn 88 to worklist
  Adding insn 87 to worklist
  Adding insn 86 to worklist
processing block 12 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
  Adding insn 81 to worklist
processing block 11 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
  Adding insn 76 to worklist
processing block 10 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
  Adding insn 68 to worklist
processing block 9 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225
  Adding insn 64 to worklist
processing block 7 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226
  Adding insn 49 to worklist
processing block 5 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226
  Adding insn 35 to worklist
  Adding insn 325 to worklist
  Adding insn 324 to worklist
  Adding insn 323 to worklist
  Adding insn 322 to worklist
  Adding insn 321 to worklist
  Adding insn 31 to worklist
processing block 4 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
  Adding insn 28 to worklist
processing block 3 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
  Adding insn 25 to worklist
  Adding insn 23 to worklist
processing block 2 lr out =  11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 320 to worklist
  Adding insn 319 to worklist
  Adding insn 15 to worklist
  Adding insn 14 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 7 to worklist
  Adding insn 5 to worklist
  Adding insn 3 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 38 n_edges 53 count 77 (    2)
;;   ======================================================
;;   -- basic block 2 from 3 to 20 -- before reload
;;   ======================================================

;;	  0-->    14 r166=r1+0xff0                     :cortex_a8_default
;;	  0-->    12 r165=0xffffffffffffffff           :cortex_a8_default
;;	  1-->    15 r158=r166+0xf                     :cortex_a8_default
;;	  1-->     7 r164=[afp+0x4]                    :cortex_a8_load_store_1
;;	  2-->   319 r138=r158&0xfffffffffffff00f      :cortex_a8_default
;;	  2-->     5 r162=r2                           :cortex_a8_default
;;	  3-->   320 r138=r138&0xfffffffffffffff0      :cortex_a8_default
;;	  3-->     3 r160=r0                           :cortex_a8_default
;;	  4-->    18 r154=r138-0x1                     :cortex_a8_default
;;	  4-->    11 r139=r3&0xffffffffffffbfff        :cortex_a8_default
;;	  5-->    20 r153=r165                         :cortex_a8_default
;;	  5-->    13 [r162]=r165                       :cortex_a8_load_store_1
;;	  6-->    19 r152=r154 0>>0xb                  :cortex_a8_default
;;	Ready list (final):  
;;   total time = 6
;;   new head = 3
;;   new tail = 20

;;   ======================================================
;;   -- basic block 3 from 23 to 26 -- before reload
;;   ======================================================

;;	  0-->    25 {cc=cmp(r152 0>>0x1,0x0);r152=r152:cortex_a8_default
;;	  0-->    23 r153=r153+0x1                     :cortex_a8_default
;;	  2-->    26 pc={(cc!=0x0)?L24:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 23
;;   new tail = 26

;;   ======================================================
;;   -- basic block 4 from 28 to 29 -- before reload
;;   ======================================================

;;	  0-->    28 cc=cmp(r160,0x0)                  :cortex_a8_default
;;	  2-->    29 pc={(cc==0x0)?L79:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 28
;;   new tail = 29

;;   ======================================================
;;   -- basic block 5 from 31 to 36 -- before reload
;;   ======================================================

;;	  0-->    31 r168=0x118                        :cortex_a8_default
;;	  0-->   322 r227=0x4                          :cortex_a8_default
;;	  1-->   323 r228=r160+r168                    :cortex_a8_default
;;	  2-->   324 r229=r228+r227                    :cortex_a8_default
;;	  2-->   321 r225=[r160+r168]                  :cortex_a8_load_store_1
;;	  4-->   325 r226=[r229]                       :cortex_a8_load_store_1
;;	  6-->    35 {cc=cmp(r225|r226,0x0);clobber scr:cortex_a8_default
;;	  8-->    36 pc={(cc!=0x0)?L45:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 31
;;   new tail = 36

;;   ======================================================
;;   -- basic block 6 from 39 to 299 -- before reload
;;   ======================================================

;;	  0-->    39 r0=r160                           :cortex_a8_default
;;	  0-->    40 r1=`*.LC7'                        :cortex_a8_load_store_1
;;	  1-->    41 r0=call [`dev_warn']              :cortex_a8_issue_branch
;;	  1-->    42 r156=r152                         :cortex_a8_default
;;	  2-->   299 pc=L257                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 39
;;   new tail = 299

;;   ======================================================
;;   -- basic block 7 from 49 to 50 -- before reload
;;   ======================================================

;;	  0-->    49 cc=cmp(r225,0xffffffffffffffff)   :cortex_a8_default
;;	  2-->    50 pc={(cc==0x0)?L62:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 49
;;   new tail = 50

;;   ======================================================
;;   -- basic block 8 from 53 to 301 -- before reload
;;   ======================================================

;;	  0-->    55 r0=r160                           :cortex_a8_default
;;	  0-->   326 r2=r225                           :cortex_a8_default
;;	  1-->   327 r3=r226                           :cortex_a8_default
;;	  1-->    56 r1=`*.LC8'                        :cortex_a8_load_store_1
;;	  2-->    53 r174=0xffffffff                   :cortex_a8_default
;;	  2-->    54 [sp]=r174                         :cortex_a8_load_store_1
;;	  3-->    58 r0=call [`dev_warn']              :cortex_a8_issue_branch
;;	  3-->    59 r156=r152                         :cortex_a8_default
;;	  4-->   301 pc=L257                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 53
;;   new tail = 301

;;   ======================================================
;;   -- basic block 9 from 64 to 65 -- before reload
;;   ======================================================

;;	  0-->    64 cc=cmp(r226,0x0)                  :cortex_a8_default
;;	  2-->    65 pc={(cc!=0x0)?L79:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 64
;;   new tail = 65

;;   ======================================================
;;   -- basic block 10 from 68 to 69 -- before reload
;;   ======================================================

;;	  0-->    68 cc=cmp(r225,0xfffffffffffffffe)   :cortex_a8_default
;;	  2-->    69 pc={(gtu(cc,0x0))?L79:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 68
;;   new tail = 69

;;   ======================================================
;;   -- basic block 11 from 76 to 303 -- before reload
;;   ======================================================

;;	  0-->    76 r137=r139|0x1                     :cortex_a8_default
;;	  0-->   303 pc=L82                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 76
;;   new tail = 303

;;   ======================================================
;;   -- basic block 12 from 81 to 81 -- before reload
;;   ======================================================

;;	  0-->    81 r137=r139                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 81
;;   new tail = 81

;;   ======================================================
;;   -- basic block 13 from 86 to 93 -- before reload
;;   ======================================================

;;	  0-->    86 r0=r137                           :cortex_a8_default
;;	  0-->    87 r1=r153                           :cortex_a8_default
;;	  1-->    88 r2=const(`contig_page_data'+0x900):cortex_a8_load_store_1
;;	  1-->    89 r3=0x0                            :cortex_a8_default
;;	  2-->    90 r0=call [`__alloc_pages_nodemask']:cortex_a8_issue_branch
;;	 34-->    92 {cc=cmp(r0,0x0);r157=r0;}         :cortex_a8_default
;;	 36-->    93 pc={(cc==0x0)?L254:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 86
;;   new tail = 93

;;   ======================================================
;;   -- basic block 14 from 96 to 305 -- before reload
;;   ======================================================

;;	  0-->    96 r1=r153                           :cortex_a8_default
;;	  1-->    97 call [`split_page']               :cortex_a8_issue_branch
;;	  1-->    98 r176=r138 0>>0xc                  :cortex_a8_default
;;	  2-->   101 r179=0x20                         :cortex_a8_default
;;	  3-->   100 r148=r176*0x20+r157               :cortex_a8_default
;;	  4-->   103 r149=r179<<r153+r157              :cortex_a8_default
;;	  4-->   104 r136=r148                         :cortex_a8_default
;;	  5-->   305 pc=L112                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 96
;;   new tail = 305

;;   ======================================================
;;   -- basic block 15 from 108 to 111 -- before reload
;;   ======================================================

;;	  0-->   108 r0=r136                           :cortex_a8_default
;;	  0-->   297 r1=0x0                            :cortex_a8_default
;;	  1-->   110 call [`__free_pages']             :cortex_a8_issue_branch
;;	  1-->   111 r136=r136+0x20                    :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 108
;;   new tail = 111

;;   ======================================================
;;   -- basic block 16 from 115 to 116 -- before reload
;;   ======================================================

;;	  0-->   115 cc=cmp(r136,r149)                 :cortex_a8_default
;;	  2-->   116 pc={(ltu(cc,0x0))?L114:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 115
;;   new tail = 116

;;   ======================================================
;;   -- basic block 17 from 118 to 122 -- before reload
;;   ======================================================

;;	  0-->   118 r0=r157                           :cortex_a8_default
;;	  1-->   119 r0=call [`page_address']          :cortex_a8_issue_branch
;;	  1-->   120 r150=r0                           :cortex_a8_default
;;	  2-->   121 cc=cmp(r138,0x0)                  :cortex_a8_default
;;	  4-->   122 pc={(cc==0x0)?L127:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 118
;;   new tail = 122

;;   ======================================================
;;   -- basic block 18 from 125 to 126 -- before reload
;;   ======================================================

;;	  0-->   125 r1=r138                           :cortex_a8_default
;;	  1-->   126 call [`__memzero']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 125
;;   new tail = 126

;;   ======================================================
;;   -- basic block 19 from 129 to 138 -- before reload
;;   ======================================================

;;	  0-->   129 r180=`cpu_cache'                  :cortex_a8_load_store_1
;;	  0-->   132 r0=r150                           :cortex_a8_default
;;	  1-->   133 r1=r150+r138                      :cortex_a8_default
;;	  2-->   134 call [[r180+0x24]]                :cortex_a8_issue_branch
;;	  2-->   135 r183=`outer_cache'                :cortex_a8_load_store_1
;;	  5-->   136 r155=[r183+0x8]                   :cortex_a8_load_store_1
;;	  7-->   137 cc=cmp(r155,0x0)                  :cortex_a8_default
;;	  9-->   138 pc={(cc==0x0)?L262:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 129
;;   new tail = 138

;;   ======================================================
;;   -- basic block 20 from 142 to 307 -- before reload
;;   ======================================================

;;	  0-->   142 r185=r138+0x40000000              :cortex_a8_default
;;	  0-->   144 r0=r150+0x40000000                :cortex_a8_default
;;	  1-->   145 r1=r150+r185                      :cortex_a8_default
;;	  2-->   146 call [r155]                       :cortex_a8_issue_branch
;;	  2-->   307 pc=L262                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 142
;;   new tail = 307

;;   ======================================================
;;   -- basic block 21 from 153 to 309 -- before reload
;;   ======================================================

;;	  0-->   154 r1=const(`*.LANCHOR0'+0x24)       :cortex_a8_load_store_1
;;	  1-->   153 r0=`*.LC9'                        :cortex_a8_load_store_1
;;	  2-->   155 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->   156 call [`dump_stack']               :cortex_a8_issue_branch
;;	  3-->   309 pc=L298                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 153
;;   new tail = 309

;;   ======================================================
;;   -- basic block 22 from 160 to 174 -- before reload
;;   ======================================================

;;	  0-->   160 r145=asm_operands                 :nothing
;;	  1-->   161 r135=0x20-r145                    :cortex_a8_default
;;	  1-->   164 r193=0x1                          :cortex_a8_default
;;	  2-->   163 {r191=smin(r135,0x14);clobber cc;}:cortex_a8_default
;;	  2-->   166 r194=r139&0xfffffffffffffffc      :cortex_a8_default
;;	  3-->   168 r1=r193<<r191                     :cortex_a8_default
;;	  3-->   170 r3=r194                           :cortex_a8_default
;;	  4-->   167 r0=`*.LANCHOR2'                   :cortex_a8_load_store_1
;;	  4-->   169 r2=r138                           :cortex_a8_default
;;	  5-->   171 r0=call [`arm_vmregion_alloc']    :cortex_a8_issue_branch
;;	 37-->   173 {cc=cmp(r0,0x0);r141=r0;}         :cortex_a8_default
;;	 39-->   174 pc={(cc==0x0)?L298:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 39
;;   new head = 160
;;   new tail = 174

;;   ======================================================
;;   -- basic block 23 from 176 to 216 -- before reload
;;   ======================================================

;;	  0-->   176 r195=[r141+0x8]                   :cortex_a8_load_store_1
;;	  0-->   216 r222=r218                         :cortex_a8_default
;;	  1-->   200 r221=`mem_map'                    :cortex_a8_load_store_1
;;	  1-->   187 r134=r157                         :cortex_a8_default
;;	  2-->   177 r140=r195+0x1000000               :cortex_a8_default
;;	  3-->   181 r144=zxt(r140,0x9,0xc)            :cortex_a8_default
;;	  4-->   178 r143=r140 0>>0x15                 :cortex_a8_default
;;	  6-->   184 r200=[r143*0x4+r218]              :cortex_a8_load_store_1
;;	  7-->   186 [r141+0x10]=r157                  :cortex_a8_load_store_1
;;	  8-->   185 r142=r144*0x4+r200                :cortex_a8_default
;;	Ready list (final):  
;;   total time = 8
;;   new head = 176
;;   new tail = 216

;;   ======================================================
;;   -- basic block 24 from 189 to 191 -- before reload
;;   ======================================================

;;	  0-->   189 r201=[r142]                       :cortex_a8_load_store_1
;;	  2-->   190 cc=cmp(r201,0x0)                  :cortex_a8_default
;;	  4-->   191 pc={(cc==0x0)?L198:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 189
;;   new tail = 191

;;   ======================================================
;;   -- basic block 25 from 194 to 196 -- before reload
;;   ======================================================

;;	  0-->   194 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  0-->   195 r1=0xe8                           :cortex_a8_default
;;	  1-->   196 call [`__bug']                    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 194
;;   new tail = 196

;;   ======================================================
;;   -- basic block 26 from 201 to 213 -- before reload
;;   ======================================================

;;	  0-->   201 r205=[r221]                       :cortex_a8_load_store_1
;;	  0-->   211 r144=r144+0x1                     :cortex_a8_default
;;	  1-->   206 r0=r142                           :cortex_a8_default
;;	  1-->   208 r2=r201                           :cortex_a8_default
;;	  2-->   202 r204=r134-r205                    :cortex_a8_default
;;	  2-->   210 r142=r142+0x4                     :cortex_a8_default
;;	  4-->   203 r207=r204>>0x5                    :cortex_a8_default
;;	  6-->   207 r1=r207<<0xc|r164                 :cortex_a8_default
;;	  7-->   209 call [`cpu_v7_set_pte_ext']       :cortex_a8_issue_branch
;;	  7-->   212 cc=cmp(r144,0x200)                :cortex_a8_default
;;	  9-->   213 pc={(cc!=0x0)?L219:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 201
;;   new tail = 213

;;   ======================================================
;;   -- basic block 27 from 215 to 296 -- before reload
;;   ======================================================

;;	  0-->   215 r143=r143+0x1                     :cortex_a8_default
;;	  0-->   296 r144=r201                         :cortex_a8_default
;;	  2-->   217 r142=[r143*0x4+r222]              :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 2
;;   new head = 215
;;   new tail = 296

;;   ======================================================
;;   -- basic block 28 from 222 to 223 -- before reload
;;   ======================================================

;;	  0-->   222 {cc=cmp(r138-0x1000,0x0);r138=r138:cortex_a8_default
;;	  2-->   223 pc={(cc==0x0)?L229:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 222
;;   new tail = 223

;;   ======================================================
;;   -- basic block 29 from 225 to 311 -- before reload
;;   ======================================================

;;	  0-->   225 r134=r134+0x20                    :cortex_a8_default
;;	  0-->   311 pc=L226                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 225
;;   new tail = 311

;;   ======================================================
;;   -- basic block 30 from 231 to 234 -- before reload
;;   ======================================================

;;	  0-->   231 {asm_operands;clobber [scratch];} :nothing
;;	  1-->   232 r156=[r141+0x8]                   :cortex_a8_load_store_1
;;	  3-->   233 cc=cmp(r156,0x0)                  :cortex_a8_default
;;	  5-->   234 pc={(cc==0x0)?L298:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 231
;;   new tail = 234

;;   ======================================================
;;   -- basic block 31 from 236 to 313 -- before reload
;;   ======================================================

;;	  0-->   236 r211=`mem_map'                    :cortex_a8_load_store_1
;;	  3-->   237 r213=[r211]                       :cortex_a8_load_store_1
;;	  5-->   238 r212=r157-r213                    :cortex_a8_default
;;	  7-->   239 r215=r212>>0x5                    :cortex_a8_default
;;	  9-->   240 r216=r215<<0xc                    :cortex_a8_default
;;	  9-->   241 [r162]=r216                       :cortex_a8_load_store_1
;;	 10-->   313 pc=L257                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 10
;;   new head = 236
;;   new tail = 313

;;   ======================================================
;;   -- basic block 32 from 245 to 248 -- before reload
;;   ======================================================

;;	  0-->   245 r0=r157                           :cortex_a8_default
;;	  0-->   293 r1=0x0                            :cortex_a8_default
;;	  1-->   247 call [`__free_pages']             :cortex_a8_issue_branch
;;	  1-->   248 r157=r157+0x20                    :cortex_a8_default
;;	Ready list (final):  
;;   total time = 1
;;   new head = 245
;;   new tail = 248

;;   ======================================================
;;   -- basic block 33 from 252 to 253 -- before reload
;;   ======================================================

;;	  0-->   252 cc=cmp(r157,r148)                 :cortex_a8_default
;;	  2-->   253 pc={(ltu(cc,0x0))?L251:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 252
;;   new tail = 253

;;   ======================================================
;;   -- basic block 34 from 256 to 256 -- before reload
;;   ======================================================

;;	  0-->   256 r156=0x0                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 256
;;   new tail = 256

;;   ======================================================
;;   -- basic block 35 from 274 to 280 -- before reload
;;   ======================================================

;;	  0-->   274 r0=r156                           :cortex_a8_default
;;	  0-->   280 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 274
;;   new tail = 280

;;   ======================================================
;;   -- basic block 36 from 265 to 268 -- before reload
;;   ======================================================

;;	  0-->   265 r218=`*.LANCHOR1'                 :cortex_a8_load_store_1
;;	  3-->   266 r219=[r218]                       :cortex_a8_load_store_1
;;	  5-->   267 cc=cmp(r219,0x0)                  :cortex_a8_default
;;	  7-->   268 pc={(cc!=0x0)?L315:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 265
;;   new tail = 268

;;   ======================================================
;;   -- basic block 37 from 317 to 317 -- before reload
;;   ======================================================

;;	  0-->   317 pc=L264                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 317
;;   new tail = 317


;; Procedure interblock/speculative motions == 0/0 




__dma_alloc

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={29d,22u} r1={29d,14u} r2={20d,5u} r3={19d,4u} r11={1d,37u} r12={16d} r13={1d,53u} r14={16d,1u} r15={15d} r16={15d} r17={15d} r18={15d} r19={15d} r20={15d} r21={15d} r22={15d} r23={15d} r24={33d,17u} r25={1d,37u} r26={1d,37u,1d} r27={15d} r28={15d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={15d} r37={15d} r38={15d} r39={15d} r40={15d} r41={15d} r42={15d} r43={15d} r44={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} r76={15d} r77={15d} r78={15d} r79={15d} r80={15d} r81={15d} r82={15d} r83={15d} r84={15d} r85={15d} r86={15d} r87={15d} r88={15d} r89={15d} r90={15d} r91={15d} r92={15d} r93={15d} r94={15d} r95={15d} r96={15d} r97={15d} r98={15d} r99={15d} r100={15d} r101={15d} r102={15d} r103={15d} r104={15d} r105={15d} r106={15d} r107={15d} r108={15d} r109={15d} r110={15d} r111={15d} r112={15d} r113={15d} r114={15d} r115={15d} r116={15d} r117={15d} r118={15d} r119={15d} r120={15d} r121={15d} r122={15d} r123={15d} r124={15d} r125={15d} r126={15d} r127={15d} r134={2d,2u} r135={1d,1u} r136={2d,3u} r137={2d,1u} r138={3d,10u} r139={1d,3u} r140={1d,2u} r141={1d,3u} r142={3d,3u} r143={2d,3u,2d} r144={3d,3u} r145={1d,1u} r148={1d,2u} r149={1d,1u} r150={1d,4u} r152={2d,4u} r153={2d,4u} r154={1d,2u} r155={1d,2u} r156={4d,2u} r157={2d,9u} r158={1d,1u} r160={1d,5u} r161={1d} r162={1d,2u} r164={1d,1u} r165={1d,2u} r166={1d,1u} r168={1d,2u} r174={1d,1u} r176={1d,1u} r179={1d,1u} r180={1d,1u} r183={1d,1u} r185={1d,1u} r191={1d,1u} r193={1d,1u} r194={1d,1u} r195={1d,1u} r200={1d,1u} r201={1d,3u} r204={1d,1u,1d} r205={1d,1u} r207={1d,1u} r211={1d,1u} r212={1d,1u,1d} r213={1d,1u} r215={1d,1u} r216={1d,1u} r218={1d,3u} r219={1d,1u} r221={1d,1u} r222={1d,1u} r225={1d,4u} r226={1d,3u} r227={1d,1u} r228={1d,1u} r229={1d,1u} 
;;    total ref usage 2239{1889d,344u,6e} in 166{151 regular + 15 call} insns.
(note 2 0 9 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 138 139 152 153 154 158 160 162 164 165 166
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 138 139 152 153 154 158 160 162 164 165 166
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 2 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 9 6 2 NOTE_INSN_DELETED)

(note 6 4 8 2 NOTE_INSN_DELETED)

(note 8 6 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 8 14 2 NOTE_INSN_DELETED)

(insn 14 16 12 2 arch/arm/mm/dma-mapping.c:321 (set (reg:SI 166)
        (plus:SI (reg:SI 1 r1 [ size ])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 1 r1 [ size ])
        (nil)))

(insn 12 14 15 2 arch/arm/mm/dma-mapping.c:320 (set (reg:SI 165)
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(insn 15 12 7 2 arch/arm/mm/dma-mapping.c:321 (set (reg:SI 158 [ D.24512 ])
        (plus:SI (reg:SI 166)
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 166)
        (expr_list:REG_EQUAL (plus:SI (reg/v:SI 161 [ size ])
                (const_int 4095 [0xfff]))
            (nil))))

(insn 7 15 319 2 arch/arm/mm/dma-mapping.c:309 (set (reg/v:SI 164 [ prot ])
        (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 prot+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 prot+0 S4 A32])
        (nil)))

(insn 319 7 5 2 arch/arm/mm/dma-mapping.c:321 (set (reg/v:SI 138 [ size.959 ])
        (and:SI (reg:SI 158 [ D.24512 ])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 158 [ D.24512 ])
        (nil)))

(insn 5 319 320 2 arch/arm/mm/dma-mapping.c:309 (set (reg/v/f:SI 162 [ handle ])
        (reg:SI 2 r2 [ handle ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ handle ])
        (nil)))

(insn 320 5 3 2 arch/arm/mm/dma-mapping.c:321 (set (reg/v:SI 138 [ size.959 ])
        (and:SI (reg/v:SI 138 [ size.959 ])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 3 320 18 2 arch/arm/mm/dma-mapping.c:309 (set (reg/v/f:SI 160 [ dev ])
        (reg:SI 0 r0 [ dev ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dev ])
        (nil)))

(insn 18 3 11 2 include/asm-generic/getorder.h:13 (set (reg:SI 154 [ D.25334 ])
        (plus:SI (reg/v:SI 138 [ size.959 ])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn 11 18 20 2 arch/arm/mm/dma-mapping.c:318 (set (reg/v:SI 139 [ gfp.958 ])
        (and:SI (reg:SI 3 r3 [ gfp ])
            (const_int -16385 [0xffffffffffffbfff]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ gfp ])
        (nil)))

(insn 20 11 13 2 include/asm-generic/getorder.h:14 (set (reg/v:SI 153 [ order ])
        (reg:SI 165)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 165)
        (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
            (nil))))

(insn 13 20 19 2 arch/arm/mm/dma-mapping.c:320 (set (mem:SI (reg/v/f:SI 162 [ handle ]) [0 S4 A32])
        (reg:SI 165)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 19 13 24 2 include/asm-generic/getorder.h:13 (set (reg/v:SI 152 [ size ])
        (lshiftrt:SI (reg:SI 154 [ D.25334 ])
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (nil))
;; End of basic block 2 -> ( 3)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u22(11){ }u23(13){ }u24(25){ }u25(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 153
;; lr  def 	 24 [cc] 152 153
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  gen 	 24 [cc] 152 153
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  3 [86.0%]  (dfs_back)
(code_label 24 19 21 3 153 "" [1 uses])

(note 21 24 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 22 21 25 3 NOTE_INSN_DELETED)

(insn 25 22 23 3 include/asm-generic/getorder.h:18 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 152 [ size ])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 152 [ size ])
                (lshiftrt:SI (reg/v:SI 152 [ size ])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn 23 25 26 3 include/asm-generic/getorder.h:17 (set (reg/v:SI 153 [ order ])
        (plus:SI (reg/v:SI 153 [ order ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn 26 23 27 3 include/asm-generic/getorder.h:18 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 3 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164


;; Succ edge  3 [86.0%]  (dfs_back)
;; Succ edge  4 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u30(11){ }u31(13){ }u32(25){ }u33(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [14.0%]  (fallthru,loop_exit)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 28 27 29 4 arch/arm/mm/dma-mapping.c:34 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 160 [ dev ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 29 28 30 4 arch/arm/mm/dma-mapping.c:34 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 4 -> ( 5 12)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  12 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u36(11){ }u37(13){ }u38(25){ }u39(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 160
;; lr  def 	 24 [cc] 168 225 226 227 228 229
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164
;; live  gen 	 24 [cc] 168 225 226 227 228 229
;; live  kill	

;; Pred edge  4 [85.0%]  (fallthru)
(note 30 29 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 33 30 34 5 NOTE_INSN_DELETED)

(note 34 33 31 5 NOTE_INSN_DELETED)

(insn 31 34 322 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 168)
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (nil))

(insn 322 31 323 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 227)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(insn 323 322 324 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 228)
        (plus:SI (reg/v/f:SI 160 [ dev ])
            (reg:SI 168))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 168)
        (nil)))

(insn 324 323 321 5 arch/arm/mm/dma-mapping.c:35 (set (reg/f:SI 229)
        (plus:SI (reg:SI 228)
            (reg:SI 227))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 228)
        (expr_list:REG_DEAD (reg:SI 227)
            (nil))))

(insn 321 324 325 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 225 [ mask ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 160 [ dev ])
                (reg:SI 168)) [0 <variable>.coherent_dma_mask+0 S4 A64])) 167 {*arm_movsi_insn} (nil))

(insn 325 321 35 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 226 [ mask+4 ])
        (mem/s/j:SI (reg/f:SI 229) [0 <variable>.coherent_dma_mask+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 229)
        (nil)))

(insn 35 325 36 5 arch/arm/mm/dma-mapping.c:41 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 225 [ mask ])
                        (reg:SI 226 [ mask+4 ]))
                    (const_int 0 [0x0])))
            (clobber (scratch:SI))
        ]) 92 {*iorsi3_compare0_scratch} (nil))

(jump_insn 36 35 37 5 arch/arm/mm/dma-mapping.c:41 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u48(11){ }u49(13){ }u50(25){ }u51(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160
;; live  gen 	 0 [r0] 1 [r1] 156
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 37 36 39 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn 39 37 40 6 arch/arm/mm/dma-mapping.c:42 (set (reg:SI 0 r0)
        (reg/v/f:SI 160 [ dev ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 160 [ dev ])
        (nil)))

(insn 40 39 41 6 arch/arm/mm/dma-mapping.c:42 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x115c6b80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x115c6b80>)
        (nil)))

(call_insn 41 40 42 6 arch/arm/mm/dma-mapping.c:42 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dev_warn") [flags 0x41] <function_decl 0x11022280 dev_warn>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 42 41 299 6 arch/arm/mm/dma-mapping.c:325 (set (reg/v/f:SI 156 [ addr ])
        (reg/v:SI 152 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 152 [ size ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 299 42 300 6 (set (pc)
        (label_ref 257)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 35)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156


;; Succ edge  35 [100.0%] 

(barrier 300 299 45)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u57(11){ }u58(13){ }u59(25){ }u60(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 225
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [71.0%] 
(code_label 45 300 46 7 155 "" [1 uses])

(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 47 46 48 7 NOTE_INSN_DELETED)

(note 48 47 49 7 NOTE_INSN_DELETED)

(insn 49 48 50 7 arch/arm/mm/dma-mapping.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 225 [ mask ])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 50 49 51 7 arch/arm/mm/dma-mapping.c:46 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 152 153 154 160 162 164 225 226


;; Succ edge  8 [29.0%]  (fallthru)
;; Succ edge  9 [71.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u65(11){ }u66(13){ }u67(25){ }u68(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160 225 226
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160 225 226
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 156 174
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 152 160 225 226
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 156 174
;; live  kill	 14 [lr]

;; Pred edge  7 [29.0%]  (fallthru)
(note 51 50 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn 55 51 326 8 arch/arm/mm/dma-mapping.c:47 (set (reg:SI 0 r0)
        (reg/v/f:SI 160 [ dev ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 160 [ dev ])
        (nil)))

(insn 326 55 327 8 arch/arm/mm/dma-mapping.c:47 (set (reg:SI 2 r2)
        (reg:SI 225 [ mask ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 225 [ mask ])
        (nil)))

(insn 327 326 56 8 arch/arm/mm/dma-mapping.c:47 (set (reg:SI 3 r3 [+4 ])
        (reg:SI 226 [ mask+4 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 226 [ mask+4 ])
        (nil)))

(insn 56 327 53 8 arch/arm/mm/dma-mapping.c:47 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x111f0060>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x111f0060>)
        (nil)))

(insn 53 56 54 8 arch/arm/mm/dma-mapping.c:47 (set (reg:DI 174)
        (const_int 4294967295 [0xffffffff])) 163 {*arm_movdi} (nil))

(insn 54 53 58 8 arch/arm/mm/dma-mapping.c:47 (set (mem:DI (reg/f:SI 13 sp) [0 S8 A64])
        (reg:DI 174)) 163 {*arm_movdi} (expr_list:REG_DEAD (reg:DI 174)
        (expr_list:REG_EQUAL (const_int 4294967295 [0xffffffff])
            (nil))))

(call_insn 58 54 59 8 arch/arm/mm/dma-mapping.c:47 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dev_warn") [flags 0x41] <function_decl 0x11022280 dev_warn>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 59 58 301 8 arch/arm/mm/dma-mapping.c:325 (set (reg/v/f:SI 156 [ addr ])
        (reg/v:SI 152 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 152 [ size ])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(jump_insn 301 59 302 8 (set (pc)
        (label_ref 257)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 35)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156


;; Succ edge  35 [100.0%] 

(barrier 302 301 62)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u79(11){ }u80(13){ }u81(25){ }u82(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225 226
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 226
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225 226
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [71.0%] 
(code_label 62 302 63 9 157 "" [1 uses])

(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 64 63 65 9 arch/arm/mm/dma-mapping.c:80 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 226 [ mask+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 226 [ mask+4 ])
        (nil)))

(jump_insn 65 64 283 9 arch/arm/mm/dma-mapping.c:80 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 12 10)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225


;; Succ edge  12 [50.0%] 
;; Succ edge  10 [50.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u85(11){ }u86(13){ }u87(25){ }u88(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 225
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164 225
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  9 [50.0%]  (fallthru)
(note 283 65 68 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn 68 283 69 10 arch/arm/mm/dma-mapping.c:80 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 225 [ mask ])
            (const_int -2 [0xfffffffffffffffe]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 225 [ mask ])
        (nil)))

(jump_insn 69 68 284 10 arch/arm/mm/dma-mapping.c:80 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164


;; Succ edge  12 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u91(11){ }u92(13){ }u93(25){ }u94(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; live  gen 	 137
;; live  kill	

;; Pred edge  10 [50.0%]  (fallthru)
(note 284 69 76 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 76 284 303 11 arch/arm/mm/dma-mapping.c:81 (set (reg/v:SI 137 [ gfp.960 ])
        (ior:SI (reg/v:SI 139 [ gfp.958 ])
            (const_int 1 [0x1]))) 89 {*arm_iorsi3} (nil))

(jump_insn 303 76 304 11 (set (pc)
        (label_ref 82)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164


;; Succ edge  13 [100.0%] 

(barrier 304 303 79)

;; Start of basic block ( 4 9 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u96(11){ }u97(13){ }u98(25){ }u99(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 139
;; lr  def 	 137
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 162 164
;; live  gen 	 137
;; live  kill	

;; Pred edge  4 [15.0%] 
;; Pred edge  9 [50.0%] 
;; Pred edge  10 [50.0%] 
(code_label 79 304 80 12 154 "" [3 uses])

(note 80 79 81 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 81 80 82 12 arch/arm/mm/dma-mapping.c:81 (set (reg/v:SI 137 [ gfp.960 ])
        (reg/v:SI 139 [ gfp.958 ])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u101(11){ }u102(13){ }u103(25){ }u104(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 153
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 157
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 137 138 139 153 154 162 164
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 157
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 82 81 83 13 159 "" [1 uses])

(note 83 82 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 91 83 86 13 NOTE_INSN_DELETED)

(insn 86 91 87 13 include/linux/gfp.h:300 (set (reg:SI 0 r0)
        (reg/v:SI 137 [ gfp.960 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ gfp.960 ])
        (nil)))

(insn 87 86 88 13 include/linux/gfp.h:300 (set (reg:SI 1 r1)
        (reg/v:SI 153 [ order ])) 167 {*arm_movsi_insn} (nil))

(insn 88 87 89 13 include/linux/gfp.h:300 (set (reg:SI 2 r2)
        (const:SI (plus:SI (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)
                (const_int 2304 [0x900])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)
                (const_int 2304 [0x900])))
        (nil)))

(insn 89 88 90 13 include/linux/gfp.h:300 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 90 89 92 13 include/linux/gfp.h:300 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__alloc_pages_nodemask") [flags 0x41] <function_decl 0x10cd6180 __alloc_pages_nodemask>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 92 90 93 13 arch/arm/mm/dma-mapping.c:84 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 157 [ page ])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 93 92 94 13 arch/arm/mm/dma-mapping.c:84 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 254)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 13 -> ( 34 14)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 139 153 154 157 162 164
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 157 162 164


;; Succ edge  34 [30.2%] 
;; Succ edge  14 [69.8%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u115(11){ }u116(13){ }u117(25){ }u118(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 157 162 164
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 153 157
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 148 149 176 179
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 153 154 157 162 164
;; live  gen 	 1 [r1] 136 148 149 176 179
;; live  kill	 14 [lr]

;; Pred edge  13 [69.8%]  (fallthru)
(note 94 93 99 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 99 94 102 14 NOTE_INSN_DELETED)

(note 102 99 96 14 NOTE_INSN_DELETED)

(insn 96 102 97 14 arch/arm/mm/dma-mapping.c:90 (set (reg:SI 1 r1)
        (reg/v:SI 153 [ order ])) 167 {*arm_movsi_insn} (nil))

(call_insn 97 96 98 14 arch/arm/mm/dma-mapping.c:90 (parallel [
            (call (mem:SI (symbol_ref:SI ("split_page") [flags 0x41] <function_decl 0x10f23500 split_page>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 98 97 101 14 arch/arm/mm/dma-mapping.c:91 (set (reg:SI 176)
        (lshiftrt:SI (reg/v:SI 138 [ size.959 ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 101 98 100 14 arch/arm/mm/dma-mapping.c:91 (set (reg:SI 179)
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (nil))

(insn 100 101 103 14 arch/arm/mm/dma-mapping.c:91 (set (reg/v/f:SI 148 [ p ])
        (plus:SI (mult:SI (reg:SI 176)
                (const_int 32 [0x20]))
            (reg/v/f:SI 157 [ page ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 176)
        (nil)))

(insn 103 100 104 14 arch/arm/mm/dma-mapping.c:91 (set (reg/v/f:SI 149 [ e ])
        (plus:SI (ashift:SI (reg:SI 179)
                (reg/v:SI 153 [ order ]))
            (reg/v/f:SI 157 [ page ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 179)
        (expr_list:REG_DEAD (reg/v:SI 153 [ order ])
            (nil))))

(insn 104 103 305 14 arch/arm/mm/dma-mapping.c:91 (set (reg/v/f:SI 136 [ p.961 ])
        (reg/v/f:SI 148 [ p ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 305 104 306 14 (set (pc)
        (label_ref 112)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164


;; Succ edge  16 [100.0%] 

(barrier 306 305 114)

;; Start of basic block ( 16) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u133(11){ }u134(13){ }u135(25){ }u136(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  gen 	 0 [r0] 1 [r1] 136
;; live  kill	 14 [lr]

;; Pred edge  16 [91.0%] 
(code_label 114 306 107 15 162 "" [1 uses])

(note 107 114 108 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 108 107 297 15 arch/arm/mm/dma-mapping.c:92 (set (reg:SI 0 r0)
        (reg/v/f:SI 136 [ p.961 ])) 167 {*arm_movsi_insn} (nil))

(insn 297 108 110 15 arch/arm/mm/dma-mapping.c:92 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 110 297 111 15 arch/arm/mm/dma-mapping.c:92 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10cd6800 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 111 110 112 15 arch/arm/mm/dma-mapping.c:91 discrim 2 (set (reg/v/f:SI 136 [ p.961 ])
        (plus:SI (reg/v/f:SI 136 [ p.961 ])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))
;; End of basic block 15 -> ( 16)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164


;; Succ edge  16 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u142(11){ }u143(13){ }u144(25){ }u145(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 149
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru,dfs_back)
;; Pred edge  14 [100.0%] 
(code_label 112 111 113 16 161 "" [1 uses])

(note 113 112 115 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn 115 113 116 16 arch/arm/mm/dma-mapping.c:91 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 136 [ p.961 ])
            (reg/v/f:SI 149 [ e ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 116 115 117 16 arch/arm/mm/dma-mapping.c:91 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 16 -> ( 15 17)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 138 139 148 149 154 157 162 164


;; Succ edge  15 [91.0%] 
;; Succ edge  17 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u149(11){ }u150(13){ }u151(25){ }u152(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 157
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 150
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; live  gen 	 0 [r0] 24 [cc] 150
;; live  kill	 14 [lr]

;; Pred edge  16 [9.0%]  (fallthru,loop_exit)
(note 117 116 118 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn 118 117 119 17 arch/arm/mm/dma-mapping.c:98 (set (reg:SI 0 r0)
        (reg/v/f:SI 157 [ page ])) 167 {*arm_movsi_insn} (nil))

(call_insn 119 118 120 17 arch/arm/mm/dma-mapping.c:98 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("page_address") [flags 0x41] <function_decl 0x10f7b880 page_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 120 119 121 17 arch/arm/mm/dma-mapping.c:98 (set (reg/v/f:SI 150 [ ptr ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(insn 121 120 122 17 arch/arm/mm/dma-mapping.c:99 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 138 [ size.959 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 122 121 123 17 arch/arm/mm/dma-mapping.c:99 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164


;; Succ edge  18 [29.0%]  (fallthru)
;; Succ edge  19 [71.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u159(11){ }u160(13){ }u161(25){ }u162(26){ }}
;; lr  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; lr  use 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  17 [29.0%]  (fallthru)
(note 123 122 125 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn 125 123 126 18 arch/arm/mm/dma-mapping.c:99 discrim 1 (set (reg:SI 1 r1)
        (reg/v:SI 138 [ size.959 ])) 167 {*arm_movsi_insn} (nil))

(call_insn 126 125 127 18 arch/arm/mm/dma-mapping.c:99 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 18 -> ( 19)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 17 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u167(11){ }u168(13){ }u169(25){ }u170(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 150
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 155 180 183
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 157 162 164
;; live  gen 	 0 [r0] 1 [r1] 24 [cc] 155 180 183
;; live  kill	 14 [lr]

;; Pred edge  17 [71.0%] 
;; Pred edge  18 [100.0%]  (fallthru)
(code_label 127 126 128 19 163 "" [1 uses])

(note 128 127 130 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 130 128 131 19 NOTE_INSN_DELETED)

(note 131 130 129 19 NOTE_INSN_DELETED)

(insn 129 131 132 19 arch/arm/mm/dma-mapping.c:100 (set (reg/f:SI 180)
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (nil))

(insn 132 129 133 19 arch/arm/mm/dma-mapping.c:100 (set (reg:SI 0 r0)
        (reg/v/f:SI 150 [ ptr ])) 167 {*arm_movsi_insn} (nil))

(insn 133 132 134 19 arch/arm/mm/dma-mapping.c:100 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 150 [ ptr ])
            (reg/v:SI 138 [ size.959 ]))) 4 {*arm_addsi3} (nil))

(call_insn 134 133 135 19 arch/arm/mm/dma-mapping.c:100 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 180)
                            (const_int 36 [0x24])) [0 cpu_cache.dma_flush_range+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 180)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 135 134 136 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (reg/f:SI 183)
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (nil))

(insn 136 135 137 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (reg/f:SI 155 [ D.25331 ])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 183)
                (const_int 8 [0x8])) [0 outer_cache.flush_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 183)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
                        (const_int 8 [0x8]))) [0 outer_cache.flush_range+0 S4 A32])
            (nil))))

(insn 137 136 138 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 155 [ D.25331 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 138 137 139 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 262)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 19 -> ( 20 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 155 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 155 157 162 164


;; Succ edge  20 [69.8%]  (fallthru)
;; Succ edge  36 [30.2%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u183(11){ }u184(13){ }u185(25){ }u186(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 155 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 150 155
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 185
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 150 154 155 157 162 164
;; live  gen 	 0 [r0] 1 [r1] 185
;; live  kill	 14 [lr]

;; Pred edge  19 [69.8%]  (fallthru)
(note 139 138 141 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 141 139 143 20 NOTE_INSN_DELETED)

(note 143 141 142 20 NOTE_INSN_DELETED)

(insn 142 143 144 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (set (reg:SI 185)
        (plus:SI (reg/v:SI 138 [ size.959 ])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 144 142 145 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 150 [ ptr ])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 145 144 146 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 150 [ ptr ])
            (reg:SI 185))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 185)
        (expr_list:REG_DEAD (reg/v/f:SI 150 [ ptr ])
            (nil))))

(call_insn 146 145 307 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (parallel [
            (call (mem:SI (reg/f:SI 155 [ D.25331 ]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 155 [ D.25331 ])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 307 146 308 20 (set (pc)
        (label_ref 262)) 242 {*arm_jump} (nil))
;; End of basic block 20 -> ( 36)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164


;; Succ edge  36 [100.0%] 

(barrier 308 307 264)

;; Start of basic block ( 37) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u197(11){ }u198(13){ }u199(25){ }u200(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  37 [100.0%] 
(code_label 264 308 149 21 171 "" [1 uses])

(note 149 264 154 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn 154 149 153 21 arch/arm/mm/dma-mapping.c:202 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 36 [0x24])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 36 [0x24])))
        (nil)))

(insn 153 154 155 21 arch/arm/mm/dma-mapping.c:202 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x1150bec0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x1150bec0>)
        (nil)))

(call_insn 155 153 156 21 arch/arm/mm/dma-mapping.c:202 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(call_insn 156 155 309 21 arch/arm/mm/dma-mapping.c:203 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 309 156 310 21 (set (pc)
        (label_ref 298)) 242 {*arm_jump} (nil))
;; End of basic block 21 -> ( 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157


;; Succ edge  33 [100.0%] 

(barrier 310 309 315)

;; Start of basic block ( 36) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u205(11){ }u206(13){ }u207(25){ }u208(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164 218
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 154
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 135 141 145 191 193 194
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164 218
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc] 135 141 145 191 193 194
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  36 [100.0%] 
(code_label 315 310 159 22 177 "" [1 uses])

(note 159 315 165 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 165 159 172 22 NOTE_INSN_DELETED)

(note 172 165 160 22 NOTE_INSN_DELETED)

(insn 160 172 161 22 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 145 [ ret ])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 154 [ D.25334 ])
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1265521)) -1 (expr_list:REG_DEAD (reg:SI 154 [ D.25334 ])
        (nil)))

(insn 161 160 164 22 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:269 (set (reg/v:SI 135 [ bit.962 ])
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 145 [ ret ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/v:SI 145 [ ret ])
        (nil)))

(insn 164 161 163 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 193)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 163 164 166 22 arch/arm/mm/dma-mapping.c:221 (parallel [
            (set (reg:SI 191)
                (smin:SI (reg/v:SI 135 [ bit.962 ])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 24 cc))
        ]) 105 {*arm_smin_insn} (expr_list:REG_DEAD (reg/v:SI 135 [ bit.962 ])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn 166 163 168 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 194)
        (and:SI (reg/v:SI 139 [ gfp.958 ])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ gfp.958 ])
        (nil)))

(insn 168 166 170 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 1 r1)
        (ashift:SI (reg:SI 193)
            (reg:SI 191))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 193)
        (expr_list:REG_DEAD (reg:SI 191)
            (nil))))

(insn 170 168 167 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 3 r3)
        (reg:SI 194)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 194)
        (nil)))

(insn 167 170 169 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 169 167 171 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 2 r2)
        (reg/v:SI 138 [ size.959 ])) 167 {*arm_movsi_insn} (nil))

(call_insn 171 169 173 22 arch/arm/mm/dma-mapping.c:221 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arm_vmregion_alloc") [flags 0x41] <function_decl 0x11440c00 arm_vmregion_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 173 171 174 22 arch/arm/mm/dma-mapping.c:223 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 141 [ c ])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 174 173 175 22 arch/arm/mm/dma-mapping.c:223 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 298)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 22 -> ( 23 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 138 141 148 157 162 164 218
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141 148 157 162 164 218


;; Succ edge  23 [85.0%]  (fallthru)
;; Succ edge  33 [15.0%] 

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u227(11){ }u228(13){ }u229(25){ }u230(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141 148 157 162 164 218
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 157 218
;; lr  def 	 134 140 142 143 144 195 200 221 222
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 141 148 157 162 164 218
;; live  gen 	 134 140 142 143 144 195 200 221 222
;; live  kill	

;; Pred edge  22 [85.0%]  (fallthru)
(note 175 174 179 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 179 175 180 23 NOTE_INSN_DELETED)

(note 180 179 183 23 NOTE_INSN_DELETED)

(note 183 180 176 23 NOTE_INSN_DELETED)

(insn 176 183 216 23 arch/arm/mm/dma-mapping.c:225 (set (reg:SI 195 [ <variable>.vm_start ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 216 176 200 23 arch/arm/mm/dma-mapping.c:240 (set (reg/f:SI 222)
        (reg/f:SI 218)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 218)
        (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
            (nil))))

(insn 200 216 187 23 arch/arm/mm/dma-mapping.c:234 (set (reg/f:SI 221)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn 187 200 177 23 arch/arm/mm/dma-mapping.c:229 (set (reg/v/f:SI 134 [ page.963 ])
        (reg/v/f:SI 157 [ page ])) 167 {*arm_movsi_insn} (nil))

(insn 177 187 181 23 arch/arm/mm/dma-mapping.c:225 (set (reg:SI 140 [ D.25379 ])
        (plus:SI (reg:SI 195 [ <variable>.vm_start ])
            (const_int 16777216 [0x1000000]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 195 [ <variable>.vm_start ])
        (nil)))

(insn 181 177 178 23 arch/arm/mm/dma-mapping.c:226 (set (reg/v:SI 144 [ off ])
        (zero_extract:SI (reg:SI 140 [ D.25379 ])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (expr_list:REG_DEAD (reg:SI 140 [ D.25379 ])
        (nil)))

(insn 178 181 184 23 arch/arm/mm/dma-mapping.c:225 (set (reg/v:SI 143 [ idx ])
        (lshiftrt:SI (reg:SI 140 [ D.25379 ])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn 184 178 186 23 arch/arm/mm/dma-mapping.c:228 (set (reg/f:SI 200)
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 143 [ idx ])
                    (const_int 4 [0x4]))
                (reg/f:SI 218)) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 143 [ idx ])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
        (nil)))

(insn 186 184 185 23 arch/arm/mm/dma-mapping.c:229 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 16 [0x10])) [0 <variable>.vm_pages+0 S4 A32])
        (reg/v/f:SI 157 [ page ])) 167 {*arm_movsi_insn} (nil))

(insn 185 186 226 23 arch/arm/mm/dma-mapping.c:228 (set (reg/v/f:SI 142 [ pte ])
        (plus:SI (mult:SI (reg/v:SI 144 [ off ])
                (const_int 4 [0x4]))
            (reg/f:SI 200))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/f:SI 200)
        (nil)))
;; End of basic block 23 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222


;; Succ edge  24 [100.0%]  (fallthru)

;; Start of basic block ( 23 29) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u248(11){ }u249(13){ }u250(25){ }u251(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 142
;; lr  def 	 24 [cc] 201
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  gen 	 24 [cc] 201
;; live  kill	

;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  29 [100.0%]  (dfs_back)
(code_label 226 185 188 24 169 "" [1 uses])

(note 188 226 189 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn 189 188 190 24 arch/arm/mm/dma-mapping.c:232 (set (reg:SI 201)
        (mem:SI (reg/v/f:SI 142 [ pte ]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 190 189 191 24 arch/arm/mm/dma-mapping.c:232 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 201)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 191 190 192 24 arch/arm/mm/dma-mapping.c:232 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222


;; Succ edge  25 [0.0%]  (fallthru,loop_exit)
;; Succ edge  26 [100.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u255(11){ }u256(13){ }u257(25){ }u258(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  24 [0.0%]  (fallthru,loop_exit)
(note 192 191 194 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn 194 192 195 25 arch/arm/mm/dma-mapping.c:232 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 195 194 196 25 arch/arm/mm/dma-mapping.c:232 discrim 1 (set (reg:SI 1 r1)
        (const_int 232 [0xe8])) 167 {*arm_movsi_insn} (nil))

(call_insn 196 195 197 25 arch/arm/mm/dma-mapping.c:232 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 25 -> ()
;; lr  out 	 13 [sp] 25 [sfp] 26 [afp]
;; live  out 	 13 [sp] 25 [sfp] 26 [afp]



(barrier 197 196 198)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u262(11){ }u263(13){ }u264(25){ }u265(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 142 144 164 201 221
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 142 144 204 205 207
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc] 142 144 204 205 207
;; live  kill	 14 [lr]

;; Pred edge  24 [100.0%] 
(code_label 198 197 199 26 166 "" [1 uses])

(note 199 198 204 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 204 199 205 26 NOTE_INSN_DELETED)

(note 205 204 201 26 NOTE_INSN_DELETED)

(insn 201 205 211 26 arch/arm/mm/dma-mapping.c:234 (set (reg/f:SI 205 [ mem_map ])
        (mem/f/c/i:SI (reg/f:SI 221) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 211 201 206 26 arch/arm/mm/dma-mapping.c:237 (set (reg/v:SI 144 [ off ])
        (plus:SI (reg/v:SI 144 [ off ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 206 211 208 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 142 [ pte ])) 167 {*arm_movsi_insn} (nil))

(insn 208 206 202 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 2 r2)
        (reg:SI 201)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 202 208 210 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 204)
        (minus:SI (reg/v/f:SI 134 [ page.963 ])
            (reg/f:SI 205 [ mem_map ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 205 [ mem_map ])
        (nil)))

(insn 210 202 203 26 arch/arm/mm/dma-mapping.c:236 (set (reg/v/f:SI 142 [ pte ])
        (plus:SI (reg/v/f:SI 142 [ pte ])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 203 210 207 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 207)
        (ashiftrt:SI (reg:SI 204)
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 204)
        (expr_list:REG_EQUAL (div:SI (reg:SI 204)
                (const_int 32 [0x20]))
            (nil))))

(insn 207 203 209 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 1 r1)
        (ior:SI (ashift:SI (reg:SI 207)
                (const_int 12 [0xc]))
            (reg/v:SI 164 [ prot ]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 207)
        (nil)))

(call_insn 209 207 212 26 arch/arm/mm/dma-mapping.c:234 (parallel [
            (call (mem:SI (symbol_ref:SI ("cpu_v7_set_pte_ext") [flags 0x41] <function_decl 0x10e63d00 cpu_v7_set_pte_ext>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 212 209 213 26 arch/arm/mm/dma-mapping.c:238 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 144 [ off ])
            (const_int 512 [0x200]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 213 212 214 26 arch/arm/mm/dma-mapping.c:238 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 219)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 26 -> ( 27 28)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 201 221 222


;; Succ edge  27 [50.0%]  (fallthru)
;; Succ edge  28 [50.0%] 

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u285(11){ }u286(13){ }u287(25){ }u288(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 143 148 157 162 164 201 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 143 201 222
;; lr  def 	 142 143 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 143 148 157 162 164 201 221 222
;; live  gen 	 142 143 144
;; live  kill	

;; Pred edge  26 [50.0%]  (fallthru)
(note 214 213 215 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn 215 214 296 27 arch/arm/mm/dma-mapping.c:240 (set (reg/v:SI 143 [ idx ])
        (plus:SI (reg/v:SI 143 [ idx ])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 296 215 217 27 arch/arm/mm/dma-mapping.c:239 (set (reg/v:SI 144 [ off ])
        (reg:SI 201)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 201)
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 217 296 219 27 arch/arm/mm/dma-mapping.c:240 (set (reg/v/f:SI 142 [ pte ])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 143 [ idx ])
                    (const_int 4 [0x4]))
                (reg/f:SI 222)) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 143 [ idx ])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
        (nil)))
;; End of basic block 27 -> ( 28)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222


;; Succ edge  28 [100.0%]  (fallthru)

;; Start of basic block ( 26 27) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u294(11){ }u295(13){ }u296(25){ }u297(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138
;; lr  def 	 24 [cc] 138
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  gen 	 24 [cc] 138
;; live  kill	

;; Pred edge  26 [50.0%] 
;; Pred edge  27 [100.0%]  (fallthru)
(code_label 219 217 220 28 167 "" [1 uses])

(note 220 219 221 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 221 220 222 28 NOTE_INSN_DELETED)

(insn 222 221 223 28 arch/arm/mm/dma-mapping.c:242 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (reg/v:SI 138 [ size.959 ])
                        (const_int -4096 [0xfffffffffffff000]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 138 [ size.959 ])
                (plus:SI (reg/v:SI 138 [ size.959 ])
                    (const_int -4096 [0xfffffffffffff000])))
        ]) 6 {*addsi3_compare0} (nil))

(jump_insn 223 222 224 28 arch/arm/mm/dma-mapping.c:242 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 229)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 1400 [0x578])
            (nil))))
;; End of basic block 28 -> ( 29 30)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222


;; Succ edge  29 [86.0%]  (fallthru)
;; Succ edge  30 [14.0%]  (loop_exit)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u301(11){ }u302(13){ }u303(25){ }u304(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134
;; lr  def 	 134
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  gen 	 134
;; live  kill	

;; Pred edge  28 [86.0%]  (fallthru)
(note 224 223 225 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn 225 224 311 29 arch/arm/mm/dma-mapping.c:235 (set (reg/v/f:SI 134 [ page.963 ])
        (plus:SI (reg/v/f:SI 134 [ page.963 ])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(jump_insn 311 225 312 29 (set (pc)
        (label_ref 226)) 242 {*arm_jump} (nil))
;; End of basic block 29 -> ( 24)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 134 138 141 142 143 144 148 157 162 164 221 222


;; Succ edge  24 [100.0%]  (dfs_back)

(barrier 312 311 229)

;; Start of basic block ( 28) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u306(11){ }u307(13){ }u308(25){ }u309(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 141 148 157 162
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141
;; lr  def 	 24 [cc] 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 141 148 157 162
;; live  gen 	 24 [cc] 156
;; live  kill	

;; Pred edge  28 [14.0%]  (loop_exit)
(code_label 229 312 230 30 168 "" [1 uses])

(note 230 229 231 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn 231 230 232 30 arch/arm/mm/dma-mapping.c:244 (parallel [
            (asm_operands/v ("dsb") ("") 0 []
                 [] 8158962)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn 232 231 233 30 arch/arm/mm/dma-mapping.c:246 (set (reg/v/f:SI 156 [ addr ])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 141 [ c ])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 141 [ c ])
        (nil)))

(insn 233 232 234 30 arch/arm/mm/dma-mapping.c:332 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 156 [ addr ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 234 233 235 30 arch/arm/mm/dma-mapping.c:332 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 298)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 767 [0x2ff])
            (nil))))
;; End of basic block 30 -> ( 31 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 156 157 162
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 156 157 162


;; Succ edge  31 [92.3%]  (fallthru)
;; Succ edge  33 [7.7%] 

;; Start of basic block ( 30) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u313(11){ }u314(13){ }u315(25){ }u316(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156 157 162
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157 162
;; lr  def 	 211 212 213 215 216
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156 157 162
;; live  gen 	 211 212 213 215 216
;; live  kill	

;; Pred edge  30 [92.3%]  (fallthru)
(note 235 234 236 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn 236 235 237 31 arch/arm/mm/dma-mapping.c:333 (set (reg/f:SI 211)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn 237 236 238 31 arch/arm/mm/dma-mapping.c:333 (set (reg/f:SI 213 [ mem_map ])
        (mem/f/c/i:SI (reg/f:SI 211) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 211)
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 238 237 239 31 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 212)
        (minus:SI (reg/v/f:SI 157 [ page ])
            (reg/f:SI 213 [ mem_map ]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 213 [ mem_map ])
        (expr_list:REG_DEAD (reg/v/f:SI 157 [ page ])
            (nil))))

(insn 239 238 240 31 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 215)
        (ashiftrt:SI (reg:SI 212)
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 212)
        (expr_list:REG_EQUAL (div:SI (reg:SI 212)
                (const_int 32 [0x20]))
            (nil))))

(insn 240 239 241 31 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 216)
        (ashift:SI (reg:SI 215)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 215)
        (nil)))

(insn 241 240 313 31 arch/arm/mm/dma-mapping.c:333 (set (mem:SI (reg/v/f:SI 162 [ handle ]) [0 S4 A32])
        (reg:SI 216)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 216)
        (expr_list:REG_DEAD (reg/v/f:SI 162 [ handle ])
            (nil))))

(jump_insn 313 241 314 31 (set (pc)
        (label_ref 257)) 242 {*arm_jump} (nil))
;; End of basic block 31 -> ( 35)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156


;; Succ edge  35 [100.0%] 

(barrier 314 313 251)

;; Start of basic block ( 33) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u325(11){ }u326(13){ }u327(25){ }u328(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 157
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 157
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  gen 	 0 [r0] 1 [r1] 157
;; live  kill	 14 [lr]

;; Pred edge  33 [91.0%] 
(code_label 251 314 244 32 170 "" [1 uses])

(note 244 251 245 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn 245 244 293 32 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 0 r0)
        (reg/v/f:SI 157 [ page ])) 167 {*arm_movsi_insn} (nil))

(insn 293 245 247 32 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn 247 293 248 32 arch/arm/mm/dma-mapping.c:114 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10cd6800 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 248 247 298 32 arch/arm/mm/dma-mapping.c:115 (set (reg/v/f:SI 157 [ page ])
        (plus:SI (reg/v/f:SI 157 [ page ])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))
;; End of basic block 32 -> ( 33)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157


;; Succ edge  33 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 30 32 22 21) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u334(11){ }u335(13){ }u336(25){ }u337(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; lr  def 	 24 [cc]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  30 [7.7%] 
;; Pred edge  32 [100.0%]  (fallthru,dfs_back)
;; Pred edge  22 [15.0%] 
;; Pred edge  21 [100.0%] 
(code_label 298 248 290 33 176 "" [3 uses])

(note 290 298 252 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 252 290 253 33 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 157 [ page ])
            (reg/v/f:SI 148 [ p ]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 253 252 254 33 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 251)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 33 -> ( 32 34)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 148 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157


;; Succ edge  32 [91.0%] 
;; Succ edge  34 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 13 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u341(11){ }u342(13){ }u343(25){ }u344(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 156
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 156
;; live  kill	

;; Pred edge  13 [30.2%] 
;; Pred edge  33 [9.0%]  (fallthru,loop_exit)
(code_label 254 253 255 34 160 "" [1 uses])

(note 255 254 256 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn 256 255 257 34 arch/arm/mm/dma-mapping.c:325 (set (reg/v/f:SI 156 [ addr ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 34 -> ( 35)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156


;; Succ edge  35 [100.0%]  (fallthru)

;; Start of basic block ( 34 8 6 31) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u345(11){ }u346(13){ }u347(25){ }u348(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 156
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 156
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  34 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  31 [100.0%] 
(code_label 257 256 258 35 156 "" [3 uses])

(note 258 257 274 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn 274 258 280 35 arch/arm/mm/dma-mapping.c:338 (set (reg/i:SI 0 r0)
        (reg/v/f:SI 156 [ addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 156 [ addr ])
        (nil)))

(insn 280 274 262 35 arch/arm/mm/dma-mapping.c:338 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 35 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

;; Start of basic block ( 19 20) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u351(11){ }u352(13){ }u353(25){ }u354(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 24 [cc] 218 219
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164
;; live  gen 	 24 [cc] 218 219
;; live  kill	

;; Pred edge  19 [30.2%] 
;; Pred edge  20 [100.0%] 
(code_label 262 280 263 36 164 "" [2 uses])

(note 263 262 265 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn 265 263 266 36 arch/arm/mm/dma-mapping.c:201 (set (reg/f:SI 218)
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (nil))

(insn 266 265 267 36 arch/arm/mm/dma-mapping.c:201 (set (reg/f:SI 219 [ consistent_pte ])
        (mem/s/f/j:SI (reg/f:SI 218) [0 consistent_pte+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 consistent_pte+0 S4 A32])
        (nil)))

(insn 267 266 268 36 arch/arm/mm/dma-mapping.c:201 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 219 [ consistent_pte ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 219 [ consistent_pte ])
        (nil)))

(jump_insn 268 267 316 36 arch/arm/mm/dma-mapping.c:201 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 315)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 36 -> ( 37 22)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164 218
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 138 139 148 154 157 162 164 218


;; Succ edge  37 [0.0%]  (fallthru)
;; Succ edge  22 [100.0%] 

;; Start of basic block ( 36) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(11){ }u-1(13){ }u-1(25){ }u-1(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  gen 	
;; live  kill	

;; Pred edge  36 [0.0%]  (fallthru)
(note 316 268 317 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(jump_insn 317 316 318 37 (set (pc)
        (label_ref 264)) 242 {*arm_jump} (nil))
;; End of basic block 37 -> ( 21)
;; lr  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 148 157


;; Succ edge  21 [100.0%] 

(barrier 318 317 0)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_alloc_writecombine (dma_alloc_writecombine)[0:1279]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 9 to 30 -- before reload
;;   ======================================================

;;	  0-->     9 r139=`pgprot_kernel'              :cortex_a8_load_store_1
;;	  3-->    10 r141=[r139]                       :cortex_a8_load_store_1
;;	  5-->    11 r140=r141&0xffffffffffffffc3      :cortex_a8_default
;;	  6-->    12 r142=r140|0x4                     :cortex_a8_default
;;	  6-->    13 [sp]=r142                         :cortex_a8_load_store_1
;;	  7-->    18 r0=call [`__dma_alloc']           :cortex_a8_issue_branch
;;	  7-->    30 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 7
;;   new head = 9
;;   new tail = 30


;; Procedure interblock/speculative motions == 0/0 




dma_alloc_writecombine

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r11={1d,2u} r12={2d} r13={1d,4u} r14={2d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r25={1d,2u} r26={1d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} r139={1d,1u} r140={1d,1u} r141={1d,1u} r142={1d,1u} 
;;    total ref usage 151{131d,20u,0e} in 7{6 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 139 140 141 142
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 139 140 141 142
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn 9 6 10 2 arch/arm/mm/dma-mapping.c:364 (set (reg/f:SI 139)
        (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)) 167 {*arm_movsi_insn} (nil))

(insn 10 9 11 2 arch/arm/mm/dma-mapping.c:364 (set (reg:SI 141 [ pgprot_kernel ])
        (mem/c/i:SI (reg/f:SI 139) [0 pgprot_kernel+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 139)
        (nil)))

(insn 11 10 12 2 arch/arm/mm/dma-mapping.c:364 (set (reg:SI 140)
        (and:SI (reg:SI 141 [ pgprot_kernel ])
            (const_int -61 [0xffffffffffffffc3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 141 [ pgprot_kernel ])
        (nil)))

(insn 12 11 13 2 arch/arm/mm/dma-mapping.c:364 (set (reg:SI 142)
        (ior:SI (reg:SI 140)
            (const_int 4 [0x4]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 140)
        (nil)))

(insn 13 12 18 2 arch/arm/mm/dma-mapping.c:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 142)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 142)
        (nil)))

(call_insn 18 13 30 2 arch/arm/mm/dma-mapping.c:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__dma_alloc") [flags 0x3] <function_decl 0x1145e100 __dma_alloc>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 30 18 34 2 arch/arm/mm/dma-mapping.c:366 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 34 30 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function dma_alloc_coherent (dma_alloc_coherent)[0:1278]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 2 to 17 -- before reload
;;   ======================================================

;;	  0-->     5 r139=r3                           :cortex_a8_default
;;	  0-->    13 r3=sfp-0x4                        :cortex_a8_default
;;	  1-->     2 r136=r0                           :cortex_a8_default
;;	  1-->     3 r137=r1                           :cortex_a8_default
;;	  2-->     4 r138=r2                           :cortex_a8_default
;;	  2-->    14 r0=call [`dma_alloc_from_coherent':cortex_a8_issue_branch
;;	 34-->    16 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 36-->    17 pc={(cc==0x0)?L22:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 36
;;   new head = 2
;;   new tail = 17

;;   ======================================================
;;   -- basic block 3 from 19 to 51 -- before reload
;;   ======================================================

;;	  0-->    19 r133=[sfp-0x4]                    :cortex_a8_load_store_1
;;	  0-->    51 pc=L35                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 19
;;   new tail = 51

;;   ======================================================
;;   -- basic block 4 from 24 to 34 -- before reload
;;   ======================================================

;;	  0-->    24 r141=`pgprot_kernel'              :cortex_a8_load_store_1
;;	  0-->    29 r0=r136                           :cortex_a8_default
;;	  1-->    30 r1=r137                           :cortex_a8_default
;;	  1-->    31 r2=r138                           :cortex_a8_default
;;	  2-->    32 r3=r139                           :cortex_a8_default
;;	  3-->    25 r143=[r141]                       :cortex_a8_load_store_1
;;	  5-->    26 r142=r143&0xfffffffffffffdc3      :cortex_a8_default
;;	  6-->    27 r144=r142|0x204                   :cortex_a8_default
;;	  6-->    28 [sp]=r144                         :cortex_a8_load_store_1
;;	  7-->    33 r0=call [`__dma_alloc']           :cortex_a8_issue_branch
;;	  7-->    34 r133=r0                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 24
;;   new tail = 34

;;   ======================================================
;;   -- basic block 5 from 41 to 47 -- before reload
;;   ======================================================

;;	  0-->    41 r0=r133                           :cortex_a8_default
;;	  0-->    47 use r0                            :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 41
;;   new tail = 47


;; Procedure interblock/speculative motions == 0/0 




dma_alloc_coherent

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp] 25 [sfp] 26 [afp]
;;  regular block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  eh block artificial uses 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 12 [ip] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;;  exit block uses 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,7u} r1={4d,3u} r2={4d,3u} r3={5d,3u} r11={1d,5u} r12={3d} r13={1d,8u} r14={3d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r25={1d,7u} r26={1d,4u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} r133={2d,1u} r136={1d,1u} r137={1d,1u} r138={1d,1u} r139={1d,1u} r141={1d,1u} r142={1d,1u} r143={1d,1u} r144={1d,1u} 
;;    total ref usage 312{261d,51u,0e} in 23{21 regular + 2 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u0(11){ }u1(13){ }u2(25){ }u3(26){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 136 137 138 139
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc] 136 137 138 139
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 6 15 2 NOTE_INSN_DELETED)

(note 15 9 5 2 NOTE_INSN_DELETED)

(insn 5 15 13 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v:SI 139 [ gfp ])
        (reg:SI 3 r3 [ gfp ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ gfp ])
        (nil)))

(insn 13 5 2 2 arch/arm/mm/dma-mapping.c:349 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 25 sfp)
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(insn 2 13 3 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v/f:SI 136 [ dev ])
        (reg:SI 0 r0 [ dev ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 4 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v:SI 137 [ size ])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 4 3 14 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v/f:SI 138 [ handle ])
        (reg:SI 2 r2 [ handle ])) 167 {*arm_movsi_insn} (nil))

(call_insn 14 4 16 2 arch/arm/mm/dma-mapping.c:349 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_alloc_from_coherent") [flags 0x41] <function_decl 0x11060380 dma_alloc_from_coherent>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 16 14 17 2 arch/arm/mm/dma-mapping.c:349 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn 17 16 18 2 arch/arm/mm/dma-mapping.c:349 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3898 [0xf3a])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 136 137 138 139
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  4 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u19(11){ }u20(13){ }u21(25){ }u22(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; lr  def 	 133
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp]
;; live  gen 	 133
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 18 17 19 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 19 18 51 3 arch/arm/mm/dma-mapping.c:350 (set (reg/f:SI 133 [ D.24543 ])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -4 [0xfffffffffffffffc])) [0 memory+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 51 19 52 3 arch/arm/mm/dma-mapping.c:350 (set (pc)
        (label_ref 35)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133


;; Succ edge  5 [100.0%] 

(barrier 52 51 22)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u24(11){ }u25(13){ }u26(25){ }u27(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc] 133 141 142 143 144
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 136 137 138 139
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 133 141 142 143 144
;; live  kill	 14 [lr]

;; Pred edge  2 [39.0%] 
(code_label 22 52 23 4 190 "" [1 uses])

(note 23 22 24 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 24 23 29 4 arch/arm/mm/dma-mapping.c:352 (set (reg/f:SI 141)
        (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)) 167 {*arm_movsi_insn} (nil))

(insn 29 24 30 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 0 r0)
        (reg/v/f:SI 136 [ dev ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 136 [ dev ])
        (nil)))

(insn 30 29 31 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 1 r1)
        (reg/v:SI 137 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 137 [ size ])
        (nil)))

(insn 31 30 32 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 2 r2)
        (reg/v/f:SI 138 [ handle ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 138 [ handle ])
        (nil)))

(insn 32 31 25 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 3 r3)
        (reg/v:SI 139 [ gfp ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 139 [ gfp ])
        (nil)))

(insn 25 32 26 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 143 [ pgprot_kernel ])
        (mem/c/i:SI (reg/f:SI 141) [0 pgprot_kernel+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 141)
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>) [0 pgprot_kernel+0 S4 A32])
            (nil))))

(insn 26 25 27 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 142)
        (and:SI (reg:SI 143 [ pgprot_kernel ])
            (const_int -573 [0xfffffffffffffdc3]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 143 [ pgprot_kernel ])
        (nil)))

(insn 27 26 28 4 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 144)
        (ior:SI (reg:SI 142)
            (const_int 516 [0x204]))) 89 {*arm_iorsi3} (expr_list:REG_DEAD (reg:SI 142)
        (nil)))

(insn 28 27 33 4 arch/arm/mm/dma-mapping.c:352 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 144)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 144)
        (nil)))

(call_insn 33 28 34 4 arch/arm/mm/dma-mapping.c:352 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__dma_alloc") [flags 0x3] <function_decl 0x1145e100 __dma_alloc>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 34 33 35 4 arch/arm/mm/dma-mapping.c:352 (set (reg/f:SI 133 [ D.24543 ])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; live  out 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133


;; Succ edge  5 [100.0%]  (fallthru)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u43(11){ }u44(13){ }u45(25){ }u46(26){ }}
;; lr  in  	 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp] 133
;; lr  use 	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; lr  def 	 0 [r0]
;; live  in  	 11 [fp] 13 [sp] 25 [sfp] 26 [afp] 133
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  3 [100.0%] 
(code_label 35 34 36 5 191 "" [1 uses])

(note 36 35 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 41 36 47 5 arch/arm/mm/dma-mapping.c:354 (set (reg/i:SI 0 r0)
        (reg/f:SI 133 [ D.24543 ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 133 [ D.24543 ])
        (nil)))

(insn 47 41 53 5 arch/arm/mm/dma-mapping.c:354 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 11 [fp] 13 [sp] 14 [lr] 25 [sfp] 26 [afp]
;; live  out 	 0 [r0] 11 [fp] 13 [sp] 25 [sfp] 26 [afp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 53 47 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns
