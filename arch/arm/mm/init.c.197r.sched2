
;; Function parse_tag_initrd2 (parse_tag_initrd2)[0:1345] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 2 to 30 -- after reload
;;   ======================================================

;;	  0-->     2 r2=r0                             :cortex_a8_default
;;	  0-->     6 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  1-->    16 r0=0x0                            :cortex_a8_default
;;	  2-->     7 r1=[r2+0x8]                       :cortex_a8_load_store_1
;;	  5-->     8 [r3]=r1                           :cortex_a8_load_store_1
;;	  6-->    10 r2=[r2+0xc]                       :cortex_a8_load_store_1
;;	  9-->    11 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	  9-->    22 use r0                            :nothing
;;	 10-->    30 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 10
;;   new head = 2
;;   new tail = 30





parse_tag_initrd2

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={3d,3u,1d} r3={2d,2u,1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 25{11d,12u,2e} in 9{9 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 28 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 28 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 28 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 3 2 2 NOTE_INSN_DELETED)

(insn:TI 2 12 6 2 arch/arm/mm/init.c:68 (set (reg/v/f:SI 2 r2 [orig:134 tag ] [134])
        (reg:SI 0 r0 [ tag ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tag ])
        (nil)))

(insn 6 2 16 2 arch/arm/mm/init.c:69 (set (reg/f:SI 3 r3 [135])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 16 6 7 2 arch/arm/mm/init.c:72 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 7 16 8 2 arch/arm/mm/init.c:69 (set (reg:SI 1 r1 [orig:136 <variable>.u.initrd.start ] [136])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 tag ] [134])
                (const_int 8 [0x8])) [0 <variable>.u.initrd.start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 tag ] [134])
                (const_int 8 [0x8])) [0 <variable>.u.initrd.start+0 S4 A32])
        (nil)))

(insn:TI 8 7 10 2 arch/arm/mm/init.c:69 (set (mem/c/i:SI (reg/f:SI 3 r3 [135]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 1 r1 [orig:136 <variable>.u.initrd.start ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:136 <variable>.u.initrd.start ] [136])
        (nil)))

(insn:TI 10 8 11 2 arch/arm/mm/init.c:70 (set (reg:SI 2 r2 [orig:138 <variable>.u.initrd.size ] [138])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 tag ] [134])
                (const_int 12 [0xc])) [0 <variable>.u.initrd.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn:TI 11 10 22 2 arch/arm/mm/init.c:70 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [135])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 2 r2 [orig:138 <variable>.u.initrd.size ] [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [135])
        (expr_list:REG_DEAD (reg:SI 2 r2 [orig:138 <variable>.u.initrd.size ] [138])
            (nil))))

(insn 22 11 29 2 arch/arm/mm/init.c:72 (use (reg/i:SI 0 r0)) -1 (nil))

(note 29 22 30 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 30 29 31 2 arch/arm/mm/init.c:72 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 31 30 26)

(note 26 31 27 NOTE_INSN_DELETED)

(note 27 26 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function meminfo_cmp (meminfo_cmp)[0:1352] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 9 to 13 -- after reload
;;   ======================================================

;;	  0-->     9 r3=[r1]                           :cortex_a8_load_store_1
;;	  1-->     7 r2=[r0]                           :cortex_a8_load_store_1
;;	  3-->    10 r3=r3 0>>0xc                      :cortex_a8_default
;;	  4-->    11 r3=r2 0>>0xc-r3                   :cortex_a8_default
;;	  5-->    12 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  6-->    15 (cc<0x0) r0=0xffffffffffffffff    :cortex_a8_default
;;	  7-->    13 pc={(cc<0x0)?return:pc}           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 7
;;   new head = 9
;;   new tail = 13

;;   ======================================================
;;   -- basic block 3 from 21 to 65 -- after reload
;;   ======================================================

;;	  0-->    21 r0=cc>0x0                         :cortex_a8_default
;;	  0-->    35 use r0                            :nothing
;;	  0-->    65 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 21
;;   new tail = 65





meminfo_cmp

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,4u} r1={1d,1u} r2={2d,1u} r3={4d,3u} r13={1d,3u} r14={1d,1u} r24={1d,3u} 
;;    total ref usage 29{13d,16u,0e} in 10{10 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 62 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 62 5 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 62 3 2 NOTE_INSN_DELETED)

(note 3 2 4 2 NOTE_INSN_DELETED)

(note 4 3 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 9 2 NOTE_INSN_DELETED)

(insn:TI 9 8 7 2 arch/arm/mm/init.c:324 (set (reg:SI 3 r3 [orig:141 <variable>.start ] [141])
        (mem/s/j:SI (reg:SI 1 r1 [ _b ]) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ _b ])
        (nil)))

(insn:TI 7 9 10 2 arch/arm/mm/init.c:324 (set (reg:SI 2 r2 [orig:139 <variable>.start ] [139])
        (mem/s/j:SI (reg:SI 0 r0 [ _a ]) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 10 7 11 2 arch/arm/mm/init.c:324 (set (reg:SI 3 r3 [140])
        (lshiftrt:SI (reg:SI 3 r3 [orig:141 <variable>.start ] [141])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 11 10 12 2 arch/arm/mm/init.c:324 (set (reg/v:SI 3 r3 [orig:133 cmp ] [133])
        (minus:SI (lshiftrt:SI (reg:SI 2 r2 [orig:139 <variable>.start ] [139])
                (const_int 12 [0xc]))
            (reg:SI 3 r3 [140]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:139 <variable>.start ] [139])
        (nil)))

(insn:TI 12 11 15 2 arch/arm/mm/init.c:325 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:133 cmp ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:133 cmp ] [133])
        (nil)))

(insn:TI 15 12 13 2 arch/arm/mm/init.c:325 discrim 2 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 0 r0 [orig:134 D.25161 ] [134])
            (const_int -1 [0xffffffffffffffff]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 13 15 19 2 arch/arm/mm/init.c:325 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_BR_PROB (const_int 1912 [0x778])
        (nil)))
;; End of basic block 2 -> ( 1 3)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr] 24 [cc]
;; live  out 	 0 [r0] 13 [sp] 14 [lr] 24 [cc]


;; Succ edge  EXIT [19.1%] 
;; Succ edge  3 [80.9%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr] 24 [cc]
;; lr  use 	 13 [sp] 24 [cc]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr] 24 [cc]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [80.9%]  (fallthru)
(note 19 13 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 19 35 3 arch/arm/mm/init.c:325 discrim 1 (set (reg:SI 0 r0 [orig:134 D.25161 ] [134])
        (gt:SI (reg:CC 24 cc)
            (const_int 0 [0x0]))) 233 {*mov_scc} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn 35 21 65 3 arch/arm/mm/init.c:326 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 65 35 64 3 arch/arm/mm/init.c:326 (return) 260 {return} (nil))
;; End of basic block 3 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 64 65 60)

(note 60 64 61 NOTE_INSN_DELETED)

(note 61 60 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function keepinitrd_setup (keepinitrd_setup)[0:1363] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 7 to 28 -- after reload
;;   ======================================================

;;	  0-->    24 r2=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  0-->     7 r3=0x1                            :cortex_a8_default
;;	  1-->    13 r0=r3                             :cortex_a8_default
;;	  3-->     8 [r2]=r3                           :cortex_a8_load_store_1
;;	  3-->    19 use r0                            :nothing
;;	  4-->    28 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 7
;;   new tail = 28





keepinitrd_setup

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3]
;;  ref usage 	r0={2d,2u} r1={1d} r2={2d,1u} r3={2d,2u} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 17{9d,8u,0e} in 6{6 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 2 [r2] 3 [r3]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 26 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 26 4 3 2 NOTE_INSN_PROLOGUE_END)

(note 3 26 24 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 24 3 7 2 arch/arm/mm/init.c:766 (set (reg/f:SI 2 r2 [135])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 7 24 13 2 arch/arm/mm/init.c:766 (set (reg:SI 3 r3 [136])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn:TI 13 7 8 2 arch/arm/mm/init.c:768 (set (reg/i:SI 0 r0)
        (reg:SI 3 r3 [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 8 13 19 2 arch/arm/mm/init.c:766 (set (mem/c/i:SI (reg/f:SI 2 r2 [135]) [0 keep_initrd+0 S4 A32])
        (reg:SI 3 r3 [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [136])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [135])
            (expr_list:REG_EQUAL (const_int 1 [0x1])
                (nil)))))

(insn 19 8 27 2 arch/arm/mm/init.c:768 (use (reg/i:SI 0 r0)) -1 (nil))

(note 27 19 28 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 28 27 29 2 arch/arm/mm/init.c:768 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 29 28 23)

(note 23 29 25 NOTE_INSN_DELETED)

(note 25 23 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function early_initrd (early_initrd)[0:1343] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 49 to 14 -- after reload
;;   ======================================================

;;	  0-->    49 {[--sp]=unspec[r0] 2;use r1;use r4:cortex_a8_load_store_2
;;	  1-->     8 r1=sp+0x4                         :cortex_a8_default
;;	  2-->     9 r0=call [`memparse']              :cortex_a8_issue_branch
;;	 34-->    43 r4=r0                             :cortex_a8_default
;;	 34-->    11 r0=[sp+0x4]                       :cortex_a8_load_store_1
;;	 37-->    12 r3=zxn([r0])                      :cortex_a8_load_store_1
;;	 39-->    13 cc=cmp(r3,0x2c)                   :cortex_a8_default
;;	 41-->    14 pc={(cc!=0x0)?L27:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 41
;;   new head = 49
;;   new tail = 14

;;   ======================================================
;;   -- basic block 3 from 17 to 26 -- after reload
;;   ======================================================

;;	  0-->    17 r0=r0+0x1                         :cortex_a8_default
;;	  0-->    18 r1=0x0                            :cortex_a8_default
;;	  1-->    19 r0=call [`memparse']              :cortex_a8_issue_branch
;;	  1-->    21 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  4-->    23 [r3]=r4                           :cortex_a8_load_store_1
;;	 33-->    26 [r3+0x4]=r0                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 33
;;   new head = 17
;;   new tail = 26

;;   ======================================================
;;   -- basic block 4 from 33 to 52 -- after reload
;;   ======================================================

;;	  0-->    33 r0=0x0                            :cortex_a8_default
;;	  0-->    39 use r0                            :nothing
;;	  0-->    52 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 33
;;   new tail = 52





early_initrd

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 3[r3] 4[r4] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,9u} r1={5d,3u} r2={3d} r3={5d,3u} r4={2d,3u} r12={2d} r13={2d,9u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 281{251d,30u,0e} in 17{15 regular + 2 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 49 2 NOTE_INSN_DELETED)

(insn/f:TI 49 6 50 2 arch/arm/mm/init.c:41 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 4 r4))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                            (set/f (reg/f:SI 13 sp)
                                (plus:SI (reg/f:SI 13 sp)
                                    (const_int -16 [0xfffffffffffffff0])))
                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                (reg:SI 0 r0))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 4 [0x4])) [0 S4 A32])
                                (reg:SI 1 r1))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 8 [0x8])) [0 S4 A32])
                                (reg:SI 4 r4))
                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                        (const_int 12 [0xc])) [0 S4 A32])
                                (reg:SI 14 lr))
                        ])
                    (nil))))))

(note 50 49 8 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 8 50 9 2 arch/arm/mm/init.c:45 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 9 8 43 2 arch/arm/mm/init.c:45 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memparse") [flags 0x41] <function_decl 0x10a58100 memparse>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 43 9 11 2 arch/arm/mm/init.c:45 (set (reg:SI 4 r4 [orig:148 D.24930 ] [148])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 11 43 12 2 arch/arm/mm/init.c:46 (set (reg/f:SI 0 r0 [orig:134 endp.338 ] [134])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 endp+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 12 11 13 2 arch/arm/mm/init.c:46 (set (reg:SI 3 r3 [139])
        (zero_extend:SI (mem:QI (reg/f:SI 0 r0 [orig:134 endp.338 ] [134]) [0 S1 A8]))) 149 {*arm_zero_extendqisi2_v6} (nil))

(insn:TI 13 12 14 2 arch/arm/mm/init.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [139])
            (const_int 44 [0x2c]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [139])
        (nil)))

(jump_insn:TI 14 13 15 2 arch/arm/mm/init.c:46 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8010 [0x1f4a])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  3 [19.9%]  (fallthru)
;; Succ edge  4 [80.1%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  2 [19.9%]  (fallthru)
(note 15 14 16 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 16 15 45 3 NOTE_INSN_DELETED)

(note 45 16 17 3 NOTE_INSN_DELETED)

(insn:TI 17 45 18 3 arch/arm/mm/init.c:47 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [orig:134 endp.338 ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 18 17 19 3 arch/arm/mm/init.c:47 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 19 18 21 3 arch/arm/mm/init.c:47 (parallel [
            (set (reg:DI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memparse") [flags 0x41] <function_decl 0x10a58100 memparse>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 21 19 23 3 arch/arm/mm/init.c:49 (set (reg/f:SI 3 r3 [141])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 23 21 26 3 arch/arm/mm/init.c:49 (set (mem/c/i:SI (reg/f:SI 3 r3 [141]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 4 r4 [orig:148 D.24930 ] [148])) 167 {*arm_movsi_insn} (nil))

(insn:TI 26 23 27 3 arch/arm/mm/init.c:50 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [141])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [141])
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [80.1%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 27 26 28 4 15 "" [1 uses])

(note 28 27 33 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 33 28 39 4 arch/arm/mm/init.c:53 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 39 33 51 4 arch/arm/mm/init.c:53 (use (reg/i:SI 0 r0)) -1 (nil))

(note 51 39 52 4 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 52 51 53 4 arch/arm/mm/init.c:53 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 53 52 47)

(note 47 53 48 NOTE_INSN_DELETED)

(note 48 47 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function parse_tag_initrd (parse_tag_initrd)[0:1344] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 32 to 35 -- after reload
;;   ======================================================

;;	  0-->    32 {[--sp]=unspec[r4] 2;use lr;}     :cortex_a8_load_store_2
;;	  1-->     2 r4=r0                             :cortex_a8_default
;;	  2-->     7 r0=`*.LC0'                        :cortex_a8_load_store_1
;;	  3-->     8 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->     9 r3=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  4-->    10 r2=[r4+0x8]                       :cortex_a8_load_store_1
;;	  4-->    20 r0=0x0                            :cortex_a8_default
;;	  6-->    11 r2=r2+0x40000000                  :cortex_a8_default
;;	  6-->    12 [r3]=r2                           :cortex_a8_load_store_1
;;	  7-->    14 r2=[r4+0xc]                       :cortex_a8_load_store_1
;;	 10-->    15 [r3+0x4]=r2                       :cortex_a8_load_store_1
;;	 10-->    26 use r0                            :nothing
;;	 11-->    35 return                            :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 11
;;   new head = 32
;;   new tail = 35





parse_tag_initrd

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 4[r4] 13[sp] 14[lr]
;;  ref usage 	r0={4d,4u} r1={2d} r2={5d,3u} r3={3d,2u,2d} r4={2d,4u,1d} r12={1d} r13={2d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 154{132d,19u,3e} in 13{12 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 16 2 NOTE_INSN_DELETED)

(note 16 6 32 2 NOTE_INSN_DELETED)

(insn/f:TI 32 16 33 2 arch/arm/mm/init.c:57 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -8 [0xfffffffffffffff8])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 33 32 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 33 7 2 arch/arm/mm/init.c:57 (set (reg/v/f:SI 4 r4 [orig:134 tag ] [134])
        (reg:SI 0 r0 [ tag ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ tag ])
        (nil)))

(insn:TI 7 2 8 2 arch/arm/mm/init.c:58 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10ee9180>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x10ee9180>)
        (nil)))

(call_insn:TI 8 7 9 2 arch/arm/mm/init.c:58 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 9 8 10 2 arch/arm/mm/init.c:60 (set (reg/f:SI 3 r3 [136])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 10 9 20 2 arch/arm/mm/init.c:60 (set (reg:SI 2 r2 [orig:137 <variable>.u.initrd.start ] [137])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 tag ] [134])
                (const_int 8 [0x8])) [0 <variable>.u.initrd.start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 tag ] [134])
                (const_int 8 [0x8])) [0 <variable>.u.initrd.start+0 S4 A32])
        (nil)))

(insn 20 10 11 2 arch/arm/mm/init.c:63 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 11 20 12 2 arch/arm/mm/init.c:60 (set (reg:SI 2 r2 [138])
        (plus:SI (reg:SI 2 r2 [orig:137 <variable>.u.initrd.start ] [137])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [136]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(insn 12 11 14 2 arch/arm/mm/init.c:60 (set (mem/c/i:SI (reg/f:SI 3 r3 [136]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 2 r2 [138])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [138])
        (nil)))

(insn:TI 14 12 15 2 arch/arm/mm/init.c:61 (set (reg:SI 2 r2 [orig:140 <variable>.u.initrd.size ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 tag ] [134])
                (const_int 12 [0xc])) [0 <variable>.u.initrd.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [136])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn:TI 15 14 26 2 arch/arm/mm/init.c:61 (set (mem/c/i:SI (plus:SI (reg/f:SI 3 r3 [136])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 2 r2 [orig:140 <variable>.u.initrd.size ] [140])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [136])
        (expr_list:REG_DEAD (reg:SI 2 r2 [orig:140 <variable>.u.initrd.size ] [140])
            (nil))))

(insn 26 15 34 2 arch/arm/mm/init.c:63 (use (reg/i:SI 0 r0)) -1 (nil))

(note 34 26 35 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 35 34 36 2 arch/arm/mm/init.c:63 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 36 35 30)

(note 30 36 31 NOTE_INSN_DELETED)

(note 31 30 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function free_initrd_mem (free_initrd_mem)[0:1362]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 25 (  1.9)


free_initrd_mem

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,7u} r1={7d,6u,1d} r2={7d,4u} r3={16d,12u} r4={4d,6u} r5={4d,8u} r6={3d,4u} r7={3d,6u} r8={3d,5u} r9={2d,3u,1d} r10={3d,5u} r11={2d,3u} r12={4d,1u} r13={2d,18u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={7d,4u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 504{408d,94u,2e} in 57{54 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 3 12 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 13 [sp] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 2 )->[3]->( 5 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]

( 5 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]

( 4 3 )->[5]->( 4 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]

( 5 )->[6]->( 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 0 [r0] 1 [r1] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 8 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 6 [r6] 9 [r9] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 7 6 )->[8]->( 7 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 8 )->[9]->( 10 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 9 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 9 10 )->[11]->( 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 11 2 )->[12]->( 1 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 12 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 41 to worklist
  Adding insn 138 to worklist
  Adding insn 143 to worklist
  Adding insn 53 to worklist
  Adding insn 60 to worklist
  Adding insn 145 to worklist
  Adding insn 135 to worklist
  Adding insn 85 to worklist
  Adding insn 82 to worklist
  Adding insn 80 to worklist
  Adding insn 92 to worklist
  Adding insn 95 to worklist
  Adding insn 102 to worklist
  Adding insn 108 to worklist
  Adding insn 141 to worklist
Finished finding needed instructions:
processing block 4 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
processing block 7 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 121 to worklist
  Adding insn 83 to worklist
  Adding insn 79 to worklist
  Adding insn 87 to worklist
  Adding insn 77 to worklist
  Adding insn 86 to worklist
  Adding insn 76 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 131 to worklist
  Adding insn 107 to worklist
  Adding insn 106 to worklist
  Adding insn 136 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 100 to worklist
  Adding insn 99 to worklist
  Adding insn 101 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 94 to worklist
processing block 8 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 91 to worklist
  Adding insn 119 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 75 to worklist
  Adding insn 69 to worklist
  Adding insn 70 to worklist
  Adding insn 63 to worklist
  Adding insn 132 to worklist
  Adding insn 71 to worklist
  Adding insn 68 to worklist
  Adding insn 67 to worklist
  Adding insn 65 to worklist
  Adding insn 81 to worklist
  Adding insn 66 to worklist
  Adding insn 64 to worklist
processing block 5 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 57 to worklist
  Adding insn 54 to worklist
  Adding insn 59 to worklist
processing block 3 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 47 to worklist
  Adding insn 128 to worklist
  Adding insn 127 to worklist
  Adding insn 52 to worklist
  Adding insn 44 to worklist
  Adding insn 48 to worklist
  Adding insn 43 to worklist
processing block 2 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 40 to worklist
  Adding insn 39 to worklist
  Adding insn 133 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 13 n_edges 16 count 26 (    2)
;;   ======================================================
;;   -- basic block 2 from 138 to 41 -- after reload
;;   ======================================================

;;	  0-->   133 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  1-->   138 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  3-->    39 r3=[r3]                           :cortex_a8_load_store_1
;;	  5-->    40 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  7-->    41 pc={(cc!=0x0)?L114:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 138
;;   new tail = 41

;;   ======================================================
;;   -- basic block 3 from 43 to 143 -- after reload
;;   ======================================================

;;	  0-->    43 r3=r1+0xff0                       :cortex_a8_default
;;	  0-->    48 r2=r0                             :cortex_a8_default
;;	  1-->    44 r3=r3+0xf                         :cortex_a8_default
;;	  1-->    52 ip=0xffffffffe7fddef0             :cortex_a8_load_store_1
;;	  2-->   127 r3=r3&0xfffffffffffff00f          :cortex_a8_default
;;	  3-->   128 r3=r3&0xfffffffffffffff0          :cortex_a8_default
;;	  4-->    47 r3=r3-r0                          :cortex_a8_default
;;	  4-->   143 pc=L55                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 43
;;   new tail = 143

;;   ======================================================
;;   -- basic block 4 from 53 to 53 -- after reload
;;   ======================================================

;;	  0-->    53 [r2-0x4]=ip                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 0
;;   new head = 53
;;   new tail = 53

;;   ======================================================
;;   -- basic block 5 from 59 to 60 -- after reload
;;   ======================================================

;;	  0-->    59 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  0-->    57 r2=r2+0x4                         :cortex_a8_default
;;	  1-->    54 r3=r3-0x4                         :cortex_a8_default
;;	  2-->    60 pc={(cc!=0x0)?L58:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 59
;;   new tail = 60

;;   ======================================================
;;   -- basic block 6 from 64 to 145 -- after reload
;;   ======================================================

;;	  0-->   132 r3=`totalram_pages'               :cortex_a8_load_store_1
;;	  0-->    64 r5=r0+0x40000000                  :cortex_a8_default
;;	  1-->    66 sl=r1+0x40000000                  :cortex_a8_default
;;	  1-->    81 fp=0x1                            :cortex_a8_default
;;	  2-->    65 r5=r5 0>>0xc                      :cortex_a8_default
;;	  2-->    75 r9=`mem_map'                      :cortex_a8_load_store_1
;;	  3-->    67 sl=sl 0>>0xc                      :cortex_a8_default
;;	  3-->    63 r3=[r3]                           :cortex_a8_load_store_1
;;	  4-->    68 r8=sl-r5                          :cortex_a8_default
;;	  4-->    71 r4=r5                             :cortex_a8_default
;;	  5-->    70 r6=r5<<0x5                        :cortex_a8_default
;;	  6-->   135 [sp+0x4]=r3                       :cortex_a8_load_store_1
;;	  6-->    69 r8=r8<<0x2                        :cortex_a8_default
;;	  7-->   145 pc=L88                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 64
;;   new tail = 145

;;   ======================================================
;;   -- basic block 7 from 76 to 85 -- after reload
;;   ======================================================

;;	  0-->    76 r7=[r9]                           :cortex_a8_load_store_1
;;	  0-->    86 r4=r4+0x1                         :cortex_a8_default
;;	  2-->    77 r7=r7+r6                          :cortex_a8_default
;;	  2-->    87 r6=r6+0x20                        :cortex_a8_default
;;	  3-->    79 r1=r7                             :cortex_a8_default
;;	  4-->    80 call [`_clear_bit']               :cortex_a8_issue_branch
;;	  4-->    82 [r7+0x10]=fp                      :cortex_a8_load_store_1
;;	  5-->    83 r0=r7                             :cortex_a8_default
;;	  5-->   121 r1=0x0                            :cortex_a8_default
;;	  6-->    85 call [`__free_pages']             :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 76
;;   new tail = 85

;;   ======================================================
;;   -- basic block 8 from 119 to 92 -- after reload
;;   ======================================================

;;	  0-->    91 cc=cmp(r4,sl)                     :cortex_a8_default
;;	  0-->   119 r0=0xa                            :cortex_a8_default
;;	  2-->    92 pc={(ltu(cc,0x0))?L90:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 119
;;   new tail = 92

;;   ======================================================
;;   -- basic block 9 from 94 to 95 -- after reload
;;   ======================================================

;;	  0-->    94 cc=cmp(r8,0x0)                    :cortex_a8_default
;;	  2-->    95 pc={(cc==0x0)?L103:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 94
;;   new tail = 95

;;   ======================================================
;;   -- basic block 10 from 101 to 102 -- after reload
;;   ======================================================

;;	  0-->   101 r2=r8                             :cortex_a8_default
;;	  0-->    99 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  1-->   100 r1=`*.LC2'                        :cortex_a8_load_store_1
;;	  2-->   102 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 101
;;   new tail = 102

;;   ======================================================
;;   -- basic block 11 from 136 to 108 -- after reload
;;   ======================================================

;;	  0-->   136 r3=[sp+0x4]                       :cortex_a8_load_store_1
;;	  2-->   106 r5=r3-r5                          :cortex_a8_default
;;	  2-->   131 r3=`totalram_pages'               :cortex_a8_load_store_1
;;	  3-->   107 r4=r5+r4                          :cortex_a8_default
;;	  5-->   108 [r3]=r4                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 136
;;   new tail = 108

;;   ======================================================
;;   -- basic block 12 from 141 to 141 -- after reload
;;   ======================================================

;;	  0-->   141 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 0
;;   new head = 141
;;   new tail = 141





free_initrd_mem

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,7u} r1={7d,6u,1d} r2={7d,4u} r3={16d,12u} r4={4d,6u} r5={4d,8u} r6={3d,4u} r7={3d,6u} r8={3d,5u} r9={2d,3u,1d} r10={3d,5u} r11={2d,3u} r12={4d,1u} r13={2d,18u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={7d,4u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 504{408d,94u,2e} in 57{54 regular + 3 call} insns.
(note 32 0 36 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 36 32 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 35 36 133 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 133 35 138 2 arch/arm/mm/init.c:756 (set (reg/f:SI 3 r3 [175])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn/f:TI 138 133 139 2 arch/arm/mm/init.c:755 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -48 [0xffffffffffffffd0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 0 r0))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 1 r1))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 2 r2))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 4 r4))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 16 [0x10])) [0 S4 A32])
                        (reg:SI 5 r5))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 20 [0x14])) [0 S4 A32])
                        (reg:SI 6 r6))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 24 [0x18])) [0 S4 A32])
                        (reg:SI 7 r7))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 28 [0x1c])) [0 S4 A32])
                        (reg:SI 8 r8))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 32 [0x20])) [0 S4 A32])
                        (reg:SI 9 r9))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 36 [0x24])) [0 S4 A32])
                        (reg:SI 10 sl))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 40 [0x28])) [0 S4 A32])
                        (reg:SI 11 fp))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 44 [0x2c])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 139 138 39 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 39 139 40 2 arch/arm/mm/init.c:756 (set (reg:SI 3 r3 [orig:176 keep_initrd ] [176])
        (mem/c/i:SI (reg/f:SI 3 r3 [175]) [0 keep_initrd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 keep_initrd+0 S4 A32])
        (nil)))

(insn:TI 40 39 41 2 arch/arm/mm/init.c:756 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:176 keep_initrd ] [176])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:176 keep_initrd ] [176])
        (nil)))

(jump_insn:TI 41 40 42 2 arch/arm/mm/init.c:756 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 2 -> ( 3 12)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  3 [61.0%]  (fallthru)
;; Succ edge  12 [39.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 12 [ip]
;; live  kill	

;; Pred edge  2 [61.0%]  (fallthru)
(note 42 41 45 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 45 42 43 3 NOTE_INSN_DELETED)

(insn:TI 43 45 48 3 arch/arm/mm/init.c:757 (set (reg:SI 3 r3 [178])
        (plus:SI (reg/v:SI 1 r1 [orig:174 end ] [174])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 48 43 44 3 arch/arm/mm/init.c:757 (set (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
        (reg/v:SI 0 r0 [orig:173 start ] [173])) 167 {*arm_movsi_insn} (nil))

(insn:TI 44 48 52 3 arch/arm/mm/init.c:757 (set (reg:SI 3 r3 [177])
        (plus:SI (reg:SI 3 r3 [178])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 1 r1 [orig:174 end ] [174])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 52 44 127 3 arch/arm/mm/init.c:445 (set (reg:SI 12 ip [198])
        (const_int -402792720 [0xffffffffe7fddef0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -402792720 [0xffffffffe7fddef0])
        (nil)))

(insn:TI 127 52 128 3 arch/arm/mm/init.c:757 (set (reg:SI 3 r3 [179])
        (and:SI (reg:SI 3 r3 [177])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 128 127 47 3 arch/arm/mm/init.c:757 (set (reg:SI 3 r3 [179])
        (and:SI (reg:SI 3 r3 [179])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 47 128 143 3 arch/arm/mm/init.c:757 (set (reg/v:SI 3 r3 [orig:170 count ] [170])
        (minus:SI (reg:SI 3 r3 [179])
            (reg/v:SI 0 r0 [orig:173 start ] [173]))) 28 {*arm_subsi3_insn} (nil))

(jump_insn 143 47 144 3 (set (pc)
        (label_ref 55)) 242 {*arm_jump} (nil))
;; End of basic block 3 -> ( 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%] 

(barrier 144 143 58)

;; Start of basic block ( 5) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  5 [91.0%] 
(code_label 58 144 51 4 26 "" [1 uses])

(note 51 58 53 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 53 51 55 4 arch/arm/mm/init.c:445 (set (mem:SI (plus:SI (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
                (const_int -4 [0xfffffffffffffffc])) [0 S4 A32])
        (reg:SI 12 ip [198])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -402792720 [0xffffffffe7fddef0])
        (nil)))
;; End of basic block 4 -> ( 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 4 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 55 53 56 5 25 "" [1 uses])

(note 56 55 59 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 59 56 57 5 arch/arm/mm/init.c:444 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:170 count ] [170])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 57 59 54 5 arch/arm/mm/init.c:444 discrim 2 (set (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
        (plus:SI (reg/v:SI 2 r2 [orig:164 start.582 ] [164])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn:TI 54 57 60 5 arch/arm/mm/init.c:444 discrim 2 (set (reg/v:SI 3 r3 [orig:170 count ] [170])
        (plus:SI (reg/v:SI 3 r3 [orig:170 count ] [170])
            (const_int -4 [0xfffffffffffffffc]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 60 54 61 5 arch/arm/mm/init.c:444 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 58)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 5 -> ( 4 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [91.0%] 
;; Succ edge  6 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 0 [r0] 1 [r1] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	

;; Pred edge  5 [9.0%]  (fallthru,loop_exit)
(note 61 60 132 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 132 61 64 6 arch/arm/mm/init.c:758 (set (reg/f:SI 3 r3 [182])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn 64 132 66 6 arch/arm/mm/init.c:758 (set (reg:SI 5 r5 [183])
        (plus:SI (reg/v:SI 0 r0 [orig:173 start ] [173])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 0 r0 [orig:173 start ] [173])
        (nil)))

(insn:TI 66 64 81 6 arch/arm/mm/init.c:758 (set (reg:SI 10 sl [184])
        (plus:SI (reg/v:SI 1 r1 [orig:174 end ] [174])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:174 end ] [174])
        (nil)))

(insn 81 66 65 6 include/linux/mm.h:417 (set (reg:SI 11 fp [196])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn:TI 65 81 75 6 arch/arm/mm/init.c:758 (set (reg/v:SI 5 r5 [orig:169 pfn ] [169])
        (lshiftrt:SI (reg:SI 5 r5 [183])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 75 65 67 6 arch/arm/mm/init.c:424 (set (reg/f:SI 9 r9 [194])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(insn:TI 67 75 63 6 arch/arm/mm/init.c:758 (set (reg:SI 10 sl [orig:171 D.25487 ] [171])
        (lshiftrt:SI (reg:SI 10 sl [184])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 63 67 68 6 arch/arm/mm/init.c:758 (set (reg:SI 3 r3)
        (mem/c/i:SI (reg/f:SI 3 r3 [182]) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>) [0 totalram_pages+0 S4 A32])
        (nil)))

(insn:TI 68 63 71 6 arch/arm/mm/init.c:421 (set (reg:SI 8 r8 [185])
        (minus:SI (reg:SI 10 sl [orig:171 D.25487 ] [171])
            (reg/v:SI 5 r5 [orig:169 pfn ] [169]))) 28 {*arm_subsi3_insn} (nil))

(insn 71 68 70 6 arch/arm/mm/init.c:421 (set (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165])
        (reg/v:SI 5 r5 [orig:169 pfn ] [169])) 167 {*arm_movsi_insn} (nil))

(insn:TI 70 71 135 6 arch/arm/mm/init.c:421 (set (reg:SI 6 r6 [orig:166 ivtmp.563 ] [166])
        (ashift:SI (reg/v:SI 5 r5 [orig:169 pfn ] [169])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 135 70 69 6 arch/arm/mm/init.c:758 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 69 135 145 6 arch/arm/mm/init.c:421 (set (reg/v:SI 8 r8 [orig:167 size ] [167])
        (ashift:SI (reg:SI 8 r8 [185])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(jump_insn:TI 145 69 146 6 (set (pc)
        (label_ref 88)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%] 

(barrier 146 145 90)

;; Start of basic block ( 8) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 6 [r6] 9 [r9] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  8 [91.0%] 
(code_label 90 146 74 7 28 "" [1 uses])

(note 74 90 76 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 76 74 86 7 arch/arm/mm/init.c:424 (set (reg/f:SI 7 r7 [orig:187 mem_map ] [187])
        (mem/f/c/i:SI (reg/f:SI 9 r9 [194]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 9 r9 [194]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 86 76 77 7 arch/arm/mm/init.c:423 discrim 2 (set (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165])
        (plus:SI (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 77 86 87 7 arch/arm/mm/init.c:424 (set (reg/v/f:SI 7 r7 [orig:168 page ] [168])
        (plus:SI (reg/f:SI 7 r7 [orig:187 mem_map ] [187])
            (reg:SI 6 r6 [orig:166 ivtmp.563 ] [166]))) 4 {*arm_addsi3} (nil))

(insn 87 77 79 7 arch/arm/mm/init.c:423 discrim 2 (set (reg:SI 6 r6 [orig:166 ivtmp.563 ] [166])
        (plus:SI (reg:SI 6 r6 [orig:166 ivtmp.563 ] [166])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn:TI 79 87 80 7 include/linux/page-flags.h:207 (set (reg:SI 1 r1)
        (reg/v/f:SI 7 r7 [orig:168 page ] [168])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 80 79 82 7 include/linux/page-flags.h:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 82 80 83 7 include/linux/mm.h:417 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:168 page ] [168])
                (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
        (reg:SI 11 fp [196])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 83 82 121 7 arch/arm/mm/init.c:427 (set (reg:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:168 page ] [168])) 167 {*arm_movsi_insn} (nil))

(insn 121 83 85 7 arch/arm/mm/init.c:427 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 85 121 88 7 arch/arm/mm/init.c:427 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10f4c580 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ( 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 7 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%]  (fallthru,dfs_back)
;; Pred edge  6 [100.0%] 
(code_label 88 85 89 8 27 "" [1 uses])

(note 89 88 91 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 91 89 119 8 arch/arm/mm/init.c:423 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165])
            (reg:SI 10 sl [orig:171 D.25487 ] [171]))) 219 {*arm_cmpsi_insn} (nil))

(insn 119 91 92 8 include/linux/page-flags.h:207 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 92 119 93 8 arch/arm/mm/init.c:423 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 90)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 8 -> ( 7 9)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  7 [91.0%] 
;; Succ edge  9 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [9.0%]  (fallthru,loop_exit)
(note 93 92 94 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 94 93 95 9 arch/arm/mm/init.c:431 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:167 size ] [167])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 95 94 96 9 arch/arm/mm/init.c:431 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  10 [0.0%]  (fallthru)
;; Succ edge  11 [100.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%]  (fallthru)
(note 96 95 101 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 101 96 99 10 arch/arm/mm/init.c:432 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:167 size ] [167])) 167 {*arm_movsi_insn} (nil))

(insn 99 101 100 10 arch/arm/mm/init.c:432 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1161a480>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1161a480>)
        (nil)))

(insn:TI 100 99 102 10 arch/arm/mm/init.c:432 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11686560>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x11686560>)
        (nil)))

(call_insn:TI 102 100 103 10 arch/arm/mm/init.c:432 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 10 -> ( 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  9 [100.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
(code_label 103 102 104 11 29 "" [1 uses])

(note 104 103 136 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 136 104 106 11 arch/arm/mm/init.c:758 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 106 136 131 11 arch/arm/mm/init.c:758 (set (reg:SI 5 r5 [192])
        (minus:SI (reg:SI 3 r3)
            (reg/v:SI 5 r5 [orig:169 pfn ] [169]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 131 106 107 11 arch/arm/mm/init.c:758 (set (reg/f:SI 3 r3 [191])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn:TI 107 131 108 11 arch/arm/mm/init.c:758 (set (reg:SI 4 r4 [193])
        (plus:SI (reg:SI 5 r5 [192])
            (reg/v:SI 4 r4 [orig:165 pfn.581 ] [165]))) 4 {*arm_addsi3} (nil))

(insn:TI 108 107 114 11 arch/arm/mm/init.c:758 (set (mem/c/i:SI (reg/f:SI 3 r3 [191]) [0 totalram_pages+0 S4 A32])
        (reg:SI 4 r4 [193])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [191])
        (nil)))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  12 [100.0%]  (fallthru)

;; Start of basic block ( 11 2) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  2 [39.0%] 
(code_label 114 108 117 12 30 "" [1 uses])

(note 117 114 140 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 140 117 141 12 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 141 140 142 12 arch/arm/mm/init.c:762 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 12 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 142 141 130)

(note 130 142 134 NOTE_INSN_DELETED)

(note 134 130 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function free_initmem (free_initmem)[0:1361]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 21 (  1.9)


free_initmem

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,5u} r1={8d,5u} r2={7d,5u} r3={10d,7u} r4={4d,6u} r5={4d,8u} r6={3d,4u} r7={3d,6u} r8={3d,5u} r9={2d,3u,1d} r10={3d,5u} r11={2d,3u} r12={4d,1u} r13={2d,16u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 488{403d,84u,1e} in 51{48 regular + 3 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]

( 4 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]

( 3 2 )->[4]->( 3 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]

( 4 )->[5]->( 7 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 7 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 6 [r6] 9 [r9] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 6 5 )->[7]->( 6 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 7 )->[8]->( 9 10 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

( 8 9 )->[10]->( 1 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 10 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 103 to worklist
  Adding insn 98 to worklist
  Adding insn 15 to worklist
  Adding insn 21 to worklist
  Adding insn 105 to worklist
  Adding insn 95 to worklist
  Adding insn 46 to worklist
  Adding insn 43 to worklist
  Adding insn 41 to worklist
  Adding insn 53 to worklist
  Adding insn 56 to worklist
  Adding insn 63 to worklist
  Adding insn 101 to worklist
  Adding insn 69 to worklist
Finished finding needed instructions:
processing block 3 lr out =  0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 16 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 80 to worklist
  Adding insn 44 to worklist
  Adding insn 40 to worklist
  Adding insn 48 to worklist
  Adding insn 38 to worklist
  Adding insn 47 to worklist
  Adding insn 37 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 89 to worklist
  Adding insn 68 to worklist
  Adding insn 67 to worklist
  Adding insn 96 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 61 to worklist
  Adding insn 60 to worklist
  Adding insn 62 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 55 to worklist
processing block 7 lr out =  0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 52 to worklist
  Adding insn 78 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 30 to worklist
  Adding insn 31 to worklist
  Adding insn 24 to worklist
  Adding insn 90 to worklist
  Adding insn 29 to worklist
  Adding insn 32 to worklist
  Adding insn 28 to worklist
  Adding insn 91 to worklist
  Adding insn 36 to worklist
  Adding insn 26 to worklist
  Adding insn 92 to worklist
  Adding insn 42 to worklist
processing block 4 lr out =  0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 20 to worklist
processing block 2 lr out =  0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 7 to worklist
  Adding insn 93 to worklist
  Adding insn 14 to worklist
  Adding insn 12 to worklist
  Adding insn 8 to worklist
  Adding insn 6 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 11 n_edges 13 count 22 (    2)
;;   ======================================================
;;   -- basic block 2 from 98 to 103 -- after reload
;;   ======================================================

;;	  0-->    98 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  1-->     6 r2=`__init_begin'                 :cortex_a8_load_store_1
;;	  2-->    93 r1=`__init_end'                   :cortex_a8_load_store_1
;;	  2-->     8 r3=0x0                            :cortex_a8_default
;;	  3-->    12 ip=r2                             :cortex_a8_default
;;	  3-->    14 r0=0xffffffffe7fddef0             :cortex_a8_load_store_1
;;	  4-->     7 r2=r1-r2                          :cortex_a8_default
;;	  4-->   103 pc=L17                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 98
;;   new tail = 103

;;   ======================================================
;;   -- basic block 3 from 15 to 16 -- after reload
;;   ======================================================

;;	  0-->    15 [r3+ip]=r0                        :cortex_a8_load_store_1
;;	  0-->    16 r3=r3+0x4                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 15
;;   new tail = 16

;;   ======================================================
;;   -- basic block 4 from 20 to 21 -- after reload
;;   ======================================================

;;	  0-->    20 cc=cmp(r2,r3)                     :cortex_a8_default
;;	  2-->    21 pc={(cc!=0x0)?L19:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 20
;;   new tail = 21

;;   ======================================================
;;   -- basic block 5 from 42 to 105 -- after reload
;;   ======================================================

;;	  0-->    92 r5=const(`__init_begin'+0x40000000:cortex_a8_load_store_1
;;	  0-->    42 fp=0x1                            :cortex_a8_default
;;	  1-->    91 sl=const(`__init_end'+0x40000000) :cortex_a8_load_store_1
;;	  2-->    90 r3=`totalram_pages'               :cortex_a8_load_store_1
;;	  3-->    26 r5=r5 0>>0xc                      :cortex_a8_default
;;	  3-->    36 r9=`mem_map'                      :cortex_a8_load_store_1
;;	  4-->    28 sl=sl 0>>0xc                      :cortex_a8_default
;;	  4-->    32 r4=r5                             :cortex_a8_default
;;	  5-->    24 r3=[r3]                           :cortex_a8_load_store_1
;;	  5-->    29 r8=sl-r5                          :cortex_a8_default
;;	  6-->    31 r6=r5<<0x5                        :cortex_a8_default
;;	  7-->    30 r8=r8<<0x2                        :cortex_a8_default
;;	  8-->    95 [sp+0x4]=r3                       :cortex_a8_load_store_1
;;	  8-->   105 pc=L49                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 8
;;   new head = 42
;;   new tail = 105

;;   ======================================================
;;   -- basic block 6 from 37 to 46 -- after reload
;;   ======================================================

;;	  0-->    37 r7=[r9]                           :cortex_a8_load_store_1
;;	  0-->    47 r4=r4+0x1                         :cortex_a8_default
;;	  2-->    38 r7=r7+r6                          :cortex_a8_default
;;	  2-->    48 r6=r6+0x20                        :cortex_a8_default
;;	  3-->    40 r1=r7                             :cortex_a8_default
;;	  4-->    41 call [`_clear_bit']               :cortex_a8_issue_branch
;;	  4-->    43 [r7+0x10]=fp                      :cortex_a8_load_store_1
;;	  5-->    44 r0=r7                             :cortex_a8_default
;;	  5-->    80 r1=0x0                            :cortex_a8_default
;;	  6-->    46 call [`__free_pages']             :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 37
;;   new tail = 46

;;   ======================================================
;;   -- basic block 7 from 78 to 53 -- after reload
;;   ======================================================

;;	  0-->    52 cc=cmp(r4,sl)                     :cortex_a8_default
;;	  0-->    78 r0=0xa                            :cortex_a8_default
;;	  2-->    53 pc={(ltu(cc,0x0))?L51:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 78
;;   new tail = 53

;;   ======================================================
;;   -- basic block 8 from 55 to 56 -- after reload
;;   ======================================================

;;	  0-->    55 cc=cmp(r8,0x0)                    :cortex_a8_default
;;	  2-->    56 pc={(cc==0x0)?L64:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 55
;;   new tail = 56

;;   ======================================================
;;   -- basic block 9 from 62 to 63 -- after reload
;;   ======================================================

;;	  0-->    62 r2=r8                             :cortex_a8_default
;;	  0-->    60 r0=`*.LC1'                        :cortex_a8_load_store_1
;;	  1-->    61 r1=`*.LC3'                        :cortex_a8_load_store_1
;;	  2-->    63 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 62
;;   new tail = 63

;;   ======================================================
;;   -- basic block 10 from 96 to 101 -- after reload
;;   ======================================================

;;	  0-->    96 r3=[sp+0x4]                       :cortex_a8_load_store_1
;;	  2-->    67 r5=r3-r5                          :cortex_a8_default
;;	  2-->    89 r3=`totalram_pages'               :cortex_a8_load_store_1
;;	  3-->    68 r4=r5+r4                          :cortex_a8_default
;;	  5-->    69 [r3]=r4                           :cortex_a8_load_store_1
;;	  5-->   101 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 5
;;   new head = 96
;;   new tail = 101





free_initmem

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={8d,5u} r1={8d,5u} r2={7d,5u} r3={10d,7u} r4={4d,6u} r5={4d,8u} r6={3d,4u} r7={3d,6u} r8={3d,5u} r9={2d,3u,1d} r10={3d,5u} r11={2d,3u} r12={4d,1u} r13={2d,16u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 488{403d,84u,1e} in 51{48 regular + 3 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 98 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 98 2 99 2 arch/arm/mm/init.c:733 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 11 fp)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 9 r9)
                (expr_list:REG_DEAD (reg:SI 8 r8)
                    (expr_list:REG_DEAD (reg:SI 6 r6)
                        (expr_list:REG_DEAD (reg:SI 5 r5)
                            (expr_list:REG_DEAD (reg:SI 4 r4)
                                (expr_list:REG_DEAD (reg:SI 2 r2)
                                    (expr_list:REG_DEAD (reg:SI 1 r1)
                                        (expr_list:REG_DEAD (reg:SI 0 r0)
                                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                                        (set/f (reg/f:SI 13 sp)
                                                            (plus:SI (reg/f:SI 13 sp)
                                                                (const_int -48 [0xffffffffffffffd0])))
                                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                            (reg:SI 0 r0))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 4 [0x4])) [0 S4 A32])
                                                            (reg:SI 1 r1))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 8 [0x8])) [0 S4 A32])
                                                            (reg:SI 2 r2))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 12 [0xc])) [0 S4 A32])
                                                            (reg:SI 4 r4))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 16 [0x10])) [0 S4 A32])
                                                            (reg:SI 5 r5))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 20 [0x14])) [0 S4 A32])
                                                            (reg:SI 6 r6))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 24 [0x18])) [0 S4 A32])
                                                            (reg:SI 7 r7))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 28 [0x1c])) [0 S4 A32])
                                                            (reg:SI 8 r8))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 32 [0x20])) [0 S4 A32])
                                                            (reg:SI 9 r9))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 36 [0x24])) [0 S4 A32])
                                                            (reg:SI 10 sl))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 40 [0x28])) [0 S4 A32])
                                                            (reg:SI 11 fp))
                                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                                    (const_int 44 [0x2c])) [0 S4 A32])
                                                            (reg:SI 14 lr))
                                                    ])
                                                (nil)))))))))))))

(note 99 98 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 99 93 2 arch/arm/mm/init.c:743 (set (reg/f:SI 2 r2 [143])
        (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
        (nil)))

(insn:TI 93 6 8 2 arch/arm/mm/init.c:743 (set (reg/f:SI 1 r1 [142])
        (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
        (nil)))

(insn 8 93 12 2 arch/arm/mm/init.c:743 (set (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 12 8 14 2 arch/arm/mm/init.c:445 (set (reg/f:SI 12 ip [163])
        (reg/f:SI 2 r2 [143])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
        (nil)))

(insn 14 12 7 2 arch/arm/mm/init.c:445 (set (reg:SI 0 r0 [164])
        (const_int -402792720 [0xffffffffe7fddef0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -402792720 [0xffffffffe7fddef0])
        (nil)))

(insn:TI 7 14 103 2 arch/arm/mm/init.c:743 (set (reg:SI 2 r2 [orig:141 D.25457 ] [141])
        (minus:SI (reg/f:SI 1 r1 [142])
            (reg/f:SI 2 r2 [143]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [142])
        (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>))
            (nil))))

(jump_insn 103 7 104 2 (set (pc)
        (label_ref 17)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 104 103 19)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  4 [91.0%] 
(code_label 19 104 11 3 35 "" [1 uses])

(note 11 19 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 11 16 3 arch/arm/mm/init.c:445 (set (mem:SI (plus:SI (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
                (reg/f:SI 12 ip [163])) [0 S4 A32])
        (reg:SI 0 r0 [164])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -402792720 [0xffffffffe7fddef0])
        (nil)))

(insn 16 15 17 3 arch/arm/mm/init.c:445 (set (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
        (plus:SI (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 17 16 18 4 34 "" [1 uses])

(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 18 21 4 arch/arm/mm/init.c:732 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:141 D.25457 ] [141])
            (reg:SI 3 r3 [orig:134 ivtmp.624 ] [134]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 21 20 22 4 arch/arm/mm/init.c:732 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 19)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  in  	 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp]
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 22 21 92 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 92 22 42 5 arch/arm/mm/init.c:745 (set (reg/f:SI 5 r5 [148])
        (const:SI (plus:SI (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
                (const_int 1073741824 [0x40000000])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
                (const_int 1073741824 [0x40000000])))
        (nil)))

(insn 42 92 91 5 include/linux/mm.h:417 (set (reg:SI 11 fp [161])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn:TI 91 42 90 5 arch/arm/mm/init.c:745 (set (reg/f:SI 10 sl [149])
        (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (const_int 1073741824 [0x40000000])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (const_int 1073741824 [0x40000000])))
        (nil)))

(insn:TI 90 91 26 5 arch/arm/mm/init.c:745 (set (reg/f:SI 3 r3 [147])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn:TI 26 90 36 5 arch/arm/mm/init.c:745 (set (reg/v:SI 5 r5 [orig:138 pfn ] [138])
        (lshiftrt:SI (reg/f:SI 5 r5 [148])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (lshiftrt:SI (const:SI (plus:SI (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
                    (const_int 1073741824 [0x40000000])))
            (const_int 12 [0xc]))
        (nil)))

(insn 36 26 28 5 arch/arm/mm/init.c:424 (set (reg/f:SI 9 r9 [159])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(insn:TI 28 36 32 5 arch/arm/mm/init.c:745 (set (reg:SI 10 sl [orig:139 D.25467 ] [139])
        (lshiftrt:SI (reg/f:SI 10 sl [149])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (lshiftrt:SI (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                    (const_int 1073741824 [0x40000000])))
            (const_int 12 [0xc]))
        (nil)))

(insn 32 28 24 5 arch/arm/mm/init.c:421 (set (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133])
        (reg/v:SI 5 r5 [orig:138 pfn ] [138])) 167 {*arm_movsi_insn} (nil))

(insn:TI 24 32 29 5 arch/arm/mm/init.c:745 (set (reg:SI 3 r3)
        (mem/c/i:SI (reg/f:SI 3 r3 [147]) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>) [0 totalram_pages+0 S4 A32])
        (nil)))

(insn 29 24 31 5 arch/arm/mm/init.c:421 (set (reg:SI 8 r8 [150])
        (minus:SI (reg:SI 10 sl [orig:139 D.25467 ] [139])
            (reg/v:SI 5 r5 [orig:138 pfn ] [138]))) 28 {*arm_subsi3_insn} (nil))

(insn:TI 31 29 30 5 arch/arm/mm/init.c:421 (set (reg:SI 6 r6 [orig:135 ivtmp.616 ] [135])
        (ashift:SI (reg/v:SI 5 r5 [orig:138 pfn ] [138])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 30 31 95 5 arch/arm/mm/init.c:421 (set (reg/v:SI 8 r8 [orig:136 size ] [136])
        (ashift:SI (reg:SI 8 r8 [150])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 95 30 105 5 arch/arm/mm/init.c:745 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(jump_insn 105 95 106 5 (set (pc)
        (label_ref 49)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  7 [100.0%] 

(barrier 106 105 51)

;; Start of basic block ( 7) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 6 [r6] 9 [r9] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 6 [r6] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  7 [91.0%] 
(code_label 51 106 35 6 37 "" [1 uses])

(note 35 51 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 37 35 47 6 arch/arm/mm/init.c:424 (set (reg/f:SI 7 r7 [orig:152 mem_map ] [152])
        (mem/f/c/i:SI (reg/f:SI 9 r9 [159]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 9 r9 [159]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 47 37 38 6 arch/arm/mm/init.c:423 discrim 2 (set (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133])
        (plus:SI (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 38 47 48 6 arch/arm/mm/init.c:424 (set (reg/v/f:SI 7 r7 [orig:137 page ] [137])
        (plus:SI (reg/f:SI 7 r7 [orig:152 mem_map ] [152])
            (reg:SI 6 r6 [orig:135 ivtmp.616 ] [135]))) 4 {*arm_addsi3} (nil))

(insn 48 38 40 6 arch/arm/mm/init.c:423 discrim 2 (set (reg:SI 6 r6 [orig:135 ivtmp.616 ] [135])
        (plus:SI (reg:SI 6 r6 [orig:135 ivtmp.616 ] [135])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn:TI 40 48 41 6 include/linux/page-flags.h:207 (set (reg:SI 1 r1)
        (reg/v/f:SI 7 r7 [orig:137 page ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 41 40 43 6 include/linux/page-flags.h:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 43 41 44 6 include/linux/mm.h:417 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:137 page ] [137])
                (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
        (reg:SI 11 fp [161])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn:TI 44 43 80 6 arch/arm/mm/init.c:427 (set (reg:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:137 page ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 80 44 46 6 arch/arm/mm/init.c:427 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 46 80 49 6 arch/arm/mm/init.c:427 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10f4c580 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 6 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
;; Pred edge  5 [100.0%] 
(code_label 49 46 50 7 36 "" [1 uses])

(note 50 49 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 52 50 78 7 arch/arm/mm/init.c:423 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133])
            (reg:SI 10 sl [orig:139 D.25467 ] [139]))) 219 {*arm_cmpsi_insn} (nil))

(insn 78 52 53 7 include/linux/page-flags.h:207 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 53 78 54 7 arch/arm/mm/init.c:423 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 51)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 7 -> ( 6 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  6 [91.0%] 
;; Succ edge  8 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [9.0%]  (fallthru,loop_exit)
(note 54 53 55 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 54 56 8 arch/arm/mm/init.c:431 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 8 r8 [orig:136 size ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 56 55 57 8 arch/arm/mm/init.c:431 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 64)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%]  (fallthru)
;; Succ edge  10 [0.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
(note 57 56 62 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 62 57 60 9 arch/arm/mm/init.c:432 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:136 size ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 60 62 61 9 arch/arm/mm/init.c:432 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1161a480>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1161a480>)
        (nil)))

(insn:TI 61 60 63 9 arch/arm/mm/init.c:432 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1169b720>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x1169b720>)
        (nil)))

(call_insn:TI 63 61 64 9 arch/arm/mm/init.c:432 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

;; Start of basic block ( 8 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  8 [0.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
(code_label 64 63 65 10 38 "" [1 uses])

(note 65 64 96 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 96 65 67 10 arch/arm/mm/init.c:745 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 67 96 89 10 arch/arm/mm/init.c:745 (set (reg:SI 5 r5 [157])
        (minus:SI (reg:SI 3 r3)
            (reg/v:SI 5 r5 [orig:138 pfn ] [138]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 89 67 68 10 arch/arm/mm/init.c:745 (set (reg/f:SI 3 r3 [156])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn:TI 68 89 69 10 arch/arm/mm/init.c:745 (set (reg:SI 4 r4 [158])
        (plus:SI (reg:SI 5 r5 [157])
            (reg/v:SI 4 r4 [orig:133 pfn.633 ] [133]))) 4 {*arm_addsi3} (nil))

(insn:TI 69 68 100 10 arch/arm/mm/init.c:745 (set (mem/c/i:SI (reg/f:SI 3 r3 [156]) [0 totalram_pages+0 S4 A32])
        (reg:SI 4 r4 [158])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [156])
        (nil)))

(note 100 69 101 10 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 101 100 102 10 arch/arm/mm/init.c:748 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 102 101 88)

(note 88 102 94 NOTE_INSN_DELETED)

(note 94 88 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function mem_init (mem_init)[0:1360] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 40 n_edges 55 count 99 (  2.5)


mem_init

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={31d,23u,2d} r1={50d,40u,1d} r2={40d,36u,1d} r3={43d,42u,3d} r4={18d,35u,3d} r5={17d,28u,3d} r6={28d,40u,3d} r7={14d,23u,8d} r8={13d,20u,5d} r9={7d,10u} r10={6d,10u,2d} r11={4d,8u} r12={31d,24u,1d} r13={3d,96u,8d} r14={18d,9u} r15={11d} r16={11d} r17={11d} r18={11d} r19={11d} r20={11d} r21={11d} r22={11d} r23={11d} r24={37d,25u} r27={11d} r28={11d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={11d} r38={11d} r39={11d} r40={11d} r41={11d} r42={11d} r43={11d} r44={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} r81={11d} r82={11d} r83={11d} r84={11d} r85={11d} r86={11d} r87={11d} r88={11d} r89={11d} r90={11d} r91={11d} r92={11d} r93={11d} r94={11d} r95={11d} r96={11d} r97={11d} r98={11d} r99={11d} r100={11d} r101={11d} r102={11d} r103={11d} r104={11d} r105={11d} r106={11d} r107={11d} r108={11d} r109={11d} r110={11d} r111={11d} r112={11d} r113={11d} r114={11d} r115={11d} r116={11d} r117={11d} r118={11d} r119={11d} r120={11d} r121={11d} r122={11d} r123={11d} r124={11d} r125={11d} r126={11d} r127={11d} r406={2d} 
;;    total ref usage 2081{1570d,469u,42e} in 345{334 regular + 11 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 0 )->[2]->( 7 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 7 )->[3]->( 4 6 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 3 )->[4]->( 5 6 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 4 )->[5]->( 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 3 4 5 )->[6]->( 7 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	 1 [r1]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 6 2 )->[7]->( 3 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 7 )->[8]->( 28 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl]
;; live  kill	 14 [lr]
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]

( 28 )->[9]->( 27 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]

( 9 )->[10]->( 20 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 8 [r8] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 8 [r8]
;; live  kill	 24 [cc]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 20 )->[11]->( 19 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 11 )->[12]->( 13 17 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 12 )->[13]->( 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 6 [r6] 9 [r9] 11 [fp]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 6 [r6] 9 [r9] 11 [fp]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 15 )->[14]->( 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 9 [r9] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 9 [r9] 12 [ip]
;; live  kill	 14 [lr]
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 14 13 )->[15]->( 14 16 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 15 )->[16]->( 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 6 [r6]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 6 [r6]
;; live  kill	
;; lr  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 12 16 )->[17]->( 26 18 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]

( 17 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 11 18 )->[19]->( 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 8 [r8]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 8 [r8]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 19 10 )->[20]->( 11 21 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 20 )->[21]->( 22 24 )
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 8 [r8] 11 [fp] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 21 )->[22]->( 27 )
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]

( 24 )->[23]->( 24 )
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 9 [r9] 12 [ip]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 23 21 )->[24]->( 23 25 )
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]

( 24 )->[25]->( 27 )
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 5 [r5] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]

( 17 )->[26]->( 27 )
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 3 [r3] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]

( 9 22 26 25 )->[27]->( 28 )
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]

( 27 8 )->[28]->( 9 29 )
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]

( 28 )->[29]->( 35 )
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]

( 35 )->[30]->( 31 )
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 7 [r7]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]

( 30 33 )->[31]->( 32 33 )
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 8 [r8] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4] 8 [r8] 14 [lr] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]

( 31 )->[32]->( 33 )
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 8 [r8] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 8 [r8] 14 [lr] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]

( 32 31 )->[33]->( 31 34 )
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]

( 33 )->[34]->( 35 )
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]

( 34 29 )->[35]->( 30 36 )
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]

( 35 )->[36]->( 38 )
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 38 )->[37]->( 38 )
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 37 36 )->[38]->( 37 39 )
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]

( 38 )->[39]->( 1 )
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

( 39 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 686 to worklist
  Adding insn 13 to worklist
  Adding insn 677 to worklist
  Adding insn 37 to worklist
  Adding insn 53 to worklist
  Adding insn 58 to worklist
  Adding insn 77 to worklist
  Adding insn 688 to worklist
  Adding insn 85 to worklist
  Adding insn 645 to worklist
  Adding insn 81 to worklist
  Adding insn 98 to worklist
  Adding insn 690 to worklist
  Adding insn 116 to worklist
  Adding insn 123 to worklist
  Adding insn 692 to worklist
  Adding insn 647 to worklist
  Adding insn 142 to worklist
  Adding insn 139 to worklist
  Adding insn 137 to worklist
  Adding insn 639 to worklist
  Adding insn 638 to worklist
  Adding insn 637 to worklist
  Adding insn 149 to worklist
  Adding insn 154 to worklist
  Adding insn 158 to worklist
  Adding insn 174 to worklist
  Adding insn 179 to worklist
  Adding insn 695 to worklist
  Adding insn 197 to worklist
  Adding insn 194 to worklist
  Adding insn 192 to worklist
  Adding insn 643 to worklist
  Adding insn 204 to worklist
  Adding insn 697 to worklist
  Adding insn 209 to worklist
  Adding insn 223 to worklist
  Adding insn 699 to worklist
  Adding insn 231 to worklist
  Adding insn 260 to worklist
  Adding insn 257 to worklist
  Adding insn 281 to worklist
  Adding insn 267 to worklist
  Adding insn 291 to worklist
  Adding insn 299 to worklist
  Adding insn 701 to worklist
  Adding insn 306 to worklist
  Adding insn 303 to worklist
  Adding insn 329 to worklist
  Adding insn 324 to worklist
  Adding insn 342 to worklist
  Adding insn 681 to worklist
  Adding insn 469 to worklist
  Adding insn 452 to worklist
  Adding insn 438 to worklist
  Adding insn 424 to worklist
  Adding insn 410 to worklist
  Adding insn 398 to worklist
  Adding insn 393 to worklist
  Adding insn 392 to worklist
  Adding insn 385 to worklist
  Adding insn 384 to worklist
  Adding insn 464 to worklist
  Adding insn 454 to worklist
  Adding insn 450 to worklist
  Adding insn 440 to worklist
  Adding insn 436 to worklist
  Adding insn 426 to worklist
  Adding insn 412 to worklist
  Adding insn 408 to worklist
  Adding insn 406 to worklist
  Adding insn 404 to worklist
  Adding insn 402 to worklist
  Adding insn 400 to worklist
  Adding insn 396 to worklist
  Adding insn 390 to worklist
  Adding insn 387 to worklist
  Adding insn 382 to worklist
  Adding insn 380 to worklist
  Adding insn 378 to worklist
  Adding insn 376 to worklist
  Adding insn 374 to worklist
  Adding insn 657 to worklist
  Adding insn 366 to worklist
  Adding insn 361 to worklist
  Adding insn 352 to worklist
  Adding insn 350 to worklist
Finished finding needed instructions:
processing block 6 lr out =  3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 552 to worklist
  Adding insn 551 to worklist
  Adding insn 66 to worklist
  Adding insn 65 to worklist
  Adding insn 64 to worklist
  Adding insn 63 to worklist
processing block 5 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 57 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 52 to worklist
  Adding insn 554 to worklist
  Adding insn 556 to worklist
  Adding insn 553 to worklist
  Adding insn 555 to worklist
  Adding insn 44 to worklist
  Adding insn 49 to worklist
  Adding insn 43 to worklist
  Adding insn 48 to worklist
  Adding insn 42 to worklist
  Adding insn 40 to worklist
processing block 3 lr out =  1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 36 to worklist
  Adding insn 26 to worklist
  Adding insn 25 to worklist
  Adding insn 24 to worklist
  Adding insn 23 to worklist
processing block 27 lr out =  6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 212 to worklist
processing block 19 lr out =  3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 163 to worklist
processing block 14 lr out =  2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
  Adding insn 640 to worklist
  Adding insn 641 to worklist
  Adding insn 642 to worklist
  Adding insn 493 to worklist
  Adding insn 140 to worklist
  Adding insn 649 to worklist
  Adding insn 136 to worklist
  Adding insn 144 to worklist
  Adding insn 134 to worklist
  Adding insn 143 to worklist
  Adding insn 133 to worklist
  Adding insn 648 to worklist
processing block 26 lr out =  6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 604 to worklist
processing block 18 lr out =  3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 160 to worklist
processing block 17 lr out =  3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
  Adding insn 157 to worklist
processing block 16 lr out =  3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
  Adding insn 153 to worklist
  Adding insn 152 to worklist
  Adding insn 650 to worklist
  Adding insn 601 to worklist
processing block 15 lr out =  0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
  Adding insn 148 to worklist
  Adding insn 491 to worklist
processing block 13 lr out =  2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
  Adding insn 595 to worklist
  Adding insn 593 to worklist
  Adding insn 128 to worklist
  Adding insn 127 to worklist
  Adding insn 126 to worklist
processing block 12 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
  Adding insn 122 to worklist
  Adding insn 120 to worklist
  Adding insn 119 to worklist
  Adding insn 121 to worklist
  Adding insn 118 to worklist
processing block 11 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
  Adding insn 115 to worklist
  Adding insn 114 to worklist
  Adding insn 113 to worklist
  Adding insn 112 to worklist
  Adding insn 111 to worklist
  Adding insn 110 to worklist
  Adding insn 109 to worklist
processing block 22 lr out =  6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
processing block 23 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 644 to worklist
  Adding insn 489 to worklist
  Adding insn 195 to worklist
  Adding insn 652 to worklist
  Adding insn 191 to worklist
  Adding insn 199 to worklist
  Adding insn 189 to worklist
  Adding insn 188 to worklist
  Adding insn 651 to worklist
processing block 25 lr out =  6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 208 to worklist
  Adding insn 207 to worklist
processing block 24 lr out =  0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 198 to worklist
  Adding insn 203 to worklist
  Adding insn 487 to worklist
processing block 21 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 183 to worklist
  Adding insn 182 to worklist
  Adding insn 176 to worklist
  Adding insn 178 to worklist
  Adding insn 607 to worklist
processing block 20 lr out =  3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 173 to worklist
  Adding insn 172 to worklist
  Adding insn 171 to worklist
  Adding insn 169 to worklist
processing block 10 lr out =  3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 590 to worklist
  Adding insn 103 to worklist
  Adding insn 102 to worklist
  Adding insn 101 to worklist
  Adding insn 105 to worklist
  Adding insn 100 to worklist
processing block 9 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 97 to worklist
  Adding insn 646 to worklist
  Adding insn 96 to worklist
  Adding insn 95 to worklist
  Adding insn 94 to worklist
  Adding insn 93 to worklist
processing block 34 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
  Adding insn 294 to worklist
  Adding insn 293 to worklist
processing block 33 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
  Adding insn 290 to worklist
  Adding insn 288 to worklist
processing block 32 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
  Adding insn 285 to worklist
  Adding insn 282 to worklist
  Adding insn 277 to worklist
  Adding insn 269 to worklist
processing block 31 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 262 to worklist
  Adding insn 259 to worklist
  Adding insn 272 to worklist
processing block 30 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
  Adding insn 254 to worklist
  Adding insn 249 to worklist
  Adding insn 252 to worklist
  Adding insn 247 to worklist
  Adding insn 251 to worklist
  Adding insn 246 to worklist
  Adding insn 250 to worklist
  Adding insn 245 to worklist
processing block 37 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 328 to worklist
  Adding insn 323 to worklist
  Adding insn 319 to worklist
  Adding insn 318 to worklist
  Adding insn 484 to worklist
  Adding insn 314 to worklist
  Adding insn 317 to worklist
  Adding insn 322 to worklist
  Adding insn 316 to worklist
  Adding insn 313 to worklist
  Adding insn 312 to worklist
processing block 39 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
  Adding insn 663 to worklist
  Adding insn 662 to worklist
  Adding insn 661 to worklist
  Adding insn 660 to worklist
  Adding insn 659 to worklist
  Adding insn 558 to worklist
  Adding insn 559 to worklist
  Adding insn 560 to worklist
  Adding insn 561 to worklist
  Adding insn 658 to worklist
  Adding insn 562 to worklist
  Adding insn 563 to worklist
  Adding insn 564 to worklist
  Adding insn 565 to worklist
  Adding insn 566 to worklist
  Adding insn 463 to worklist
  Adding insn 567 to worklist
  Adding insn 449 to worklist
  Adding insn 568 to worklist
  Adding insn 435 to worklist
  Adding insn 569 to worklist
  Adding insn 421 to worklist
  Adding insn 467 to worklist
  Adding insn 389 to worklist
  Adding insn 466 to worklist
  Adding insn 395 to worklist
  Adding insn 465 to worklist
  Adding insn 388 to worklist
  Adding insn 671 to worklist
  Adding insn 670 to worklist
  Adding insn 669 to worklist
  Adding insn 668 to worklist
  Adding insn 667 to worklist
  Adding insn 666 to worklist
  Adding insn 665 to worklist
  Adding insn 664 to worklist
  Adding insn 459 to worklist
  Adding insn 445 to worklist
  Adding insn 431 to worklist
  Adding insn 417 to worklist
  Adding insn 457 to worklist
  Adding insn 656 to worklist
  Adding insn 570 to worklist
  Adding insn 544 to worklist
  Adding insn 443 to worklist
  Adding insn 655 to worklist
  Adding insn 571 to worklist
  Adding insn 429 to worklist
  Adding insn 654 to worklist
  Adding insn 572 to worklist
  Adding insn 415 to worklist
  Adding insn 653 to worklist
  Adding insn 573 to worklist
  Adding insn 543 to worklist
  Adding insn 394 to worklist
  Adding insn 369 to worklist
  Adding insn 368 to worklist
  Adding insn 574 to worklist
  Adding insn 391 to worklist
  Adding insn 383 to worklist
  Adding insn 468 to worklist
  Adding insn 360 to worklist
  Adding insn 363 to worklist
  Adding insn 354 to worklist
  Adding insn 359 to worklist
  Adding insn 575 to worklist
  Adding insn 576 to worklist
  Adding insn 362 to worklist
  Adding insn 365 to worklist
  Adding insn 364 to worklist
  Adding insn 349 to worklist
  Adding insn 348 to worklist
  Adding insn 346 to worklist
  Adding insn 577 to worklist
processing block 38 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 341 to worklist
  Adding insn 340 to worklist
  Adding insn 333 to worklist
  Adding insn 339 to worklist
  Adding insn 332 to worklist
  Adding insn 337 to worklist
processing block 36 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
  Adding insn 308 to worklist
  Adding insn 335 to worklist
  Adding insn 578 to worklist
  Adding insn 478 to worklist
  Adding insn 307 to worklist
  Adding insn 304 to worklist
  Adding insn 302 to worklist
processing block 35 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
  Adding insn 298 to worklist
processing block 29 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
  Adding insn 233 to worklist
  Adding insn 230 to worklist
  Adding insn 235 to worklist
  Adding insn 579 to worklist
  Adding insn 229 to worklist
  Adding insn 228 to worklist
  Adding insn 580 to worklist
  Adding insn 239 to worklist
  Adding insn 238 to worklist
  Adding insn 524 to worklist
  Adding insn 237 to worklist
  Adding insn 236 to worklist
  Adding insn 225 to worklist
processing block 28 lr out =  6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 222 to worklist
  Adding insn 221 to worklist
  Adding insn 220 to worklist
  Adding insn 218 to worklist
processing block 8 lr out =  6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 84 to worklist
  Adding insn 87 to worklist
  Adding insn 581 to worklist
  Adding insn 89 to worklist
  Adding insn 216 to worklist
  Adding insn 88 to worklist
  Adding insn 80 to worklist
  Adding insn 125 to worklist
  Adding insn 79 to worklist
processing block 7 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 69 to worklist
  Adding insn 76 to worklist
  Adding insn 70 to worklist
  Adding insn 75 to worklist
  Adding insn 22 to worklist
processing block 2 lr out =  3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
  Adding insn 582 to worklist
  Adding insn 12 to worklist
  Adding insn 39 to worklist
  Adding insn 21 to worklist
  Adding insn 10 to worklist
  Adding insn 583 to worklist
  Adding insn 16 to worklist
  Adding insn 74 to worklist
  Adding insn 15 to worklist
  Adding insn 14 to worklist
  Adding insn 678 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 40 n_edges 55 count 126 (  3.2)
;;   ======================================================
;;   -- basic block 2 from 677 to 686 -- after reload
;;   ======================================================

;;	  0-->   583 r2=`max_pfn'                      :cortex_a8_load_store_1
;;	  1-->   677 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  2-->    74 r7=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  3-->    10 r1=[r2]                           :cortex_a8_load_store_1
;;	  3-->    14 r4=0x0                            :cortex_a8_default
;;	  4-->   582 r2=`max_mapnr'                    :cortex_a8_load_store_1
;;	  4-->   678 sp=sp-0x94                        :cortex_a8_default
;;	  5-->    12 r1=sxt(r1,0x1b,0x0)               :cortex_a8_default
;;	  5-->    15 r5=r4                             :cortex_a8_default
;;	  6-->    16 r3=r4                             :cortex_a8_default
;;	  6-->    21 sl=r7+0x4                         :cortex_a8_default
;;	  7-->    39 r8=`mem_map'                      :cortex_a8_load_store_1
;;	  8-->    13 [r2]=r1                           :cortex_a8_load_store_1
;;	  8-->   686 pc=L71                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 8
;;   new head = 677
;;   new tail = 686

;;   ======================================================
;;   -- basic block 3 from 23 to 37 -- after reload
;;   ======================================================

;;	  0-->    23 r1=[r6+0x4]                       :cortex_a8_load_store_1
;;	  3-->    24 r1=r1 0>>0xc                      :cortex_a8_default
;;	  4-->    25 r1=r1&0xfffffffffffffc03          :cortex_a8_default
;;	  5-->    26 r1=r1&0xfffffffffffffffc          :cortex_a8_default
;;	  6-->    36 cc=cmp(ltu(r3,r1)&r3!=0x0,0x0)    :cortex_a8_default
;;	  8-->    37 pc={(cc==0x0)?L59:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 23
;;   new tail = 37

;;   ======================================================
;;   -- basic block 4 from 40 to 53 -- after reload
;;   ======================================================

;;	  0-->    40 r2=[r8]                           :cortex_a8_load_store_1
;;	  2-->    42 r0=r3*0x20+r2                     :cortex_a8_default
;;	  2-->    48 r1=r1*0x20+r2                     :cortex_a8_default
;;	  3-->    43 r0=r0+0xff0                       :cortex_a8_default
;;	  3-->    49 r1=r1+0x40000000                  :cortex_a8_default
;;	  4-->    44 r0=r0+0x4000000f                  :cortex_a8_default
;;	  4-->   555 r1=r1&0xfffffffffffff00f          :cortex_a8_default
;;	  5-->   553 r0=r0&0xfffffffffffff00f          :cortex_a8_default
;;	  5-->   556 r1=r1&0xfffffffffffffff0          :cortex_a8_default
;;	  6-->   554 r0=r0&0xfffffffffffffff0          :cortex_a8_default
;;	  7-->    52 cc=cmp(r0,r1)                     :cortex_a8_default
;;	  9-->    53 pc={(geu(cc,0x0))?L59:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 40
;;   new tail = 53

;;   ======================================================
;;   -- basic block 5 from 57 to 58 -- after reload
;;   ======================================================

;;	  0-->    57 r1=r1-r0                          :cortex_a8_default
;;	  1-->    58 call [`free_bootmem']             :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 57
;;   new tail = 58

;;   ======================================================
;;   -- basic block 6 from 63 to 552 -- after reload
;;   ======================================================

;;	  0-->    63 {r3=[r6+0x8]+[r6+0x4];clobber r1;}:cortex_a8_load_store_1
;;	  3-->    64 r3=r3 0>>0xc                      :cortex_a8_default
;;	  4-->    65 r3=r3+0x3fc                       :cortex_a8_default
;;	  5-->    66 r3=r3+0x3                         :cortex_a8_default
;;	  6-->   551 r3=r3&0xfffffffffffffc03          :cortex_a8_default
;;	  7-->   552 r3=r3&0xfffffffffffffffc          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 7
;;   new head = 63
;;   new tail = 552

;;   ======================================================
;;   -- basic block 7 from 22 to 77 -- after reload
;;   ======================================================

;;	  0-->    75 r2=[r7+0x4]                       :cortex_a8_load_store_1
;;	  0-->    22 r6=sl+r4                          :cortex_a8_default
;;	  1-->    70 r4=r4+0xc                         :cortex_a8_default
;;	  2-->    76 cc=cmp(r5,r2)                     :cortex_a8_default
;;	  2-->    69 r5=r5+0x1                         :cortex_a8_default
;;	  4-->    77 pc={(ltu(cc,0x0))?L73:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 22
;;   new tail = 77

;;   ======================================================
;;   -- basic block 8 from 79 to 688 -- after reload
;;   ======================================================

;;	  0-->    79 r4=`totalram_pages'               :cortex_a8_load_store_1
;;	  1-->   125 sl=`totalhigh_pages'              :cortex_a8_load_store_1
;;	  3-->    80 r5=[r4]                           :cortex_a8_load_store_1
;;	  3-->    81 r0=call [`free_all_bootmem']      :cortex_a8_issue_branch
;;	  4-->    88 r3=`memblock'                     :cortex_a8_load_store_1
;;	  6-->   216 r7=r3                             :cortex_a8_default
;;	  7-->    89 r6=[r3+0x10]                      :cortex_a8_load_store_1
;;	  8-->   581 r3=`max_low_pfn'                  :cortex_a8_load_store_1
;;	 11-->    87 r3=[r3]                           :cortex_a8_load_store_1
;;	 14-->   645 [sp+0x88]=r3                      :cortex_a8_load_store_1
;;	 35-->    84 r0=r0+r5                          :cortex_a8_default
;;	 35-->    85 [r4]=r0                           :cortex_a8_load_store_1
;;	 36-->   688 pc=L213                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 36
;;   new head = 79
;;   new tail = 688

;;   ======================================================
;;   -- basic block 9 from 93 to 98 -- after reload
;;   ======================================================

;;	  0-->    93 r4=[r6]                           :cortex_a8_load_store_1
;;	  1-->    94 r5=[r6+0x4]                       :cortex_a8_load_store_1
;;	  2-->   646 r2=[sp+0x88]                      :cortex_a8_load_store_1
;;	  3-->    95 r5=r4+r5                          :cortex_a8_default
;;	  5-->    96 r5=r5 0>>0xc                      :cortex_a8_default
;;	  6-->    97 cc=cmp(r5,r2)                     :cortex_a8_default
;;	  8-->    98 pc={(leu(cc,0x0))?L210:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 93
;;   new tail = 98

;;   ======================================================
;;   -- basic block 10 from 100 to 690 -- after reload
;;   ======================================================

;;	  0-->   100 r4=r4+0xff0                       :cortex_a8_default
;;	  0-->   105 r8=[r7+0x1c]                      :cortex_a8_load_store_1
;;	  1-->   101 r4=r4+0xf                         :cortex_a8_default
;;	  1-->   590 r3=r6                             :cortex_a8_default
;;	  3-->   102 r4=r4 0>>0xc                      :cortex_a8_default
;;	  4-->   103 {r4=umax(r4,r2);clobber cc;}      :cortex_a8_default
;;	  4-->   690 pc=L164                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 100
;;   new tail = 690

;;   ======================================================
;;   -- basic block 11 from 109 to 116 -- after reload
;;   ======================================================

;;	  0-->   109 r2=[r8]                           :cortex_a8_load_store_1
;;	  1-->   110 ip=[r8+0x4]                       :cortex_a8_load_store_1
;;	  3-->   111 ip=r2+ip                          :cortex_a8_default
;;	  4-->   112 ip=ip+0xff0                       :cortex_a8_default
;;	  5-->   113 ip=ip+0xf                         :cortex_a8_default
;;	  7-->   114 ip=ip 0>>0xc                      :cortex_a8_default
;;	  8-->   115 cc=cmp(ip,r4)                     :cortex_a8_default
;;	 10-->   116 pc={(ltu(cc,0x0))?L161:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 10
;;   new head = 109
;;   new tail = 116

;;   ======================================================
;;   -- basic block 12 from 118 to 123 -- after reload
;;   ======================================================

;;	  0-->   118 r2=r2 0>>0xc                      :cortex_a8_default
;;	  0-->   121 {ip=umin(ip,r5);clobber cc;}      :cortex_a8_default
;;	  1-->   119 {r2=umax(r4,r2);clobber cc;}      :cortex_a8_default
;;	  2-->   120 {r2=umin(r2,r5);clobber cc;}      :cortex_a8_default
;;	  3-->   122 cc=cmp(r2,r4)                     :cortex_a8_default
;;	  5-->   123 pc={(cc==0x0)?L155:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 5
;;   new head = 118
;;   new tail = 123

;;   ======================================================
;;   -- basic block 13 from 126 to 692 -- after reload
;;   ======================================================

;;	  0-->   126 r6=[sl]                           :cortex_a8_load_store_1
;;	  0-->   593 fp=r2                             :cortex_a8_default
;;	  1-->   127 r9=r4<<0x5                        :cortex_a8_default
;;	  1-->   595 r2=r4                             :cortex_a8_default
;;	  3-->   647 [sp+0x8c]=r6                      :cortex_a8_load_store_1
;;	  3-->   128 r6=r4                             :cortex_a8_default
;;	  4-->   692 pc=L145                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 4
;;   new head = 126
;;   new tail = 692

;;   ======================================================
;;   -- basic block 14 from 648 to 640 -- after reload
;;   ======================================================

;;	  0-->   648 r1=`mem_map'                      :cortex_a8_load_store_1
;;	  0-->   143 r6=r6+0x1                         :cortex_a8_default
;;	  3-->   133 r4=[r1]                           :cortex_a8_load_store_1
;;	  4-->   637 [sp+0x80]=r2                      :cortex_a8_load_store_1
;;	  5-->   134 r4=r4+r9                          :cortex_a8_default
;;	  5-->   638 [sp+0x7c]=r3                      :cortex_a8_load_store_1
;;	  6-->   136 r1=r4                             :cortex_a8_default
;;	  6-->   639 [sp+0x84]=ip                      :cortex_a8_load_store_1
;;	  7-->   137 call [`_clear_bit']               :cortex_a8_issue_branch
;;	  7-->   649 r1=0x1                            :cortex_a8_default
;;	  8-->   140 r0=r4                             :cortex_a8_default
;;	  8-->   139 [r4+0x10]=r1                      :cortex_a8_load_store_1
;;	  9-->   493 r1=0x0                            :cortex_a8_default
;;	  9-->   144 r9=r9+0x20                        :cortex_a8_default
;;	 10-->   142 call [`__free_pages']             :cortex_a8_issue_branch
;;	 10-->   642 ip=[sp+0x84]                      :cortex_a8_load_store_1
;;	 11-->   641 r3=[sp+0x7c]                      :cortex_a8_load_store_1
;;	 12-->   640 r2=[sp+0x80]                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 12
;;   new head = 648
;;   new tail = 640

;;   ======================================================
;;   -- basic block 15 from 491 to 149 -- after reload
;;   ======================================================

;;	  0-->   148 cc=cmp(r6,fp)                     :cortex_a8_default
;;	  0-->   491 r0=0xa                            :cortex_a8_default
;;	  2-->   149 pc={(ltu(cc,0x0))?L147:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 491
;;   new tail = 149

;;   ======================================================
;;   -- basic block 16 from 601 to 154 -- after reload
;;   ======================================================

;;	  0-->   601 r4=r2                             :cortex_a8_default
;;	  0-->   650 r2=[sp+0x8c]                      :cortex_a8_load_store_1
;;	  2-->   152 r4=r2-r4                          :cortex_a8_default
;;	  3-->   153 r6=r4+r6                          :cortex_a8_default
;;	  3-->   154 [sl]=r6                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 601
;;   new tail = 154

;;   ======================================================
;;   -- basic block 17 from 157 to 158 -- after reload
;;   ======================================================

;;	  0-->   157 cc=cmp(ip,r5)                     :cortex_a8_default
;;	  2-->   158 pc={(cc==0x0)?L635:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 157
;;   new tail = 158

;;   ======================================================
;;   -- basic block 18 from 160 to 160 -- after reload
;;   ======================================================

;;	  0-->   160 r4=ip                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 160
;;   new tail = 160

;;   ======================================================
;;   -- basic block 19 from 163 to 163 -- after reload
;;   ======================================================

;;	  0-->   163 r8=r8+0x8                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 163
;;   new tail = 163

;;   ======================================================
;;   -- basic block 20 from 169 to 174 -- after reload
;;   ======================================================

;;	  0-->   169 r1=[r7+0x14]                      :cortex_a8_load_store_1
;;	  1-->   171 r2=[r7+0x1c]                      :cortex_a8_load_store_1
;;	  3-->   172 r2=r1*0x8+r2                      :cortex_a8_default
;;	  4-->   173 cc=cmp(r8,r2)                     :cortex_a8_default
;;	  6-->   174 pc={(ltu(cc,0x0))?L166:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 169
;;   new tail = 174

;;   ======================================================
;;   -- basic block 21 from 607 to 179 -- after reload
;;   ======================================================

;;	  0-->   178 cc=cmp(r4,r5)                     :cortex_a8_default
;;	  0-->   607 r6=r3                             :cortex_a8_default
;;	  1-->   183 (ltu(cc,0x0)) r8=r4<<0x5          :cortex_a8_default
;;	  1-->   176 r3=r4                             :cortex_a8_default
;;	  2-->   182 (ltu(cc,0x0)) fp=[sl]             :cortex_a8_load_store_1
;;	  2-->   179 pc={(ltu(cc,0x0))?L200:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 607
;;   new tail = 179

;;   ======================================================
;;   -- basic block 22 from 695 to 695 -- after reload
;;   ======================================================

;;	  0-->   695 pc=L210                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 695
;;   new tail = 695

;;   ======================================================
;;   -- basic block 23 from 651 to 644 -- after reload
;;   ======================================================

;;	  0-->   651 ip=`mem_map'                      :cortex_a8_load_store_1
;;	  3-->   188 r9=[ip]                           :cortex_a8_load_store_1
;;	  4-->   643 [sp+0x7c]=r3                      :cortex_a8_load_store_1
;;	  5-->   189 r9=r9+r8                          :cortex_a8_default
;;	  5-->   199 r8=r8+0x20                        :cortex_a8_default
;;	  6-->   191 r1=r9                             :cortex_a8_default
;;	  7-->   192 call [`_clear_bit']               :cortex_a8_issue_branch
;;	  7-->   652 r1=0x1                            :cortex_a8_default
;;	  8-->   195 r0=r9                             :cortex_a8_default
;;	  8-->   194 [r9+0x10]=r1                      :cortex_a8_load_store_1
;;	  9-->   489 r1=0x0                            :cortex_a8_default
;;	 10-->   197 call [`__free_pages']             :cortex_a8_issue_branch
;;	 10-->   644 r3=[sp+0x7c]                      :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 10
;;   new head = 651
;;   new tail = 644

;;   ======================================================
;;   -- basic block 24 from 487 to 204 -- after reload
;;   ======================================================

;;	  0-->   203 cc=cmp(r4,r5)                     :cortex_a8_default
;;	  0-->   487 r0=0xa                            :cortex_a8_default
;;	  1-->   198 r4=r4+0x1                         :cortex_a8_default
;;	  2-->   204 pc={(ltu(cc,0x0))?L202:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 487
;;   new tail = 204

;;   ======================================================
;;   -- basic block 25 from 207 to 697 -- after reload
;;   ======================================================

;;	  0-->   207 r5=r5+fp                          :cortex_a8_default
;;	  1-->   208 r3=r5-r3                          :cortex_a8_default
;;	  1-->   209 [sl]=r3                           :cortex_a8_load_store_1
;;	  2-->   697 pc=L210                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 2
;;   new head = 207
;;   new tail = 697

;;   ======================================================
;;   -- basic block 26 from 604 to 604 -- after reload
;;   ======================================================

;;	  0-->   604 r6=r3                             :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 604
;;   new tail = 604

;;   ======================================================
;;   -- basic block 27 from 212 to 212 -- after reload
;;   ======================================================

;;	  0-->   212 r6=r6+0x8                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 212
;;   new tail = 212

;;   ======================================================
;;   -- basic block 28 from 218 to 223 -- after reload
;;   ======================================================

;;	  0-->   218 r2=[r7+0x8]                       :cortex_a8_load_store_1
;;	  1-->   220 r3=[r7+0x10]                      :cortex_a8_load_store_1
;;	  3-->   221 r3=r2*0x8+r3                      :cortex_a8_default
;;	  4-->   222 cc=cmp(r6,r3)                     :cortex_a8_default
;;	  6-->   223 pc={(ltu(cc,0x0))?L215:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 218
;;   new tail = 223

;;   ======================================================
;;   -- basic block 29 from 225 to 699 -- after reload
;;   ======================================================

;;	  0-->   580 ip=`totalhigh_pages'              :cortex_a8_load_store_1
;;	  0-->   236 r2=0x0                            :cortex_a8_default
;;	  1-->   225 r3=`totalram_pages'               :cortex_a8_load_store_1
;;	  1-->   237 r0=r2                             :cortex_a8_default
;;	  2-->   524 r1=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  2-->   238 r6=r2                             :cortex_a8_default
;;	  3-->   228 r5=[ip]                           :cortex_a8_load_store_1
;;	  3-->   239 r4=r2                             :cortex_a8_default
;;	  4-->   579 ip=`mem_map'                      :cortex_a8_load_store_1
;;	  5-->   229 lr=[r3]                           :cortex_a8_load_store_1
;;	  7-->   235 ip=[ip]                           :cortex_a8_load_store_1
;;	  7-->   230 lr=r5+lr                          :cortex_a8_default
;;	  8-->   233 r5=[++r1]                         :cortex_a8_load_store_1
;;	  9-->   231 [r3]=lr                           :cortex_a8_load_store_1
;;	  9-->   699 pc=L295                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 9
;;   new head = 225
;;   new tail = 699

;;   ======================================================
;;   -- basic block 30 from 245 to 254 -- after reload
;;   ======================================================

;;	  0-->   245 r3=r1+r2                          :cortex_a8_default
;;	  2-->   250 r7=[r3+0x8]                       :cortex_a8_load_store_1
;;	  3-->   246 r3=[r3+0x4]                       :cortex_a8_load_store_1
;;	  5-->   251 r7=r3+r7                          :cortex_a8_default
;;	  6-->   247 r3=r3 0>>0xc                      :cortex_a8_default
;;	  7-->   252 r7=r7 0>>0xc                      :cortex_a8_default
;;	  8-->   249 r3=r3*0x20+ip                     :cortex_a8_default
;;	  9-->   254 r7=r7*0x20+ip                     :cortex_a8_default
;;	Ready list (final):  
;;   total time = 9
;;   new head = 245
;;   new tail = 254

;;   ======================================================
;;   -- basic block 31 from 257 to 260 -- after reload
;;   ======================================================

;;	  0-->   257 r8=[r3]                           :cortex_a8_load_store_1
;;	  0-->   272 lr=r3                             :cortex_a8_default
;;	  2-->   259 cc=cmp(zxt(r8,0x1,0xa),0x0)       :cortex_a8_default
;;	  3-->   262 (cc) r4=r4+0x1                    :cortex_a8_default
;;	  4-->   260 pc={(cc!=0x0)?L286:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 257
;;   new tail = 260

;;   ======================================================
;;   -- basic block 32 from 267 to 285 -- after reload
;;   ======================================================

;;	  0-->   267 r8=[r3]                           :cortex_a8_load_store_1
;;	  2-->   269 cc=cmp(zxt(r8,0x1,0xf),0x0)       :cortex_a8_default
;;	  4-->   277 (cc) lr=[r3+0x1c]                 :cortex_a8_load_store_1
;;	  7-->   281 lr=[lr+0x10]                      :cortex_a8_load_store_1
;;	  9-->   282 cc=cmp(lr,0x0)                    :cortex_a8_default
;;	 10-->   285 (!cc) r6=r6+0x1                   :cortex_a8_default
;;	Ready list (final):  
;;   total time = 10
;;   new head = 267
;;   new tail = 285

;;   ======================================================
;;   -- basic block 33 from 288 to 291 -- after reload
;;   ======================================================

;;	  0-->   288 r3=r3+0x20                        :cortex_a8_default
;;	  1-->   290 cc=cmp(r3,r7)                     :cortex_a8_default
;;	  3-->   291 pc={(ltu(cc,0x0))?L289:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 288
;;   new tail = 291

;;   ======================================================
;;   -- basic block 34 from 293 to 294 -- after reload
;;   ======================================================

;;	  0-->   293 r0=r0+0x1                         :cortex_a8_default
;;	  0-->   294 r2=r2+0xc                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 293
;;   new tail = 294

;;   ======================================================
;;   -- basic block 35 from 298 to 299 -- after reload
;;   ======================================================

;;	  0-->   298 cc=cmp(r0,r5)                     :cortex_a8_default
;;	  2-->   299 pc={(cc<0x0)?L297:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 298
;;   new tail = 299

;;   ======================================================
;;   -- basic block 36 from 302 to 701 -- after reload
;;   ======================================================

;;	  0-->   302 r0=`*.LC4'                        :cortex_a8_load_store_1
;;	  1-->   303 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->   304 r2=`num_physpages'                :cortex_a8_load_store_1
;;	  2-->   307 r3=`memblock'                     :cortex_a8_load_store_1
;;	  2-->   578 r1=0x0                            :cortex_a8_default
;;	  3-->   478 r8=r2                             :cortex_a8_default
;;	  4-->   306 [r2]=r1                           :cortex_a8_load_store_1
;;	  4-->   335 r7=r3                             :cortex_a8_default
;;	  5-->   308 r5=[r3+0x10]                      :cortex_a8_load_store_1
;;	  5-->   701 pc=L330                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 5
;;   new head = 302
;;   new tail = 701

;;   ======================================================
;;   -- basic block 37 from 312 to 329 -- after reload
;;   ======================================================

;;	  0-->   312 r0=[r5-0x8]                       :cortex_a8_load_store_1
;;	  1-->   313 r1=[r5-0x4]                       :cortex_a8_load_store_1
;;	  2-->   316 r2=r0+0xff0                       :cortex_a8_default
;;	  2-->   322 r3=[r8]                           :cortex_a8_load_store_1
;;	  3-->   317 r2=r2+0xf                         :cortex_a8_default
;;	  3-->   314 r1=r0+r1                          :cortex_a8_default
;;	  4-->   484 r0=`*.LC5'                        :cortex_a8_load_store_1
;;	  5-->   318 r2=r2 0>>0xc                      :cortex_a8_default
;;	  6-->   319 r1=r1 0>>0xc-r2                   :cortex_a8_default
;;	  7-->   323 r3=r1+r3                          :cortex_a8_default
;;	  7-->   324 [r8]=r3                           :cortex_a8_load_store_1
;;	  8-->   328 r1=r1 0>>0x8                      :cortex_a8_default
;;	  9-->   329 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 312
;;   new tail = 329

;;   ======================================================
;;   -- basic block 38 from 337 to 342 -- after reload
;;   ======================================================

;;	  0-->   337 r1=[r7+0x8]                       :cortex_a8_load_store_1
;;	  0-->   332 r2=r5                             :cortex_a8_default
;;	  1-->   339 r3=[r7+0x10]                      :cortex_a8_load_store_1
;;	  1-->   333 r5=r5+0x8                         :cortex_a8_default
;;	  3-->   340 r3=r1*0x8+r3                      :cortex_a8_default
;;	  4-->   341 cc=cmp(r2,r3)                     :cortex_a8_default
;;	  6-->   342 pc={(ltu(cc,0x0))?L334:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 337
;;   new tail = 342

;;   ======================================================
;;   -- basic block 39 from 577 to 681 -- after reload
;;   ======================================================

;;	  0-->   577 r3=`num_physpages'                :cortex_a8_load_store_1
;;	  1-->   348 r0=`*.LC6'                        :cortex_a8_load_store_1
;;	  2-->   573 r7=const(`_etext'+0x3ff)          :cortex_a8_load_store_1
;;	  3-->   346 r1=[r3]                           :cortex_a8_load_store_1
;;	  4-->   571 r5=const(`_edata'+0x3ff)          :cortex_a8_load_store_1
;;	  5-->   570 r8=const(`__bss_stop'+0x3ff)      :cortex_a8_load_store_1
;;	  6-->   349 r1=r1 0>>0x8                      :cortex_a8_default
;;	  7-->   350 r0=call [`printk']                :cortex_a8_issue_branch
;;	  7-->   576 r1=`vm_stat'                      :cortex_a8_load_store_1
;;	  8-->   575 ip=`totalhigh_pages'              :cortex_a8_load_store_1
;;	  8-->   364 r2=r6<<0x2                        :cortex_a8_default
;;	  9-->   365 r3=r4<<0x2                        :cortex_a8_default
;;	  9-->   362 r0=`*.LC7'                        :cortex_a8_load_store_1
;;	 10-->   352 r1=[r1]                           :cortex_a8_load_store_1
;;	 10-->   383 r4=0xe                            :cortex_a8_default
;;	 11-->   359 ip=[ip]                           :cortex_a8_load_store_1
;;	 12-->   354 r1=smax(r1,0x0)                   :cortex_a8_default
;;	 12-->   572 r6=const(`__init_end'+0x3ff)      :cortex_a8_load_store_1
;;	 14-->   363 r1=r1<<0x2                        :cortex_a8_default
;;	 14-->   360 ip=ip<<0x2                        :cortex_a8_default
;;	 15-->   361 [sp]=ip                           :cortex_a8_load_store_1
;;	 15-->   366 r0=call [`printk']                :cortex_a8_issue_branch
;;	 16-->   574 r2=`high_memory'                  :cortex_a8_load_store_1
;;	 16-->   468 r3=0x4                            :cortex_a8_default
;;	 17-->   654 r1=`__init_begin'                 :cortex_a8_load_store_1
;;	 17-->   391 lr=0xffffffffc0000000             :cortex_a8_default
;;	 19-->   368 fp=[r2]                           :cortex_a8_load_store_1
;;	 19-->   429 r6=r6-r1                          :cortex_a8_default
;;	 20-->   653 r2=`_text'                        :cortex_a8_load_store_1
;;	 20-->   431 r0=r6+0x3fc                       :cortex_a8_default
;;	 21-->   369 ip=fp+0x800000                    :cortex_a8_default
;;	 21-->   656 r1=`__bss_start'                  :cortex_a8_load_store_1
;;	 22-->   415 r7=r7-r2                          :cortex_a8_default
;;	 22-->   655 r2=`_sdata'                       :cortex_a8_load_store_1
;;	 23-->   417 sl=r7+0x3fc                       :cortex_a8_default
;;	 23-->   664 cc=cmp(r7,0x0)                    :cortex_a8_default
;;	 24-->   665 (cc<0x0) r7=sl+0x3                :cortex_a8_default
;;	 24-->   666 cc=cmp(r6,0x0)                    :cortex_a8_default
;;	 25-->   667 (cc<0x0) r6=r0+0x3                :cortex_a8_default
;;	 25-->   543 ip=ip 0>>0x17                     :cortex_a8_default
;;	 26-->   421 r7=r7>>0xa                        :cortex_a8_default
;;	 26-->   657 [sp+0x50]=r7                      :cortex_a8_load_store_1
;;	 27-->   569 r7=0xfffffffffff00000             :cortex_a8_load_store_1
;;	 27-->   544 ip=ip<<0x17                       :cortex_a8_default
;;	 28-->   388 sl=0xfffffffff8000000-ip          :cortex_a8_default
;;	 28-->   385 [sp+0x18]=ip                      :cortex_a8_load_store_1
;;	 29-->   659 ip=0xffffffffbfe00000             :cortex_a8_load_store_1
;;	 29-->   443 r5=r5-r2                          :cortex_a8_default
;;	 30-->   374 [sp]=r7                           :cortex_a8_load_store_1
;;	 30-->   435 r7=r6>>0xa                        :cortex_a8_default
;;	 31-->   568 r6=0xfffffffffffe0000             :cortex_a8_load_store_1
;;	 31-->   457 r8=r8-r1                          :cortex_a8_default
;;	 32-->   668 cc=cmp(r5,0x0)                    :cortex_a8_default
;;	 32-->   445 r1=r5+0x3fc                       :cortex_a8_default
;;	 33-->   398 [sp+0x30]=ip                      :cortex_a8_load_store_1
;;	 33-->   669 (cc<0x0) r5=r1+0x3                :cortex_a8_default
;;	 34-->   376 [sp+0x4]=r6                       :cortex_a8_load_store_1
;;	 34-->   567 r6=0x380                          :cortex_a8_default
;;	 35-->   378 [sp+0x8]=r6                       :cortex_a8_load_store_1
;;	 35-->   566 r6=0xffffffffff000000             :cortex_a8_default
;;	 36-->   380 [sp+0xc]=r6                       :cortex_a8_load_store_1
;;	 36-->   565 r6=r6+0xe00000                    :cortex_a8_default
;;	 37-->   382 [sp+0x10]=r6                      :cortex_a8_load_store_1
;;	 37-->   564 r6=r6-0x7e00000                   :cortex_a8_default
;;	 38-->   387 [sp+0x1c]=r6                      :cortex_a8_load_store_1
;;	 38-->   563 r6=r6+0x8000002                   :cortex_a8_default
;;	 39-->   402 [sp+0x38]=r6                      :cortex_a8_load_store_1
;;	 39-->   562 r6=0xffffffffbf000000             :cortex_a8_default
;;	 40-->   404 [sp+0x3c]=r6                      :cortex_a8_load_store_1
;;	 40-->   658 r6=r6+0xe00000                    :cortex_a8_default
;;	 41-->   406 [sp+0x40]=r6                      :cortex_a8_load_store_1
;;	 41-->   459 r2=r8+0x3fc                       :cortex_a8_default
;;	 42-->   561 r6=`_etext'                       :cortex_a8_load_store_1
;;	 42-->   670 cc=cmp(r8,0x0)                    :cortex_a8_default
;;	 43-->   661 ip=`__init_begin'                 :cortex_a8_load_store_1
;;	 43-->   449 r5=r5>>0xa                        :cortex_a8_default
;;	 44-->   450 [sp+0x68]=r5                      :cortex_a8_load_store_1
;;	 44-->   671 (cc<0x0) r8=r2+0x3                :cortex_a8_default
;;	 45-->   412 [sp+0x4c]=r6                      :cortex_a8_load_store_1
;;	 45-->   394 r9=fp+0x40000000                  :cortex_a8_default
;;	 46-->   560 r6=`__init_end'                   :cortex_a8_load_store_1
;;	 46-->   389 sl=sl 0>>0x14                     :cortex_a8_default
;;	 47-->   558 r5=`__bss_stop'                   :cortex_a8_load_store_1
;;	 47-->   395 r9=r9 0>>0x14                     :cortex_a8_default
;;	 48-->   424 [sp+0x54]=ip                      :cortex_a8_load_store_1
;;	 48-->   463 r8=r8>>0xa                        :cortex_a8_default
;;	 49-->   426 [sp+0x58]=r6                      :cortex_a8_load_store_1
;;	 50-->   559 r6=`_edata'                       :cortex_a8_load_store_1
;;	 51-->   663 ip=`__bss_start'                  :cortex_a8_load_store_1
;;	 52-->   466 r1=0xffffffffffff0000             :cortex_a8_load_store_1
;;	 53-->   440 [sp+0x64]=r6                      :cortex_a8_load_store_1
;;	 54-->   660 r6=`_text'                        :cortex_a8_load_store_1
;;	 55-->   467 r2=0xffffffffffff1000             :cortex_a8_load_store_1
;;	 56-->   465 r0=`*.LC8'                        :cortex_a8_load_store_1
;;	 57-->   410 [sp+0x48]=r6                      :cortex_a8_load_store_1
;;	 58-->   662 r6=`_sdata'                       :cortex_a8_load_store_1
;;	 59-->   390 [sp+0x20]=sl                      :cortex_a8_load_store_1
;;	 60-->   396 [sp+0x2c]=r9                      :cortex_a8_load_store_1
;;	 61-->   400 [sp+0x34]=lr                      :cortex_a8_load_store_1
;;	 62-->   408 [sp+0x44]=r4                      :cortex_a8_load_store_1
;;	 63-->   436 [sp+0x5c]=r7                      :cortex_a8_load_store_1
;;	 64-->   454 [sp+0x70]=r5                      :cortex_a8_load_store_1
;;	 65-->   464 [sp+0x74]=r8                      :cortex_a8_load_store_1
;;	 66-->   384 [sp+0x14]=r4                      :cortex_a8_load_store_1
;;	 67-->   392 [sp+0x24]=lr                      :cortex_a8_load_store_1
;;	 68-->   393 [sp+0x28]=fp                      :cortex_a8_load_store_1
;;	 69-->   438 [sp+0x60]=r6                      :cortex_a8_load_store_1
;;	 70-->   452 [sp+0x6c]=ip                      :cortex_a8_load_store_1
;;	 70-->   469 r0=call [`printk']                :cortex_a8_issue_branch
;;	 71-->   681 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 71
;;   new head = 577
;;   new tail = 681





mem_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={31d,23u,2d} r1={50d,40u,1d} r2={40d,36u,1d} r3={43d,42u,3d} r4={18d,35u,3d} r5={17d,28u,3d} r6={28d,40u,3d} r7={14d,23u,8d} r8={13d,20u,5d} r9={7d,10u} r10={6d,10u,2d} r11={4d,8u} r12={31d,24u,1d} r13={3d,96u,8d} r14={18d,9u} r15={11d} r16={11d} r17={11d} r18={11d} r19={11d} r20={11d} r21={11d} r22={11d} r23={11d} r24={37d,25u} r27={11d} r28={11d} r29={11d} r30={11d} r31={11d} r32={11d} r33={11d} r34={11d} r35={11d} r36={11d} r37={11d} r38={11d} r39={11d} r40={11d} r41={11d} r42={11d} r43={11d} r44={11d} r45={11d} r46={11d} r47={11d} r48={11d} r49={11d} r50={11d} r51={11d} r52={11d} r53={11d} r54={11d} r55={11d} r56={11d} r57={11d} r58={11d} r59={11d} r60={11d} r61={11d} r62={11d} r63={11d} r64={11d} r65={11d} r66={11d} r67={11d} r68={11d} r69={11d} r70={11d} r71={11d} r72={11d} r73={11d} r74={11d} r75={11d} r76={11d} r77={11d} r78={11d} r79={11d} r80={11d} r81={11d} r82={11d} r83={11d} r84={11d} r85={11d} r86={11d} r87={11d} r88={11d} r89={11d} r90={11d} r91={11d} r92={11d} r93={11d} r94={11d} r95={11d} r96={11d} r97={11d} r98={11d} r99={11d} r100={11d} r101={11d} r102={11d} r103={11d} r104={11d} r105={11d} r106={11d} r107={11d} r108={11d} r109={11d} r110={11d} r111={11d} r112={11d} r113={11d} r114={11d} r115={11d} r116={11d} r117={11d} r118={11d} r119={11d} r120={11d} r121={11d} r122={11d} r123={11d} r124={11d} r125={11d} r126={11d} r127={11d} r406={2d} 
;;    total ref usage 2081{1570d,469u,42e} in 345{334 regular + 11 call} insns.
(note 4 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 4 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 5 583 2 NOTE_INSN_DELETED)

(insn:TI 583 11 677 2 arch/arm/mm/init.c:595 (set (reg/f:SI 2 r2 [194])
        (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>)
        (nil)))

(insn/f:TI 677 583 74 2 arch/arm/mm/init.c:585 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 9 r9)
                (expr_list:REG_DEAD (reg:SI 8 r8)
                    (expr_list:REG_DEAD (reg:SI 7 r7)
                        (expr_list:REG_DEAD (reg:SI 6 r6)
                            (expr_list:REG_DEAD (reg:SI 5 r5)
                                (expr_list:REG_DEAD (reg:SI 4 r4)
                                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                                (set/f (reg/f:SI 13 sp)
                                                    (plus:SI (reg/f:SI 13 sp)
                                                        (const_int -36 [0xffffffffffffffdc])))
                                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                    (reg:SI 4 r4))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 4 [0x4])) [0 S4 A32])
                                                    (reg:SI 5 r5))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 8 [0x8])) [0 S4 A32])
                                                    (reg:SI 6 r6))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 12 [0xc])) [0 S4 A32])
                                                    (reg:SI 7 r7))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 16 [0x10])) [0 S4 A32])
                                                    (reg:SI 8 r8))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 20 [0x14])) [0 S4 A32])
                                                    (reg:SI 9 r9))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 24 [0x18])) [0 S4 A32])
                                                    (reg:SI 10 sl))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 28 [0x1c])) [0 S4 A32])
                                                    (reg:SI 11 fp))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 32 [0x20])) [0 S4 A32])
                                                    (reg:SI 14 lr))
                                            ])
                                        (nil)))))))))))

(insn:TI 74 677 10 2 arch/arm/mm/init.c:487 discrim 1 (set (reg/f:SI 7 r7 [413])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 10 74 14 2 arch/arm/mm/init.c:595 (set (reg:SI 1 r1 [orig:196 max_pfn ] [196])
        (mem/c/i:SI (reg/f:SI 2 r2 [194]) [0 max_pfn+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [194])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>) [0 max_pfn+0 S4 A32])
            (nil))))

(insn 14 10 582 2 arch/arm/mm/init.c:595 (set (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 582 14 678 2 arch/arm/mm/init.c:595 (set (reg/f:SI 2 r2 [193])
        (symbol_ref:SI ("max_mapnr") [flags 0xc0] <var_decl 0x110aed20 max_mapnr>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_mapnr") [flags 0xc0] <var_decl 0x110aed20 max_mapnr>)
        (nil)))

(insn/f 678 582 679 2 arch/arm/mm/init.c:585 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -148 [0xffffffffffffff6c]))) 4 {*arm_addsi3} (nil))

(note 679 678 12 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 12 679 15 2 arch/arm/mm/init.c:595 (set (reg:SI 1 r1 [197])
        (sign_extract:SI (reg:SI 1 r1 [orig:196 max_pfn ] [196])
            (const_int 27 [0x1b])
            (const_int 0 [0x0]))) 123 {extv} (nil))

(insn 15 12 16 2 arch/arm/mm/init.c:487 (set (reg/v:SI 5 r5 [orig:176 i ] [176])
        (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 16 15 21 2 arch/arm/mm/init.c:480 (set (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
        (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 21 16 39 2 arch/arm/mm/init.c:584 (set (reg/f:SI 10 sl [414])
        (plus:SI (reg/f:SI 7 r7 [413])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 4 [0x4])))
        (nil)))

(insn:TI 39 21 13 2 arch/arm/mm/init.c:457 (set (reg/f:SI 8 r8 [415])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(insn:TI 13 39 686 2 arch/arm/mm/init.c:595 (set (mem/c/i:SI (reg/f:SI 2 r2 [193]) [0 max_mapnr+0 S4 A32])
        (reg:SI 1 r1 [197])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [193])
        (expr_list:REG_DEAD (reg:SI 1 r1 [197])
            (nil))))

(jump_insn 686 13 687 2 (set (pc)
        (label_ref 71)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 7)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 687 686 73)

;; Start of basic block ( 7) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  7 [88.9%] 
(code_label 73 687 19 3 45 "" [1 uses])

(note 19 73 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 27 19 28 3 NOTE_INSN_DELETED)

(note 28 27 30 3 NOTE_INSN_DELETED)

(note 30 28 31 3 NOTE_INSN_DELETED)

(note 31 30 33 3 NOTE_INSN_DELETED)

(note 33 31 34 3 NOTE_INSN_DELETED)

(note 34 33 35 3 NOTE_INSN_DELETED)

(note 35 34 23 3 NOTE_INSN_DELETED)

(insn:TI 23 35 24 3 arch/arm/mm/init.c:490 (set (reg:SI 1 r1 [orig:200 <variable>.start ] [200])
        (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])
        (nil)))

(insn:TI 24 23 25 3 arch/arm/mm/init.c:490 (set (reg/v:SI 1 r1 [orig:174 bank_start ] [174])
        (lshiftrt:SI (reg:SI 1 r1 [orig:200 <variable>.start ] [200])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 25 24 26 3 arch/arm/mm/init.c:505 (set (reg:SI 1 r1 [201])
        (and:SI (reg/v:SI 1 r1 [orig:174 bank_start ] [174])
            (const_int -1021 [0xfffffffffffffc03]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 26 25 36 3 arch/arm/mm/init.c:505 (set (reg/v:SI 1 r1 [orig:150 bank_start.756 ] [150])
        (and:SI (reg:SI 1 r1 [201])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (expr_list:REG_EQUAL (and:SI (reg/v:SI 1 r1 [orig:174 bank_start ] [174])
            (const_int -1024 [0xfffffffffffffc00]))
        (nil)))

(insn:TI 36 26 37 3 arch/arm/mm/init.c:511 (set (reg:CC_DLTU 24 cc)
        (compare:CC_DLTU (and:SI (ltu:SI (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
                    (reg/v:SI 1 r1 [orig:150 bank_start.756 ] [150]))
                (ne:SI (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(jump_insn:TI 37 36 38 3 arch/arm/mm/init.c:511 (set (pc)
        (if_then_else (eq (reg:CC_DLTU 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_DLTU 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 6)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  6 [50.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 38 37 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 41 38 45 4 NOTE_INSN_DELETED)

(note 45 41 47 4 NOTE_INSN_DELETED)

(note 47 45 50 4 NOTE_INSN_DELETED)

(note 50 47 40 4 NOTE_INSN_DELETED)

(insn:TI 40 50 42 4 arch/arm/mm/init.c:457 (set (reg/f:SI 2 r2 [orig:179 mem_map.375 ] [179])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [415]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [415]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn:TI 42 40 48 4 arch/arm/mm/init.c:464 (set (reg:SI 0 r0 [211])
        (plus:SI (mult:SI (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
                (const_int 32 [0x20]))
            (reg/f:SI 2 r2 [orig:179 mem_map.375 ] [179]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
        (nil)))

(insn 48 42 43 4 arch/arm/mm/init.c:465 (set (reg:SI 1 r1 [216])
        (plus:SI (mult:SI (reg/v:SI 1 r1 [orig:150 bank_start.756 ] [150])
                (const_int 32 [0x20]))
            (reg/f:SI 2 r2 [orig:179 mem_map.375 ] [179]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:179 mem_map.375 ] [179])
        (nil)))

(insn:TI 43 48 49 4 arch/arm/mm/init.c:464 (set (reg:SI 0 r0 [213])
        (plus:SI (reg:SI 0 r0 [211])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 49 43 44 4 arch/arm/mm/init.c:465 (set (reg:SI 1 r1 [217])
        (plus:SI (reg:SI 1 r1 [216])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn:TI 44 49 555 4 arch/arm/mm/init.c:464 (set (reg:SI 0 r0 [212])
        (plus:SI (reg:SI 0 r0 [213])
            (const_int 1073741839 [0x4000000f]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 0 r0 [211])
            (const_int 1073745919 [0x40000fff]))
        (nil)))

(insn 555 44 553 4 arch/arm/mm/init.c:465 (set (reg/v:SI 1 r1 [orig:177 pgend ] [177])
        (and:SI (reg:SI 1 r1 [217])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 553 555 556 4 arch/arm/mm/init.c:464 (set (reg/v:SI 0 r0 [orig:178 pg ] [178])
        (and:SI (reg:SI 0 r0 [212])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 556 553 554 4 arch/arm/mm/init.c:465 (set (reg/v:SI 1 r1 [orig:177 pgend ] [177])
        (and:SI (reg/v:SI 1 r1 [orig:177 pgend ] [177])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 554 556 52 4 arch/arm/mm/init.c:464 (set (reg/v:SI 0 r0 [orig:178 pg ] [178])
        (and:SI (reg/v:SI 0 r0 [orig:178 pg ] [178])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 52 554 53 4 arch/arm/mm/init.c:471 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:178 pg ] [178])
            (reg/v:SI 1 r1 [orig:177 pgend ] [177]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 53 52 54 4 arch/arm/mm/init.c:471 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 59)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  5 [29.0%]  (fallthru)
;; Succ edge  6 [71.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  4 [29.0%]  (fallthru)
(note 54 53 55 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 55 54 57 5 NOTE_INSN_DELETED)

(insn:TI 57 55 58 5 arch/arm/mm/init.c:472 (set (reg:SI 1 r1)
        (minus:SI (reg/v:SI 1 r1 [orig:177 pgend ] [177])
            (reg:SI 0 r0))) 28 {*arm_subsi3_insn} (nil))

(call_insn:TI 58 57 59 5 arch/arm/mm/init.c:472 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_bootmem") [flags 0x41] <function_decl 0x11095600 free_bootmem>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 3 4 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	 1 [r1]

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [71.0%] 
;; Pred edge  5 [100.0%]  (fallthru)
(code_label 59 58 60 6 44 "" [2 uses])

(note 60 59 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 61 60 62 6 NOTE_INSN_DELETED)

(note 62 61 67 6 NOTE_INSN_DELETED)

(note 67 62 63 6 NOTE_INSN_DELETED)

(insn:TI 63 67 64 6 arch/arm/mm/init.c:519 (parallel [
            (set (reg:SI 3 r3 [220])
                (plus:SI (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
                            (const_int 8 [0x8])) [0 <variable>.size+0 S4 A32])
                    (mem/s/j:SI (plus:SI (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
                            (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])))
            (clobber (reg:SI 1 r1))
        ]) 321 {*arith_adjacentmem} (expr_list:REG_DEAD (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
        (expr_list:REG_UNUSED (reg:SI 1 r1)
            (nil))))

(insn:TI 64 63 65 6 arch/arm/mm/init.c:519 (set (reg:SI 3 r3 [223])
        (lshiftrt:SI (reg:SI 3 r3 [220])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 65 64 66 6 arch/arm/mm/init.c:519 (set (reg:SI 3 r3 [225])
        (plus:SI (reg:SI 3 r3 [223])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn:TI 66 65 551 6 arch/arm/mm/init.c:519 (set (reg:SI 3 r3 [224])
        (plus:SI (reg:SI 3 r3 [225])
            (const_int 3 [0x3]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 3 r3 [223])
            (const_int 1023 [0x3ff]))
        (nil)))

(insn:TI 551 66 552 6 arch/arm/mm/init.c:519 (set (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
        (and:SI (reg:SI 3 r3 [224])
            (const_int -1021 [0xfffffffffffffc03]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 552 551 71 6 arch/arm/mm/init.c:519 (set (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
        (and:SI (reg/v:SI 3 r3 [orig:175 prev_bank_end ] [175])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 6 2) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  6 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 71 552 72 7 43 "" [1 uses])

(note 72 71 75 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 75 72 22 7 arch/arm/mm/init.c:487 discrim 1 (set (reg:SI 2 r2 [orig:228 meminfo.nr_banks ] [228])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [413])
                (const_int 4 [0x4])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [413])
                (const_int 4 [0x4])) [0 meminfo.nr_banks+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
            (nil))))

(insn 22 75 70 7 arch/arm/mm/init.c:584 (set (reg/f:SI 6 r6 [orig:151 D.26350 ] [151])
        (plus:SI (reg/f:SI 10 sl [414])
            (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))))
        (nil)))

(insn:TI 70 22 76 7 arch/arm/mm/init.c:487 (set (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])
        (plus:SI (reg:SI 4 r4 [orig:152 ivtmp.752 ] [152])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn:TI 76 70 69 7 arch/arm/mm/init.c:487 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:176 i ] [176])
            (reg:SI 2 r2 [orig:228 meminfo.nr_banks ] [228]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:228 meminfo.nr_banks ] [228])
        (nil)))

(insn 69 76 77 7 arch/arm/mm/init.c:487 (set (reg/v:SI 5 r5 [orig:176 i ] [176])
        (plus:SI (reg/v:SI 5 r5 [orig:176 i ] [176])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 77 69 78 7 arch/arm/mm/init.c:487 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 73)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8889 [0x22b9])
            (nil))))
;; End of basic block 7 -> ( 3 8)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [88.9%] 
;; Succ edge  8 [11.1%]  (fallthru,loop_exit)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  7 [11.1%]  (fallthru,loop_exit)
(note 78 77 82 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 82 78 138 8 NOTE_INSN_DELETED)

(note 138 82 132 8 NOTE_INSN_DELETED)

(note 132 138 79 8 NOTE_INSN_DELETED)

(insn:TI 79 132 125 8 arch/arm/mm/init.c:600 (set (reg/f:SI 4 r4 [229])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn:TI 125 79 80 8 arch/arm/mm/init.c:564 (set (reg/f:SI 10 sl [405])
        (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)
        (nil)))

(insn:TI 80 125 81 8 arch/arm/mm/init.c:600 (set (reg:SI 5 r5 [orig:192 totalram_pages.389 ] [192])
        (mem/c/i:SI (reg/f:SI 4 r4 [229]) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>) [0 totalram_pages+0 S4 A32])
        (nil)))

(call_insn 81 80 88 8 arch/arm/mm/init.c:600 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("free_all_bootmem") [flags 0x41] <function_decl 0x11095500 free_all_bootmem>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (nil))

(insn:TI 88 81 216 8 arch/arm/mm/init.c:536 (set (reg/f:SI 3 r3 [233])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn:TI 216 88 89 8 arch/arm/mm/init.c:536 discrim 1 (set (reg/f:SI 7 r7 [404])
        (reg/f:SI 3 r3 [233])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn:TI 89 216 581 8 arch/arm/mm/init.c:536 (set (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [233])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [233])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
            (nil))))

(insn:TI 581 89 87 8 arch/arm/mm/init.c:532 (set (reg/f:SI 3 r3 [232])
        (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>)
        (nil)))

(insn:TI 87 581 645 8 arch/arm/mm/init.c:532 (set (reg:SI 3 r3)
        (mem/c/i:SI (reg/f:SI 3 r3 [232]) [0 max_low_pfn+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>) [0 max_low_pfn+0 S4 A32])
        (nil)))

(insn:TI 645 87 84 8 arch/arm/mm/init.c:532 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 %sfp+-8 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn:TI 84 645 85 8 arch/arm/mm/init.c:600 (set (reg:SI 0 r0 [231])
        (plus:SI (reg:SI 0 r0)
            (reg:SI 5 r5 [orig:192 totalram_pages.389 ] [192]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 5 r5 [orig:192 totalram_pages.389 ] [192])
        (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 4 r4 [229]) [0 totalram_pages+0 S4 A32])
            (nil))))

(insn 85 84 688 8 arch/arm/mm/init.c:600 (set (mem/c/i:SI (reg/f:SI 4 r4 [229]) [0 totalram_pages+0 S4 A32])
        (reg:SI 0 r0 [231])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [229])
        (expr_list:REG_DEAD (reg:SI 0 r0 [231])
            (nil))))

(jump_insn:TI 688 85 689 8 (set (pc)
        (label_ref 213)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 28)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  28 [100.0%] 

(barrier 689 688 215)

;; Start of basic block ( 28) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  28 [91.0%] 
(code_label 215 689 92 9 56 "" [1 uses])

(note 92 215 93 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 93 92 94 9 include/linux/memblock.h:120 (set (reg:SI 4 r4 [orig:170 D.25753 ] [170])
        (mem/s/j:SI (reg/v/f:SI 6 r6 [orig:167 mem ] [167]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 94 93 646 9 include/linux/memblock.h:129 (set (reg:SI 5 r5 [orig:235 <variable>.size ] [235])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])
        (nil)))

(insn:TI 646 94 95 9 arch/arm/mm/init.c:541 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 136 [0x88])) [0 %sfp+-8 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 95 646 96 9 include/linux/memblock.h:129 (set (reg:SI 5 r5 [234])
        (plus:SI (reg:SI 4 r4 [orig:170 D.25753 ] [170])
            (reg:SI 5 r5 [orig:235 <variable>.size ] [235]))) 4 {*arm_addsi3} (nil))

(insn:TI 96 95 97 9 include/linux/memblock.h:129 (set (reg/v:SI 5 r5 [orig:148 start.759 ] [148])
        (lshiftrt:SI (reg:SI 5 r5 [234])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 97 96 98 9 arch/arm/mm/init.c:541 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:148 start.759 ] [148])
            (reg:SI 2 r2))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 98 97 99 9 arch/arm/mm/init.c:541 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 210)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 9 -> ( 27 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  27 [50.0%] 
;; Succ edge  10 [50.0%]  (fallthru)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 8 [r8] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 8 [r8]
;; live  kill	 24 [cc]

;; Pred edge  9 [50.0%]  (fallthru)
(note 99 98 100 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 100 99 105 10 include/linux/memblock.h:120 (set (reg:SI 4 r4 [237])
        (plus:SI (reg:SI 4 r4 [orig:170 D.25753 ] [170])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 105 100 101 10 arch/arm/mm/init.c:549 (set (reg/v/f:SI 8 r8 [orig:168 res ] [168])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 28 [0x1c]))) [0 memblock.reserved.regions+0 S4 A32])
        (nil)))

(insn:TI 101 105 590 10 include/linux/memblock.h:120 (set (reg:SI 4 r4 [236])
        (plus:SI (reg:SI 4 r4 [237])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 4 r4 [orig:170 D.25753 ] [170])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 590 101 102 10 (set (reg/v/f:SI 3 r3 [orig:167 mem ] [167])
        (reg/v/f:SI 6 r6 [orig:167 mem ] [167])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
        (nil)))

(insn:TI 102 590 103 10 include/linux/memblock.h:120 (set (reg/v:SI 4 r4 [orig:149 start.758 ] [149])
        (lshiftrt:SI (reg:SI 4 r4 [236])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 103 102 690 10 include/linux/memblock.h:120 (parallel [
            (set (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
                (umax:SI (reg/v:SI 4 r4 [orig:149 start.758 ] [149])
                    (reg:SI 2 r2)))
            (clobber (reg:CC 24 cc))
        ]) 106 {*arm_umaxsi3} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(jump_insn 690 103 691 10 (set (pc)
        (label_ref 164)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  20 [100.0%] 

(barrier 691 690 166)

;; Start of basic block ( 20) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  20 [95.5%] 
(code_label 166 691 108 11 53 "" [1 uses])

(note 108 166 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 109 108 110 11 include/linux/memblock.h:138 (set (reg:SI 2 r2 [orig:171 D.25749 ] [171])
        (mem/s/j:SI (reg/v/f:SI 8 r8 [orig:168 res ] [168]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 110 109 111 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [orig:240 <variable>.size ] [240])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 8 r8 [orig:168 res ] [168])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 8 r8 [orig:168 res ] [168])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])
        (nil)))

(insn:TI 111 110 112 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [239])
        (plus:SI (reg:SI 2 r2 [orig:171 D.25749 ] [171])
            (reg:SI 12 ip [orig:240 <variable>.size ] [240]))) 4 {*arm_addsi3} (nil))

(insn:TI 112 111 113 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [242])
        (plus:SI (reg:SI 12 ip [239])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn:TI 113 112 114 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [241])
        (plus:SI (reg:SI 12 ip [242])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 12 ip [239])
            (const_int 4095 [0xfff]))
        (nil)))

(insn:TI 114 113 115 11 include/linux/memblock.h:147 (set (reg/v:SI 12 ip [orig:146 start.761 ] [146])
        (lshiftrt:SI (reg:SI 12 ip [241])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 115 114 116 11 arch/arm/mm/init.c:555 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:146 start.761 ] [146])
            (reg/v:SI 4 r4 [orig:145 start.762 ] [145]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 116 115 117 11 arch/arm/mm/init.c:555 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 161)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 11 -> ( 19 12)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  19 [50.0%] 
;; Succ edge  12 [50.0%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  11 [50.0%]  (fallthru)
(note 117 116 118 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 118 117 121 12 include/linux/memblock.h:138 (set (reg/v:SI 2 r2 [orig:147 start.760 ] [147])
        (lshiftrt:SI (reg:SI 2 r2 [orig:171 D.25749 ] [171])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 121 118 119 12 include/linux/memblock.h:138 (parallel [
            (set (reg/v:SI 12 ip [orig:139 start.769 ] [139])
                (umin:SI (reg/v:SI 12 ip [orig:146 start.761 ] [146])
                    (reg/v:SI 5 r5 [orig:148 start.759 ] [148])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 119 121 120 12 include/linux/memblock.h:138 (parallel [
            (set (reg/v:SI 2 r2 [orig:138 start.770 ] [138])
                (umax:SI (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
                    (reg/v:SI 2 r2 [orig:147 start.760 ] [147])))
            (clobber (reg:CC 24 cc))
        ]) 106 {*arm_umaxsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 120 119 122 12 include/linux/memblock.h:138 (parallel [
            (set (reg/v:SI 2 r2 [orig:140 start.768 ] [140])
                (umin:SI (reg/v:SI 2 r2 [orig:138 start.770 ] [138])
                    (reg/v:SI 5 r5 [orig:148 start.759 ] [148])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 122 120 123 12 arch/arm/mm/init.c:563 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:140 start.768 ] [140])
            (reg/v:SI 4 r4 [orig:145 start.762 ] [145]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 123 122 124 12 arch/arm/mm/init.c:563 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 155)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 12 -> ( 13 17)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  13 [72.0%]  (fallthru)
;; Succ edge  17 [28.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 6 [r6] 9 [r9] 11 [fp]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 6 [r6] 9 [r9] 11 [fp]
;; live  kill	

;; Pred edge  12 [72.0%]  (fallthru)
(note 124 123 126 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 126 124 593 13 arch/arm/mm/init.c:564 (set (reg:SI 6 r6)
        (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>) [0 totalhigh_pages+0 S4 A32])
        (nil)))

(insn 593 126 127 13 (set (reg/v:SI 11 fp [orig:140 start.768 ] [140])
        (reg/v:SI 2 r2 [orig:140 start.768 ] [140])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:140 start.768 ] [140])
        (nil)))

(insn:TI 127 593 595 13 arch/arm/mm/init.c:564 (set (reg:SI 9 r9 [orig:153 ivtmp.734 ] [153])
        (ashift:SI (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (nil))

(insn 595 127 647 13 (set (reg/v:SI 2 r2 [orig:145 start.762 ] [145])
        (reg/v:SI 4 r4 [orig:145 start.762 ] [145])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
        (nil)))

(insn:TI 647 595 128 13 arch/arm/mm/init.c:564 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 140 [0x8c])) [0 %sfp+-4 S4 A32])
        (reg:SI 6 r6)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 6 r6)
        (nil)))

(insn 128 647 692 13 arch/arm/mm/init.c:564 (set (reg/v:SI 6 r6 [orig:144 start.763 ] [144])
        (reg/v:SI 4 r4 [orig:145 start.762 ] [145])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 692 128 693 13 (set (pc)
        (label_ref 145)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 15)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 693 692 147)

;; Start of basic block ( 15) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 6 [r6] 9 [r9] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 9 [r9] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  15 [91.0%] 
(code_label 147 693 131 14 52 "" [1 uses])

(note 131 147 648 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 648 131 143 14 arch/arm/mm/init.c:424 (set (reg:SI 1 r1)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn 143 648 133 14 arch/arm/mm/init.c:423 discrim 2 (set (reg/v:SI 6 r6 [orig:144 start.763 ] [144])
        (plus:SI (reg/v:SI 6 r6 [orig:144 start.763 ] [144])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 133 143 637 14 arch/arm/mm/init.c:424 (set (reg/f:SI 4 r4 [orig:245 mem_map ] [245])
        (mem/f/c/i:SI (reg:SI 1 r1) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 406) [0 mem_map+0 S4 A32])
            (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
                (nil)))))

(insn:TI 637 133 134 14 include/linux/page-flags.h:207 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 S4 A32])
        (reg:SI 2 r2)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 134 637 638 14 arch/arm/mm/init.c:424 (set (reg/v/f:SI 4 r4 [orig:172 page ] [172])
        (plus:SI (reg/f:SI 4 r4 [orig:245 mem_map ] [245])
            (reg:SI 9 r9 [orig:153 ivtmp.734 ] [153]))) 4 {*arm_addsi3} (nil))

(insn 638 134 136 14 include/linux/page-flags.h:207 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn:TI 136 638 639 14 include/linux/page-flags.h:207 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:172 page ] [172])) 167 {*arm_movsi_insn} (nil))

(insn 639 136 137 14 include/linux/page-flags.h:207 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 132 [0x84])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip)
        (nil)))

(call_insn:TI 137 639 649 14 include/linux/page-flags.h:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 649 137 140 14 include/linux/mm.h:417 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 140 649 139 14 arch/arm/mm/init.c:427 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:172 page ] [172])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:172 page ] [172])
        (nil)))

(insn 139 140 493 14 include/linux/mm.h:417 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:172 page ] [172])
                (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn:TI 493 139 144 14 arch/arm/mm/init.c:427 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 144 493 142 14 arch/arm/mm/init.c:423 discrim 2 (set (reg:SI 9 r9 [orig:153 ivtmp.734 ] [153])
        (plus:SI (reg:SI 9 r9 [orig:153 ivtmp.734 ] [153])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 142 144 642 14 arch/arm/mm/init.c:427 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10f4c580 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 642 142 641 14 arch/arm/mm/init.c:427 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 132 [0x84])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 641 642 640 14 arch/arm/mm/init.c:427 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 640 641 145 14 arch/arm/mm/init.c:427 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 128 [0x80])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 14 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru,dfs_back)
;; Pred edge  13 [100.0%] 
(code_label 145 640 146 15 51 "" [1 uses])

(note 146 145 148 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 148 146 491 15 arch/arm/mm/init.c:423 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:144 start.763 ] [144])
            (reg/v:SI 11 fp [orig:140 start.768 ] [140]))) 219 {*arm_cmpsi_insn} (nil))

(insn 491 148 149 15 include/linux/page-flags.h:207 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 149 491 150 15 arch/arm/mm/init.c:423 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 147)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 15 -> ( 14 16)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  14 [91.0%] 
;; Succ edge  16 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 4 [r4] 6 [r6]
;; live  in  	 2 [r2] 3 [r3] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 4 [r4] 6 [r6]
;; live  kill	

;; Pred edge  15 [9.0%]  (fallthru,loop_exit)
(note 150 149 601 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 601 150 650 16 (set (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
        (reg/v:SI 2 r2 [orig:145 start.762 ] [145])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:145 start.762 ] [145])
        (nil)))

(insn 650 601 152 16 arch/arm/mm/init.c:564 (set (reg:SI 2 r2)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 140 [0x8c])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 152 650 153 16 arch/arm/mm/init.c:564 (set (reg:SI 4 r4 [248])
        (minus:SI (reg:SI 2 r2)
            (reg/v:SI 4 r4 [orig:145 start.762 ] [145]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 153 152 154 16 arch/arm/mm/init.c:564 (set (reg:SI 6 r6 [249])
        (plus:SI (reg:SI 4 r4 [248])
            (reg/v:SI 6 r6 [orig:144 start.763 ] [144]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 4 r4 [248])
        (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
            (nil))))

(insn 154 153 155 16 arch/arm/mm/init.c:564 (set (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
        (reg:SI 6 r6 [249])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 6 r6 [249])
        (nil)))
;; End of basic block 16 -> ( 17)
;; lr  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 12 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 5 [r5] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [28.0%] 
;; Pred edge  16 [100.0%]  (fallthru)
(code_label 155 154 156 17 50 "" [1 uses])

(note 156 155 157 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 157 156 158 17 arch/arm/mm/init.c:567 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:139 start.769 ] [139])
            (reg/v:SI 5 r5 [orig:148 start.759 ] [148]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 158 157 159 17 arch/arm/mm/init.c:567 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 635)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 17 -> ( 26 18)
;; lr  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  26 [4.5%]  (loop_exit)
;; Succ edge  18 [95.5%]  (fallthru)

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 4 [r4]
;; live  in  	 3 [r3] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	

;; Pred edge  17 [95.5%]  (fallthru)
(note 159 158 160 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 160 159 161 18 arch/arm/mm/init.c:567 (set (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
        (reg/v:SI 12 ip [orig:139 start.769 ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:139 start.769 ] [139])
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 11 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 8 [r8] 13 [sp]
;; lr  def 	 8 [r8]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 8 [r8]
;; live  kill	

;; Pred edge  11 [50.0%] 
;; Pred edge  18 [100.0%]  (fallthru)
(code_label 161 160 162 19 49 "" [1 uses])

(note 162 161 163 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 163 162 164 19 arch/arm/mm/init.c:549 (set (reg/v/f:SI 8 r8 [orig:168 res ] [168])
        (plus:SI (reg/v/f:SI 8 r8 [orig:168 res ] [168])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))
;; End of basic block 19 -> ( 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  20 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 19 10) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  19 [100.0%]  (fallthru,dfs_back)
;; Pred edge  10 [100.0%] 
(code_label 164 163 165 20 48 "" [1 uses])

(note 165 164 170 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 170 165 169 20 NOTE_INSN_DELETED)

(insn:TI 169 170 171 20 arch/arm/mm/init.c:549 discrim 1 (set (reg:SI 1 r1 [orig:253 memblock.reserved.cnt ] [253])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 20 [0x14])) [0 memblock.reserved.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 20 [0x14])) [0 memblock.reserved.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 20 [0x14]))) [0 memblock.reserved.cnt+0 S4 A32])
            (nil))))

(insn:TI 171 169 172 20 arch/arm/mm/init.c:549 discrim 1 (set (reg/f:SI 2 r2 [orig:255 memblock.reserved.regions ] [255])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 28 [0x1c]))) [0 memblock.reserved.regions+0 S4 A32])
            (nil))))

(insn:TI 172 171 173 20 arch/arm/mm/init.c:549 discrim 1 (set (reg:SI 2 r2 [254])
        (plus:SI (mult:SI (reg:SI 1 r1 [orig:253 memblock.reserved.cnt ] [253])
                (const_int 8 [0x8]))
            (reg/f:SI 2 r2 [orig:255 memblock.reserved.regions ] [255]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:253 memblock.reserved.cnt ] [253])
        (nil)))

(insn:TI 173 172 174 20 arch/arm/mm/init.c:549 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:168 res ] [168])
            (reg:SI 2 r2 [254]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [254])
        (nil)))

(jump_insn:TI 174 173 175 20 arch/arm/mm/init.c:549 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 166)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 20 -> ( 11 21)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  11 [95.5%] 
;; Succ edge  21 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 20) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 8 [r8] 11 [fp] 24 [cc]
;; live  kill	

;; Pred edge  20 [4.5%]  (fallthru,loop_exit)
(note 175 174 178 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 178 175 607 21 arch/arm/mm/init.c:572 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
            (reg/v:SI 5 r5 [orig:148 start.759 ] [148]))) 219 {*arm_cmpsi_insn} (nil))

(insn 607 178 183 21 (set (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
        (reg/v/f:SI 3 r3 [orig:167 mem ] [167])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:167 mem ] [167])
        (nil)))

(insn:TI 183 607 176 21 arch/arm/mm/init.c:573 (cond_exec (ltu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 8 r8 [orig:154 ivtmp.722 ] [154])
            (ashift:SI (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
                (const_int 5 [0x5])))) 2320 {neon_vornv2di+53} (nil))

(insn 176 183 182 21 arch/arm/mm/init.c:549 discrim 1 (set (reg/v:SI 3 r3 [orig:137 start.772 ] [137])
        (reg/v:SI 4 r4 [orig:145 start.762 ] [145])) 167 {*arm_movsi_insn} (nil))

(insn:TI 182 176 179 21 arch/arm/mm/init.c:573 (cond_exec (ltu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 11 fp [orig:142 totalhigh_pages.765 ] [142])
            (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 179 182 694 21 arch/arm/mm/init.c:572 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 200)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7372 [0x1ccc])
            (nil))))
;; End of basic block 21 -> ( 22 24)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  22 [26.3%]  (fallthru)
;; Succ edge  24 [73.7%] 

;; Start of basic block ( 21) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  21 [26.3%]  (fallthru)
(note 694 179 695 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(jump_insn:TI 695 694 696 22 (set (pc)
        (label_ref 210)) 242 {*arm_jump} (nil))
;; End of basic block 22 -> ( 27)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  27 [100.0%] 

(barrier 696 695 202)

;; Start of basic block ( 24) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 9 [r9] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  24 [91.0%] 
(code_label 202 696 186 23 55 "" [1 uses])

(note 186 202 651 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(insn:TI 651 186 188 23 arch/arm/mm/init.c:424 (set (reg:SI 12 ip)
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 188 651 643 23 arch/arm/mm/init.c:424 (set (reg/f:SI 9 r9 [orig:258 mem_map ] [258])
        (mem/f/c/i:SI (reg:SI 12 ip) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip)
        (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 406) [0 mem_map+0 S4 A32])
            (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
                (nil)))))

(insn:TI 643 188 189 23 include/linux/page-flags.h:207 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn:TI 189 643 199 23 arch/arm/mm/init.c:424 (set (reg/v/f:SI 9 r9 [orig:173 page ] [173])
        (plus:SI (reg/f:SI 9 r9 [orig:258 mem_map ] [258])
            (reg:SI 8 r8 [orig:154 ivtmp.722 ] [154]))) 4 {*arm_addsi3} (nil))

(insn 199 189 191 23 arch/arm/mm/init.c:423 discrim 2 (set (reg:SI 8 r8 [orig:154 ivtmp.722 ] [154])
        (plus:SI (reg:SI 8 r8 [orig:154 ivtmp.722 ] [154])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn:TI 191 199 192 23 include/linux/page-flags.h:207 (set (reg:SI 1 r1)
        (reg/v/f:SI 9 r9 [orig:173 page ] [173])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 192 191 652 23 include/linux/page-flags.h:207 (parallel [
            (call (mem:SI (symbol_ref:SI ("_clear_bit") [flags 0x41] <function_decl 0x512e0080 _clear_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 652 192 195 23 include/linux/mm.h:417 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn:TI 195 652 194 23 arch/arm/mm/init.c:427 (set (reg:SI 0 r0)
        (reg/v/f:SI 9 r9 [orig:173 page ] [173])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 9 r9 [orig:173 page ] [173])
        (nil)))

(insn 194 195 489 23 include/linux/mm.h:417 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 9 r9 [orig:173 page ] [173])
                (const_int 16 [0x10])) [0 <variable>.D.8033.D.8032.D.8031._count.counter+0 S4 A32])
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EQUAL (const_int 1 [0x1])
            (nil))))

(insn:TI 489 194 197 23 arch/arm/mm/init.c:427 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 197 489 644 23 arch/arm/mm/init.c:427 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10f4c580 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 644 197 200 23 arch/arm/mm/init.c:427 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 124 [0x7c])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 23 -> ( 24)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  24 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 23 21) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 4 [r4] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  23 [100.0%]  (fallthru,dfs_back)
;; Pred edge  21 [73.7%] 
(code_label 200 644 201 24 54 "" [1 uses])

(note 201 200 203 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn:TI 203 201 487 24 arch/arm/mm/init.c:423 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
            (reg/v:SI 5 r5 [orig:148 start.759 ] [148]))) 219 {*arm_cmpsi_insn} (nil))

(insn 487 203 198 24 include/linux/page-flags.h:207 (set (reg:SI 0 r0)
        (const_int 10 [0xa])) 167 {*arm_movsi_insn} (nil))

(insn:TI 198 487 204 24 arch/arm/mm/init.c:423 discrim 2 (set (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
        (plus:SI (reg/v:SI 4 r4 [orig:145 start.762 ] [145])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 204 198 205 24 arch/arm/mm/init.c:423 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 202)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 24 -> ( 23 25)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [91.0%] 
;; Succ edge  25 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 5 [r5] 10 [sl] 11 [fp] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5]
;; live  in  	 3 [r3] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  24 [9.0%]  (fallthru,loop_exit)
(note 205 204 207 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 207 205 208 25 arch/arm/mm/init.c:573 (set (reg:SI 5 r5 [261])
        (plus:SI (reg/v:SI 5 r5 [orig:148 start.759 ] [148])
            (reg:SI 11 fp [orig:142 totalhigh_pages.765 ] [142]))) 4 {*arm_addsi3} (nil))

(insn:TI 208 207 209 25 arch/arm/mm/init.c:573 (set (reg:SI 3 r3 [262])
        (minus:SI (reg:SI 5 r5 [261])
            (reg/v:SI 3 r3 [orig:137 start.772 ] [137]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 5 r5 [261])
        (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
            (nil))))

(insn 209 208 697 25 arch/arm/mm/init.c:573 (set (mem/c/i:SI (reg/f:SI 10 sl [405]) [0 totalhigh_pages+0 S4 A32])
        (reg:SI 3 r3 [262])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [262])
        (nil)))

(jump_insn:TI 697 209 698 25 (set (pc)
        (label_ref 210)) 242 {*arm_jump} (nil))
;; End of basic block 25 -> ( 27)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  27 [100.0%] 

(barrier 698 697 635)

;; Start of basic block ( 17) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 3 [r3] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  17 [4.5%]  (loop_exit)
(code_label 635 698 634 26 68 "" [1 uses])

(note 634 635 604 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(insn:TI 604 634 210 26 (set (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
        (reg/v/f:SI 3 r3 [orig:167 mem ] [167])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:167 mem ] [167])
        (nil)))
;; End of basic block 26 -> ( 27)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  27 [100.0%]  (fallthru)

;; Start of basic block ( 9 22 26 25) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  9 [50.0%] 
;; Pred edge  22 [100.0%] 
;; Pred edge  26 [100.0%]  (fallthru)
;; Pred edge  25 [100.0%] 
(code_label 210 604 211 27 47 "" [3 uses])

(note 211 210 212 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 212 211 213 27 arch/arm/mm/init.c:536 (set (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
        (plus:SI (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))
;; End of basic block 27 -> ( 28)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  28 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 27 8) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  27 [100.0%]  (fallthru,dfs_back)
;; Pred edge  8 [100.0%] 
(code_label 213 212 214 28 46 "" [1 uses])

(note 214 213 219 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(note 219 214 218 28 NOTE_INSN_DELETED)

(insn:TI 218 219 220 28 arch/arm/mm/init.c:536 discrim 1 (set (reg:SI 2 r2 [orig:266 memblock.memory.cnt ] [266])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 8 [0x8]))) [0 memblock.memory.cnt+0 S4 A32])
            (nil))))

(insn:TI 220 218 221 28 arch/arm/mm/init.c:536 discrim 1 (set (reg/f:SI 3 r3 [orig:268 memblock.memory.regions ] [268])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [404])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
            (nil))))

(insn:TI 221 220 222 28 arch/arm/mm/init.c:536 discrim 1 (set (reg:SI 3 r3 [267])
        (plus:SI (mult:SI (reg:SI 2 r2 [orig:266 memblock.memory.cnt ] [266])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [orig:268 memblock.memory.regions ] [268]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:266 memblock.memory.cnt ] [266])
        (nil)))

(insn:TI 222 221 223 28 arch/arm/mm/init.c:536 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 6 r6 [orig:167 mem ] [167])
            (reg:SI 3 r3 [267]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [267])
        (nil)))

(jump_insn:TI 223 222 224 28 arch/arm/mm/init.c:536 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 215)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 28 -> ( 9 29)
;; lr  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 6 [r6] 7 [r7] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [91.0%] 
;; Succ edge  29 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 14 [lr]
;; live  kill	

;; Pred edge  28 [9.0%]  (fallthru,loop_exit)
(note 224 223 232 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(note 232 224 580 29 NOTE_INSN_DELETED)

(insn:TI 580 232 236 29 arch/arm/mm/init.c:575 (set (reg/f:SI 12 ip [270])
        (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)
        (nil)))

(insn 236 580 225 29 arch/arm/mm/init.c:620 (set (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 225 236 237 29 arch/arm/mm/init.c:575 (set (reg/f:SI 3 r3 [269])
        (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>)
        (nil)))

(insn 237 225 524 29 arch/arm/mm/init.c:612 (set (reg/v:SI 0 r0 [orig:183 i ] [183])
        (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 524 237 238 29 arch/arm/mm/init.c:612 discrim 1 (set (reg/f:SI 1 r1 [387])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 238 524 228 29 arch/arm/mm/init.c:610 (set (reg/v:SI 6 r6 [orig:184 free_pages ] [184])
        (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 228 238 239 29 arch/arm/mm/init.c:575 (set (reg:SI 5 r5 [orig:272 totalhigh_pages ] [272])
        (mem/c/i:SI (reg/f:SI 12 ip [270]) [0 totalhigh_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [270])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>) [0 totalhigh_pages+0 S4 A32])
            (nil))))

(insn 239 228 579 29 arch/arm/mm/init.c:610 (set (reg/v:SI 4 r4 [orig:185 reserved_pages ] [185])
        (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 579 239 229 29 arch/arm/mm/init.c:620 (set (reg/f:SI 12 ip [276])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(insn:TI 229 579 235 29 arch/arm/mm/init.c:575 (set (reg:SI 14 lr [orig:273 totalram_pages ] [273])
        (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalram_pages") [flags 0xc0] <var_decl 0x11082840 totalram_pages>) [0 totalram_pages+0 S4 A32])
            (nil))))

(insn:TI 235 229 230 29 arch/arm/mm/init.c:620 (set (reg/f:SI 12 ip [orig:189 mem_map.392 ] [189])
        (mem/f/c/i:SI (reg/f:SI 12 ip [276]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn 230 235 233 29 arch/arm/mm/init.c:575 (set (reg:SI 14 lr [274])
        (plus:SI (reg:SI 5 r5 [orig:272 totalhigh_pages ] [272])
            (reg:SI 14 lr [orig:273 totalram_pages ] [273]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 5 r5 [orig:272 totalhigh_pages ] [272])
        (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])
            (nil))))

(insn:TI 233 230 231 29 arch/arm/mm/init.c:612 discrim 1 (set (reg:SI 5 r5 [orig:188 D.25389 ] [188])
        (mem/s/j/c:SI (pre_inc:SI (reg/f:SI 1 r1 [387])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 1 r1 [387])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
            (nil))))

(insn:TI 231 233 699 29 arch/arm/mm/init.c:575 (set (mem/c/i:SI (reg/f:SI 3 r3 [269]) [0 totalram_pages+0 S4 A32])
        (reg:SI 14 lr [274])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [274])
        (expr_list:REG_DEAD (reg/f:SI 3 r3 [269])
            (nil))))

(jump_insn 699 231 700 29 arch/arm/mm/init.c:612 (set (pc)
        (label_ref 295)) 242 {*arm_jump} (nil))
;; End of basic block 29 -> ( 35)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  35 [100.0%] 

(barrier 700 699 297)

;; Start of basic block ( 35) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 7 [r7]
;; live  kill	

;; Pred edge  35 [91.0%] 
(code_label 297 700 242 30 63 "" [1 uses])

(note 242 297 248 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(note 248 242 253 30 NOTE_INSN_DELETED)

(note 253 248 245 30 NOTE_INSN_DELETED)

(insn:TI 245 253 250 30 arch/arm/mm/init.c:584 (set (reg/f:SI 3 r3 [orig:155 D.26304 ] [155])
        (plus:SI (reg/f:SI 1 r1 [387])
            (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))))
        (nil)))

(insn:TI 250 245 246 30 arch/arm/mm/init.c:621 (set (reg:SI 7 r7 [orig:282 <variable>.size ] [282])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:155 D.26304 ] [155])
                (const_int 8 [0x8])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 246 250 251 30 arch/arm/mm/init.c:617 (set (reg:SI 3 r3 [orig:190 D.25376 ] [190])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:155 D.26304 ] [155])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 251 246 247 30 arch/arm/mm/init.c:621 (set (reg:SI 7 r7 [281])
        (plus:SI (reg:SI 3 r3 [orig:190 D.25376 ] [190])
            (reg:SI 7 r7 [orig:282 <variable>.size ] [282]))) 4 {*arm_addsi3} (nil))

(insn:TI 247 251 252 30 arch/arm/mm/init.c:620 (set (reg:SI 3 r3 [279])
        (lshiftrt:SI (reg:SI 3 r3 [orig:190 D.25376 ] [190])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 252 247 249 30 arch/arm/mm/init.c:621 (set (reg:SI 7 r7 [283])
        (lshiftrt:SI (reg:SI 7 r7 [281])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 249 252 254 30 arch/arm/mm/init.c:620 (set (reg/v/f:SI 3 r3 [orig:182 page ] [182])
        (plus:SI (mult:SI (reg:SI 3 r3 [279])
                (const_int 32 [0x20]))
            (reg/f:SI 12 ip [orig:189 mem_map.392 ] [189]))) 270 {*arith_shiftsi} (nil))

(insn:TI 254 249 289 30 arch/arm/mm/init.c:621 (set (reg/v/f:SI 7 r7 [orig:181 end ] [181])
        (plus:SI (mult:SI (reg:SI 7 r7 [283])
                (const_int 32 [0x20]))
            (reg/f:SI 12 ip [orig:189 mem_map.392 ] [189]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 30 -> ( 31)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  31 [100.0%]  (fallthru)

;; Start of basic block ( 30 33) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 8 [r8] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4] 8 [r8] 14 [lr] 24 [cc]
;; live  kill	

;; Pred edge  30 [100.0%]  (fallthru)
;; Pred edge  33 [86.0%]  (dfs_back)
(code_label 289 254 255 31 62 "" [1 uses])

(note 255 289 258 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(note 258 255 257 31 NOTE_INSN_DELETED)

(insn:TI 257 258 272 31 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:165 D.25775 ] [165])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:182 page ] [182]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 272 257 259 31 include/linux/mm.h:356 (set (reg/v/f:SI 14 lr [orig:141 page.767 ] [141])
        (reg/v/f:SI 3 r3 [orig:182 page ] [182])) 167 {*arm_movsi_insn} (nil))

(insn:TI 259 272 262 31 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:165 D.25775 ] [165])
                (const_int 1 [0x1])
                (const_int 10 [0xa]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 8 r8 [orig:165 D.25775 ] [165])
        (nil)))

(insn:TI 262 259 260 31 arch/arm/mm/init.c:625 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:185 reserved_pages ] [185])
            (plus:SI (reg/v:SI 4 r4 [orig:185 reserved_pages ] [185])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (nil))

(jump_insn:TI 260 262 266 31 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 286)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 31 -> ( 32 33)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  32 [50.0%]  (fallthru)
;; Succ edge  33 [50.0%] 

;; Start of basic block ( 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 8 [r8] 14 [lr] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 8 [r8] 14 [lr] 24 [cc]
;; live  kill	

;; Pred edge  31 [50.0%]  (fallthru)
(note 266 260 268 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(note 268 266 267 32 NOTE_INSN_DELETED)

(insn:TI 267 268 269 32 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:162 D.25790 ] [162])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:182 page ] [182]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 269 267 277 32 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:162 D.25790 ] [162])
                (const_int 1 [0x1])
                (const_int 15 [0xf]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 8 r8 [orig:162 D.25790 ] [162])
        (nil)))

(insn:TI 277 269 281 32 include/linux/mm.h:355 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 14 lr [orig:141 page.767 ] [141])
            (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:182 page ] [182])
                    (const_int 28 [0x1c])) [0 <variable>.D.8040.first_page+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn:TI 281 277 282 32 include/linux/mm.h:376 (set (reg:SI 14 lr [orig:163 D.25786 ] [163])
        (mem/v:SI (plus:SI (reg/v/f:SI 14 lr [orig:141 page.767 ] [141])
                (const_int 16 [0x10])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 282 281 285 32 arch/arm/mm/init.c:626 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 14 lr [orig:163 D.25786 ] [163])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [orig:163 D.25786 ] [163])
        (nil)))

(insn:TI 285 282 286 32 arch/arm/mm/init.c:627 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 6 r6 [orig:184 free_pages ] [184])
            (plus:SI (reg/v:SI 6 r6 [orig:184 free_pages ] [184])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))
;; End of basic block 32 -> ( 33)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  33 [100.0%]  (fallthru)

;; Start of basic block ( 32 31) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  32 [100.0%]  (fallthru)
;; Pred edge  31 [50.0%] 
(code_label 286 285 287 33 59 "" [1 uses])

(note 287 286 288 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn:TI 288 287 290 33 arch/arm/mm/init.c:628 (set (reg/v/f:SI 3 r3 [orig:182 page ] [182])
        (plus:SI (reg/v/f:SI 3 r3 [orig:182 page ] [182])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn:TI 290 288 291 33 arch/arm/mm/init.c:629 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:182 page ] [182])
            (reg/v/f:SI 7 r7 [orig:181 end ] [181]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 291 290 292 33 arch/arm/mm/init.c:629 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 289)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 33 -> ( 31 34)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]


;; Succ edge  31 [86.0%]  (dfs_back)
;; Succ edge  34 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 33) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 2 [r2]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	

;; Pred edge  33 [14.0%]  (fallthru,loop_exit)
(note 292 291 293 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn:TI 293 292 294 34 arch/arm/mm/init.c:612 (set (reg/v:SI 0 r0 [orig:183 i ] [183])
        (plus:SI (reg/v:SI 0 r0 [orig:183 i ] [183])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 294 293 295 34 arch/arm/mm/init.c:612 (set (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])
        (plus:SI (reg:SI 2 r2 [orig:156 ivtmp.710 ] [156])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))
;; End of basic block 34 -> ( 35)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  35 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 34 29) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  34 [100.0%]  (fallthru,dfs_back)
;; Pred edge  29 [100.0%] 
(code_label 295 294 296 35 57 "" [1 uses])

(note 296 295 298 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(insn:TI 298 296 299 35 arch/arm/mm/init.c:612 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:183 i ] [183])
            (reg:SI 5 r5 [orig:188 D.25389 ] [188]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 299 298 300 35 arch/arm/mm/init.c:612 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 297)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 35 -> ( 30 36)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  30 [91.0%] 
;; Succ edge  36 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 35) -> 36
;; bb 36 artificial_defs: { }
;; bb 36 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 7 [r7] 8 [r8]
;; live  kill	 14 [lr]

;; Pred edge  35 [9.0%]  (fallthru,loop_exit)
(note 300 299 302 36 [bb 36] NOTE_INSN_BASIC_BLOCK)

(insn:TI 302 300 303 36 arch/arm/mm/init.c:636 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x116e6fc0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x116e6fc0>)
        (nil)))

(call_insn:TI 303 302 304 36 arch/arm/mm/init.c:636 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 304 303 307 36 arch/arm/mm/init.c:637 (set (reg/f:SI 2 r2 [288])
        (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)
        (nil)))

(insn:TI 307 304 578 36 arch/arm/mm/init.c:637 (set (reg/f:SI 3 r3 [290])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn 578 307 478 36 arch/arm/mm/init.c:637 (set (reg:SI 1 r1 [289])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 478 578 306 36 (set (reg/f:SI 8 r8 [385])
        (reg/f:SI 2 r2 [288])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)
        (nil)))

(insn:TI 306 478 335 36 arch/arm/mm/init.c:637 (set (mem/c/i:SI (reg/f:SI 2 r2 [288]) [0 num_physpages+0 S4 A32])
        (reg:SI 1 r1 [289])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [288])
        (expr_list:REG_DEAD (reg:SI 1 r1 [289])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))

(insn 335 306 308 36 arch/arm/mm/init.c:638 discrim 1 (set (reg/f:SI 7 r7 [384])
        (reg/f:SI 3 r3 [290])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn:TI 308 335 701 36 arch/arm/mm/init.c:637 (set (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [290])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [290])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
            (nil))))

(jump_insn 701 308 702 36 arch/arm/mm/init.c:638 (set (pc)
        (label_ref 330)) 242 {*arm_jump} (nil))
;; End of basic block 36 -> ( 38)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  38 [100.0%] 

(barrier 702 701 334)

;; Start of basic block ( 38) -> 37
;; bb 37 artificial_defs: { }
;; bb 37 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  38 [0.0%] 
(code_label 334 702 311 37 65 "" [1 uses])

(note 311 334 315 37 [bb 37] NOTE_INSN_BASIC_BLOCK)

(note 315 311 326 37 NOTE_INSN_DELETED)

(note 326 315 312 37 NOTE_INSN_DELETED)

(insn:TI 312 326 313 37 include/linux/memblock.h:129 (set (reg:SI 0 r0 [orig:160 D.25802 ] [160])
        (mem/s/j:SI (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.base+0 S4 A32])
        (nil)))

(insn:TI 313 312 316 37 arch/arm/mm/init.c:640 (set (reg:SI 1 r1 [orig:292 <variable>.size ] [292])
        (mem/s/j:SI (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
                (const_int -4 [0xfffffffffffffffc])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
                (const_int -4 [0xfffffffffffffffc])) [0 <variable>.size+0 S4 A32])
        (nil)))

(insn:TI 316 313 322 37 arch/arm/mm/init.c:640 (set (reg:SI 2 r2 [295])
        (plus:SI (reg:SI 0 r0 [orig:160 D.25802 ] [160])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 322 316 317 37 arch/arm/mm/init.c:641 (set (reg:SI 3 r3 [orig:299 num_physpages ] [299])
        (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>) [0 num_physpages+0 S4 A32])
            (nil))))

(insn:TI 317 322 314 37 arch/arm/mm/init.c:640 (set (reg:SI 2 r2 [294])
        (plus:SI (reg:SI 2 r2 [295])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 0 r0 [orig:160 D.25802 ] [160])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 314 317 484 37 arch/arm/mm/init.c:640 (set (reg:SI 1 r1 [291])
        (plus:SI (reg:SI 0 r0 [orig:160 D.25802 ] [160])
            (reg:SI 1 r1 [orig:292 <variable>.size ] [292]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:160 D.25802 ] [160])
        (nil)))

(insn:TI 484 314 318 37 arch/arm/mm/init.c:642 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x116e5440>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 318 484 319 37 arch/arm/mm/init.c:640 (set (reg:SI 2 r2 [296])
        (lshiftrt:SI (reg:SI 2 r2 [294])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 319 318 323 37 arch/arm/mm/init.c:640 (set (reg/v:SI 1 r1 [orig:180 pages ] [180])
        (minus:SI (lshiftrt:SI (reg:SI 1 r1 [291])
                (const_int 12 [0xc]))
            (reg:SI 2 r2 [296]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 2 r2 [296])
        (nil)))

(insn:TI 323 319 324 37 arch/arm/mm/init.c:641 (set (reg:SI 3 r3 [300])
        (plus:SI (reg/v:SI 1 r1 [orig:180 pages ] [180])
            (reg:SI 3 r3 [orig:299 num_physpages ] [299]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])
        (nil)))

(insn 324 323 328 37 arch/arm/mm/init.c:641 (set (mem/c/i:SI (reg/f:SI 8 r8 [385]) [0 num_physpages+0 S4 A32])
        (reg:SI 3 r3 [300])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [300])
        (nil)))

(insn:TI 328 324 329 37 arch/arm/mm/init.c:642 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg/v:SI 1 r1 [orig:180 pages ] [180])
            (const_int 8 [0x8]))) 117 {*arm_shiftsi3} (nil))

(call_insn:TI 329 328 330 37 arch/arm/mm/init.c:642 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 37 -> ( 38)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  38 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 37 36) -> 38
;; bb 38 artificial_defs: { }
;; bb 38 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  37 [100.0%]  (fallthru,dfs_back)
;; Pred edge  36 [100.0%] 
(code_label 330 329 331 38 64 "" [1 uses])

(note 331 330 338 38 [bb 38] NOTE_INSN_BASIC_BLOCK)

(note 338 331 337 38 NOTE_INSN_DELETED)

(insn:TI 337 338 332 38 arch/arm/mm/init.c:638 discrim 1 (set (reg:SI 1 r1 [orig:306 memblock.memory.cnt ] [306])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [384])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 7 r7 [384])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 8 [0x8]))) [0 memblock.memory.cnt+0 S4 A32])
            (nil))))

(insn 332 337 339 38 arch/arm/mm/init.c:642 (set (reg/v/f:SI 2 r2 [orig:136 reg.773 ] [136])
        (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])) 167 {*arm_movsi_insn} (nil))

(insn:TI 339 332 333 38 arch/arm/mm/init.c:638 discrim 1 (set (reg/f:SI 3 r3 [orig:308 memblock.memory.regions ] [308])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [384])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 7 r7 [384])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
            (nil))))

(insn 333 339 340 38 arch/arm/mm/init.c:642 (set (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
        (plus:SI (reg:SI 5 r5 [orig:157 ivtmp.692 ] [157])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn:TI 340 333 341 38 arch/arm/mm/init.c:638 discrim 1 (set (reg:SI 3 r3 [307])
        (plus:SI (mult:SI (reg:SI 1 r1 [orig:306 memblock.memory.cnt ] [306])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [orig:308 memblock.memory.regions ] [308]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:306 memblock.memory.cnt ] [306])
        (nil)))

(insn:TI 341 340 342 38 arch/arm/mm/init.c:638 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 2 r2 [orig:136 reg.773 ] [136])
            (reg:SI 3 r3 [307]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [307])
        (expr_list:REG_DEAD (reg/v/f:SI 2 r2 [orig:136 reg.773 ] [136])
            (nil))))

(jump_insn:TI 342 341 343 38 arch/arm/mm/init.c:638 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 334)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 38 -> ( 37 39)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  37 [0.0%] 
;; Succ edge  39 [100.0%]  (fallthru,loop_exit)

;; Start of basic block ( 38) -> 39
;; bb 39 artificial_defs: { }
;; bb 39 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  38 [100.0%]  (fallthru,loop_exit)
(note 343 342 347 39 [bb 39] NOTE_INSN_BASIC_BLOCK)

(note 347 343 355 39 NOTE_INSN_DELETED)

(note 355 347 356 39 NOTE_INSN_DELETED)

(note 356 355 357 39 NOTE_INSN_DELETED)

(note 357 356 370 39 NOTE_INSN_DELETED)

(note 370 357 418 39 NOTE_INSN_DELETED)

(note 418 370 419 39 NOTE_INSN_DELETED)

(note 419 418 432 39 NOTE_INSN_DELETED)

(note 432 419 433 39 NOTE_INSN_DELETED)

(note 433 432 446 39 NOTE_INSN_DELETED)

(note 446 433 447 39 NOTE_INSN_DELETED)

(note 447 446 460 39 NOTE_INSN_DELETED)

(note 460 447 461 39 NOTE_INSN_DELETED)

(note 461 460 409 39 NOTE_INSN_DELETED)

(note 409 461 423 39 NOTE_INSN_DELETED)

(note 423 409 437 39 NOTE_INSN_DELETED)

(note 437 423 451 39 NOTE_INSN_DELETED)

(note 451 437 397 39 NOTE_INSN_DELETED)

(note 397 451 422 39 NOTE_INSN_DELETED)

(note 422 397 577 39 NOTE_INSN_DELETED)

(insn:TI 577 422 348 39 arch/arm/mm/init.c:644 (set (reg/f:SI 3 r3 [383])
        (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>)
        (nil)))

(insn:TI 348 577 573 39 arch/arm/mm/init.c:644 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x116e82a0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x116e82a0>)
        (nil)))

(insn:TI 573 348 346 39 arch/arm/mm/init.c:656 (set (reg/f:SI 7 r7 [346])
        (const:SI (plus:SI (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
                (const_int 1023 [0x3ff])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
                (const_int 1023 [0x3ff])))
        (nil)))

(insn:TI 346 573 571 39 arch/arm/mm/init.c:644 (set (reg:SI 1 r1 [orig:312 num_physpages ] [312])
        (mem/c/i:SI (reg/f:SI 3 r3 [383]) [0 num_physpages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [383])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("num_physpages") [flags 0xc0] <var_decl 0x110aed80 num_physpages>) [0 num_physpages+0 S4 A32])
            (nil))))

(insn:TI 571 346 570 39 arch/arm/mm/init.c:656 (set (reg/f:SI 5 r5 [366])
        (const:SI (plus:SI (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
                (const_int 1023 [0x3ff])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
                (const_int 1023 [0x3ff])))
        (nil)))

(insn:TI 570 571 349 39 arch/arm/mm/init.c:656 (set (reg/f:SI 8 r8 [376])
        (const:SI (plus:SI (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
                (const_int 1023 [0x3ff])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
                (const_int 1023 [0x3ff])))
        (nil)))

(insn:TI 349 570 350 39 arch/arm/mm/init.c:644 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg:SI 1 r1 [orig:312 num_physpages ] [312])
            (const_int 8 [0x8]))) 117 {*arm_shiftsi3} (nil))

(call_insn:TI 350 349 576 39 arch/arm/mm/init.c:644 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 576 350 575 39 include/asm-generic/atomic-long.h:148 (set (reg/f:SI 1 r1 [orig:159 D.25815 ] [159])
        (symbol_ref:SI ("vm_stat") [flags 0xc0] <var_decl 0x1119ef00 vm_stat>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("vm_stat") [flags 0xc0] <var_decl 0x1119ef00 vm_stat>)
        (nil)))

(insn:TI 575 576 364 39 arch/arm/mm/init.c:646 (set (reg/f:SI 12 ip [318])
        (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>)
        (nil)))

(insn 364 575 365 39 arch/arm/mm/init.c:646 (set (reg:SI 2 r2)
        (ashift:SI (reg/v:SI 6 r6 [orig:184 free_pages ] [184])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 6 r6 [orig:184 free_pages ] [184])
        (nil)))

(insn:TI 365 364 362 39 arch/arm/mm/init.c:646 (set (reg:SI 3 r3)
        (ashift:SI (reg/v:SI 4 r4 [orig:185 reserved_pages ] [185])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:185 reserved_pages ] [185])
        (nil)))

(insn 362 365 352 39 arch/arm/mm/init.c:646 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x110f07e0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x110f07e0>)
        (nil)))

(insn:TI 352 362 383 39 include/asm-generic/atomic-long.h:148 (set (reg/v:SI 1 r1 [orig:158 x ] [158])
        (mem/v:SI (reg/f:SI 1 r1 [orig:159 D.25815 ] [159]) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/v:SI (symbol_ref:SI ("vm_stat") [flags 0xc0] <var_decl 0x1119ef00 vm_stat>) [0 S4 A32])
        (nil)))

(insn 383 352 359 39 arch/arm/mm/init.c:656 (set (reg:SI 4 r4 [330])
        (const_int 14 [0xe])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 14 [0xe])
        (nil)))

(insn:TI 359 383 354 39 arch/arm/mm/init.c:646 (set (reg:SI 12 ip [orig:320 totalhigh_pages ] [320])
        (mem/c/i:SI (reg/f:SI 12 ip [318]) [0 totalhigh_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("totalhigh_pages") [flags 0xc0] <var_decl 0x113a4600 totalhigh_pages>) [0 totalhigh_pages+0 S4 A32])
        (nil)))

(insn:TI 354 359 572 39 arch/arm/mm/init.c:646 (set (reg:SI 1 r1 [314])
        (smax:SI (reg/v:SI 1 r1 [orig:158 x ] [158])
            (const_int 0 [0x0]))) 101 {*smax_0} (nil))

(insn 572 354 363 39 arch/arm/mm/init.c:656 (set (reg/f:SI 6 r6 [356])
        (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (const_int 1023 [0x3ff])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const:SI (plus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (const_int 1023 [0x3ff])))
        (nil)))

(insn:TI 363 572 360 39 arch/arm/mm/init.c:646 (set (reg:SI 1 r1)
        (ashift:SI (reg:SI 1 r1 [314])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (nil))

(insn 360 363 361 39 arch/arm/mm/init.c:646 (set (reg:SI 12 ip [319])
        (ashift:SI (reg:SI 12 ip [orig:320 totalhigh_pages ] [320])
            (const_int 2 [0x2]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (nil)))

(insn:TI 361 360 366 39 arch/arm/mm/init.c:646 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [319])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [319])
        (nil)))

(call_insn 366 361 574 39 arch/arm/mm/init.c:646 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 574 366 468 39 arch/arm/mm/init.c:687 (set (reg/f:SI 2 r2 [321])
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>)
        (nil)))

(insn 468 574 654 39 arch/arm/mm/init.c:656 (set (reg:SI 3 r3)
        (const_int 4 [0x4])) 167 {*arm_movsi_insn} (nil))

(insn:TI 654 468 391 39 arch/arm/mm/init.c:656 (set (reg:SI 1 r1)
        (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)) 167 {*arm_movsi_insn} (nil))

(insn 391 654 368 39 arch/arm/mm/init.c:656 (set (reg:SI 14 lr [334])
        (const_int -1073741824 [0xffffffffc0000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1073741824 [0xffffffffc0000000])
        (nil)))

(insn:TI 368 391 429 39 arch/arm/mm/init.c:687 (set (reg:SI 11 fp [orig:187 high_memory.397 ] [187])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [321]) [0 high_memory+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [321])
        (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 40 [0x28])) [0 S4 A32])
            (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>) [0 high_memory+0 S4 A32])
                (nil)))))

(insn 429 368 653 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [355])
        (minus:SI (reg/f:SI 6 r6 [356])
            (reg:SI 1 r1))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
                (const:SI (plus:SI (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
                        (const_int -1023 [0xfffffffffffffc01]))))
            (nil))))

(insn:TI 653 429 431 39 arch/arm/mm/init.c:656 (set (reg:SI 2 r2)
        (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)) 167 {*arm_movsi_insn} (nil))

(insn 431 653 369 39 arch/arm/mm/init.c:656 (set (reg:SI 0 r0 [361])
        (plus:SI (reg:SI 6 r6 [355])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn:TI 369 431 656 39 arch/arm/mm/init.c:687 (set (reg:SI 12 ip [322])
        (plus:SI (reg:SI 11 fp [orig:187 high_memory.397 ] [187])
            (const_int 8388608 [0x800000]))) 4 {*arm_addsi3} (nil))

(insn 656 369 415 39 arch/arm/mm/init.c:656 (set (reg:SI 1 r1)
        (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 415 656 655 39 arch/arm/mm/init.c:656 (set (reg:SI 7 r7 [345])
        (minus:SI (reg/f:SI 7 r7 [346])
            (reg:SI 2 r2))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
                (const:SI (plus:SI (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)
                        (const_int -1023 [0xfffffffffffffc01]))))
            (nil))))

(insn 655 415 417 39 arch/arm/mm/init.c:656 (set (reg:SI 2 r2)
        (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 417 655 664 39 arch/arm/mm/init.c:656 (set (reg:SI 10 sl [351])
        (plus:SI (reg:SI 7 r7 [345])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn 664 417 665 39 arch/arm/mm/init.c:656 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 7 r7 [345])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 665 664 666 39 arch/arm/mm/init.c:656 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 7 r7 [349])
            (plus:SI (reg:SI 10 sl [351])
                (const_int 3 [0x3])))) 2268 {neon_vornv2di+1} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 10 sl [351])
            (nil))))

(insn 666 665 667 39 arch/arm/mm/init.c:656 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 6 r6 [355])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 667 666 543 39 arch/arm/mm/init.c:656 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 6 r6 [359])
            (plus:SI (reg:SI 0 r0 [361])
                (const_int 3 [0x3])))) 2268 {neon_vornv2di+1} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 0 r0 [361])
            (nil))))

(insn 543 667 421 39 arch/arm/mm/init.c:687 (set (reg:SI 12 ip [orig:186 D.25409 ] [186])
        (lshiftrt:SI (reg:SI 12 ip [322])
            (const_int 23 [0x17]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 421 543 657 39 arch/arm/mm/init.c:656 (set (reg:SI 7 r7)
        (ashiftrt:SI (reg:SI 7 r7 [349])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 S4 A32])
        (expr_list:REG_EQUAL (div:SI (reg:SI 7 r7 [345])
                (const_int 1024 [0x400]))
            (nil))))

(insn 657 421 569 39 arch/arm/mm/init.c:656 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 80 [0x50])) [0 S4 A32])
        (reg:SI 7 r7)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 7 r7)
        (nil)))

(insn:TI 569 657 544 39 arch/arm/mm/init.c:656 (set (reg:SI 7 r7 [325])
        (const_int -1048576 [0xfffffffffff00000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1048576 [0xfffffffffff00000])
        (nil)))

(insn 544 569 388 39 arch/arm/mm/init.c:687 (set (reg:SI 12 ip [orig:186 D.25409 ] [186])
        (ashift:SI (reg:SI 12 ip [orig:186 D.25409 ] [186])
            (const_int 23 [0x17]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 388 544 385 39 arch/arm/mm/init.c:656 (set (reg:SI 10 sl [332])
        (minus:SI (const_int -134217728 [0xfffffffff8000000])
            (reg:SI 12 ip [orig:186 D.25409 ] [186]))) 28 {*arm_subsi3_insn} (nil))

(insn 385 388 659 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 24 [0x18])) [0 S4 A32])
        (reg:SI 12 ip [orig:186 D.25409 ] [186])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:186 D.25409 ] [186])
        (nil)))

(insn:TI 659 385 443 39 arch/arm/mm/init.c:656 (set (reg:SI 12 ip)
        (const_int -1075838976 [0xffffffffbfe00000])) 167 {*arm_movsi_insn} (nil))

(insn 443 659 374 39 arch/arm/mm/init.c:656 (set (reg:SI 5 r5 [365])
        (minus:SI (reg/f:SI 5 r5 [366])
            (reg:SI 2 r2))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
                (const:SI (plus:SI (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)
                        (const_int -1023 [0xfffffffffffffc01]))))
            (nil))))

(insn:TI 374 443 435 39 arch/arm/mm/init.c:656 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 7 r7 [325])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 7 r7 [325])
        (expr_list:REG_EQUAL (const_int -1048576 [0xfffffffffff00000])
            (nil))))

(insn 435 374 568 39 arch/arm/mm/init.c:656 (set (reg:SI 7 r7 [362])
        (ashiftrt:SI (reg:SI 6 r6 [359])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 6 r6 [359])
        (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 92 [0x5c])) [0 S4 A32])
            (expr_list:REG_EQUAL (div:SI (reg:SI 6 r6 [355])
                    (const_int 1024 [0x400]))
                (nil)))))

(insn:TI 568 435 457 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [326])
        (const_int -131072 [0xfffffffffffe0000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -131072 [0xfffffffffffe0000])
        (nil)))

(insn 457 568 668 39 arch/arm/mm/init.c:656 (set (reg:SI 8 r8 [375])
        (minus:SI (reg/f:SI 8 r8 [376])
            (reg:SI 1 r1))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_EQUIV (minus:SI (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
                (const:SI (plus:SI (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)
                        (const_int -1023 [0xfffffffffffffc01]))))
            (nil))))

(insn:TI 668 457 445 39 arch/arm/mm/init.c:656 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [365])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn 445 668 398 39 arch/arm/mm/init.c:656 (set (reg:SI 1 r1 [371])
        (plus:SI (reg:SI 5 r5 [365])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn:TI 398 445 669 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 48 [0x30])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip)
        (expr_list:REG_EQUAL (const_int -1075838976 [0xffffffffbfe00000])
            (nil))))

(insn 669 398 376 39 arch/arm/mm/init.c:656 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 5 r5 [369])
            (plus:SI (reg:SI 1 r1 [371])
                (const_int 3 [0x3])))) 2268 {neon_vornv2di+1} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 1 r1 [371])
            (nil))))

(insn:TI 376 669 567 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 6 r6 [326])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 6 r6 [326])
        (expr_list:REG_EQUAL (const_int -131072 [0xfffffffffffe0000])
            (nil))))

(insn 567 376 378 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [327])
        (const_int 896 [0x380])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 896 [0x380])
        (nil)))

(insn:TI 378 567 566 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 6 r6 [327])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 6 r6 [327])
        (expr_list:REG_EQUAL (const_int 896 [0x380])
            (nil))))

(insn 566 378 380 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [328])
        (const_int -16777216 [0xffffffffff000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -16777216 [0xffffffffff000000])
        (nil)))

(insn:TI 380 566 565 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 6 r6 [328])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -16777216 [0xffffffffff000000])
        (nil)))

(insn 565 380 382 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [329])
        (plus:SI (reg:SI 6 r6 [329])
            (const_int 14680064 [0xe00000]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int -2097152 [0xffffffffffe00000])
        (nil)))

(insn:TI 382 565 564 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg:SI 6 r6 [329])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -2097152 [0xffffffffffe00000])
        (nil)))

(insn 564 382 387 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [331])
        (plus:SI (reg:SI 6 r6 [331])
            (const_int -132120576 [0xfffffffff8200000]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int -134217728 [0xfffffffff8000000])
        (nil)))

(insn:TI 387 564 563 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 28 [0x1c])) [0 S4 A32])
        (reg:SI 6 r6 [331])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -134217728 [0xfffffffff8000000])
        (nil)))

(insn 563 387 402 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [339])
        (plus:SI (reg:SI 6 r6 [339])
            (const_int 134217730 [0x8000002]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (const_int 2 [0x2])
        (nil)))

(insn:TI 402 563 562 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 56 [0x38])) [0 S4 A32])
        (reg:SI 6 r6 [339])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 6 r6 [339])
        (expr_list:REG_EQUAL (const_int 2 [0x2])
            (nil))))

(insn 562 402 404 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6 [340])
        (const_int -1090519040 [0xffffffffbf000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1090519040 [0xffffffffbf000000])
        (nil)))

(insn:TI 404 562 658 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 60 [0x3c])) [0 S4 A32])
        (reg:SI 6 r6 [340])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1090519040 [0xffffffffbf000000])
        (nil)))

(insn 658 404 406 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6)
        (plus:SI (reg:SI 6 r6)
            (const_int 14680064 [0xe00000]))) 4 {*arm_addsi3} (nil))

(insn:TI 406 658 459 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 S4 A32])
        (reg:SI 6 r6)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_EQUAL (const_int -1075838976 [0xffffffffbfe00000])
            (nil))))

(insn 459 406 561 39 arch/arm/mm/init.c:656 (set (reg:SI 2 r2 [381])
        (plus:SI (reg:SI 8 r8 [375])
            (const_int 1020 [0x3fc]))) 4 {*arm_addsi3} (nil))

(insn:TI 561 459 670 39 arch/arm/mm/init.c:656 (set (reg/f:SI 6 r6 [344])
        (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
        (nil)))

(insn 670 561 661 39 arch/arm/mm/init.c:656 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [375])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 661 670 449 39 arch/arm/mm/init.c:656 (set (reg:SI 12 ip)
        (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)) 167 {*arm_movsi_insn} (nil))

(insn 449 661 450 39 arch/arm/mm/init.c:656 (set (reg:SI 5 r5 [372])
        (ashiftrt:SI (reg:SI 5 r5 [369])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 104 [0x68])) [0 S4 A32])
        (expr_list:REG_EQUAL (div:SI (reg:SI 5 r5 [365])
                (const_int 1024 [0x400]))
            (nil))))

(insn:TI 450 449 671 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 104 [0x68])) [0 S4 A32])
        (reg:SI 5 r5 [372])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 5 r5 [372])
        (nil)))

(insn 671 450 412 39 arch/arm/mm/init.c:656 (cond_exec (lt (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 8 r8 [379])
            (plus:SI (reg:SI 2 r2 [381])
                (const_int 3 [0x3])))) 2268 {neon_vornv2di+1} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 2 r2 [381])
            (nil))))

(insn:TI 412 671 394 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 76 [0x4c])) [0 S4 A32])
        (reg/f:SI 6 r6 [344])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 6 r6 [344])
        (expr_list:REG_EQUAL (symbol_ref:SI ("_etext") [flags 0xc0] <var_decl 0x113f9780 _etext>)
            (nil))))

(insn 394 412 560 39 arch/arm/mm/init.c:656 (set (reg:SI 9 r9 [335])
        (plus:SI (reg:SI 11 fp [orig:187 high_memory.397 ] [187])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn:TI 560 394 389 39 arch/arm/mm/init.c:656 (set (reg/f:SI 6 r6 [354])
        (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
        (nil)))

(insn 389 560 558 39 arch/arm/mm/init.c:656 (set (reg:SI 10 sl [333])
        (lshiftrt:SI (reg:SI 10 sl [332])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 S4 A32])
        (nil)))

(insn:TI 558 389 395 39 arch/arm/mm/init.c:656 (set (reg/f:SI 5 r5 [374])
        (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
        (nil)))

(insn 395 558 424 39 arch/arm/mm/init.c:656 (set (reg:SI 9 r9 [336])
        (lshiftrt:SI (reg:SI 9 r9 [335])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 S4 A32])
        (nil)))

(insn:TI 424 395 463 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 84 [0x54])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip)
        (expr_list:REG_EQUAL (symbol_ref:SI ("__init_begin") [flags 0xc0] <var_decl 0x11478180 __init_begin>)
            (nil))))

(insn 463 424 426 39 arch/arm/mm/init.c:656 (set (reg:SI 8 r8 [382])
        (ashiftrt:SI (reg:SI 8 r8 [379])
            (const_int 10 [0xa]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 116 [0x74])) [0 S4 A32])
        (expr_list:REG_EQUAL (div:SI (reg:SI 8 r8 [375])
                (const_int 1024 [0x400]))
            (nil))))

(insn:TI 426 463 559 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 88 [0x58])) [0 S4 A32])
        (reg/f:SI 6 r6 [354])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 6 r6 [354])
        (expr_list:REG_EQUAL (symbol_ref:SI ("__init_end") [flags 0xc0] <var_decl 0x114781e0 __init_end>)
            (nil))))

(insn:TI 559 426 663 39 arch/arm/mm/init.c:656 (set (reg/f:SI 6 r6 [364])
        (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
        (nil)))

(insn:TI 663 559 466 39 arch/arm/mm/init.c:656 (set (reg:SI 12 ip)
        (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 466 663 440 39 arch/arm/mm/init.c:656 (set (reg:SI 1 r1)
        (const_int -65536 [0xffffffffffff0000])) 167 {*arm_movsi_insn} (nil))

(insn:TI 440 466 660 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 100 [0x64])) [0 S4 A32])
        (reg/f:SI 6 r6 [364])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 6 r6 [364])
        (expr_list:REG_EQUAL (symbol_ref:SI ("_edata") [flags 0xc0] <var_decl 0x11478060 _edata>)
            (nil))))

(insn:TI 660 440 467 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6)
        (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 467 660 465 39 arch/arm/mm/init.c:656 (set (reg:SI 2 r2)
        (const_int -61440 [0xffffffffffff1000])) 167 {*arm_movsi_insn} (nil))

(insn:TI 465 467 410 39 arch/arm/mm/init.c:656 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x1161bc00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x1161bc00>)
        (nil)))

(insn:TI 410 465 662 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 72 [0x48])) [0 S4 A32])
        (reg:SI 6 r6)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 6 r6)
        (expr_list:REG_EQUAL (symbol_ref:SI ("_text") [flags 0xc0] <var_decl 0x113f96c0 _text>)
            (nil))))

(insn:TI 662 410 390 39 arch/arm/mm/init.c:656 (set (reg:SI 6 r6)
        (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 390 662 396 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 S4 A32])
        (reg:SI 10 sl [333])) 167 {*arm_movsi_insn} (nil))

(insn:TI 396 390 400 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 44 [0x2c])) [0 S4 A32])
        (reg:SI 9 r9 [336])) 167 {*arm_movsi_insn} (nil))

(insn:TI 400 396 408 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 52 [0x34])) [0 S4 A32])
        (reg:SI 14 lr [334])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1073741824 [0xffffffffc0000000])
        (nil)))

(insn:TI 408 400 436 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 68 [0x44])) [0 S4 A32])
        (reg:SI 4 r4 [330])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 14 [0xe])
        (nil)))

(insn:TI 436 408 454 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 92 [0x5c])) [0 S4 A32])
        (reg:SI 7 r7 [362])) 167 {*arm_movsi_insn} (nil))

(insn:TI 454 436 464 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 112 [0x70])) [0 S4 A32])
        (reg/f:SI 5 r5 [374])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("__bss_stop") [flags 0xc0] <var_decl 0x11478120 __bss_stop>)
        (nil)))

(insn:TI 464 454 384 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 116 [0x74])) [0 S4 A32])
        (reg:SI 8 r8 [382])) 167 {*arm_movsi_insn} (nil))

(insn:TI 384 464 392 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 S4 A32])
        (reg:SI 4 r4 [330])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 14 [0xe])
        (nil)))

(insn:TI 392 384 393 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 36 [0x24])) [0 S4 A32])
        (reg:SI 14 lr [334])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [334])
        (expr_list:REG_EQUAL (const_int -1073741824 [0xffffffffc0000000])
            (nil))))

(insn:TI 393 392 438 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 S4 A32])
        (reg:SI 11 fp [orig:187 high_memory.397 ] [187])) 167 {*arm_movsi_insn} (nil))

(insn:TI 438 393 452 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 96 [0x60])) [0 S4 A32])
        (reg:SI 6 r6)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("_sdata") [flags 0xc0] <var_decl 0x11478000 _sdata>)
        (nil)))

(insn:TI 452 438 469 39 arch/arm/mm/init.c:656 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 108 [0x6c])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip)
        (expr_list:REG_EQUAL (symbol_ref:SI ("__bss_start") [flags 0xc0] <var_decl 0x114780c0 __bss_start>)
            (nil))))

(call_insn 469 452 680 39 arch/arm/mm/init.c:656 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 120 [0x78])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 680 469 681 39 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 681 680 682 39 arch/arm/mm/init.c:730 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 39 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 682 681 557)

(note 557 682 636 NOTE_INSN_DELETED)

(note 636 557 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function bootmem_init (bootmem_init)[0:1354] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 29 count 46 (  2.2)


bootmem_init

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={23d,18u} r1={27d,24u,1d} r2={25d,21u,1d} r3={29d,34u} r4={3d,14u} r5={3d,7u} r6={3d,6u} r7={2d,4u} r8={6d,14u} r9={3d,5u} r10={3d,6u,4d} r12={16d,12u,1d} r13={3d,40u,4d} r14={11d,5u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={23d,9u} r25={4d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 1184{950d,219u,15e} in 138{131 regular + 7 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 0 )->[2]->( 5 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]

( 5 )->[3]->( 5 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 5 [r5] 6 [r6] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 5 [r5] 6 [r6] 14 [lr] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]

( 3 )->[4]->( 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]

( 4 3 2 )->[5]->( 3 6 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]

( 5 )->[6]->( 9 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 10 [sl]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 9 )->[7]->( 10 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 7 )->[8]->( 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 8 6 )->[9]->( 7 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 7 9 )->[10]->( 13 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 8 [r8] 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8] 10 [sl]
;; live  kill	
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 13 )->[11]->( 14 12 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 11 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 12 10 )->[13]->( 11 14 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 13 11 )->[14]->( 19 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 19 )->[15]->( 16 17 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 15 )->[16]->( 17 )
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip]
;; live  kill	 24 [cc]
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 15 16 )->[17]->( 18 19 )
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 17 )->[18]->( 19 )
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 24 [cc]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 18 17 14 )->[19]->( 15 20 )
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 19 )->[20]->( 1 )
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 20 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 232 to worklist
  Adding insn 226 to worklist
  Adding insn 26 to worklist
  Adding insn 37 to worklist
  Adding insn 234 to worklist
  Adding insn 56 to worklist
  Adding insn 48 to worklist
  Adding insn 41 to worklist
  Adding insn 71 to worklist
  Adding insn 78 to worklist
  Adding insn 90 to worklist
  Adding insn 236 to worklist
  Adding insn 107 to worklist
  Adding insn 115 to worklist
  Adding insn 127 to worklist
  Adding insn 238 to worklist
  Adding insn 142 to worklist
  Adding insn 136 to worklist
  Adding insn 134 to worklist
  Adding insn 133 to worklist
  Adding insn 160 to worklist
  Adding insn 166 to worklist
  Adding insn 170 to worklist
  Adding insn 176 to worklist
  Adding insn 184 to worklist
  Adding insn 230 to worklist
  Adding insn 199 to worklist
  Adding insn 197 to worklist
  Adding insn 195 to worklist
  Adding insn 192 to worklist
Finished finding needed instructions:
processing block 4 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
  Adding insn 28 to worklist
processing block 3 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
  Adding insn 25 to worklist
  Adding insn 23 to worklist
  Adding insn 21 to worklist
  Adding insn 22 to worklist
  Adding insn 18 to worklist
  Adding insn 20 to worklist
  Adding insn 32 to worklist
  Adding insn 24 to worklist
  Adding insn 19 to worklist
  Adding insn 17 to worklist
processing block 18 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 175 to worklist
  Adding insn 173 to worklist
  Adding insn 172 to worklist
processing block 17 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 169 to worklist
processing block 16 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 165 to worklist
  Adding insn 163 to worklist
  Adding insn 224 to worklist
  Adding insn 164 to worklist
processing block 15 lr out =  1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 159 to worklist
  Adding insn 158 to worklist
  Adding insn 155 to worklist
  Adding insn 157 to worklist
  Adding insn 154 to worklist
  Adding insn 153 to worklist
  Adding insn 179 to worklist
  Adding insn 156 to worklist
  Adding insn 152 to worklist
processing block 20 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 221 to worklist
  Adding insn 222 to worklist
  Adding insn 223 to worklist
  Adding insn 194 to worklist
  Adding insn 191 to worklist
  Adding insn 189 to worklist
  Adding insn 188 to worklist
  Adding insn 190 to worklist
processing block 19 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 183 to worklist
processing block 14 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 148 to worklist
  Adding insn 144 to worklist
  Adding insn 146 to worklist
  Adding insn 141 to worklist
  Adding insn 137 to worklist
  Adding insn 135 to worklist
  Adding insn 143 to worklist
  Adding insn 131 to worklist
  Adding insn 132 to worklist
  Adding insn 130 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
processing block 11 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 113 to worklist
  Adding insn 106 to worklist
  Adding insn 110 to worklist
  Adding insn 105 to worklist
  Adding insn 104 to worklist
  Adding insn 103 to worklist
  Adding insn 112 to worklist
  Adding insn 102 to worklist
  Adding insn 99 to worklist
  Adding insn 101 to worklist
  Adding insn 116 to worklist
  Adding insn 100 to worklist
  Adding insn 98 to worklist
processing block 13 lr out =  2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 126 to worklist
  Adding insn 125 to worklist
  Adding insn 124 to worklist
  Adding insn 122 to worklist
  Adding insn 208 to worklist
processing block 10 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 94 to worklist
  Adding insn 120 to worklist
  Adding insn 93 to worklist
processing block 8 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
processing block 7 lr out =  0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 77 to worklist
  Adding insn 70 to worklist
  Adding insn 76 to worklist
  Adding insn 74 to worklist
  Adding insn 69 to worklist
  Adding insn 65 to worklist
  Adding insn 68 to worklist
  Adding insn 64 to worklist
  Adding insn 67 to worklist
  Adding insn 63 to worklist
  Adding insn 79 to worklist
  Adding insn 66 to worklist
  Adding insn 62 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 89 to worklist
  Adding insn 88 to worklist
  Adding insn 87 to worklist
  Adding insn 85 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
  Adding insn 58 to worklist
  Adding insn 83 to worklist
  Adding insn 57 to worklist
  Adding insn 52 to worklist
  Adding insn 51 to worklist
  Adding insn 55 to worklist
  Adding insn 54 to worklist
  Adding insn 45 to worklist
  Adding insn 47 to worklist
  Adding insn 46 to worklist
  Adding insn 40 to worklist
  Adding insn 43 to worklist
  Adding insn 39 to worklist
processing block 5 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
  Adding insn 31 to worklist
  Adding insn 36 to worklist
processing block 2 lr out =  2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
  Adding insn 6 to worklist
  Adding insn 13 to worklist
  Adding insn 9 to worklist
  Adding insn 12 to worklist
  Adding insn 11 to worklist
  Adding insn 10 to worklist
  Adding insn 5 to worklist
  Adding insn 227 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 21 n_edges 29 count 50 (  2.4)
;;   ======================================================
;;   -- basic block 2 from 226 to 232 -- after reload
;;   ======================================================

;;	  0-->     5 r1=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  1-->   226 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  2-->    10 r5=0x0                            :cortex_a8_default
;;	  3-->   227 sp=sp-0x18                        :cortex_a8_default
;;	  3-->    11 r4=r5                             :cortex_a8_default
;;	  4-->    12 r6=0xffffffffffffffff             :cortex_a8_default
;;	  4-->     9 r3=r1+0x10                        :cortex_a8_default
;;	  5-->    13 r2=r5                             :cortex_a8_default
;;	  5-->     6 ip=[r1+0x4]                       :cortex_a8_load_store_1
;;	  6-->   232 pc=L33                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 6
;;   new head = 226
;;   new tail = 232

;;   ======================================================
;;   -- basic block 3 from 17 to 26 -- after reload
;;   ======================================================

;;	  0-->    17 r0=[r3-0x8]                       :cortex_a8_load_store_1
;;	  1-->    19 r1=[r3-0x4]                       :cortex_a8_load_store_1
;;	  2-->    24 lr=[r3]                           :cortex_a8_load_store_1
;;	  2-->    32 r3=r3+0xc                         :cortex_a8_default
;;	  3-->    20 r1=r0+r1                          :cortex_a8_default
;;	  3-->    18 r0=r0 0>>0xc                      :cortex_a8_default
;;	  4-->    22 {r6=umin(r6,r0);clobber cc;}      :cortex_a8_default
;;	  5-->    21 r1=r1 0>>0xc                      :cortex_a8_default
;;	  6-->    23 {r5=umax(r5,r1);clobber cc;}      :cortex_a8_default
;;	  6-->    25 cc=cmp(lr,0x0)                    :cortex_a8_default
;;	  8-->    26 pc={(cc!=0x0)?L33:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 17
;;   new tail = 26

;;   ======================================================
;;   -- basic block 4 from 28 to 28 -- after reload
;;   ======================================================

;;	  0-->    28 {r4=umax(r4,r1);clobber cc;}      :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 28
;;   new tail = 28

;;   ======================================================
;;   -- basic block 5 from 36 to 37 -- after reload
;;   ======================================================

;;	  0-->    36 cc=cmp(r2,ip)                     :cortex_a8_default
;;	  0-->    31 r2=r2+0x1                         :cortex_a8_default
;;	  2-->    37 pc={(cc<0x0)?L35:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 36
;;   new tail = 37

;;   ======================================================
;;   -- basic block 6 from 39 to 234 -- after reload
;;   ======================================================

;;	  0-->    39 r7=r4-r6                          :cortex_a8_default
;;	  0-->    43 r9=r4<<0xc                        :cortex_a8_default
;;	  1-->    40 r0=r7                             :cortex_a8_default
;;	  2-->    41 r0=call [`bootmem_bootmap_pages'] :cortex_a8_issue_branch
;;	  2-->    46 r1=0x20                           :cortex_a8_default
;;	  3-->    47 r2=r9                             :cortex_a8_default
;;	 34-->    45 r0=r0<<0xc                        :cortex_a8_default
;;	 35-->    48 r0=call [`memblock_alloc_base']   :cortex_a8_issue_branch
;;	 35-->    55 r3=r4                             :cortex_a8_default
;;	 36-->    54 r2=r6                             :cortex_a8_default
;;	 67-->    51 r1=r0 0>>0xc                      :cortex_a8_default
;;	 67-->    52 r0=`contig_page_data'             :cortex_a8_load_store_1
;;	 68-->    56 r0=call [`init_bootmem_node']     :cortex_a8_issue_branch
;;	 68-->    57 r3=`memblock'                     :cortex_a8_load_store_1
;;	 70-->    83 sl=r3                             :cortex_a8_default
;;	 71-->    58 r8=[r3+0x10]                      :cortex_a8_load_store_1
;;	 71-->   234 pc=L80                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 71
;;   new head = 39
;;   new tail = 234

;;   ======================================================
;;   -- basic block 7 from 62 to 71 -- after reload
;;   ======================================================

;;	  0-->    62 r2=[r8]                           :cortex_a8_load_store_1
;;	  1-->    66 r1=[r8+0x4]                       :cortex_a8_load_store_1
;;	  1-->    79 r8=r8+0x8                         :cortex_a8_default
;;	  2-->    63 r3=r2+0xff0                       :cortex_a8_default
;;	  3-->    67 r2=r2+r1                          :cortex_a8_default
;;	  3-->    64 r3=r3+0xf                         :cortex_a8_default
;;	  5-->    68 r2=r2 0>>0xc                      :cortex_a8_default
;;	  5-->    65 r3=r3 0>>0xc                      :cortex_a8_default
;;	  6-->    69 {r2=umin(r4,r2);clobber cc;}      :cortex_a8_default
;;	  7-->    74 r1=r2-r3                          :cortex_a8_default
;;	  7-->    70 cc=cmp(r3,r2)                     :cortex_a8_default
;;	  8-->    76 r0=r3<<0xc                        :cortex_a8_default
;;	  9-->    77 r1=r1<<0xc                        :cortex_a8_default
;;	  9-->    71 pc={(geu(cc,0x0))?L91:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 62
;;   new tail = 71

;;   ======================================================
;;   -- basic block 8 from 78 to 78 -- after reload
;;   ======================================================

;;	  0-->    78 call [`free_bootmem']             :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 78
;;   new tail = 78

;;   ======================================================
;;   -- basic block 9 from 85 to 90 -- after reload
;;   ======================================================

;;	  0-->    85 r2=[sl+0x8]                       :cortex_a8_load_store_1
;;	  1-->    87 r3=[sl+0x10]                      :cortex_a8_load_store_1
;;	  3-->    88 r3=r2*0x8+r3                      :cortex_a8_default
;;	  4-->    89 cc=cmp(r8,r3)                     :cortex_a8_default
;;	  6-->    90 pc={(ltu(cc,0x0))?L82:pc}         :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 85
;;   new tail = 90

;;   ======================================================
;;   -- basic block 10 from 93 to 236 -- after reload
;;   ======================================================

;;	  0-->    93 r3=`memblock'                     :cortex_a8_load_store_1
;;	  2-->   120 sl=r3                             :cortex_a8_default
;;	  3-->    94 r8=[r3+0x1c]                      :cortex_a8_load_store_1
;;	  3-->   236 pc=L117                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 3
;;   new head = 93
;;   new tail = 236

;;   ======================================================
;;   -- basic block 11 from 98 to 107 -- after reload
;;   ======================================================

;;	  0-->    98 r3=[r8]                           :cortex_a8_load_store_1
;;	  1-->   100 ip=[r8+0x4]                       :cortex_a8_load_store_1
;;	  1-->   116 r8=r8+0x8                         :cortex_a8_default
;;	  3-->   101 ip=r3+ip                          :cortex_a8_default
;;	  3-->    99 r3=r3 0>>0xc                      :cortex_a8_default
;;	  4-->   102 ip=ip+0xff0                       :cortex_a8_default
;;	  5-->   103 ip=ip+0xf                         :cortex_a8_default
;;	  5-->   112 r0=r3<<0xc                        :cortex_a8_default
;;	  7-->   104 ip=ip 0>>0xc                      :cortex_a8_default
;;	  8-->   105 {ip=umin(r4,ip);clobber cc;}      :cortex_a8_default
;;	  9-->   110 r1=ip-r3                          :cortex_a8_default
;;	  9-->   106 cc=cmp(r3,ip)                     :cortex_a8_default
;;	 11-->   113 r1=r1<<0xc                        :cortex_a8_default
;;	 11-->   107 pc={(geu(cc,0x0))?L128:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 98
;;   new tail = 107

;;   ======================================================
;;   -- basic block 12 from 115 to 115 -- after reload
;;   ======================================================

;;	  0-->   115 r0=call [`reserve_bootmem']       :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 115
;;   new tail = 115

;;   ======================================================
;;   -- basic block 13 from 208 to 127 -- after reload
;;   ======================================================

;;	  0-->   122 r1=[sl+0x14]                      :cortex_a8_load_store_1
;;	  0-->   208 r2=0x0                            :cortex_a8_default
;;	  1-->   124 r3=[sl+0x1c]                      :cortex_a8_load_store_1
;;	  3-->   125 r3=r1*0x8+r3                      :cortex_a8_default
;;	  4-->   126 cc=cmp(r8,r3)                     :cortex_a8_default
;;	  6-->   127 pc={(ltu(cc,0x0))?L119:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 6
;;   new head = 208
;;   new tail = 127

;;   ======================================================
;;   -- basic block 14 from 130 to 238 -- after reload
;;   ======================================================

;;	  0-->   130 r8=sp+0xc                         :cortex_a8_default
;;	  0-->   132 r1=0xc                            :cortex_a8_default
;;	  1-->   131 r0=r8                             :cortex_a8_default
;;	  2-->   133 call [`__memzero']                :cortex_a8_issue_branch
;;	  2-->   143 r3=`memblock'                     :cortex_a8_load_store_1
;;	  3-->   135 r2=r5-r4                          :cortex_a8_default
;;	  3-->   134 [sp+0xc]=r7                       :cortex_a8_load_store_1
;;	  4-->   136 [sp+0x10]=r2                      :cortex_a8_load_store_1
;;	  4-->   137 ip=sp                             :cortex_a8_default
;;	  5-->   141 {r0=[r8];r1=[r8+0x4];r2=[r8+0x8];}:cortex_a8_load_store_2
;;	  6-->   146 lr=[r3+0x8]                       :cortex_a8_load_store_1
;;	  7-->   144 r3=[r3+0x10]                      :cortex_a8_load_store_1
;;	  9-->   148 lr=lr*0x8+r3                      :cortex_a8_default
;;	 10-->   142 {[ip]=r0;[ip+0x4]=r1;[ip+0x8]=r2;}:cortex_a8_load_store_2
;;	 11-->   238 pc=L180                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 11
;;   new head = 130
;;   new tail = 238

;;   ======================================================
;;   -- basic block 15 from 152 to 160 -- after reload
;;   ======================================================

;;	  0-->   152 r1=[r3]                           :cortex_a8_load_store_1
;;	  1-->   156 r0=[r3+0x4]                       :cortex_a8_load_store_1
;;	  1-->   179 r3=r3+0x8                         :cortex_a8_default
;;	  2-->   153 r2=r1+0xff0                       :cortex_a8_default
;;	  3-->   154 r2=r2+0xf                         :cortex_a8_default
;;	  3-->   157 r1=r1+r0                          :cortex_a8_default
;;	  5-->   155 r2=r2 0>>0xc                      :cortex_a8_default
;;	  5-->   158 r1=r1 0>>0xc                      :cortex_a8_default
;;	  6-->   159 cc=cmp(r2,r4)                     :cortex_a8_default
;;	  8-->   160 pc={(geu(cc,0x0))?L167:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 8
;;   new head = 152
;;   new tail = 160

;;   ======================================================
;;   -- basic block 16 from 164 to 166 -- after reload
;;   ======================================================

;;	  0-->   224 r0=[sp]                           :cortex_a8_load_store_1
;;	  0-->   164 {ip=umin(r4,r1);clobber cc;}      :cortex_a8_default
;;	  2-->   163 r0=r2+r0                          :cortex_a8_default
;;	  3-->   165 r0=r0-ip                          :cortex_a8_default
;;	  3-->   166 [sp]=r0                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 164
;;   new tail = 166

;;   ======================================================
;;   -- basic block 17 from 169 to 170 -- after reload
;;   ======================================================

;;	  0-->   169 cc=cmp(r1,r4)                     :cortex_a8_default
;;	  2-->   170 pc={(leu(cc,0x0))?L180:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 169
;;   new tail = 170

;;   ======================================================
;;   -- basic block 18 from 172 to 176 -- after reload
;;   ======================================================

;;	  0-->   172 r0=[sp+0x4]                       :cortex_a8_load_store_1
;;	  2-->   173 r1=r0-r1                          :cortex_a8_default
;;	  3-->   175 {r2=umax(r4,r2)+r1;clobber cc;}   :cortex_a8_default
;;	  3-->   176 [sp+0x4]=r2                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 3
;;   new head = 172
;;   new tail = 176

;;   ======================================================
;;   -- basic block 19 from 183 to 184 -- after reload
;;   ======================================================

;;	  0-->   183 cc=cmp(r3,lr)                     :cortex_a8_default
;;	  2-->   184 pc={(ltu(cc,0x0))?L182:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 183
;;   new tail = 184

;;   ======================================================
;;   -- basic block 20 from 190 to 230 -- after reload
;;   ======================================================

;;	  0-->   191 r3=sp                             :cortex_a8_default
;;	  0-->   190 r2=r6                             :cortex_a8_default
;;	  1-->   188 r0=0x0                            :cortex_a8_default
;;	  1-->   189 r1=sp+0xc                         :cortex_a8_default
;;	  2-->   192 call [`free_area_init_node']      :cortex_a8_issue_branch
;;	  2-->   223 r3=`high_memory'                  :cortex_a8_load_store_1
;;	  3-->   194 r9=r9-0x40000000                  :cortex_a8_default
;;	  5-->   195 [r3]=r9                           :cortex_a8_load_store_1
;;	  6-->   222 r3=`max_low_pfn'                  :cortex_a8_load_store_1
;;	  9-->   197 [r3]=r4                           :cortex_a8_load_store_1
;;	 10-->   221 r3=`max_pfn'                      :cortex_a8_load_store_1
;;	 13-->   199 [r3]=r5                           :cortex_a8_load_store_1
;;	 13-->   230 unspec/v{return;}                 :nothing
;;	Ready list (final):  
;;   total time = 13
;;   new head = 190
;;   new tail = 230





bootmem_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={23d,18u} r1={27d,24u,1d} r2={25d,21u,1d} r3={29d,34u} r4={3d,14u} r5={3d,7u} r6={3d,6u} r7={2d,4u} r8={6d,14u} r9={3d,5u} r10={3d,6u,4d} r12={16d,12u,1d} r13={3d,40u,4d} r14={11d,5u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={23d,9u} r25={4d} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 1184{950d,219u,15e} in 138{131 regular + 7 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 3 5 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 5 2 226 2 arch/arm/mm/init.c:144 discrim 1 (set (reg/f:SI 1 r1 [161])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn/f:TI 226 5 10 2 arch/arm/mm/init.c:378 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 9 r9)
                (expr_list:REG_DEAD (reg:SI 8 r8)
                    (expr_list:REG_DEAD (reg:SI 7 r7)
                        (expr_list:REG_DEAD (reg:SI 6 r6)
                            (expr_list:REG_DEAD (reg:SI 5 r5)
                                (expr_list:REG_DEAD (reg:SI 4 r4)
                                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                                (set/f (reg/f:SI 13 sp)
                                                    (plus:SI (reg/f:SI 13 sp)
                                                        (const_int -32 [0xffffffffffffffe0])))
                                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                    (reg:SI 4 r4))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 4 [0x4])) [0 S4 A32])
                                                    (reg:SI 5 r5))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 8 [0x8])) [0 S4 A32])
                                                    (reg:SI 6 r6))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 12 [0xc])) [0 S4 A32])
                                                    (reg:SI 7 r7))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 16 [0x10])) [0 S4 A32])
                                                    (reg:SI 8 r8))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 20 [0x14])) [0 S4 A32])
                                                    (reg:SI 9 r9))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 24 [0x18])) [0 S4 A32])
                                                    (reg:SI 10 sl))
                                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                            (const_int 28 [0x1c])) [0 S4 A32])
                                                    (reg:SI 14 lr))
                                            ])
                                        (nil)))))))))))

(insn:TI 10 226 227 2 arch/arm/mm/init.c:142 (set (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn/f:TI 227 10 228 2 arch/arm/mm/init.c:378 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -24 [0xffffffffffffffe8]))) 4 {*arm_addsi3} (nil))

(note 228 227 11 2 NOTE_INSN_PROLOGUE_END)

(insn 11 228 12 2 arch/arm/mm/init.c:142 (set (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
        (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 12 11 9 2 arch/arm/mm/init.c:141 (set (reg/v:SI 6 r6 [orig:160 min ] [160])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn 9 12 13 2 arch/arm/mm/init.c:144 discrim 1 (set (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
        (plus:SI (reg/f:SI 1 r1 [161])
            (const_int 16 [0x10]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn:TI 13 9 6 2 arch/arm/mm/init.c:144 (set (reg/v:SI 2 r2 [orig:157 i ] [157])
        (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 6 13 232 2 arch/arm/mm/init.c:144 discrim 1 (set (reg:SI 12 ip [orig:156 D.25862 ] [156])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 1 r1 [161])
                (const_int 4 [0x4])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [161])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
            (nil))))

(jump_insn:TI 232 6 233 2 (set (pc)
        (label_ref 33)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  5 [100.0%] 

(barrier 233 232 35)

;; Start of basic block ( 5) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 5 [r5] 6 [r6] 14 [lr] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 5 [r5] 6 [r6] 14 [lr] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  5 [91.0%] 
(code_label 35 233 16 3 74 "" [1 uses])

(note 16 35 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 16 19 3 arch/arm/mm/init.c:148 (set (reg:SI 0 r0 [orig:155 D.25868 ] [155])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
                (const_int -8 [0xfffffffffffffff8])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 19 17 24 3 arch/arm/mm/init.c:149 (set (reg:SI 1 r1 [orig:165 <variable>.size ] [165])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
                (const_int -4 [0xfffffffffffffffc])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 24 19 32 3 arch/arm/mm/init.c:155 (set (reg:SI 14 lr [orig:166 <variable>.highmem ] [166])
        (mem/s/j:SI (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140]) [0 <variable>.highmem+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 32 24 20 3 arch/arm/mm/init.c:144 (set (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
        (plus:SI (reg:SI 3 r3 [orig:140 ivtmp.847 ] [140])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn:TI 20 32 18 3 arch/arm/mm/init.c:149 (set (reg:SI 1 r1 [164])
        (plus:SI (reg:SI 0 r0 [orig:155 D.25868 ] [155])
            (reg:SI 1 r1 [orig:165 <variable>.size ] [165]))) 4 {*arm_addsi3} (nil))

(insn 18 20 22 3 arch/arm/mm/init.c:148 (set (reg/v:SI 0 r0 [orig:139 min.848 ] [139])
        (lshiftrt:SI (reg:SI 0 r0 [orig:155 D.25868 ] [155])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 22 18 21 3 arch/arm/mm/init.c:149 (parallel [
            (set (reg/v:SI 6 r6 [orig:160 min ] [160])
                (umin:SI (reg/v:SI 6 r6 [orig:160 min ] [160])
                    (reg/v:SI 0 r0 [orig:139 min.848 ] [139])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_DEAD (reg/v:SI 0 r0 [orig:139 min.848 ] [139])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))

(insn:TI 21 22 23 3 arch/arm/mm/init.c:149 (set (reg/v:SI 1 r1 [orig:158 max_high ] [158])
        (lshiftrt:SI (reg:SI 1 r1 [164])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 23 21 25 3 arch/arm/mm/init.c:149 (parallel [
            (set (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])
                (umax:SI (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])
                    (reg/v:SI 1 r1 [orig:158 max_high ] [158])))
            (clobber (reg:CC 24 cc))
        ]) 106 {*arm_umaxsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 25 23 26 3 arch/arm/mm/init.c:155 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 14 lr [orig:166 <variable>.highmem ] [166])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 14 lr [orig:166 <variable>.highmem ] [166])
        (nil)))

(jump_insn:TI 26 25 27 3 arch/arm/mm/init.c:155 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  5 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 4 [r4]
;; live  kill	 24 [cc]

;; Pred edge  3 [50.0%]  (fallthru)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 27 33 4 arch/arm/mm/init.c:155 (parallel [
            (set (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                (umax:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                    (reg/v:SI 1 r1 [orig:158 max_high ] [158])))
            (clobber (reg:CC 24 cc))
        ]) 106 {*arm_umaxsi3} (expr_list:REG_DEAD (reg/v:SI 1 r1 [orig:158 max_high ] [158])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 4 3 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [50.0%] 
;; Pred edge  2 [100.0%] 
(code_label 33 28 34 5 72 "" [2 uses])

(note 34 33 36 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 36 34 31 5 arch/arm/mm/init.c:144 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:157 i ] [157])
            (reg:SI 12 ip [orig:156 D.25862 ] [156]))) 219 {*arm_cmpsi_insn} (nil))

(insn 31 36 37 5 arch/arm/mm/init.c:144 (set (reg/v:SI 2 r2 [orig:157 i ] [157])
        (plus:SI (reg/v:SI 2 r2 [orig:157 i ] [157])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 37 31 38 5 arch/arm/mm/init.c:144 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 5 -> ( 3 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  3 [91.0%] 
;; Succ edge  6 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 8 [r8] 9 [r9] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  5 [9.0%]  (fallthru,loop_exit)
(note 38 37 42 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 42 38 44 6 NOTE_INSN_DELETED)

(note 44 42 49 6 NOTE_INSN_DELETED)

(note 49 44 39 6 NOTE_INSN_DELETED)

(insn:TI 39 49 43 6 arch/arm/mm/init.c:174 (set (reg:SI 7 r7 [orig:146 D.25910 ] [146])
        (minus:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
            (reg/v:SI 6 r6 [orig:160 min ] [160]))) 28 {*arm_subsi3_insn} (nil))

(insn 43 39 40 6 arch/arm/mm/init.c:175 (set (reg:SI 9 r9 [orig:147 D.25908 ] [147])
        (ashift:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 40 43 41 6 arch/arm/mm/init.c:174 (set (reg:SI 0 r0)
        (reg:SI 7 r7 [orig:146 D.25910 ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 41 40 46 6 arch/arm/mm/init.c:174 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("bootmem_bootmap_pages") [flags 0x41] <function_decl 0x11095280 bootmem_bootmap_pages>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 46 41 47 6 arch/arm/mm/init.c:175 (set (reg:SI 1 r1)
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (nil))

(insn:TI 47 46 45 6 arch/arm/mm/init.c:175 (set (reg:SI 2 r2)
        (reg:SI 9 r9 [orig:147 D.25908 ] [147])) 167 {*arm_movsi_insn} (nil))

(insn:TI 45 47 48 6 arch/arm/mm/init.c:175 (set (reg:SI 0 r0)
        (ashift:SI (reg:SI 0 r0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(call_insn:TI 48 45 55 6 arch/arm/mm/init.c:175 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_alloc_base") [flags 0x41] <function_decl 0x113f7900 memblock_alloc_base>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 55 48 54 6 arch/arm/mm/init.c:184 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])) 167 {*arm_movsi_insn} (nil))

(insn:TI 54 55 51 6 arch/arm/mm/init.c:184 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:160 min ] [160])) 167 {*arm_movsi_insn} (nil))

(insn:TI 51 54 52 6 arch/arm/mm/init.c:184 (set (reg:SI 1 r1 [169])
        (lshiftrt:SI (reg:SI 0 r0)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(insn 52 51 56 6 arch/arm/mm/init.c:184 (set (reg:SI 0 r0)
        (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c25120 contig_page_data>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c25120 contig_page_data>)
        (nil)))

(call_insn:TI 56 52 57 6 arch/arm/mm/init.c:184 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("init_bootmem_node") [flags 0x41] <function_decl 0x11095300 init_bootmem_node>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 57 56 83 6 arch/arm/mm/init.c:187 (set (reg/f:SI 3 r3 [170])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn:TI 83 57 58 6 arch/arm/mm/init.c:187 discrim 1 (set (reg/f:SI 10 sl [228])
        (reg/f:SI 3 r3 [170])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn:TI 58 83 234 6 arch/arm/mm/init.c:187 (set (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [170])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [170])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
            (nil))))

(jump_insn 234 58 235 6 (set (pc)
        (label_ref 80)) 242 {*arm_jump} (nil))
;; End of basic block 6 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 235 234 82)

;; Start of basic block ( 9) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  9 [95.5%] 
(code_label 82 235 61 7 77 "" [1 uses])

(note 61 82 62 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 62 61 66 7 include/linux/memblock.h:120 (set (reg:SI 2 r2 [orig:153 D.25891 ] [153])
        (mem/s/j:SI (reg/v/f:SI 8 r8 [orig:148 reg ] [148]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 66 62 79 7 include/linux/memblock.h:129 (set (reg:SI 1 r1 [orig:174 <variable>.size ] [174])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 79 66 63 7 arch/arm/mm/init.c:187 (set (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
        (plus:SI (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn:TI 63 79 67 7 include/linux/memblock.h:120 (set (reg:SI 3 r3 [172])
        (plus:SI (reg:SI 2 r2 [orig:153 D.25891 ] [153])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn:TI 67 63 64 7 include/linux/memblock.h:129 (set (reg:SI 2 r2 [173])
        (plus:SI (reg:SI 2 r2 [orig:153 D.25891 ] [153])
            (reg:SI 1 r1 [orig:174 <variable>.size ] [174]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:174 <variable>.size ] [174])
        (nil)))

(insn 64 67 68 7 include/linux/memblock.h:120 (set (reg:SI 3 r3 [171])
        (plus:SI (reg:SI 3 r3 [172])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 2 r2 [orig:153 D.25891 ] [153])
            (const_int 4095 [0xfff]))
        (nil)))

(insn:TI 68 64 65 7 include/linux/memblock.h:129 (set (reg/v:SI 2 r2 [orig:159 max_low ] [159])
        (lshiftrt:SI (reg:SI 2 r2 [173])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 65 68 69 7 include/linux/memblock.h:120 (set (reg/v:SI 3 r3 [orig:151 start ] [151])
        (lshiftrt:SI (reg:SI 3 r3 [171])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 69 65 74 7 include/linux/memblock.h:129 (parallel [
            (set (reg/v:SI 2 r2 [orig:134 max_low.853 ] [134])
                (umin:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                    (reg/v:SI 2 r2 [orig:159 max_low ] [159])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 74 69 70 7 arch/arm/mm/init.c:196 (set (reg:SI 1 r1 [176])
        (minus:SI (reg/v:SI 2 r2 [orig:134 max_low.853 ] [134])
            (reg/v:SI 3 r3 [orig:151 start ] [151]))) 28 {*arm_subsi3_insn} (nil))

(insn 70 74 76 7 arch/arm/mm/init.c:193 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:151 start ] [151])
            (reg/v:SI 2 r2 [orig:134 max_low.853 ] [134]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:151 start ] [151])
        (expr_list:REG_DEAD (reg/v:SI 2 r2 [orig:134 max_low.853 ] [134])
            (nil))))

(insn:TI 76 70 77 7 arch/arm/mm/init.c:196 (set (reg:SI 0 r0)
        (ashift:SI (reg/v:SI 3 r3 [orig:151 start ] [151])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 77 76 71 7 arch/arm/mm/init.c:196 (set (reg:SI 1 r1)
        (ashift:SI (reg:SI 1 r1 [176])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 71 77 72 7 arch/arm/mm/init.c:193 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 91)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 7 -> ( 10 8)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  10 [4.5%]  (loop_exit)
;; Succ edge  8 [95.5%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  7 [95.5%]  (fallthru)
(note 72 71 73 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 73 72 75 8 NOTE_INSN_DELETED)

(note 75 73 78 8 NOTE_INSN_DELETED)

(call_insn:TI 78 75 80 8 arch/arm/mm/init.c:196 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_bootmem") [flags 0x41] <function_decl 0x11095600 free_bootmem>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 8 6) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru,dfs_back)
;; Pred edge  6 [100.0%] 
(code_label 80 78 81 9 75 "" [1 uses])

(note 81 80 86 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 86 81 85 9 NOTE_INSN_DELETED)

(insn:TI 85 86 87 9 arch/arm/mm/init.c:187 discrim 1 (set (reg:SI 2 r2 [orig:181 memblock.memory.cnt ] [181])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 10 sl [228])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 10 sl [228])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 8 [0x8]))) [0 memblock.memory.cnt+0 S4 A32])
            (nil))))

(insn:TI 87 85 88 9 arch/arm/mm/init.c:187 discrim 1 (set (reg/f:SI 3 r3 [orig:183 memblock.memory.regions ] [183])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [228])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [228])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
            (nil))))

(insn:TI 88 87 89 9 arch/arm/mm/init.c:187 discrim 1 (set (reg:SI 3 r3 [182])
        (plus:SI (mult:SI (reg:SI 2 r2 [orig:181 memblock.memory.cnt ] [181])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [orig:183 memblock.memory.regions ] [183]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:181 memblock.memory.cnt ] [181])
        (nil)))

(insn:TI 89 88 90 9 arch/arm/mm/init.c:187 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:148 reg ] [148])
            (reg:SI 3 r3 [182]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [182])
        (nil)))

(jump_insn:TI 90 89 91 9 arch/arm/mm/init.c:187 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 9 -> ( 7 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  7 [95.5%] 
;; Succ edge  10 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 7 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 8 [r8] 10 [sl]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 13 [sp]
;; live  gen 	 3 [r3] 8 [r8] 10 [sl]
;; live  kill	

;; Pred edge  7 [4.5%]  (loop_exit)
;; Pred edge  9 [4.5%]  (fallthru,loop_exit)
(code_label 91 90 92 10 76 "" [1 uses])

(note 92 91 93 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 93 92 120 10 arch/arm/mm/init.c:200 (set (reg/f:SI 3 r3 [184])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn:TI 120 93 94 10 arch/arm/mm/init.c:200 discrim 1 (set (reg/f:SI 10 sl [226])
        (reg/f:SI 3 r3 [184])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn:TI 94 120 236 10 arch/arm/mm/init.c:200 (set (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [184])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [184])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 28 [0x1c]))) [0 memblock.reserved.regions+0 S4 A32])
            (nil))))

(jump_insn 236 94 237 10 (set (pc)
        (label_ref 117)) 242 {*arm_jump} (nil))
;; End of basic block 10 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 237 236 119)

;; Start of basic block ( 13) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 8 [r8] 12 [ip] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  13 [95.5%] 
(code_label 119 237 97 11 80 "" [1 uses])

(note 97 119 98 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 98 97 100 11 include/linux/memblock.h:138 (set (reg:SI 3 r3 [orig:154 D.25887 ] [154])
        (mem/s/j:SI (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 100 98 116 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [orig:186 <variable>.size ] [186])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 116 100 101 11 arch/arm/mm/init.c:200 (set (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
        (plus:SI (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn:TI 101 116 99 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [185])
        (plus:SI (reg:SI 3 r3 [orig:154 D.25887 ] [154])
            (reg:SI 12 ip [orig:186 <variable>.size ] [186]))) 4 {*arm_addsi3} (nil))

(insn 99 101 102 11 include/linux/memblock.h:138 (set (reg/v:SI 3 r3 [orig:152 start ] [152])
        (lshiftrt:SI (reg:SI 3 r3 [orig:154 D.25887 ] [154])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 102 99 103 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [188])
        (plus:SI (reg:SI 12 ip [185])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn:TI 103 102 112 11 include/linux/memblock.h:147 (set (reg:SI 12 ip [187])
        (plus:SI (reg:SI 12 ip [188])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 12 ip [185])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 112 103 104 11 arch/arm/mm/init.c:209 (set (reg:SI 0 r0)
        (ashift:SI (reg/v:SI 3 r3 [orig:152 start ] [152])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 104 112 105 11 include/linux/memblock.h:147 (set (reg/v:SI 12 ip [orig:137 max_low.850 ] [137])
        (lshiftrt:SI (reg:SI 12 ip [187])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 105 104 110 11 include/linux/memblock.h:147 (parallel [
            (set (reg/v:SI 12 ip [orig:133 max_low.854 ] [133])
                (umin:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                    (reg/v:SI 12 ip [orig:137 max_low.850 ] [137])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 110 105 106 11 arch/arm/mm/init.c:209 (set (reg:SI 1 r1 [190])
        (minus:SI (reg/v:SI 12 ip [orig:133 max_low.854 ] [133])
            (reg/v:SI 3 r3 [orig:152 start ] [152]))) 28 {*arm_subsi3_insn} (nil))

(insn 106 110 113 11 arch/arm/mm/init.c:206 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:152 start ] [152])
            (reg/v:SI 12 ip [orig:133 max_low.854 ] [133]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:133 max_low.854 ] [133])
        (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:152 start ] [152])
            (nil))))

(insn:TI 113 106 107 11 arch/arm/mm/init.c:209 (set (reg:SI 1 r1)
        (ashift:SI (reg:SI 1 r1 [190])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(jump_insn 107 113 108 11 arch/arm/mm/init.c:206 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 450 [0x1c2])
            (nil))))
;; End of basic block 11 -> ( 14 12)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  14 [4.5%]  (loop_exit)
;; Succ edge  12 [95.5%]  (fallthru)

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  11 [95.5%]  (fallthru)
(note 108 107 109 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 109 108 111 12 NOTE_INSN_DELETED)

(note 111 109 115 12 NOTE_INSN_DELETED)

(call_insn:TI 115 111 117 12 arch/arm/mm/init.c:209 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("reserve_bootmem") [flags 0x41] <function_decl 0x11095700 reserve_bootmem>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 12 10) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 8 [r8] 10 [sl] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru,dfs_back)
;; Pred edge  10 [100.0%] 
(code_label 117 115 118 13 78 "" [1 uses])

(note 118 117 123 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 123 118 122 13 NOTE_INSN_DELETED)

(insn:TI 122 123 208 13 arch/arm/mm/init.c:200 discrim 1 (set (reg:SI 1 r1 [orig:195 memblock.reserved.cnt ] [195])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 10 sl [226])
                (const_int 20 [0x14])) [0 memblock.reserved.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j/c:SI (plus:SI (reg/f:SI 10 sl [226])
                (const_int 20 [0x14])) [0 memblock.reserved.cnt+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 20 [0x14]))) [0 memblock.reserved.cnt+0 S4 A32])
            (nil))))

(insn 208 122 124 13 arch/arm/mm/init.c:209 (set (reg:SI 2 r2)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn:TI 124 208 125 13 arch/arm/mm/init.c:200 discrim 1 (set (reg/f:SI 3 r3 [orig:197 memblock.reserved.regions ] [197])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [226])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [226])
                (const_int 28 [0x1c])) [0 memblock.reserved.regions+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                        (const_int 28 [0x1c]))) [0 memblock.reserved.regions+0 S4 A32])
            (nil))))

(insn:TI 125 124 126 13 arch/arm/mm/init.c:200 discrim 1 (set (reg:SI 3 r3 [196])
        (plus:SI (mult:SI (reg:SI 1 r1 [orig:195 memblock.reserved.cnt ] [195])
                (const_int 8 [0x8]))
            (reg/f:SI 3 r3 [orig:197 memblock.reserved.regions ] [197]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:195 memblock.reserved.cnt ] [195])
        (nil)))

(insn:TI 126 125 127 13 arch/arm/mm/init.c:200 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 8 r8 [orig:138 reg.849 ] [138])
            (reg:SI 3 r3 [196]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [196])
        (nil)))

(jump_insn:TI 127 126 128 13 arch/arm/mm/init.c:200 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 119)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9550 [0x254e])
            (nil))))
;; End of basic block 13 -> ( 11 14)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [95.5%] 
;; Succ edge  14 [4.5%]  (fallthru,loop_exit)

;; Start of basic block ( 13 11) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  13 [4.5%]  (fallthru,loop_exit)
;; Pred edge  11 [4.5%]  (loop_exit)
(code_label 128 127 129 14 79 "" [1 uses])

(note 129 128 147 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 147 129 130 14 NOTE_INSN_DELETED)

(insn:TI 130 147 132 14 arch/arm/mm/init.c:249 discrim 1 (set (reg/f:SI 8 r8 [198])
        (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))
        (nil)))

(insn 132 130 131 14 arch/arm/mm/init.c:249 discrim 1 (set (reg:SI 1 r1)
        (const_int 12 [0xc])) 167 {*arm_movsi_insn} (nil))

(insn:TI 131 132 133 14 arch/arm/mm/init.c:249 discrim 1 (set (reg:SI 0 r0)
        (reg/f:SI 8 r8 [198])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (plus:SI (reg/f:SI 25 sfp)
            (const_int -12 [0xfffffffffffffff4]))
        (nil)))

(call_insn:TI 133 131 143 14 arch/arm/mm/init.c:249 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10b7d080 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 143 133 135 14 arch/arm/mm/init.c:266 (set (reg/f:SI 3 r3 [204])
        (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
        (nil)))

(insn:TI 135 143 134 14 arch/arm/mm/init.c:258 (set (reg:SI 2 r2 [199])
        (minus:SI (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])
            (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135]))) 28 {*arm_subsi3_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                (const_int -8 [0xfffffffffffffff8])) [0 zone_size+4 S4 A32])
        (nil)))

(insn 134 135 136 14 arch/arm/mm/init.c:256 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 zone_size+0 S4 A32])
        (reg:SI 7 r7 [orig:146 D.25910 ] [146])) 167 {*arm_movsi_insn} (nil))

(insn:TI 136 134 137 14 arch/arm/mm/init.c:258 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 zone_size+4 S4 A32])
        (reg:SI 2 r2 [199])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [199])
        (nil)))

(insn 137 136 141 14 arch/arm/mm/init.c:265 (set (reg/f:SI 12 ip [200])
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (plus:SI (reg/f:SI 13 sp)
            (const_int 0 [0x0]))
        (nil)))

(insn:TI 141 137 146 14 arch/arm/mm/init.c:265 (parallel [
            (set (reg:SI 0 r0)
                (mem/s/c:SI (reg/f:SI 8 r8 [198]) [0 zone_size+0 S4 A32]))
            (set (reg:SI 1 r1)
                (mem/s/c:SI (plus:SI (reg/f:SI 8 r8 [198])
                        (const_int 4 [0x4])) [0 zone_size+4 S4 A32]))
            (set (reg:SI 2 r2)
                (mem/s/c:SI (plus:SI (reg/f:SI 8 r8 [198])
                        (const_int 8 [0x8])) [0 zone_size+8 S4 A32]))
        ]) 189 {*ldmsi3} (nil))

(insn:TI 146 141 144 14 arch/arm/mm/init.c:266 discrim 1 (set (reg:SI 14 lr [orig:207 memblock.memory.cnt ] [207])
        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [204])
                (const_int 8 [0x8])) [0 memblock.memory.cnt+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 8 [0x8]))) [0 memblock.memory.cnt+0 S4 A32])
        (nil)))

(insn:TI 144 146 148 14 arch/arm/mm/init.c:266 (set (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [204])
                (const_int 16 [0x10])) [0 memblock.memory.regions+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("memblock") [flags 0xc0] <var_decl 0x113f9840 memblock>)
                    (const_int 16 [0x10]))) [0 memblock.memory.regions+0 S4 A32])
        (nil)))

(insn:TI 148 144 142 14 arch/arm/mm/init.c:266 discrim 1 (set (reg/f:SI 14 lr [orig:141 D.25929 ] [141])
        (plus:SI (mult:SI (reg:SI 14 lr [orig:207 memblock.memory.cnt ] [207])
                (const_int 8 [0x8]))
            (reg/v/f:SI 3 r3 [orig:142 reg ] [142]))) 270 {*arith_shiftsi} (nil))

(insn:TI 142 148 238 14 arch/arm/mm/init.c:265 (parallel [
            (set (mem/s/c:SI (reg/f:SI 12 ip [200]) [0 zhole_size+0 S4 A64])
                (reg:SI 0 r0))
            (set (mem/s/c:SI (plus:SI (reg/f:SI 12 ip [200])
                        (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])
                (reg:SI 1 r1))
            (set (mem/s/c:SI (plus:SI (reg/f:SI 12 ip [200])
                        (const_int 8 [0x8])) [0 zhole_size+8 S4 A64])
                (reg:SI 2 r2))
        ]) 196 {*stmsi3} (expr_list:REG_DEAD (reg/f:SI 12 ip [200])
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil))))))

(jump_insn:TI 238 142 239 14 (set (pc)
        (label_ref 180)) 242 {*arm_jump} (nil))
;; End of basic block 14 -> ( 19)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  19 [100.0%] 

(barrier 239 238 182)

;; Start of basic block ( 19) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  19 [91.0%] 
(code_label 182 239 151 15 84 "" [1 uses])

(note 151 182 152 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 152 151 156 15 include/linux/memblock.h:120 (set (reg:SI 1 r1 [orig:145 D.25927 ] [145])
        (mem/s/j:SI (reg/v/f:SI 3 r3 [orig:142 reg ] [142]) [0 <variable>.base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 156 152 179 15 include/linux/memblock.h:129 (set (reg:SI 0 r0 [orig:211 <variable>.size ] [211])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
                (const_int 4 [0x4])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 179 156 153 15 arch/arm/mm/init.c:266 (set (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
        (plus:SI (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (nil))

(insn:TI 153 179 154 15 include/linux/memblock.h:120 (set (reg:SI 2 r2 [209])
        (plus:SI (reg:SI 1 r1 [orig:145 D.25927 ] [145])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn:TI 154 153 157 15 include/linux/memblock.h:120 (set (reg:SI 2 r2 [208])
        (plus:SI (reg:SI 2 r2 [209])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 1 r1 [orig:145 D.25927 ] [145])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 157 154 155 15 include/linux/memblock.h:129 (set (reg:SI 1 r1 [210])
        (plus:SI (reg:SI 1 r1 [orig:145 D.25927 ] [145])
            (reg:SI 0 r0 [orig:211 <variable>.size ] [211]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:211 <variable>.size ] [211])
        (nil)))

(insn:TI 155 157 158 15 include/linux/memblock.h:120 (set (reg/v:SI 2 r2 [orig:143 start ] [143])
        (lshiftrt:SI (reg:SI 2 r2 [208])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 158 155 159 15 include/linux/memblock.h:129 (set (reg/v:SI 1 r1 [orig:144 end ] [144])
        (lshiftrt:SI (reg:SI 1 r1 [210])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 159 158 160 15 arch/arm/mm/init.c:270 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 2 r2 [orig:143 start ] [143])
            (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 160 159 161 15 arch/arm/mm/init.c:270 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 15 -> ( 16 17)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  16 [50.0%]  (fallthru)
;; Succ edge  17 [50.0%] 

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 12 [ip] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip]
;; live  kill	 24 [cc]

;; Pred edge  15 [50.0%]  (fallthru)
(note 161 160 224 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 224 161 164 16 arch/arm/mm/init.c:272 (set (reg:SI 0 r0 [orig:213 zhole_size ] [213])
        (mem/s/j:SI (reg/f:SI 13 sp) [0 zhole_size+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/f:SI 13 sp) [0 zhole_size+0 S4 A64])
        (nil)))

(insn 164 224 163 16 arch/arm/mm/init.c:272 (parallel [
            (set (reg:SI 12 ip [214])
                (umin:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                    (reg/v:SI 1 r1 [orig:144 end ] [144])))
            (clobber (reg:CC 24 cc))
        ]) 107 {*arm_uminsi3} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn:TI 163 164 165 16 arch/arm/mm/init.c:272 (set (reg:SI 0 r0 [212])
        (plus:SI (reg/v:SI 2 r2 [orig:143 start ] [143])
            (reg:SI 0 r0 [orig:213 zhole_size ] [213]))) 4 {*arm_addsi3} (nil))

(insn:TI 165 163 166 16 arch/arm/mm/init.c:272 (set (reg:SI 0 r0 [215])
        (minus:SI (reg:SI 0 r0 [212])
            (reg:SI 12 ip [214]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 12 ip [214])
        (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                    (const_int -24 [0xffffffffffffffe8])) [0 zhole_size+0 S4 A64])
            (nil))))

(insn 166 165 167 16 arch/arm/mm/init.c:272 (set (mem/s/j:SI (reg/f:SI 13 sp) [0 zhole_size+0 S4 A64])
        (reg:SI 0 r0 [215])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [215])
        (nil)))
;; End of basic block 16 -> ( 17)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  17 [100.0%]  (fallthru)

;; Start of basic block ( 15 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [50.0%] 
;; Pred edge  16 [100.0%]  (fallthru)
(code_label 167 166 168 17 82 "" [1 uses])

(note 168 167 169 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 169 168 170 17 arch/arm/mm/init.c:275 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 1 r1 [orig:144 end ] [144])
            (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 170 169 171 17 arch/arm/mm/init.c:275 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 180)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  18 [50.0%]  (fallthru)
;; Succ edge  19 [50.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 24 [cc]

;; Pred edge  17 [50.0%]  (fallthru)
(note 171 170 174 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(note 174 171 172 18 NOTE_INSN_DELETED)

(insn:TI 172 174 173 18 arch/arm/mm/init.c:277 (set (reg:SI 0 r0 [orig:217 zhole_size+4 ] [217])
        (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])
        (nil)))

(insn:TI 173 172 175 18 arch/arm/mm/init.c:277 (set (reg:SI 1 r1 [216])
        (minus:SI (reg:SI 0 r0 [orig:217 zhole_size+4 ] [217])
            (reg/v:SI 1 r1 [orig:144 end ] [144]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [orig:217 zhole_size+4 ] [217])
        (nil)))

(insn:TI 175 173 176 18 arch/arm/mm/init.c:277 (parallel [
            (set (reg:SI 2 r2 [219])
                (plus:SI (umax:SI (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])
                        (reg/v:SI 2 r2 [orig:143 start ] [143]))
                    (reg:SI 1 r1 [216])))
            (clobber (reg:CC 24 cc))
        ]) 109 {*minmax_arithsi} (expr_list:REG_DEAD (reg:SI 1 r1 [216])
        (expr_list:REG_UNUSED (reg:CC 24 cc)
            (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/f:SI 25 sfp)
                        (const_int -20 [0xffffffffffffffec])) [0 zhole_size+4 S4 A32])
                (nil)))))

(insn 176 175 180 18 arch/arm/mm/init.c:277 (set (mem/s/j:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 zhole_size+4 S4 A32])
        (reg:SI 2 r2 [219])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [219])
        (nil)))
;; End of basic block 18 -> ( 19)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  19 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 18 17 14) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru,dfs_back)
;; Pred edge  17 [50.0%] 
;; Pred edge  14 [100.0%] 
(code_label 180 176 181 19 81 "" [2 uses])

(note 181 180 183 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 183 181 184 19 arch/arm/mm/init.c:266 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:142 reg ] [142])
            (reg/f:SI 14 lr [orig:141 D.25929 ] [141]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 184 183 185 19 arch/arm/mm/init.c:266 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 182)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 19 -> ( 15 20)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  15 [91.0%] 
;; Succ edge  20 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 9 [r9]
;; live  kill	 14 [lr]

;; Pred edge  19 [9.0%]  (fallthru,loop_exit)
(note 185 184 186 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 186 185 187 20 NOTE_INSN_DELETED)

(note 187 186 191 20 NOTE_INSN_DELETED)

(insn:TI 191 187 190 20 arch/arm/mm/init.c:295 (set (reg:SI 3 r3)
        (reg/f:SI 13 sp)) 167 {*arm_movsi_insn} (nil))

(insn 190 191 188 20 arch/arm/mm/init.c:295 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:160 min ] [160])) 167 {*arm_movsi_insn} (nil))

(insn:TI 188 190 189 20 arch/arm/mm/init.c:295 (set (reg:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 189 188 192 20 arch/arm/mm/init.c:295 (set (reg:SI 1 r1)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 192 189 223 20 arch/arm/mm/init.c:295 (parallel [
            (call (mem:SI (symbol_ref:SI ("free_area_init_node") [flags 0x41] <function_decl 0x111d5700 free_area_init_node>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 223 192 194 20 arch/arm/mm/init.c:405 (set (reg/f:SI 3 r3 [222])
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x110aee40 high_memory>)
        (nil)))

(insn:TI 194 223 195 20 arch/arm/mm/init.c:405 (set (reg:SI 9 r9 [223])
        (plus:SI (reg:SI 9 r9 [orig:147 D.25908 ] [147])
            (const_int -1073741824 [0xffffffffc0000000]))) 4 {*arm_addsi3} (nil))

(insn:TI 195 194 222 20 arch/arm/mm/init.c:405 (set (mem/f/c/i:SI (reg/f:SI 3 r3 [222]) [0 high_memory+0 S4 A32])
        (reg:SI 9 r9 [223])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [222])
        (nil)))

(insn:TI 222 195 197 20 arch/arm/mm/init.c:415 (set (reg/f:SI 3 r3 [224])
        (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_low_pfn") [flags 0xc0] <var_decl 0x1108fa20 max_low_pfn>)
        (nil)))

(insn:TI 197 222 221 20 arch/arm/mm/init.c:415 (set (mem/c/i:SI (reg/f:SI 3 r3 [224]) [0 max_low_pfn+0 S4 A32])
        (reg/v:SI 4 r4 [orig:135 max_low.852 ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [224])
        (nil)))

(insn:TI 221 197 199 20 arch/arm/mm/init.c:416 (set (reg/f:SI 3 r3 [225])
        (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("max_pfn") [flags 0xc0] <var_decl 0x1108fae0 max_pfn>)
        (nil)))

(insn:TI 199 221 229 20 arch/arm/mm/init.c:416 (set (mem/c/i:SI (reg/f:SI 3 r3 [225]) [0 max_pfn+0 S4 A32])
        (reg/v:SI 5 r5 [orig:136 max_high.851 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [225])
        (nil)))

(note 229 199 230 20 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 230 229 231 20 arch/arm/mm/init.c:417 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 20 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 231 230 220)

(note 220 231 225 NOTE_INSN_DELETED)

(note 225 220 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function arm_memblock_init (arm_memblock_init)[0:1353] (unlikely executed)

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 30 (  1.9)


arm_memblock_init

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={22d,13u} r1={24d,15u} r2={20d,7u} r3={23d,15u} r4={6d,20u,1d} r5={4d,6u} r6={2d,4u,1d} r7={2d,3u} r12={14d,3u} r13={2d,30u} r14={13d,3u} r15={13d} r16={13d} r17={13d} r18={13d} r19={13d} r20={13d} r21={13d} r22={13d} r23={13d} r24={20d,7u} r27={13d} r28={13d} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={13d} r37={13d} r38={13d} r39={13d} r40={13d} r41={13d} r42={13d} r43={13d} r44={13d} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} r76={13d} r77={13d} r78={13d} r79={13d} r80={13d} r81={13d} r82={13d} r83={13d} r84={13d} r85={13d} r86={13d} r87={13d} r88={13d} r89={13d} r90={13d} r91={13d} r92={13d} r93={13d} r94={13d} r95={13d} r96={13d} r97={13d} r98={13d} r99={13d} r100={13d} r101={13d} r102={13d} r103={13d} r104={13d} r105={13d} r106={13d} r107={13d} r108={13d} r109={13d} r110={13d} r111={13d} r112={13d} r113={13d} r114={13d} r115={13d} r116={13d} r117={13d} r118={13d} r119={13d} r120={13d} r121={13d} r122={13d} r123={13d} r124={13d} r125={13d} r126={13d} r127={13d} 
;;    total ref usage 1710{1582d,126u,2e} in 80{67 regular + 13 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]

( 0 )->[2]->( 4 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 4 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 3 2 )->[4]->( 3 5 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 4 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 5 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 5 6 7 )->[8]->( 9 11 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 8 )->[9]->( 10 11 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 9 )->[10]->( 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 8 9 10 )->[11]->( 12 13 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 24 [cc]
;; live  kill	
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 11 )->[12]->( 13 )
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 11 12 )->[13]->( 14 15 )
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 14 [lr]
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 13 )->[14]->( 15 )
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 13 14 )->[15]->( 1 )
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]

( 15 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 150 to worklist
  Adding insn 19 to worklist
  Adding insn 18 to worklist
  Adding insn 13 to worklist
  Adding insn 146 to worklist
  Adding insn 28 to worklist
  Adding insn 36 to worklist
  Adding insn 48 to worklist
  Adding insn 44 to worklist
  Adding insn 56 to worklist
  Adding insn 53 to worklist
  Adding insn 67 to worklist
  Adding insn 70 to worklist
  Adding insn 64 to worklist
  Adding insn 76 to worklist
  Adding insn 84 to worklist
  Adding insn 81 to worklist
  Adding insn 95 to worklist
  Adding insn 98 to worklist
  Adding insn 92 to worklist
  Adding insn 104 to worklist
  Adding insn 119 to worklist
  Adding insn 114 to worklist
  Adding insn 109 to worklist
  Adding insn 125 to worklist
  Adding insn 122 to worklist
  Adding insn 127 to worklist
  Adding insn 131 to worklist
  Adding insn 149 to worklist
  Adding insn 130 to worklist
Finished finding needed instructions:
processing block 3 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 26 to worklist
  Adding insn 27 to worklist
processing block 15 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
processing block 14 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
processing block 13 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 124 to worklist
  Adding insn 123 to worklist
processing block 12 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 142 to worklist
  Adding insn 118 to worklist
  Adding insn 143 to worklist
  Adding insn 117 to worklist
  Adding insn 112 to worklist
  Adding insn 111 to worklist
  Adding insn 107 to worklist
processing block 11 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 103 to worklist
  Adding insn 102 to worklist
  Adding insn 101 to worklist
processing block 10 lr out =  5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 94 to worklist
  Adding insn 91 to worklist
  Adding insn 90 to worklist
  Adding insn 89 to worklist
processing block 9 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 83 to worklist
  Adding insn 79 to worklist
processing block 8 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 75 to worklist
  Adding insn 74 to worklist
  Adding insn 73 to worklist
processing block 7 lr out =  5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 63 to worklist
  Adding insn 62 to worklist
  Adding insn 61 to worklist
processing block 6 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 55 to worklist
  Adding insn 51 to worklist
processing block 5 lr out =  1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 47 to worklist
  Adding insn 46 to worklist
  Adding insn 43 to worklist
  Adding insn 144 to worklist
  Adding insn 42 to worklist
  Adding insn 45 to worklist
  Adding insn 40 to worklist
processing block 4 lr out =  3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 29 to worklist
  Adding insn 35 to worklist
  Adding insn 30 to worklist
  Adding insn 34 to worklist
  Adding insn 25 to worklist
processing block 2 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
  Adding insn 21 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 14 to worklist
  Adding insn 20 to worklist
  Adding insn 3 to worklist
  Adding insn 2 to worklist
  Adding insn 12 to worklist
  Adding insn 7 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 31 (  1.9)
;;   ======================================================
;;   -- basic block 2 from 146 to 150 -- after reload
;;   ======================================================

;;	  0-->     7 r3=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  0-->    12 ip=0x0                            :cortex_a8_default
;;	  1-->   146 {[--sp]=unspec[r0] 2;use r1;use r2:cortex_a8_load_store_2
;;	  2-->     2 r6=r0                             :cortex_a8_default
;;	  3-->     3 r7=r1                             :cortex_a8_default
;;	  3-->    14 r0=r3+0x8                         :cortex_a8_default
;;	  4-->    15 r1=[r3+0x4]                       :cortex_a8_load_store_1
;;	  4-->    16 r2=0xc                            :cortex_a8_default
;;	  5-->    17 r3=`meminfo_cmp'                  :cortex_a8_load_store_1
;;	  5-->    20 r4=ip                             :cortex_a8_default
;;	  6-->    21 r5=ip                             :cortex_a8_default
;;	  6-->    13 [sp]=ip                           :cortex_a8_load_store_1
;;	  7-->    18 call [`sort']                     :cortex_a8_issue_branch
;;	  8-->    19 call [`memblock_init']            :cortex_a8_issue_branch
;;	  8-->   150 pc=L31                            :cortex_a8_default
;;	Ready list (final):  
;;   total time = 8
;;   new head = 146
;;   new tail = 150

;;   ======================================================
;;   -- basic block 3 from 27 to 28 -- after reload
;;   ======================================================

;;	  0-->    27 r1=[r3+0x8]                       :cortex_a8_load_store_1
;;	  1-->    26 r0=[r3+0x4]                       :cortex_a8_load_store_1
;;	  2-->    28 r0=call [`memblock_add']          :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 27
;;   new tail = 28

;;   ======================================================
;;   -- basic block 4 from 25 to 36 -- after reload
;;   ======================================================

;;	  0-->    34 r2=[r6]                           :cortex_a8_load_store_1
;;	  0-->    25 r3=r6+r4                          :cortex_a8_default
;;	  1-->    30 r4=r4+0xc                         :cortex_a8_default
;;	  2-->    35 cc=cmp(r5,r2)                     :cortex_a8_default
;;	  2-->    29 r5=r5+0x1                         :cortex_a8_default
;;	  4-->    36 pc={(cc<0x0)?L33:pc}              :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 25
;;   new tail = 36

;;   ======================================================
;;   -- basic block 5 from 40 to 48 -- after reload
;;   ======================================================

;;	  0-->    40 r3=`_stext'                       :cortex_a8_load_store_1
;;	  1-->    45 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  2-->   144 r1=`_end'                         :cortex_a8_load_store_1
;;	  2-->    42 r0=r3+0x40000000                  :cortex_a8_default
;;	  4-->    43 r1=r1-r3                          :cortex_a8_default
;;	  5-->    44 r0=call [`memblock_reserve']      :cortex_a8_issue_branch
;;	  5-->    46 r1=[r4+0x4]                       :cortex_a8_load_store_1
;;	  7-->    47 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  9-->    48 pc={(cc==0x0)?L71:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 9
;;   new head = 40
;;   new tail = 48

;;   ======================================================
;;   -- basic block 6 from 51 to 56 -- after reload
;;   ======================================================

;;	  0-->    51 r0=[r4]                           :cortex_a8_load_store_1
;;	  1-->    53 r0=call [`memblock_is_region_memor:cortex_a8_issue_branch
;;	 33-->    55 {cc=cmp(r0,0x0);r5=r0;}           :cortex_a8_default
;;	 35-->    56 pc={(cc!=0x0)?L71:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 51
;;   new tail = 56

;;   ======================================================
;;   -- basic block 7 from 61 to 67 -- after reload
;;   ======================================================

;;	  0-->    61 r0=`*.LC9'                        :cortex_a8_load_store_1
;;	  1-->    62 r1=[r4]                           :cortex_a8_load_store_1
;;	  2-->    63 r2=[r4+0x4]                       :cortex_a8_load_store_1
;;	  3-->    64 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->    70 [r4]=r5                           :cortex_a8_load_store_1
;;	  4-->    67 [r4+0x4]=r5                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 4
;;   new head = 61
;;   new tail = 67

;;   ======================================================
;;   -- basic block 8 from 73 to 76 -- after reload
;;   ======================================================

;;	  0-->    73 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->    74 r1=[r4+0x4]                       :cortex_a8_load_store_1
;;	  5-->    75 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  7-->    76 pc={(cc==0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 73
;;   new tail = 76

;;   ======================================================
;;   -- basic block 9 from 79 to 84 -- after reload
;;   ======================================================

;;	  0-->    79 r0=[r4]                           :cortex_a8_load_store_1
;;	  1-->    81 r0=call [`memblock_is_region_reser:cortex_a8_issue_branch
;;	 33-->    83 cc=cmp(r0,0x0)                    :cortex_a8_default
;;	 35-->    84 pc={(cc==0x0)?L99:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 35
;;   new head = 79
;;   new tail = 84

;;   ======================================================
;;   -- basic block 10 from 89 to 95 -- after reload
;;   ======================================================

;;	  0-->    89 r0=`*.LC10'                       :cortex_a8_load_store_1
;;	  1-->    90 r1=[r4]                           :cortex_a8_load_store_1
;;	  2-->    91 r2=[r4+0x4]                       :cortex_a8_load_store_1
;;	  3-->    92 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->    94 r3=0x0                            :cortex_a8_default
;;	  4-->    98 [r4]=r3                           :cortex_a8_load_store_1
;;	  5-->    95 [r4+0x4]=r3                       :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 5
;;   new head = 89
;;   new tail = 95

;;   ======================================================
;;   -- basic block 11 from 101 to 104 -- after reload
;;   ======================================================

;;	  0-->   101 r4=`*.LANCHOR0'                   :cortex_a8_load_store_1
;;	  3-->   102 r1=[r4+0x4]                       :cortex_a8_load_store_1
;;	  5-->   103 cc=cmp(r1,0x0)                    :cortex_a8_default
;;	  7-->   104 pc={(cc==0x0)?L120:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 7
;;   new head = 101
;;   new tail = 104

;;   ======================================================
;;   -- basic block 12 from 107 to 119 -- after reload
;;   ======================================================

;;	  0-->   107 r0=[r4]                           :cortex_a8_load_store_1
;;	  1-->   109 r0=call [`memblock_reserve']      :cortex_a8_issue_branch
;;	  1-->   111 r3=[r4]                           :cortex_a8_load_store_1
;;	  2-->   143 r1=`initrd_start'                 :cortex_a8_load_store_1
;;	  3-->   117 r2=[r4+0x4]                       :cortex_a8_load_store_1
;;	  3-->   112 r3=r3-0x40000000                  :cortex_a8_default
;;	  5-->   114 [r1]=r3                           :cortex_a8_load_store_1
;;	  5-->   118 r3=r3+r2                          :cortex_a8_default
;;	  6-->   142 r2=`initrd_end'                   :cortex_a8_load_store_1
;;	  9-->   119 [r2]=r3                           :cortex_a8_load_store_1
;;	Ready list (final):  
;;   total time = 9
;;   new head = 107
;;   new tail = 119

;;   ======================================================
;;   -- basic block 13 from 122 to 125 -- after reload
;;   ======================================================

;;	  0-->   122 call [`arm_mm_memblock_reserve']  :cortex_a8_issue_branch
;;	  0-->   123 r3=[r7+0x24]                      :cortex_a8_load_store_1
;;	  2-->   124 cc=cmp(r3,0x0)                    :cortex_a8_default
;;	  4-->   125 pc={(cc==0x0)?L128:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 122
;;   new tail = 125

;;   ======================================================
;;   -- basic block 14 from 127 to 127 -- after reload
;;   ======================================================

;;	  0-->   127 call [r3]                         :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 0
;;   new head = 127
;;   new tail = 127

;;   ======================================================
;;   -- basic block 15 from 130 to 131 -- after reload
;;   ======================================================

;;	  0-->   130 call [`memblock_analyze']         :cortex_a8_issue_branch
;;	 32-->   149 {unspec{lr;};unspec/v{return;};}  :nothing
;;	 33-->   131 call [`memblock_dump_all']        :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 33
;;   new head = 130
;;   new tail = 131





arm_memblock_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={22d,13u} r1={24d,15u} r2={20d,7u} r3={23d,15u} r4={6d,20u,1d} r5={4d,6u} r6={2d,4u,1d} r7={2d,3u} r12={14d,3u} r13={2d,30u} r14={13d,3u} r15={13d} r16={13d} r17={13d} r18={13d} r19={13d} r20={13d} r21={13d} r22={13d} r23={13d} r24={20d,7u} r27={13d} r28={13d} r29={13d} r30={13d} r31={13d} r32={13d} r33={13d} r34={13d} r35={13d} r36={13d} r37={13d} r38={13d} r39={13d} r40={13d} r41={13d} r42={13d} r43={13d} r44={13d} r45={13d} r46={13d} r47={13d} r48={13d} r49={13d} r50={13d} r51={13d} r52={13d} r53={13d} r54={13d} r55={13d} r56={13d} r57={13d} r58={13d} r59={13d} r60={13d} r61={13d} r62={13d} r63={13d} r64={13d} r65={13d} r66={13d} r67={13d} r68={13d} r69={13d} r70={13d} r71={13d} r72={13d} r73={13d} r74={13d} r75={13d} r76={13d} r77={13d} r78={13d} r79={13d} r80={13d} r81={13d} r82={13d} r83={13d} r84={13d} r85={13d} r86={13d} r87={13d} r88={13d} r89={13d} r90={13d} r91={13d} r92={13d} r93={13d} r94={13d} r95={13d} r96={13d} r97={13d} r98={13d} r99={13d} r100={13d} r101={13d} r102={13d} r103={13d} r104={13d} r105={13d} r106={13d} r107={13d} r108={13d} r109={13d} r110={13d} r111={13d} r112={13d} r113={13d} r114={13d} r115={13d} r116={13d} r117={13d} r118={13d} r119={13d} r120={13d} r121={13d} r122={13d} r123={13d} r124={13d} r125={13d} r126={13d} r127={13d} 
;;    total ref usage 1710{1582d,126u,2e} in 80{67 regular + 13 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 7 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 7 4 12 2 arch/arm/mm/init.c:332 (set (reg/f:SI 3 r3 [145])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 12 7 146 2 arch/arm/mm/init.c:332 (set (reg:SI 12 ip [150])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn/f:TI 146 12 147 2 arch/arm/mm/init.c:329 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_DEAD (reg:SI 2 r2)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -32 [0xffffffffffffffe0])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 0 r0))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 1 r1))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 2 r2))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 24 [0x18])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 28 [0x1c])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 147 146 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 147 3 2 arch/arm/mm/init.c:329 (set (reg/v/f:SI 6 r6 [orig:143 mi ] [143])
        (reg:SI 0 r0 [ mi ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ mi ])
        (nil)))

(insn:TI 3 2 14 2 arch/arm/mm/init.c:329 (set (reg/v/f:SI 7 r7 [orig:144 mdesc ] [144])
        (reg:SI 1 r1 [ mdesc ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ mdesc ])
        (nil)))

(insn 14 3 15 2 arch/arm/mm/init.c:332 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 3 r3 [145])
            (const_int 8 [0x8]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                (const_int 8 [0x8])))
        (nil)))

(insn:TI 15 14 16 2 arch/arm/mm/init.c:332 (set (reg:SI 1 r1)
        (mem/s/j/c:SI (plus:SI (reg/f:SI 3 r3 [145])
                (const_int 4 [0x4])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [145])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
            (nil))))

(insn 16 15 17 2 arch/arm/mm/init.c:332 (set (reg:SI 2 r2)
        (const_int 12 [0xc])) 167 {*arm_movsi_insn} (nil))

(insn:TI 17 16 20 2 arch/arm/mm/init.c:332 (set (reg:SI 3 r3)
        (symbol_ref:SI ("meminfo_cmp") [flags 0x3] <function_decl 0x115b7c80 meminfo_cmp>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("meminfo_cmp") [flags 0x3] <function_decl 0x115b7c80 meminfo_cmp>)
        (nil)))

(insn 20 17 21 2 arch/arm/mm/init.c:334 (set (reg:SI 4 r4 [orig:136 ivtmp.885 ] [136])
        (reg:SI 12 ip [150])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 21 20 13 2 arch/arm/mm/init.c:335 (set (reg/v:SI 5 r5 [orig:137 i ] [137])
        (reg:SI 12 ip [orig:136 ivtmp.885 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 13 21 18 2 arch/arm/mm/init.c:332 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [150])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [150])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(call_insn:TI 18 13 19 2 arch/arm/mm/init.c:332 (parallel [
            (call (mem:SI (symbol_ref:SI ("sort") [flags 0x41] <function_decl 0x11402380 sort>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(call_insn:TI 19 18 150 2 arch/arm/mm/init.c:334 (parallel [
            (call (mem:SI (symbol_ref:SI ("memblock_init") [flags 0x41] <function_decl 0x113f7480 memblock_init>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 150 19 151 2 arch/arm/mm/init.c:335 (set (pc)
        (label_ref 31)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [100.0%] 

(barrier 151 150 33)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  4 [88.9%] 
(code_label 33 151 24 3 90 "" [1 uses])

(note 24 33 27 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 27 24 26 3 arch/arm/mm/init.c:336 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 D.26496 ] [135])
                (const_int 8 [0x8])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 26 27 28 3 arch/arm/mm/init.c:336 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 D.26496 ] [135])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:135 D.26496 ] [135])
        (nil)))

(call_insn:TI 28 26 31 3 arch/arm/mm/init.c:336 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_add") [flags 0x41] <function_decl 0x113f7580 memblock_add>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 31 28 32 4 89 "" [1 uses])

(note 32 31 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 34 32 25 4 arch/arm/mm/init.c:335 (set (reg:SI 2 r2 [orig:151 <variable>.nr_banks ] [151])
        (mem/s/j:SI (reg/v/f:SI 6 r6 [orig:143 mi ] [143]) [0 <variable>.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 6 r6 [orig:143 mi ] [143]) [0 <variable>.nr_banks+0 S4 A32])
        (nil)))

(insn 25 34 30 4 arch/arm/mm/init.c:328 (set (reg/f:SI 3 r3 [orig:135 D.26496 ] [135])
        (plus:SI (reg/v/f:SI 6 r6 [orig:143 mi ] [143])
            (reg:SI 4 r4 [orig:136 ivtmp.885 ] [136]))) 4 {*arm_addsi3} (nil))

(insn:TI 30 25 35 4 arch/arm/mm/init.c:335 discrim 2 (set (reg:SI 4 r4 [orig:136 ivtmp.885 ] [136])
        (plus:SI (reg:SI 4 r4 [orig:136 ivtmp.885 ] [136])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(insn:TI 35 30 29 4 arch/arm/mm/init.c:335 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:137 i ] [137])
            (reg:SI 2 r2 [orig:151 <variable>.nr_banks ] [151]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:151 <variable>.nr_banks ] [151])
        (nil)))

(insn 29 35 36 4 arch/arm/mm/init.c:335 discrim 2 (set (reg/v:SI 5 r5 [orig:137 i ] [137])
        (plus:SI (reg/v:SI 5 r5 [orig:137 i ] [137])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 36 29 37 4 arch/arm/mm/init.c:335 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8889 [0x22b9])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [88.9%] 
;; Succ edge  5 [11.1%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [11.1%]  (fallthru,loop_exit)
(note 37 36 41 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 41 37 40 5 NOTE_INSN_DELETED)

(insn:TI 40 41 45 5 arch/arm/mm/init.c:342 (set (reg/f:SI 3 r3 [155])
        (symbol_ref:SI ("_stext") [flags 0xc0] <var_decl 0x113f9720 _stext>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_stext") [flags 0xc0] <var_decl 0x113f9720 _stext>)
        (nil)))

(insn:TI 45 40 144 5 arch/arm/mm/init.c:345 (set (reg/f:SI 4 r4 [156])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 144 45 42 5 arch/arm/mm/init.c:342 (set (reg/f:SI 1 r1 [154])
        (symbol_ref:SI ("_end") [flags 0xc0] <var_decl 0x11478300 _end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("_end") [flags 0xc0] <var_decl 0x11478300 _end>)
        (nil)))

(insn 42 144 43 5 arch/arm/mm/init.c:342 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 3 r3 [155])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("_stext") [flags 0xc0] <var_decl 0x113f9720 _stext>)
                (const_int 1073741824 [0x40000000])))
        (nil)))

(insn:TI 43 42 44 5 arch/arm/mm/init.c:342 (set (reg:SI 1 r1)
        (minus:SI (reg/f:SI 1 r1 [154])
            (reg/f:SI 3 r3 [155]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [155])
        (nil)))

(call_insn:TI 44 43 46 5 arch/arm/mm/init.c:342 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_reserve") [flags 0x41] <function_decl 0x113f7700 memblock_reserve>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 46 44 47 5 arch/arm/mm/init.c:345 (set (reg:SI 1 r1 [orig:142 phys_initrd_size.365 ] [142])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn:TI 47 46 48 5 arch/arm/mm/init.c:345 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:142 phys_initrd_size.365 ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 48 47 49 5 arch/arm/mm/init.c:345 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 71)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  8 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 49 48 54 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 54 49 51 6 NOTE_INSN_DELETED)

(insn:TI 51 54 53 6 arch/arm/mm/init.c:346 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 4 r4 [156]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(call_insn:TI 53 51 55 6 arch/arm/mm/init.c:346 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_is_region_memory") [flags 0x41] <function_decl 0x113f7c00 memblock_is_region_memory>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 55 53 56 6 arch/arm/mm/init.c:345 discrim 1 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 5 r5 [orig:141 D.25190 ] [141])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 56 55 57 6 arch/arm/mm/init.c:345 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 71)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  7 [0.0%]  (fallthru)
;; Succ edge  8 [100.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  6 [0.0%]  (fallthru)
(note 57 56 61 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 61 57 62 7 arch/arm/mm/init.c:347 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11160a80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x11160a80>)
        (nil)))

(insn:TI 62 61 63 7 arch/arm/mm/init.c:347 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 4 r4 [156]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(insn:TI 63 62 64 7 arch/arm/mm/init.c:347 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(call_insn:TI 64 63 70 7 arch/arm/mm/init.c:347 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 70 64 67 7 arch/arm/mm/init.c:349 (set (mem/c/i:SI (reg/f:SI 4 r4 [156]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 5 r5 [orig:141 D.25190 ] [141])) 167 {*arm_movsi_insn} (nil))

(insn:TI 67 70 71 7 arch/arm/mm/init.c:349 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [156])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 5 r5 [orig:141 D.25190 ] [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [156])
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 5 6 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  5 [71.0%] 
;; Pred edge  6 [100.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 71 67 72 8 91 "" [2 uses])

(note 72 71 73 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 73 72 74 8 arch/arm/mm/init.c:351 (set (reg/f:SI 4 r4 [165])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 74 73 75 8 arch/arm/mm/init.c:351 (set (reg:SI 1 r1 [orig:134 phys_initrd_size.892 ] [134])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [165])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn:TI 75 74 76 8 arch/arm/mm/init.c:351 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:134 phys_initrd_size.892 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 76 75 77 8 arch/arm/mm/init.c:351 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 8 -> ( 9 11)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  9 [29.0%]  (fallthru)
;; Succ edge  11 [71.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [29.0%]  (fallthru)
(note 77 76 82 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 82 77 79 9 NOTE_INSN_DELETED)

(insn:TI 79 82 81 9 arch/arm/mm/init.c:352 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 4 r4 [165]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(call_insn:TI 81 79 83 9 arch/arm/mm/init.c:352 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_is_region_reserved") [flags 0x41] <function_decl 0x113f7d00 memblock_is_region_reserved>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 83 81 84 9 arch/arm/mm/init.c:351 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 84 83 85 9 arch/arm/mm/init.c:351 discrim 1 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 99)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 9 -> ( 10 11)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  10 [0.0%]  (fallthru)
;; Succ edge  11 [100.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%]  (fallthru)
(note 85 84 89 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 89 85 90 10 arch/arm/mm/init.c:353 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x1174ae00>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC10") [flags 0x82] <string_cst 0x1174ae00>)
        (nil)))

(insn:TI 90 89 91 10 arch/arm/mm/init.c:353 (set (reg:SI 1 r1)
        (mem/c/i:SI (reg/f:SI 4 r4 [165]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(insn:TI 91 90 92 10 arch/arm/mm/init.c:353 (set (reg:SI 2 r2)
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [165])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(call_insn:TI 92 91 94 10 arch/arm/mm/init.c:353 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 94 92 98 10 arch/arm/mm/init.c:355 (set (reg:SI 3 r3 [171])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 0 [0x0])
        (nil)))

(insn:TI 98 94 95 10 arch/arm/mm/init.c:355 (set (mem/c/i:SI (reg/f:SI 4 r4 [165]) [0 phys_initrd_start+0 S4 A32])
        (reg:SI 3 r3 [171])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 95 98 99 10 arch/arm/mm/init.c:355 (set (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [165])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])
        (reg:SI 3 r3 [171])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 4 r4 [165])
        (expr_list:REG_DEAD (reg:SI 3 r3 [171])
            (expr_list:REG_EQUAL (const_int 0 [0x0])
                (nil)))))
;; End of basic block 10 -> ( 11)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 8 9 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  8 [71.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  10 [100.0%]  (fallthru)
(code_label 99 95 100 11 92 "" [2 uses])

(note 100 99 101 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 101 100 102 11 arch/arm/mm/init.c:357 (set (reg/f:SI 4 r4 [174])
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(insn:TI 102 101 103 11 arch/arm/mm/init.c:357 (set (reg:SI 1 r1 [orig:133 phys_initrd_size.896 ] [133])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [174])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn:TI 103 102 104 11 arch/arm/mm/init.c:357 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:133 phys_initrd_size.896 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 104 103 105 11 arch/arm/mm/init.c:357 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 120)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 11 -> ( 12 13)
;; lr  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  12 [29.0%]  (fallthru)
;; Succ edge  13 [71.0%] 

;; Start of basic block ( 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  11 [29.0%]  (fallthru)
(note 105 104 107 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 107 105 109 12 arch/arm/mm/init.c:358 (set (reg:SI 0 r0)
        (mem/c/i:SI (reg/f:SI 4 r4 [174]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
        (nil)))

(call_insn:TI 109 107 111 12 arch/arm/mm/init.c:358 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_reserve") [flags 0x41] <function_decl 0x113f7700 memblock_reserve>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 111 109 143 12 arch/arm/mm/init.c:361 (set (reg:SI 3 r3 [orig:177 phys_initrd_start ] [177])
        (mem/c/i:SI (reg/f:SI 4 r4 [174]) [0 phys_initrd_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 4 r4 [174]) [0 phys_initrd_start+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182]) [0 phys_initrd_start+0 S4 A32])
            (nil))))

(insn:TI 143 111 117 12 arch/arm/mm/init.c:361 (set (reg/f:SI 1 r1 [178])
        (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x111e8b40 initrd_start>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_start") [flags 0xc0] <var_decl 0x111e8b40 initrd_start>)
        (nil)))

(insn:TI 117 143 112 12 arch/arm/mm/init.c:362 (set (reg:SI 2 r2 [orig:181 phys_initrd_size ] [181])
        (mem/c/i:SI (plus:SI (reg/f:SI 4 r4 [174])
                (const_int 4 [0x4])) [0 phys_initrd_size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                    (const_int 4 [0x4]))) [0 phys_initrd_size+0 S4 A32])
        (nil)))

(insn 112 117 114 12 arch/arm/mm/init.c:361 (set (reg:SI 3 r3 [orig:139 initrd_start.367 ] [139])
        (plus:SI (reg:SI 3 r3 [orig:177 phys_initrd_start ] [177])
            (const_int -1073741824 [0xffffffffc0000000]))) 4 {*arm_addsi3} (nil))

(insn:TI 114 112 118 12 arch/arm/mm/init.c:361 (set (mem/c/i:SI (reg/f:SI 1 r1 [178]) [0 initrd_start+0 S4 A32])
        (reg:SI 3 r3 [orig:139 initrd_start.367 ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [178])
        (nil)))

(insn 118 114 142 12 arch/arm/mm/init.c:362 (set (reg:SI 3 r3 [182])
        (plus:SI (reg:SI 3 r3 [orig:139 initrd_start.367 ] [139])
            (reg:SI 2 r2 [orig:181 phys_initrd_size ] [181]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:181 phys_initrd_size ] [181])
        (nil)))

(insn:TI 142 118 119 12 arch/arm/mm/init.c:362 (set (reg/f:SI 2 r2 [179])
        (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x111e8ba0 initrd_end>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("initrd_end") [flags 0xc0] <var_decl 0x111e8ba0 initrd_end>)
        (nil)))

(insn:TI 119 142 120 12 arch/arm/mm/init.c:362 (set (mem/c/i:SI (reg/f:SI 2 r2 [179]) [0 initrd_end+0 S4 A32])
        (reg:SI 3 r3 [182])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [182])
        (expr_list:REG_DEAD (reg/f:SI 2 r2 [179])
            (nil))))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 11 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [71.0%] 
;; Pred edge  12 [100.0%]  (fallthru)
(code_label 120 119 121 13 93 "" [1 uses])

(note 121 120 122 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 122 121 123 13 arch/arm/mm/init.c:366 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_mm_memblock_reserve") [flags 0x41] <function_decl 0x115b7280 arm_mm_memblock_reserve>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 123 122 124 13 arch/arm/mm/init.c:370 (set (reg/f:SI 3 r3 [orig:138 D.25203 ] [138])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 7 r7 [orig:144 mdesc ] [144])
                (const_int 36 [0x24])) [0 <variable>.reserve+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 124 123 125 13 arch/arm/mm/init.c:370 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:138 D.25203 ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 125 124 126 13 arch/arm/mm/init.c:370 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 128)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  14 [78.3%]  (fallthru)
;; Succ edge  15 [21.6%] 

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  13 [78.3%]  (fallthru)
(note 126 125 127 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 127 126 128 14 arch/arm/mm/init.c:371 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:138 D.25203 ] [138]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:138 D.25203 ] [138])
        (nil))
    (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  13 [21.6%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 128 127 129 15 94 "" [1 uses])

(note 129 128 130 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 130 129 148 15 arch/arm/mm/init.c:373 (parallel [
            (call (mem:SI (symbol_ref:SI ("memblock_analyze") [flags 0x41] <function_decl 0x113f7500 memblock_analyze>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(note 148 130 149 15 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 149 148 131 15 arch/arm/mm/init.c:375 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 131 149 132 15 arch/arm/mm/init.c:374 (parallel [
            (call (mem:SI (symbol_ref:SI ("memblock_dump_all") [flags 0x41] <function_decl 0x113f7d80 memblock_dump_all>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 132 131 145)

(note 145 132 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function pfn_valid (pfn_valid)[0:1350]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
;;   ======================================================
;;   -- basic block 2 from 7 to 8 -- after reload
;;   ======================================================

;;	  0-->     7 r0=r0<<0xc                        :cortex_a8_default
;;	  0-->    25 {unspec{lr;};unspec/v{return;};}  :nothing
;;	  1-->     8 r0=call [`memblock_is_memory']    :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 1
;;   new head = 7
;;   new tail = 8





pfn_valid

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 13[sp] 14[lr]
;;  ref usage 	r0={3d,3u} r1={2d} r2={2d} r3={2d} r12={1d} r13={1d,3u} r14={1d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 131{123d,8u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 23 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 23 4 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 23 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(insn:TI 7 6 24 2 arch/arm/mm/init.c:301 (set (reg:SI 0 r0)
        (ashift:SI (reg:SI 0 r0 [ pfn ])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(note 24 7 25 2 NOTE_INSN_EPILOGUE_BEG)

(insn 25 24 8 2 arch/arm/mm/init.c:302 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 8 25 9 2 arch/arm/mm/init.c:301 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("memblock_is_memory") [flags 0x41] <function_decl 0x113f7b80 memblock_is_memory>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 9 8 22)

(note 22 9 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns

;; Function show_mem (show_mem)[0:1346]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 27 (  2.2)


show_mem

Dataflow summary:
def_info->table_size = 0, use_info->table_size = 0
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={19d,11u} r1={16d,7u} r2={11d,8u,1d} r3={15d,16u} r4={4d,5u} r5={3d,5u} r6={3d,5u} r7={3d,5u} r8={12d,15u} r9={5d,6u} r10={2d,3u} r12={10d,2u} r13={2d,20u} r14={9d,5u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={15d,12u} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} 
;;    total ref usage 1135{1009d,125u,1e} in 75{67 regular + 8 call} insns.

( )->[0]->( 2 )
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]

( 0 )->[2]->( 10 )
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  kill	 14 [lr]
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 10 )->[3]->( 4 )
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 9 [r9]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 9 [r9]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 3 8 )->[4]->( 5 8 )
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 6 [r6] 8 [r8] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 4 )->[5]->( 6 8 )
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 8 [r8] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 5 )->[6]->( 7 8 )
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 7 [r7] 8 [r8] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 6 )->[7]->( 8 )
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 8 [r8] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 5 7 4 6 )->[8]->( 4 9 )
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 8 )->[9]->( 10 )
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 12 [ip]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 9 2 )->[10]->( 3 11 )
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 10 [sl] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]

( 10 )->[11]->( 1 )
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]

( 11 )->[1]->( )
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	
;; live  kill	
;; lr  out 	
;; live  out 	

Finding needed instructions:
  Adding insn 169 to worklist
  Adding insn 10 to worklist
  Adding insn 8 to worklist
  Adding insn 165 to worklist
  Adding insn 43 to worklist
  Adding insn 40 to worklist
  Adding insn 53 to worklist
  Adding insn 50 to worklist
  Adding insn 76 to worklist
  Adding insn 74 to worklist
  Adding insn 60 to worklist
  Adding insn 97 to worklist
  Adding insn 83 to worklist
  Adding insn 105 to worklist
  Adding insn 113 to worklist
  Adding insn 138 to worklist
  Adding insn 168 to worklist
  Adding insn 134 to worklist
  Adding insn 130 to worklist
  Adding insn 126 to worklist
  Adding insn 122 to worklist
  Adding insn 118 to worklist
Finished finding needed instructions:
processing block 9 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 108 to worklist
  Adding insn 107 to worklist
processing block 8 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 104 to worklist
  Adding insn 102 to worklist
processing block 7 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 99 to worklist
  Adding insn 98 to worklist
  Adding insn 93 to worklist
  Adding insn 88 to worklist
  Adding insn 85 to worklist
processing block 6 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 78 to worklist
  Adding insn 75 to worklist
  Adding insn 70 to worklist
  Adding insn 65 to worklist
  Adding insn 62 to worklist
processing block 5 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 55 to worklist
  Adding insn 52 to worklist
processing block 4 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 45 to worklist
  Adding insn 42 to worklist
  Adding insn 38 to worklist
processing block 3 lr out =  0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 36 to worklist
  Adding insn 31 to worklist
  Adding insn 34 to worklist
  Adding insn 29 to worklist
  Adding insn 33 to worklist
  Adding insn 28 to worklist
  Adding insn 32 to worklist
  Adding insn 27 to worklist
processing block 11 lr out =  4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
  Adding insn 137 to worklist
  Adding insn 136 to worklist
  Adding insn 132 to worklist
  Adding insn 133 to worklist
  Adding insn 128 to worklist
  Adding insn 129 to worklist
  Adding insn 124 to worklist
  Adding insn 125 to worklist
  Adding insn 120 to worklist
  Adding insn 121 to worklist
  Adding insn 116 to worklist
processing block 10 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 112 to worklist
processing block 2 lr out =  0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
  Adding insn 21 to worklist
  Adding insn 20 to worklist
  Adding insn 19 to worklist
  Adding insn 14 to worklist
  Adding insn 163 to worklist
  Adding insn 18 to worklist
  Adding insn 12 to worklist
  Adding insn 17 to worklist
  Adding insn 16 to worklist
  Adding insn 15 to worklist
  Adding insn 150 to worklist
  Adding insn 9 to worklist
  Adding insn 7 to worklist
  Adding insn 2 to worklist
df_worklist_dataflow_doublequeue:n_basic_blocks 12 n_edges 16 count 29 (  2.4)
;;   ======================================================
;;   -- basic block 2 from 165 to 169 -- after reload
;;   ======================================================

;;	  0-->   165 {[--sp]=unspec[r4] 2;use r5;use r6:cortex_a8_load_store_2
;;	  1-->     2 r4=r0                             :cortex_a8_default
;;	  2-->     7 r0=`*.LC11'                       :cortex_a8_load_store_1
;;	  3-->     8 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->     9 r0=r4                             :cortex_a8_default
;;	  4-->    10 call [`show_free_areas']          :cortex_a8_issue_branch
;;	  4-->   150 r0=`*.LANCHOR1'                   :cortex_a8_load_store_1
;;	  5-->   163 r3=`mem_map'                      :cortex_a8_load_store_1
;;	  5-->    15 r2=0x0                            :cortex_a8_default
;;	  6-->    16 ip=r2                             :cortex_a8_default
;;	  6-->    17 r5=r2                             :cortex_a8_default
;;	  7-->    12 sl=[++r0]                         :cortex_a8_load_store_1
;;	  7-->    18 r4=r2                             :cortex_a8_default
;;	  8-->    14 lr=[r3]                           :cortex_a8_load_store_1
;;	  8-->    19 r6=r2                             :cortex_a8_default
;;	  9-->    20 r1=r2                             :cortex_a8_default
;;	  9-->    21 r7=r2                             :cortex_a8_default
;;	 10-->   169 pc=L109                           :cortex_a8_default
;;	Ready list (final):  
;;   total time = 10
;;   new head = 165
;;   new tail = 169

;;   ======================================================
;;   -- basic block 3 from 27 to 36 -- after reload
;;   ======================================================

;;	  0-->    27 r3=r0+r2                          :cortex_a8_default
;;	  2-->    32 r9=[r3+0x8]                       :cortex_a8_load_store_1
;;	  3-->    28 r3=[r3+0x4]                       :cortex_a8_load_store_1
;;	  5-->    33 r9=r3+r9                          :cortex_a8_default
;;	  6-->    29 r3=r3 0>>0xc                      :cortex_a8_default
;;	  7-->    34 r9=r9 0>>0xc                      :cortex_a8_default
;;	  8-->    31 r3=r3*0x20+lr                     :cortex_a8_default
;;	  9-->    36 r9=r9*0x20+lr                     :cortex_a8_default
;;	Ready list (final):  
;;   total time = 9
;;   new head = 27
;;   new tail = 36

;;   ======================================================
;;   -- basic block 4 from 40 to 43 -- after reload
;;   ======================================================

;;	  0-->    40 r8=[r3]                           :cortex_a8_load_store_1
;;	  0-->    38 r1=r1+0x1                         :cortex_a8_default
;;	  2-->    42 cc=cmp(zxt(r8,0x1,0xa),0x0)       :cortex_a8_default
;;	  3-->    45 (cc) r6=r6+0x1                    :cortex_a8_default
;;	  4-->    43 pc={(cc!=0x0)?L100:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 40
;;   new tail = 43

;;   ======================================================
;;   -- basic block 5 from 50 to 53 -- after reload
;;   ======================================================

;;	  0-->    50 r8=[r3]                           :cortex_a8_load_store_1
;;	  2-->    52 cc=cmp(zxt(r8,0x1,0x7),0x0)       :cortex_a8_default
;;	  3-->    55 (cc) r5=r5+0x1                    :cortex_a8_default
;;	  4-->    53 pc={(cc!=0x0)?L100:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 4
;;   new head = 50
;;   new tail = 53

;;   ======================================================
;;   -- basic block 6 from 60 to 76 -- after reload
;;   ======================================================

;;	  0-->    60 r8=[r3]                           :cortex_a8_load_store_1
;;	  2-->    62 cc=cmp(zxt(r8,0x1,0xf),0x0)       :cortex_a8_default
;;	  3-->    65 (!cc) r8=r3                       :cortex_a8_default
;;	  4-->    70 (cc) r8=[r3+0x1c]                 :cortex_a8_load_store_1
;;	  7-->    74 r8=[r8+0x10]                      :cortex_a8_load_store_1
;;	  9-->    75 cc=cmp(r8,0x0)                    :cortex_a8_default
;;	 10-->    78 (!cc) r7=r7+0x1                   :cortex_a8_default
;;	 11-->    76 pc={(cc==0x0)?L100:pc}            :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 11
;;   new head = 60
;;   new tail = 76

;;   ======================================================
;;   -- basic block 7 from 83 to 99 -- after reload
;;   ======================================================

;;	  0-->    83 r8=[r3]                           :cortex_a8_load_store_1
;;	  2-->    85 cc=cmp(zxt(r8,0x1,0xf),0x0)       :cortex_a8_default
;;	  3-->    88 (!cc) r8=r3                       :cortex_a8_default
;;	  4-->    93 (cc) r8=[r3+0x1c]                 :cortex_a8_load_store_1
;;	  7-->    97 r8=[r8+0x10]                      :cortex_a8_load_store_1
;;	  9-->    98 r8=r8-0x1                         :cortex_a8_default
;;	 10-->    99 r4=r4+r8                          :cortex_a8_default
;;	Ready list (final):  
;;   total time = 10
;;   new head = 83
;;   new tail = 99

;;   ======================================================
;;   -- basic block 8 from 102 to 105 -- after reload
;;   ======================================================

;;	  0-->   102 r3=r3+0x20                        :cortex_a8_default
;;	  1-->   104 cc=cmp(r3,r9)                     :cortex_a8_default
;;	  3-->   105 pc={(ltu(cc,0x0))?L103:pc}        :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 3
;;   new head = 102
;;   new tail = 105

;;   ======================================================
;;   -- basic block 9 from 107 to 108 -- after reload
;;   ======================================================

;;	  0-->   107 ip=ip+0x1                         :cortex_a8_default
;;	  0-->   108 r2=r2+0xc                         :cortex_a8_default
;;	Ready list (final):  
;;   total time = 0
;;   new head = 107
;;   new tail = 108

;;   ======================================================
;;   -- basic block 10 from 112 to 113 -- after reload
;;   ======================================================

;;	  0-->   112 cc=cmp(ip,sl)                     :cortex_a8_default
;;	  2-->   113 pc={(cc<0x0)?L111:pc}             :cortex_a8_branch
;;	Ready list (final):  
;;   total time = 2
;;   new head = 112
;;   new tail = 113

;;   ======================================================
;;   -- basic block 11 from 116 to 138 -- after reload
;;   ======================================================

;;	  0-->   116 r0=`*.LC12'                       :cortex_a8_load_store_1
;;	  1-->   118 r0=call [`printk']                :cortex_a8_issue_branch
;;	  1-->   121 r1=r7                             :cortex_a8_default
;;	  2-->   120 r0=`*.LC13'                       :cortex_a8_load_store_1
;;	  3-->   122 r0=call [`printk']                :cortex_a8_issue_branch
;;	  3-->   125 r1=r6                             :cortex_a8_default
;;	  4-->   124 r0=`*.LC14'                       :cortex_a8_load_store_1
;;	  5-->   126 r0=call [`printk']                :cortex_a8_issue_branch
;;	  5-->   129 r1=r5                             :cortex_a8_default
;;	  6-->   128 r0=`*.LC15'                       :cortex_a8_load_store_1
;;	  7-->   130 r0=call [`printk']                :cortex_a8_issue_branch
;;	  7-->   133 r1=r4                             :cortex_a8_default
;;	  8-->   132 r0=`*.LC16'                       :cortex_a8_load_store_1
;;	  9-->   134 r0=call [`printk']                :cortex_a8_issue_branch
;;	  9-->   136 r0=`*.LC17'                       :cortex_a8_load_store_1
;;	 10-->   137 r1=0x0                            :cortex_a8_default
;;	 41-->   168 {unspec{lr;};unspec/v{return;};}  :nothing
;;	 42-->   138 r0=call [`printk']                :cortex_a8_issue_branch
;;	Ready list (final):  
;;   total time = 42
;;   new head = 116
;;   new tail = 138





show_mem

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={19d,11u} r1={16d,7u} r2={11d,8u,1d} r3={15d,16u} r4={4d,5u} r5={3d,5u} r6={3d,5u} r7={3d,5u} r8={12d,15u} r9={5d,6u} r10={2d,3u} r12={10d,2u} r13={2d,20u} r14={9d,5u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={15d,12u} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} 
;;    total ref usage 1135{1009d,125u,1e} in 75{67 regular + 8 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 11 2 NOTE_INSN_FUNCTION_BEG)

(note 11 3 165 2 NOTE_INSN_DELETED)

(insn/f:TI 165 11 166 2 arch/arm/mm/init.c:92 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 10 sl)
            (expr_list:REG_DEAD (reg:SI 7 r7)
                (expr_list:REG_DEAD (reg:SI 6 r6)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -32 [0xffffffffffffffe0])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 8 r8))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 9 r9))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 24 [0x18])) [0 S4 A32])
                                            (reg:SI 10 sl))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 28 [0x1c])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(note 166 165 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 166 7 2 arch/arm/mm/init.c:92 (set (reg/v:SI 4 r4 [orig:157 filter ] [157])
        (reg:SI 0 r0 [ filter ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ filter ])
        (nil)))

(insn:TI 7 2 8 2 arch/arm/mm/init.c:97 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x11768f30>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC11") [flags 0x82] <string_cst 0x11768f30>)
        (nil)))

(call_insn:TI 8 7 9 2 arch/arm/mm/init.c:97 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_UNUSED (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 9 8 10 2 arch/arm/mm/init.c:98 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:157 filter ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v:SI 4 r4 [orig:157 filter ] [157])
        (nil)))

(call_insn:TI 10 9 150 2 arch/arm/mm/init.c:98 (parallel [
            (call (mem:SI (symbol_ref:SI ("show_free_areas") [flags 0x41] <function_decl 0x111b4600 show_free_areas>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 150 10 163 2 arch/arm/mm/init.c:100 discrim 1 (set (reg/f:SI 0 r0 [180])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 163 150 15 2 arch/arm/mm/init.c:108 (set (reg/f:SI 3 r3 [160])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>)
        (nil)))

(insn 15 163 16 2 arch/arm/mm/init.c:108 (set (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 16 15 17 2 arch/arm/mm/init.c:100 (set (reg/v:SI 12 ip [orig:148 i ] [148])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 17 16 12 2 arch/arm/mm/init.c:94 (set (reg/v:SI 5 r5 [orig:149 slab ] [149])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 12 17 18 2 arch/arm/mm/init.c:100 discrim 1 (set (reg:SI 10 sl [orig:154 D.25004 ] [154])
        (mem/s/j/c:SI (pre_inc:SI (reg/f:SI 0 r0 [180])) [0 meminfo.nr_banks+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_INC (reg/f:SI 0 r0 [180])
        (expr_list:REG_EQUAL (mem/s/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                        (const_int 4 [0x4]))) [0 meminfo.nr_banks+0 S4 A32])
            (nil))))

(insn 18 12 14 2 arch/arm/mm/init.c:94 (set (reg/v:SI 4 r4 [orig:150 shared ] [150])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 14 18 19 2 arch/arm/mm/init.c:108 (set (reg/f:SI 14 lr [orig:155 mem_map.344 ] [155])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [160]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [160])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10bfb360 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 19 14 20 2 arch/arm/mm/init.c:93 (set (reg/v:SI 6 r6 [orig:151 reserved ] [151])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 20 19 21 2 arch/arm/mm/init.c:93 (set (reg/v:SI 1 r1 [orig:152 total ] [152])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 21 20 169 2 arch/arm/mm/init.c:93 (set (reg/v:SI 7 r7 [orig:153 free ] [153])
        (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn:TI 169 21 170 2 arch/arm/mm/init.c:100 (set (pc)
        (label_ref 109)) 242 {*arm_jump} (nil))
;; End of basic block 2 -> ( 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  10 [100.0%] 

(barrier 170 169 111)

;; Start of basic block ( 10) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 9 [r9]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 9 [r9]
;; live  kill	

;; Pred edge  10 [91.0%] 
(code_label 111 170 24 3 111 "" [1 uses])

(note 24 111 30 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 30 24 35 3 NOTE_INSN_DELETED)

(note 35 30 27 3 NOTE_INSN_DELETED)

(insn:TI 27 35 32 3 arch/arm/mm/init.c:91 (set (reg/f:SI 3 r3 [orig:135 D.26570 ] [135])
        (plus:SI (reg/f:SI 0 r0 [180])
            (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])
            (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
                    (const_int 4 [0x4]))))
        (nil)))

(insn:TI 32 27 28 3 arch/arm/mm/init.c:109 (set (reg:SI 9 r9 [orig:166 <variable>.size ] [166])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 D.26570 ] [135])
                (const_int 8 [0x8])) [0 <variable>.size+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 28 32 33 3 arch/arm/mm/init.c:105 (set (reg:SI 3 r3 [orig:156 D.24980 ] [156])
        (mem/s/j:SI (plus:SI (reg/f:SI 3 r3 [orig:135 D.26570 ] [135])
                (const_int 4 [0x4])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 33 28 29 3 arch/arm/mm/init.c:109 (set (reg:SI 9 r9 [165])
        (plus:SI (reg:SI 3 r3 [orig:156 D.24980 ] [156])
            (reg:SI 9 r9 [orig:166 <variable>.size ] [166]))) 4 {*arm_addsi3} (nil))

(insn:TI 29 33 34 3 arch/arm/mm/init.c:108 (set (reg:SI 3 r3 [163])
        (lshiftrt:SI (reg:SI 3 r3 [orig:156 D.24980 ] [156])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 34 29 31 3 arch/arm/mm/init.c:109 (set (reg:SI 9 r9 [167])
        (lshiftrt:SI (reg:SI 9 r9 [165])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 31 34 36 3 arch/arm/mm/init.c:108 (set (reg/v/f:SI 3 r3 [orig:147 page ] [147])
        (plus:SI (mult:SI (reg:SI 3 r3 [163])
                (const_int 32 [0x20]))
            (reg/f:SI 14 lr [orig:155 mem_map.344 ] [155]))) 270 {*arith_shiftsi} (nil))

(insn:TI 36 31 103 3 arch/arm/mm/init.c:109 (set (reg/v/f:SI 9 r9 [orig:146 end ] [146])
        (plus:SI (mult:SI (reg:SI 9 r9 [167])
                (const_int 32 [0x20]))
            (reg/f:SI 14 lr [orig:155 mem_map.344 ] [155]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 3 -> ( 4)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 8) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 3 [r3] 6 [r6] 13 [sp]
;; lr  def 	 1 [r1] 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 6 [r6] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  8 [86.0%]  (dfs_back)
(code_label 103 36 37 4 110 "" [1 uses])

(note 37 103 41 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 41 37 40 4 NOTE_INSN_DELETED)

(insn:TI 40 41 38 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:145 D.25946 ] [145])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 38 40 42 4 arch/arm/mm/init.c:112 (set (reg/v:SI 1 r1 [orig:152 total ] [152])
        (plus:SI (reg/v:SI 1 r1 [orig:152 total ] [152])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 42 38 45 4 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:145 D.25946 ] [145])
                (const_int 1 [0x1])
                (const_int 10 [0xa]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 45 42 43 4 arch/arm/mm/init.c:114 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 6 r6 [orig:151 reserved ] [151])
            (plus:SI (reg/v:SI 6 r6 [orig:151 reserved ] [151])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (nil))

(jump_insn:TI 43 45 49 4 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 5 8)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 49 43 51 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 51 49 50 5 NOTE_INSN_DELETED)

(insn:TI 50 51 52 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:143 D.25959 ] [143])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 52 50 55 5 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:143 D.25959 ] [143])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 55 52 53 5 arch/arm/mm/init.c:118 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 5 r5 [orig:149 slab ] [149])
            (plus:SI (reg/v:SI 5 r5 [orig:149 slab ] [149])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (nil))

(jump_insn:TI 53 55 59 5 include/asm-generic/bitops/non-atomic.h:105 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  6 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 7 [r7] 13 [sp]
;; lr  def 	 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 7 [r7] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%]  (fallthru)
(note 59 53 61 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 61 59 60 6 NOTE_INSN_DELETED)

(insn:TI 60 61 62 6 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:141 D.25974 ] [141])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 62 60 65 6 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:141 D.25974 ] [141])
                (const_int 1 [0x1])
                (const_int 15 [0xf]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 65 62 70 6 include/linux/mm.h:356 (cond_exec (eq (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 8 r8 [orig:134 page.962 ] [134])
            (reg/v/f:SI 3 r3 [orig:147 page ] [147]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 70 65 74 6 include/linux/mm.h:355 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 8 r8 [orig:134 page.962 ] [134])
            (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147])
                    (const_int 28 [0x1c])) [0 <variable>.D.8040.first_page+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn:TI 74 70 75 6 include/linux/mm.h:376 (set (reg:SI 8 r8 [orig:142 D.25970 ] [142])
        (mem/v:SI (plus:SI (reg/v/f:SI 8 r8 [orig:134 page.962 ] [134])
                (const_int 16 [0x10])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 75 74 78 6 arch/arm/mm/init.c:119 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 8 r8 [orig:142 D.25970 ] [142])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 78 75 76 6 arch/arm/mm/init.c:120 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 7 r7 [orig:153 free ] [153])
            (plus:SI (reg/v:SI 7 r7 [orig:153 free ] [153])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (nil))

(jump_insn:TI 76 78 82 6 arch/arm/mm/init.c:119 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  7 [50.0%]  (fallthru)
;; Succ edge  8 [50.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 4 [r4] 8 [r8] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 8 [r8] 24 [cc]
;; live  kill	

;; Pred edge  6 [50.0%]  (fallthru)
(note 82 76 84 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 84 82 83 7 NOTE_INSN_DELETED)

(insn:TI 83 84 85 7 include/asm-generic/bitops/non-atomic.h:105 (set (reg:SI 8 r8 [orig:138 D.25991 ] [138])
        (mem/v:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 85 83 88 7 include/asm-generic/bitops/non-atomic.h:105 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 8 r8 [orig:138 D.25991 ] [138])
                (const_int 1 [0x1])
                (const_int 15 [0xf]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(insn:TI 88 85 93 7 include/linux/mm.h:356 (cond_exec (eq (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 8 r8 [orig:133 page.963 ] [133])
            (reg/v/f:SI 3 r3 [orig:147 page ] [147]))) 2345 {neon_vornv2di+78} (nil))

(insn:TI 93 88 97 7 include/linux/mm.h:355 (cond_exec (ne (reg:CC_NOOV 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 8 r8 [orig:133 page.963 ] [133])
            (mem/s/f/j:SI (plus:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147])
                    (const_int 28 [0x1c])) [0 <variable>.D.8040.first_page+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (nil)))

(insn:TI 97 93 98 7 include/linux/mm.h:376 (set (reg:SI 8 r8 [orig:139 D.25987 ] [139])
        (mem/v:SI (plus:SI (reg/v/f:SI 8 r8 [orig:133 page.963 ] [133])
                (const_int 16 [0x10])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 98 97 99 7 arch/arm/mm/init.c:122 (set (reg:SI 8 r8 [173])
        (plus:SI (reg:SI 8 r8 [orig:139 D.25987 ] [139])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn:TI 99 98 100 7 arch/arm/mm/init.c:122 (set (reg/v:SI 4 r4 [orig:150 shared ] [150])
        (plus:SI (reg/v:SI 4 r4 [orig:150 shared ] [150])
            (reg:SI 8 r8 [173]))) 4 {*arm_addsi3} (nil))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 5 7 4 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 9 [r9] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [50.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
;; Pred edge  4 [50.0%] 
;; Pred edge  6 [50.0%] 
(code_label 100 99 101 8 103 "" [3 uses])

(note 101 100 102 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 102 101 104 8 arch/arm/mm/init.c:123 (set (reg/v/f:SI 3 r3 [orig:147 page ] [147])
        (plus:SI (reg/v/f:SI 3 r3 [orig:147 page ] [147])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn:TI 104 102 105 8 arch/arm/mm/init.c:124 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 3 r3 [orig:147 page ] [147])
            (reg/v/f:SI 9 r9 [orig:146 end ] [146]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 105 104 106 8 arch/arm/mm/init.c:124 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 8 -> ( 4 9)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  4 [86.0%]  (dfs_back)
;; Succ edge  9 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 12 [ip]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 12 [ip]
;; live  kill	

;; Pred edge  8 [14.0%]  (fallthru,loop_exit)
(note 106 105 107 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 107 106 108 9 arch/arm/mm/init.c:100 (set (reg/v:SI 12 ip [orig:148 i ] [148])
        (plus:SI (reg/v:SI 12 ip [orig:148 i ] [148])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 108 107 109 9 arch/arm/mm/init.c:100 (set (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])
        (plus:SI (reg:SI 2 r2 [orig:136 ivtmp.959 ] [136])
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))
;; End of basic block 9 -> ( 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  10 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 9 2) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 10 [sl] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 109 108 110 10 101 "" [1 uses])

(note 110 109 112 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 112 110 113 10 arch/arm/mm/init.c:100 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:148 i ] [148])
            (reg:SI 10 sl [orig:154 D.25004 ] [154]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 113 112 114 10 arch/arm/mm/init.c:100 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 111)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 10 -> ( 3 11)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  11 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  10 [9.0%]  (fallthru,loop_exit)
(note 114 113 116 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 116 114 118 11 arch/arm/mm/init.c:127 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x11769900>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC12") [flags 0x82] <string_cst 0x11769900>)
        (nil)))

(call_insn:TI 118 116 121 11 arch/arm/mm/init.c:127 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 121 118 120 11 arch/arm/mm/init.c:128 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:153 free ] [153])) 167 {*arm_movsi_insn} (nil))

(insn:TI 120 121 122 11 arch/arm/mm/init.c:128 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11769b70>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC13") [flags 0x82] <string_cst 0x11769b70>)
        (nil)))

(call_insn:TI 122 120 125 11 arch/arm/mm/init.c:128 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 125 122 124 11 arch/arm/mm/init.c:129 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:151 reserved ] [151])) 167 {*arm_movsi_insn} (nil))

(insn:TI 124 125 126 11 arch/arm/mm/init.c:129 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x11769ed0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC14") [flags 0x82] <string_cst 0x11769ed0>)
        (nil)))

(call_insn:TI 126 124 129 11 arch/arm/mm/init.c:129 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 129 126 128 11 arch/arm/mm/init.c:130 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:149 slab ] [149])) 167 {*arm_movsi_insn} (nil))

(insn:TI 128 129 130 11 arch/arm/mm/init.c:130 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x11765930>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC15") [flags 0x82] <string_cst 0x11765930>)
        (nil)))

(call_insn:TI 130 128 133 11 arch/arm/mm/init.c:130 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 133 130 132 11 arch/arm/mm/init.c:131 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:150 shared ] [150])) 167 {*arm_movsi_insn} (nil))

(insn:TI 132 133 134 11 arch/arm/mm/init.c:131 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x1176c0c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC16") [flags 0x82] <string_cst 0x1176c0c0>)
        (nil)))

(call_insn:TI 134 132 136 11 arch/arm/mm/init.c:131 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 136 134 137 11 arch/arm/mm/init.c:132 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x1176c1b0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC17") [flags 0x82] <string_cst 0x1176c1b0>)
        (nil)))

(insn:TI 137 136 167 11 arch/arm/mm/init.c:132 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 167 137 168 11 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 168 167 138 11 arch/arm/mm/init.c:133 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 138 168 139 11 arch/arm/mm/init.c:132 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a2e600 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 11 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 139 138 164)

(note 164 139 0 NOTE_INSN_DELETED)

starting the processing of deferred insns
ending the processing of deferred insns
