
;; Function ioport_map (ioport_map)[0:985]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs

    a0 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r140: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS

  a0(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a1(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 22(l0): point = 0
   Insn 16(l0): point = 2
   Insn 10(l0): point = 4
   Insn 7(l0): point = 6
 a0(r140): [3..4]
 a1(r137): [5..6]
Compressing live ranges: from 9 to 4 - 44%
Ranges after the compression:
 a0(r140): [0..1]
 a1(r137): [2..3]
+++Allocating 0 bytes for conflict table (uncompressed size 16)
;; a0(r140,l0) conflicts:
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a1(r137,l0) conflicts:
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14

  regions=1, blocks=3, points=4
    allocnos=2, copies=0, conflicts=0, ranges=2

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all: 0r140 1r137
    modified regnos: 137 140
    border:
    Pressure: GENERAL_REGS=3
    Reg 140 of GENERAL_REGS has 2 regs less
    Reg 137 of GENERAL_REGS has 2 regs less
      Pushing a1(r137,l0)
      Pushing a0(r140,l0)
      Popping a0(r140,l0)  -- assign reg 3
      Popping a1(r137,l0)  -- assign reg 3
Disposition:
    1:r137 l0     3    0:r140 l0     3
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=7, live_throughout: 0, 13, 14, dead_or_set: 137
insn=10, live_throughout: 0, 13, 14, dead_or_set: 137, 140
insn=16, live_throughout: 13, 14, dead_or_set: 0, 140
insn=22, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 137: (insn_list:REG_DEP_TRUE 7 (nil))
changing reg in insn 7
changing reg in insn 10
changing reg in insn 10
changing reg in insn 16


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


ioport_map

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 3[r3]
;;  ref usage 	r0={2d,3u} r1={1d} r2={1d} r3={3d,2u} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 18{10d,8u,0e} in 4{4 regular + 0 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 5 4 2 NOTE_INSN_DELETED)

(note 4 2 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 9 2 NOTE_INSN_DELETED)

(note 9 8 11 2 NOTE_INSN_DELETED)

(note 11 9 7 2 NOTE_INSN_DELETED)

(insn 7 11 10 2 arch/arm/mm/iomap.c:19 (set (reg/f:SI 3 r3 [137])
        (symbol_ref:SI ("tegra_pcie_io_base") [flags 0xc0] <var_decl 0x10ed5660 tegra_pcie_io_base>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("tegra_pcie_io_base") [flags 0xc0] <var_decl 0x10ed5660 tegra_pcie_io_base>)
        (nil)))

(insn 10 7 16 2 arch/arm/mm/iomap.c:19 (set (reg/f:SI 3 r3 [orig:140 tegra_pcie_io_base ] [140])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [137]) [0 tegra_pcie_io_base+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 16 10 22 2 arch/arm/mm/iomap.c:19 (set (reg/i:SI 0 r0)
        (plus:SI (zero_extend:SI (reg:HI 0 r0 [ port ]))
            (reg/f:SI 3 r3 [orig:140 tegra_pcie_io_base ] [140]))) 145 {*arm_zero_extendhisi2addsi} (nil))

(insn 22 16 26 2 arch/arm/mm/iomap.c:19 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 26 22 27 NOTE_INSN_DELETED)

(note 27 26 0 NOTE_INSN_DELETED)


;; Function ioport_unmap (ioport_unmap)[0:986]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



Compressing live ranges: from 1 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=1
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


ioport_unmap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	
;;  ref usage 	r0={1d} r1={1d} r2={1d} r3={1d} r12={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 10{7d,3u,0e} in 0{0 regular + 0 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 4 13 2 NOTE_INSN_FUNCTION_BEG)
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 13 3 14 NOTE_INSN_DELETED)

(note 14 13 0 NOTE_INSN_DELETED)


;; Function pci_iounmap (pci_iounmap)[0:988]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 59.
verify found no changes in insn with uid = 59.
deleting insn with uid = 11.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)

Pass 0 for finding allocno costs

    a1 (r147,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r147: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS

  a0(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a1(r147,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a3(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 26(l0): point = 1
   Insn 25(l0): point = 3
   Insn 23(l0): point = 6
   Insn 22(l0): point = 8
   Insn 21(l0): point = 10
   Insn 57(l0): point = 17
   Insn 56(l0): point = 19
   Insn 13(l0): point = 21
   Insn 12(l0): point = 23
   Insn 59(l0): point = 25
   Insn 3(l0): point = 27
 a0(r135): [4..27]
 a1(r147): [14..14] [9..12]
 a2(r141): [13..19] [11..11]
 a3(r139): [20..21]
 a4(r140): [22..23]
 a5(r138): [24..25]
Compressing live ranges: from 30 to 14 - 46%
Ranges after the compression:
 a0(r135): [0..13]
 a1(r147): [5..5] [1..3]
 a2(r141): [4..6] [2..2]
 a3(r139): [7..8]
 a4(r140): [9..10]
 a5(r138): [11..12]
+++Allocating 48 bytes for conflict table (uncompressed size 48)
;; a0(r135,l0) conflicts: a1(r147,l0) a2(r141,l0) a3(r139,l0) a4(r140,l0) a5(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r147,l0) conflicts: a0(r135,l0) a2(r141,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a2(r141,l0) conflicts: a0(r135,l0) a1(r147,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a3(r139,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r140,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r138,l0) conflicts: a0(r135,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a3(r139)<->a4(r140)@125:shuffle
  cp1:a2(r141)<->a3(r139)@125:shuffle
  regions=1, blocks=5, points=14
    allocnos=6, copies=2, conflicts=3, ranges=8

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 4 3 2
    all: 0r135 1r147 2r141 3r139 4r140 5r138
    modified regnos: 135 138 139 140 141 147
    border:
    Pressure: GENERAL_REGS=3
    Reg 135 of GENERAL_REGS has 1 regs less
    Reg 147 of GENERAL_REGS has 1 regs less
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 1 regs less
      Pushing a5(r138,l0)
      Pushing a4(r140,l0)
      Pushing a3(r139,l0)
      Pushing a1(r147,l0)
      Pushing a2(r141,l0)
      Pushing a0(r135,l0)
      Popping a0(r135,l0)  -- assign reg 1
      Popping a2(r141,l0)  -- assign reg 3
      Popping a1(r147,l0)  -- assign reg 2
      Popping a3(r139,l0)  -- assign reg 3
      Popping a4(r140,l0)  -- assign reg 3
      Popping a5(r138,l0)  -- assign reg 3
Disposition:
    0:r135 l0     1    5:r138 l0     3    3:r139 l0     3    4:r140 l0     3
    2:r141 l0     3    1:r147 l0     2
New iteration of spill/restore move
+++Costs: overall -4000, reg -4000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=3, live_throughout: 13, 14, dead_or_set: 1, 135
insn=59, live_throughout: 13, 14, 135, dead_or_set: 138
insn=12, live_throughout: 13, 14, 135, dead_or_set: 138, 140
insn=13, live_throughout: 13, 14, 135, dead_or_set: 139, 140
insn=56, live_throughout: 13, 14, 135, dead_or_set: 139, 141
insn=57, live_throughout: 13, 14, 135, dead_or_set: 141
insn=21, live_throughout: 13, 14, 135, dead_or_set: 141, 147
insn=22, live_throughout: 13, 14, 135, dead_or_set: 147
insn=23, live_throughout: 13, 14, 135, dead_or_set: 
insn=25, live_throughout: 13, 14, dead_or_set: 0, 135
insn=26, live_throughout: 13, 14, dead_or_set: 0
insn=33, live_throughout: 13, 14, dead_or_set: 
init_insns for 138: (insn_list:REG_DEP_TRUE 59 (nil))
changing reg in insn 3
changing reg in insn 21
changing reg in insn 21
changing reg in insn 25
changing reg in insn 59
changing reg in insn 12
changing reg in insn 13
changing reg in insn 56
changing reg in insn 12
changing reg in insn 13
changing reg in insn 57
changing reg in insn 56
changing reg in insn 57
changing reg in insn 21
changing reg in insn 21
changing reg in insn 22
deleting insn with uid = 3.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 26.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 7 (  1.4)
df_worklist_dataflow_doublequeue:n_basic_blocks 5 n_edges 5 count 8 (  1.6)


pci_iounmap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 24[cc]
;;  ref usage 	r0={3d,1u} r1={2d,3u} r2={3d,1u} r3={7d,5u} r12={2d} r13={1d,5u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={3d,1u} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 149{132d,17u,0e} in 10{9 regular + 1 call} insns.
(note 1 0 5 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 1 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 5 8 2 NOTE_INSN_FUNCTION_BEG)

(note 8 4 9 2 NOTE_INSN_DELETED)

(note 9 8 14 2 NOTE_INSN_DELETED)

(note 14 9 16 2 NOTE_INSN_DELETED)

(note 16 14 17 2 NOTE_INSN_DELETED)

(note 17 16 19 2 NOTE_INSN_DELETED)

(note 19 17 20 2 NOTE_INSN_DELETED)

(note 20 19 59 2 NOTE_INSN_DELETED)

(insn 59 20 12 2 arch/arm/mm/iomap.c:61 (set (reg/f:SI 3 r3 [138])
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10ffd7e0 high_memory>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10ffd7e0 high_memory>)
        (nil)))

(insn 12 59 13 2 arch/arm/mm/iomap.c:61 (set (reg/f:SI 3 r3 [orig:140 high_memory ] [140])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [138]) [0 high_memory+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10ffd7e0 high_memory>) [0 high_memory+0 S4 A32])
        (nil)))

(insn 13 12 56 2 arch/arm/mm/iomap.c:61 (set (reg/f:SI 3 r3 [139])
        (plus:SI (reg/f:SI 3 r3 [orig:140 high_memory ] [140])
            (const_int 8388608 [0x800000]))) 4 {*arm_addsi3} (nil))

(insn 56 13 57 2 arch/arm/mm/iomap.c:61 (set (reg:SI 3 r3 [141])
        (lshiftrt:SI (reg/f:SI 3 r3 [139])
            (const_int 23 [0x17]))) 117 {*arm_shiftsi3} (nil))

(insn 57 56 21 2 arch/arm/mm/iomap.c:61 (set (reg:SI 3 r3 [141])
        (ashift:SI (reg:SI 3 r3 [141])
            (const_int 23 [0x17]))) 117 {*arm_shiftsi3} (nil))

(insn 21 57 22 2 arch/arm/mm/iomap.c:61 (parallel [
            (set (reg:SI 2 r2 [147])
                (and:SI (geu:SI (reg/v/f:SI 1 r1 [orig:135 addr ] [135])
                        (reg:SI 3 r3 [141]))
                    (leu:SI (reg/v/f:SI 1 r1 [orig:135 addr ] [135])
                        (const_int -134217729 [0xfffffffff7ffffff]))))
            (clobber (reg:CC 24 cc))
        ]) 290 {*and_scc_scc_nodom} (nil))

(insn 22 21 23 2 arch/arm/mm/iomap.c:61 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [147])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 23 22 24 2 arch/arm/mm/iomap.c:61 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 1 [r1] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 13 [sp] 14 [lr]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [39.0%]  (fallthru)
(note 24 23 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 25 24 26 3 arch/arm/mm/iomap.c:63 (set (reg:SI 0 r0)
        (reg/v/f:SI 1 r1 [orig:135 addr ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn/j 26 25 27 3 arch/arm/mm/iomap.c:63 (parallel [
            (call (mem:SI (symbol_ref:SI ("tegra_iounmap") [flags 0x41] <function_decl 0x10eddf80 tegra_iounmap>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 3 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 27 26 33)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  2 [61.0%] 
(code_label 33 27 36 4 9 "" [1 uses])

(note 36 33 58 4 [bb 4] NOTE_INSN_BASIC_BLOCK)
;; End of basic block 4 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 58 36 60 NOTE_INSN_DELETED)

(note 60 58 0 NOTE_INSN_DELETED)


;; Function pci_iomap (pci_iomap)[0:987]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
scanning new insn with uid = 135.
verify found no changes in insn with uid = 135.
deleting insn with uid = 42.
scanning new insn with uid = 136.
verify found no changes in insn with uid = 136.
deleting insn with uid = 9.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 26 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 28 (  1.9)

Pass 0 for finding allocno costs

    a1 (r184,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r182,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r179,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r178,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r162,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r161,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r158,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r155,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r154,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r151,l0) best GENERAL_REGS, cover GENERAL_REGS
    a18 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a19 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a20 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r138,l0) best GENERAL_REGS, cover GENERAL_REGS
    a3 (r136,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a4(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r184: preferred GENERAL_REGS, alternative NO_REGS
    r182: preferred GENERAL_REGS, alternative NO_REGS
    r179: preferred GENERAL_REGS, alternative NO_REGS
    r178: preferred GENERAL_REGS, alternative NO_REGS
    r162: preferred GENERAL_REGS, alternative NO_REGS
    r161: preferred GENERAL_REGS, alternative NO_REGS
    r158: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r155: preferred GENERAL_REGS, alternative NO_REGS
    r154: preferred GENERAL_REGS, alternative NO_REGS
    r151: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r138: preferred GENERAL_REGS, alternative NO_REGS
    r136: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a1(r184,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a2(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a3(r136,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:80000
  a4(r178,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a6(r182,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r179,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a8(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a9(r162,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a10(r138,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a11(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:40000
  a12(r161,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r158,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r155,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r154,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r151,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a18(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a19(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a20(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 124(l0): point = 0
   Insn 118(l0): point = 2
   Insn 111(l0): point = 5
   Insn 106(l0): point = 8
   Insn 105(l0): point = 10
   Insn 104(l0): point = 12
   Insn 103(l0): point = 14
   Insn 98(l0): point = 17
   Insn 97(l0): point = 19
   Insn 96(l0): point = 21
   Insn 95(l0): point = 23
   Insn 93(l0): point = 26
   Insn 92(l0): point = 28
   Insn 89(l0): point = 31
   Insn 88(l0): point = 33
   Insn 132(l0): point = 36
   Insn 82(l0): point = 38
   Insn 81(l0): point = 40
   Insn 78(l0): point = 42
   Insn 76(l0): point = 45
   Insn 75(l0): point = 47
   Insn 129(l0): point = 49
   Insn 68(l0): point = 51
   Insn 57(l0): point = 54
   Insn 46(l0): point = 56
   Insn 44(l0): point = 58
   Insn 135(l0): point = 60
   Insn 56(l0): point = 62
   Insn 38(l0): point = 65
   Insn 37(l0): point = 67
   Insn 36(l0): point = 69
   Insn 34(l0): point = 71
   Insn 32(l0): point = 73
   Insn 130(l0): point = 76
   Insn 26(l0): point = 78
   Insn 24(l0): point = 81
   Insn 23(l0): point = 83
   Insn 22(l0): point = 85
   Insn 15(l0): point = 88
   Insn 14(l0): point = 90
   Insn 13(l0): point = 92
   Insn 12(l0): point = 94
   Insn 11(l0): point = 96
   Insn 136(l0): point = 98
   Insn 4(l0): point = 100
   Insn 3(l0): point = 102
   Insn 2(l0): point = 104
 a0(r133): [36..38] [3..5]
 a1(r184): [26..28] [11..16]
 a2(r135): [76..78] [45..65] [22..35] [13..16]
 a3(r136): [39..92] [24..35] [15..16]
 a4(r178): [45..47] [20..35]
 a5(r134): [45..56] [29..35]
 a6(r182): [39..40]
 a7(r179): [41..42]
 a8(r140): [50..100]
 a9(r162): [57..58]
 a10(r138): [59..104]
 a11(r139): [59..102]
 a12(r161): [59..60]
 a13(r157): [66..67]
 a14(r158): [68..69]
 a15(r155): [70..71]
 a16(r154): [72..73]
 a17(r151): [84..85]
 a18(r145): [86..94]
 a19(r144): [93..96]
 a20(r143): [97..98]
Compressing live ranges: from 107 to 50 - 46%
Ranges after the compression:
 a0(r133): [13..14] [0..1]
 a1(r184): [9..10] [2..5]
 a2(r135): [36..37] [19..27] [7..12] [3..5]
 a3(r136): [15..41] [8..12] [4..5]
 a4(r178): [19..20] [6..12]
 a5(r134): [19..22] [11..12]
 a6(r182): [15..16]
 a7(r179): [17..18]
 a8(r140): [21..47]
 a9(r162): [23..24]
 a10(r138): [25..49]
 a11(r139): [25..48]
 a12(r161): [25..26]
 a13(r157): [28..29]
 a14(r158): [30..31]
 a15(r155): [32..33]
 a16(r154): [34..35]
 a17(r151): [38..39]
 a18(r145): [40..43]
 a19(r144): [42..44]
 a20(r143): [45..46]
+++Allocating 168 bytes for conflict table (uncompressed size 168)
;; a0(r133,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r184,l0) conflicts: a2(r135,l0) a3(r136,l0) a4(r178,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a2(r135,l0) conflicts: a1(r184,l0) a3(r136,l0) a4(r178,l0) a5(r134,l0) a8(r140,l0) a9(r162,l0) a12(r161,l0) a11(r139,l0) a10(r138,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a3(r136,l0) conflicts: a1(r184,l0) a2(r135,l0) a4(r178,l0) a5(r134,l0) a6(r182,l0) a7(r179,l0) a8(r140,l0) a9(r162,l0) a12(r161,l0) a11(r139,l0) a10(r138,l0) a13(r157,l0) a14(r158,l0) a15(r155,l0) a16(r154,l0) a17(r151,l0) a18(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r178,l0) conflicts: a1(r184,l0) a2(r135,l0) a3(r136,l0) a5(r134,l0)
;;     total conflict hard regs: 0 1 14
;;     conflict hard regs: 0 1 14
;; a5(r134,l0) conflicts: a2(r135,l0) a3(r136,l0) a4(r178,l0) a8(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r182,l0) conflicts: a3(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a7(r179,l0) conflicts: a3(r136,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a8(r140,l0) conflicts: a2(r135,l0) a3(r136,l0) a5(r134,l0) a9(r162,l0) a12(r161,l0) a11(r139,l0) a10(r138,l0) a13(r157,l0) a14(r158,l0) a15(r155,l0) a16(r154,l0) a17(r151,l0) a18(r145,l0) a19(r144,l0) a20(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a9(r162,l0) conflicts: a2(r135,l0) a3(r136,l0) a8(r140,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a10(r138,l0) conflicts: a2(r135,l0) a3(r136,l0) a8(r140,l0) a12(r161,l0) a11(r139,l0) a13(r157,l0) a14(r158,l0) a15(r155,l0) a16(r154,l0) a17(r151,l0) a18(r145,l0) a19(r144,l0) a20(r143,l0)
;;     total conflict hard regs: 1 2 14
;;     conflict hard regs: 1 2 14
;; a11(r139,l0) conflicts: a2(r135,l0) a3(r136,l0) a8(r140,l0) a12(r161,l0) a10(r138,l0) a13(r157,l0) a14(r158,l0) a15(r155,l0) a16(r154,l0) a17(r151,l0) a18(r145,l0) a19(r144,l0) a20(r143,l0)
;;     total conflict hard regs: 2 14
;;     conflict hard regs: 2 14
;; a12(r161,l0) conflicts: a2(r135,l0) a3(r136,l0) a8(r140,l0) a11(r139,l0) a10(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a13(r157,l0) conflicts: a3(r136,l0) a8(r140,l0) a11(r139,l0) a10(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a14(r158,l0) conflicts: a3(r136,l0) a8(r140,l0) a11(r139,l0) a10(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a15(r155,l0) conflicts: a3(r136,l0) a8(r140,l0) a11(r139,l0) a10(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a16(r154,l0) conflicts: a3(r136,l0) a8(r140,l0) a11(r139,l0) a10(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r151,l0) conflicts: a3(r136,l0) a8(r140,l0) a11(r139,l0) a10(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a18(r145,l0) conflicts: a3(r136,l0) a8(r140,l0) a11(r139,l0) a10(r138,l0) a19(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a19(r144,l0) conflicts: a8(r140,l0) a11(r139,l0) a10(r138,l0) a18(r145,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a20(r143,l0) conflicts: a8(r140,l0) a11(r139,l0) a10(r138,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a1(r184)<->a5(r134)@125:shuffle
  cp1:a0(r133)<->a3(r136)@125:shuffle
  cp2:a0(r133)<->a6(r182)@125:shuffle
  cp3:a9(r162)<->a11(r139)@125:shuffle
  cp4:a9(r162)<->a12(r161)@125:shuffle
  cp5:a9(r162)<->a10(r138)@125:shuffle
  cp6:a15(r155)<->a16(r154)@125:shuffle
  cp7:a13(r157)<->a14(r158)@125:shuffle
  cp8:a2(r135)<->a13(r157)@125:shuffle
  cp9:a19(r144)<->a20(r143)@125:shuffle
  regions=1, blocks=15, points=50
    allocnos=21, copies=10, conflicts=2, ranges=30

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r133 1r184 2r135 3r136 4r178 5r134 6r182 7r179 8r140 9r162 10r138 11r139 12r161 13r157 14r158 15r155 16r154 17r151 18r145 19r144 20r143
    modified regnos: 133 134 135 136 138 139 140 143 144 145 151 154 155 157 158 161 162 178 179 182 184
    border:
    Pressure: GENERAL_REGS=7
    Reg 133 of GENERAL_REGS has 1 regs less
    Reg 184 of GENERAL_REGS has 3 regs less
    Reg 135 of GENERAL_REGS has 2 regs less
    Reg 136 of GENERAL_REGS has 1 regs less
    Reg 178 of GENERAL_REGS has 3 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 182 of GENERAL_REGS has 1 regs less
    Reg 179 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 1 regs less
    Reg 162 of GENERAL_REGS has 1 regs less
    Reg 138 of GENERAL_REGS has 3 regs less
    Reg 139 of GENERAL_REGS has 2 regs less
    Reg 161 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 158 of GENERAL_REGS has 1 regs less
    Reg 155 of GENERAL_REGS has 1 regs less
    Reg 154 of GENERAL_REGS has 1 regs less
    Reg 151 of GENERAL_REGS has 1 regs less
    Reg 145 of GENERAL_REGS has 1 regs less
    Reg 144 of GENERAL_REGS has 1 regs less
    Reg 143 of GENERAL_REGS has 1 regs less
      Pushing a20(r143,l0)
      Pushing a18(r145,l0)
      Pushing a17(r151,l0)
      Pushing a16(r154,l0)
      Pushing a15(r155,l0)
      Pushing a14(r158,l0)
      Pushing a13(r157,l0)
      Pushing a12(r161,l0)
      Pushing a9(r162,l0)
      Pushing a7(r179,l0)
      Pushing a6(r182,l0)
      Pushing a19(r144,l0)
      Pushing a0(r133,l0)
      Pushing a8(r140,l0)
      Pushing a5(r134,l0)
      Pushing a3(r136,l0)
      Pushing a11(r139,l0)
      Pushing a2(r135,l0)
      Pushing a4(r178,l0)
      Pushing a1(r184,l0)
      Pushing a10(r138,l0)
      Popping a10(r138,l0)  -- assign reg 3
      Popping a1(r184,l0)  -- assign reg 2
      Popping a4(r178,l0)  -- assign reg 3
      Popping a2(r135,l0)  -- assign reg 1
      Popping a11(r139,l0)  -- assign reg 12
      Popping a3(r136,l0)  -- assign reg 0
      Popping a5(r134,l0)  -- assign reg 12
      Popping a8(r140,l0)  -- assign reg 2
      Popping a0(r133,l0)  -- assign reg 0
      Popping a19(r144,l0)  -- assign reg 1
      Popping a6(r182,l0)  -- assign reg 3
      Popping a7(r179,l0)  -- assign reg 3
      Popping a9(r162,l0)  -- assign reg 3
      Popping a12(r161,l0)  -- assign reg 4
      Popping a13(r157,l0)  -- assign reg 1
      Popping a14(r158,l0)  -- assign reg 1
      Popping a15(r155,l0)  -- assign reg 1
      Popping a16(r154,l0)  -- assign reg 1
      Popping a17(r151,l0)  -- assign reg 1
      Popping a18(r145,l0)  -- assign reg 4
      Popping a20(r143,l0)  -- assign reg 1
Disposition:
    0:r133 l0     0    5:r134 l0    12    2:r135 l0     1    3:r136 l0     0
   10:r138 l0     3   11:r139 l0    12    8:r140 l0     2   20:r143 l0     1
   19:r144 l0     1   18:r145 l0     4   17:r151 l0     1   16:r154 l0     1
   15:r155 l0     1   13:r157 l0     1   14:r158 l0     1   12:r161 l0     4
    9:r162 l0     3    4:r178 l0     3    7:r179 l0     3    6:r182 l0     3
    1:r184 l0     2
New iteration of spill/restore move
+++Costs: overall -28000, reg -28000, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 13, 14, dead_or_set: 0, 138
insn=3, live_throughout: 2, 13, 14, 138, dead_or_set: 1, 139
insn=4, live_throughout: 13, 14, 138, 139, dead_or_set: 2, 140
insn=136, live_throughout: 13, 14, 138, 139, 140, dead_or_set: 143
insn=11, live_throughout: 13, 14, 138, 139, 140, dead_or_set: 143, 144
insn=12, live_throughout: 13, 14, 138, 139, 140, 144, dead_or_set: 145
insn=13, live_throughout: 13, 14, 138, 139, 140, 145, dead_or_set: 136, 144
insn=14, live_throughout: 13, 14, 136, 138, 139, 140, 145, dead_or_set: 
insn=15, live_throughout: 13, 14, 136, 138, 139, 140, 145, dead_or_set: 
insn=22, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 145, 151
insn=23, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 151
insn=24, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 
insn=26, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 135
insn=130, live_throughout: 13, 14, 135, 136, 138, 139, 140, dead_or_set: 
insn=29, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 
insn=32, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 154
insn=34, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 154, 155
insn=36, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 155, 158
insn=37, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 157, 158
insn=38, live_throughout: 13, 14, 136, 138, 139, 140, dead_or_set: 135, 157
insn=39, live_throughout: 13, 14, 135, 136, 138, 139, 140, dead_or_set: 
insn=56, live_throughout: 13, 14, 135, 136, 138, 139, 140, dead_or_set: 
insn=135, live_throughout: 13, 14, 24, 135, 136, 138, 139, 140, dead_or_set: 161
insn=44, live_throughout: 13, 14, 24, 135, 136, 140, dead_or_set: 138, 139, 161, 162
insn=46, live_throughout: 13, 14, 24, 135, 136, 140, dead_or_set: 134, 162
insn=57, live_throughout: 13, 14, 134, 135, 136, 140, dead_or_set: 
insn=68, live_throughout: 13, 14, 134, 135, 136, 140, dead_or_set: 
insn=129, live_throughout: 13, 14, 134, 136, dead_or_set: 135, 140
insn=75, live_throughout: 13, 14, 134, 135, 136, dead_or_set: 178
insn=76, live_throughout: 13, 14, 134, 135, 136, 178, dead_or_set: 
insn=78, live_throughout: 13, 14, 136, dead_or_set: 179
insn=81, live_throughout: 13, 14, 136, dead_or_set: 179, 182
insn=82, live_throughout: 13, 14, dead_or_set: 133, 136, 182
insn=132, live_throughout: 13, 14, 133, dead_or_set: 
insn=85, live_throughout: 13, 14, 134, 135, 136, 178, dead_or_set: 
insn=88, live_throughout: 13, 14, 134, 135, 136, 178, dead_or_set: 
insn=89, live_throughout: 13, 14, 134, 135, 136, 178, dead_or_set: 
insn=92, live_throughout: 13, 14, 135, 136, 178, dead_or_set: 134, 184
insn=93, live_throughout: 13, 14, 135, 136, 178, 184, dead_or_set: 
insn=95, live_throughout: 13, 14, 135, 178, dead_or_set: 0, 136
insn=96, live_throughout: 0, 13, 14, 178, dead_or_set: 1, 135
insn=97, live_throughout: 0, 1, 13, 14, dead_or_set: 2, 178
insn=98, live_throughout: 13, 14, dead_or_set: 0, 1, 2
insn=101, live_throughout: 13, 14, 135, 136, 184, dead_or_set: 
insn=103, live_throughout: 13, 14, 135, 184, dead_or_set: 0, 136
insn=104, live_throughout: 0, 13, 14, 184, dead_or_set: 1, 135
insn=105, live_throughout: 0, 1, 13, 14, dead_or_set: 2, 184
insn=106, live_throughout: 13, 14, dead_or_set: 0, 1, 2
insn=109, live_throughout: 13, 14, dead_or_set: 
insn=111, live_throughout: 13, 14, dead_or_set: 133
insn=112, live_throughout: 13, 14, 133, dead_or_set: 
insn=118, live_throughout: 13, 14, dead_or_set: 0, 133
insn=124, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 143: (insn_list:REG_DEP_TRUE 136 (nil))
init_insns for 154: (insn_list:REG_DEP_TRUE 32 (nil))
init_insns for 161: (insn_list:REG_DEP_TRUE 135 (nil))
init_insns for 179: (insn_list:REG_DEP_TRUE 78 (nil))
changing reg in insn 82
changing reg in insn 111
changing reg in insn 118
changing reg in insn 46
changing reg in insn 92
changing reg in insn 92
changing reg in insn 88
changing reg in insn 75
changing reg in insn 75
changing reg in insn 26
changing reg in insn 129
changing reg in insn 38
changing reg in insn 68
changing reg in insn 56
changing reg in insn 129
changing reg in insn 104
changing reg in insn 96
changing reg in insn 13
changing reg in insn 56
changing reg in insn 26
changing reg in insn 103
changing reg in insn 95
changing reg in insn 38
changing reg in insn 14
changing reg in insn 2
changing reg in insn 44
changing reg in insn 34
changing reg in insn 11
changing reg in insn 3
changing reg in insn 44
changing reg in insn 34
changing reg in insn 11
changing reg in insn 4
changing reg in insn 68
changing reg in insn 68
changing reg in insn 129
changing reg in insn 136
changing reg in insn 11
changing reg in insn 11
changing reg in insn 13
changing reg in insn 12
changing reg in insn 12
changing reg in insn 22
changing reg in insn 22
changing reg in insn 23
changing reg in insn 32
changing reg in insn 34
changing reg in insn 34
changing reg in insn 36
changing reg in insn 37
changing reg in insn 38
changing reg in insn 36
changing reg in insn 37
changing reg in insn 135
changing reg in insn 44
changing reg in insn 44
changing reg in insn 46
changing reg in insn 75
changing reg in insn 97
changing reg in insn 78
changing reg in insn 81
changing reg in insn 81
changing reg in insn 82
changing reg in insn 92
changing reg in insn 105
deleting insn with uid = 4.
deleting insn with uid = 95.
deleting insn with uid = 96.
deleting insn with uid = 103.
deleting insn with uid = 104.
deleting insn with uid = 105.
deleting insn with uid = 118.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 98.
verify found no changes in insn with uid = 106.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 26 (  1.7)
df_worklist_dataflow_doublequeue:n_basic_blocks 15 n_edges 20 count 28 (  1.9)


pci_iomap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 12[ip] 13[sp] 24[cc]
;;  ref usage 	r0={6d,10u} r1={13d,14u} r2={5d,5u} r3={8d,7u} r4={2d,2u} r12={5d,8u} r13={1d,16u} r14={1d,1u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={9d,7u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 340{270d,70u,0e} in 40{38 regular + 2 call} insns.
(note 1 0 6 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 1 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 5 2 2 NOTE_INSN_DELETED)

(insn 2 10 3 2 arch/arm/mm/iomap.c:39 (set (reg/v/f:SI 3 r3 [orig:138 dev ] [138])
        (reg:SI 0 r0 [ dev ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 136 2 arch/arm/mm/iomap.c:39 (set (reg/v:SI 12 ip [orig:139 bar ] [139])
        (reg:SI 1 r1 [ bar ])) 167 {*arm_movsi_insn} (nil))

(insn 136 3 11 2 arch/arm/mm/iomap.c:40 (set (reg:SI 1 r1 [143])
        (const_int 28 [0x1c])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 28 [0x1c])
        (nil)))

(insn 11 136 12 2 arch/arm/mm/iomap.c:40 (set (reg:SI 1 r1 [144])
        (plus:SI (mult:SI (reg:SI 1 r1 [143])
                (reg/v:SI 12 ip [orig:139 bar ] [139]))
            (reg/v/f:SI 3 r3 [orig:138 dev ] [138]))) 40 {*mulsi3addsi_v6} (nil))

(insn 12 11 13 2 arch/arm/mm/iomap.c:40 (set (reg/f:SI 4 r4 [145])
        (plus:SI (reg:SI 1 r1 [144])
            (const_int 464 [0x1d0]))) 4 {*arm_addsi3} (nil))

(insn 13 12 14 2 arch/arm/mm/iomap.c:40 (set (reg/v:SI 0 r0 [orig:136 start ] [136])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [144])
                (const_int 464 [0x1d0])) [0 <variable>.start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 14 13 15 2 arch/arm/mm/iomap.c:41 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 0 r0 [orig:136 start ] [136])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 15 14 16 2 arch/arm/mm/iomap.c:41 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
        (nil)))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 16 15 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 22 16 23 3 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:SI 1 r1 [orig:151 <variable>.end ] [151])
        (mem/s/j:SI (plus:SI (reg/f:SI 4 r4 [145])
                (const_int 4 [0x4])) [0 <variable>.end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 23 22 24 3 arch/arm/mm/iomap.c:41 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 1 r1 [orig:151 <variable>.end ] [151])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 24 23 25 3 arch/arm/mm/iomap.c:41 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
        (nil)))
;; End of basic block 3 -> ( 5 4)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  5 [72.0%] 
;; Succ edge  4 [28.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  3 [28.0%]  (fallthru)
(note 25 24 26 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 26 25 130 4 arch/arm/mm/iomap.c:41 discrim 3 (set (reg/v:SI 1 r1 [orig:135 len ] [135])
        (reg/v:SI 0 r0 [orig:136 start ] [136])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 130 26 131 4 (set (pc)
        (label_ref 39)) 242 {*arm_jump} (nil))
;; End of basic block 4 -> ( 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%] 

(barrier 131 130 29)

;; Start of basic block ( 2 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [72.0%] 
(code_label 29 131 30 5 14 "" [2 uses])

(note 30 29 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 33 30 35 5 NOTE_INSN_DELETED)

(note 35 33 32 5 NOTE_INSN_DELETED)

(insn 32 35 34 5 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 1 r1 [154])
        (const_int 28 [0x1c])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 28 [0x1c])
        (nil)))

(insn 34 32 36 5 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 1 r1 [155])
        (plus:SI (mult:SI (reg:SI 1 r1 [154])
                (reg/v:SI 12 ip [orig:139 bar ] [139]))
            (reg/v/f:SI 3 r3 [orig:138 dev ] [138]))) 40 {*mulsi3addsi_v6} (nil))

(insn 36 34 37 5 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 1 r1 [orig:158 <variable>.end ] [158])
        (mem/s/j:SI (plus:SI (reg:SI 1 r1 [155])
                (const_int 468 [0x1d4])) [0 <variable>.end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 37 36 38 5 arch/arm/mm/iomap.c:41 discrim 1 (set (reg:SI 1 r1 [157])
        (plus:SI (reg:SI 1 r1 [orig:158 <variable>.end ] [158])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn 38 37 39 5 arch/arm/mm/iomap.c:41 discrim 1 (set (reg/v:SI 1 r1 [orig:135 len ] [135])
        (minus:SI (reg:SI 1 r1 [157])
            (reg/v:SI 0 r0 [orig:136 start ] [136]))) 28 {*arm_subsi3_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  6 [100.0%]  (fallthru)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 39 38 40 6 15 "" [1 uses])

(note 40 39 43 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 43 40 45 6 NOTE_INSN_DELETED)

(note 45 43 47 6 NOTE_INSN_DELETED)

(note 47 45 48 6 NOTE_INSN_DELETED)

(note 48 47 50 6 NOTE_INSN_DELETED)

(note 50 48 51 6 NOTE_INSN_DELETED)

(note 51 50 53 6 NOTE_INSN_DELETED)

(note 53 51 54 6 NOTE_INSN_DELETED)

(note 54 53 55 6 NOTE_INSN_DELETED)

(note 55 54 56 6 NOTE_INSN_DELETED)

(insn 56 55 135 6 arch/arm/mm/iomap.c:44 (set (reg:CC_DEQ 24 cc)
        (compare:CC_DEQ (ior:SI (eq:SI (reg/v:SI 1 r1 [orig:135 len ] [135])
                    (const_int 0 [0x0]))
                (eq:SI (reg/v:SI 0 r0 [orig:136 start ] [136])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 285 {*cmp_ior} (nil))

(insn 135 56 44 6 arch/arm/mm/iomap.c:42 (set (reg:SI 4 r4 [161])
        (const_int 28 [0x1c])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 28 [0x1c])
        (nil)))

(insn 44 135 46 6 arch/arm/mm/iomap.c:42 (set (reg:SI 3 r3 [162])
        (plus:SI (mult:SI (reg:SI 4 r4 [161])
                (reg/v:SI 12 ip [orig:139 bar ] [139]))
            (reg/v/f:SI 3 r3 [orig:138 dev ] [138]))) 40 {*mulsi3addsi_v6} (nil))

(insn 46 44 57 6 arch/arm/mm/iomap.c:42 (set (reg/v:SI 12 ip [orig:134 flags ] [134])
        (mem/s/j:SI (plus:SI (reg:SI 3 r3 [162])
                (const_int 476 [0x1dc])) [0 <variable>.flags+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(jump_insn 57 46 58 6 arch/arm/mm/iomap.c:44 (set (pc)
        (if_then_else (ne (reg:CC_DEQ 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 6 -> ( 13 7)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  13 [39.0%] 
;; Succ edge  7 [61.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [61.0%]  (fallthru)
(note 58 57 59 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 59 58 60 7 NOTE_INSN_DELETED)

(note 60 59 62 7 NOTE_INSN_DELETED)

(note 62 60 63 7 NOTE_INSN_DELETED)

(note 63 62 65 7 NOTE_INSN_DELETED)

(note 65 63 66 7 NOTE_INSN_DELETED)

(note 66 65 67 7 NOTE_INSN_DELETED)

(note 67 66 74 7 NOTE_INSN_DELETED)

(note 74 67 68 7 NOTE_INSN_DELETED)

(insn 68 74 129 7 arch/arm/mm/iomap.c:46 (set (reg:CC_DGTU 24 cc)
        (compare:CC_DGTU (and:SI (gtu:SI (reg/v:SI 1 r1 [orig:135 len ] [135])
                    (reg/v:SI 2 r2 [orig:140 maxlen ] [140]))
                (ne:SI (reg/v:SI 2 r2 [orig:140 maxlen ] [140])
                    (const_int 0 [0x0])))
            (const_int 0 [0x0]))) 284 {*cmp_and} (nil))

(insn 129 68 75 7 arch/arm/mm/iomap.c:46 (set (reg/v:SI 1 r1 [orig:135 len ] [135])
        (if_then_else:SI (eq (reg:CC_DGTU 24 cc)
                (const_int 0 [0x0]))
            (reg/v:SI 1 r1 [orig:135 len ] [135])
            (reg/v:SI 2 r2 [orig:140 maxlen ] [140]))) 240 {*movsicc_insn} (nil))

(insn 75 129 76 7 arch/arm/mm/iomap.c:48 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 12 ip [orig:134 flags ] [134])
                        (const_int 256 [0x100]))
                    (const_int 0 [0x0])))
            (set (reg:SI 3 r3 [178])
                (and:SI (reg/v:SI 12 ip [orig:134 flags ] [134])
                    (const_int 256 [0x100])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 76 75 77 7 arch/arm/mm/iomap.c:48 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 1000 [0x3e8])
        (nil)))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  8 [90.0%]  (fallthru)
;; Succ edge  9 [10.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 3 [r3]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3]
;; live  kill	

;; Pred edge  7 [90.0%]  (fallthru)
(note 77 76 79 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 79 77 80 8 NOTE_INSN_DELETED)

(note 80 79 78 8 NOTE_INSN_DELETED)

(insn 78 80 81 8 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg/f:SI 3 r3 [179])
        (symbol_ref:SI ("tegra_pcie_io_base") [flags 0xc0] <var_decl 0x10ed5660 tegra_pcie_io_base>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("tegra_pcie_io_base") [flags 0xc0] <var_decl 0x10ed5660 tegra_pcie_io_base>)
        (nil)))

(insn 81 78 82 8 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg/f:SI 3 r3 [orig:182 tegra_pcie_io_base ] [182])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [179]) [0 tegra_pcie_io_base+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("tegra_pcie_io_base") [flags 0xc0] <var_decl 0x10ed5660 tegra_pcie_io_base>) [0 tegra_pcie_io_base+0 S4 A32])
        (nil)))

(insn 82 81 132 8 arch/arm/mach-tegra/include/mach/io.h:132 (set (reg/f:SI 0 r0 [orig:133 D.17898 ] [133])
        (plus:SI (zero_extend:SI (reg:HI 0 r0 [orig:136 start ] [136]))
            (reg/f:SI 3 r3 [orig:182 tegra_pcie_io_base ] [182]))) 145 {*arm_zero_extendhisi2addsi} (nil))

(jump_insn 132 82 133 8 arch/arm/mm/iomap.c:49 (set (pc)
        (label_ref 112)) 242 {*arm_jump} (nil))
;; End of basic block 8 -> ( 14)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  14 [100.0%] 

(barrier 133 132 85)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [10.0%] 
(code_label 85 133 86 9 18 "" [1 uses])

(note 86 85 87 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 87 86 88 9 NOTE_INSN_DELETED)

(insn 88 87 89 9 arch/arm/mm/iomap.c:50 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 12 ip [orig:134 flags ] [134])
                (const_int 1 [0x1])
                (const_int 9 [0x9]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 89 88 90 9 arch/arm/mm/iomap.c:50 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
        (nil)))
;; End of basic block 9 -> ( 10 13)
;; lr  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  10 [61.0%]  (fallthru)
;; Succ edge  13 [39.0%] 

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 12 [ip] 13 [sp]
;; lr  def 	 2 [r2] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 24 [cc]
;; live  kill	

;; Pred edge  9 [61.0%]  (fallthru)
(note 90 89 91 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 91 90 92 10 NOTE_INSN_DELETED)

(insn 92 91 93 10 arch/arm/mm/iomap.c:51 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg/v:SI 12 ip [orig:134 flags ] [134])
                        (const_int 32768 [0x8000]))
                    (const_int 0 [0x0])))
            (set (reg:SI 2 r2 [184])
                (and:SI (reg/v:SI 12 ip [orig:134 flags ] [134])
                    (const_int 32768 [0x8000])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn 93 92 94 10 arch/arm/mm/iomap.c:51 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 101)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 6100 [0x17d4])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  11 [39.0%]  (fallthru)
;; Succ edge  12 [61.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2]
;; live  kill	

;; Pred edge  10 [39.0%]  (fallthru)
(note 94 93 97 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn 97 94 98 11 arch/arm/mm/iomap.c:52 (set (reg:SI 2 r2)
        (reg:SI 3 r3 [178])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(call_insn/j 98 97 99 11 arch/arm/mm/iomap.c:52 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("tegra_ioremap") [flags 0x41] <function_decl 0x10eddf00 tegra_ioremap>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 11 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 99 98 101)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  10 [61.0%] 
(code_label 101 99 102 12 20 "" [1 uses])

(note 102 101 106 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(call_insn/j 106 102 107 12 arch/arm/mm/iomap.c:53 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("tegra_ioremap") [flags 0x41] <function_decl 0x10eddf00 tegra_ioremap>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))
;; End of basic block 12 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 107 106 109)

;; Start of basic block ( 6 9) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  6 [39.0%] 
;; Pred edge  9 [39.0%] 
(code_label 109 107 110 13 16 "" [2 uses])

(note 110 109 111 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 111 110 112 13 arch/arm/mm/iomap.c:45 (set (reg/f:SI 0 r0 [orig:133 D.17898 ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 13 -> ( 14)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  14 [100.0%]  (fallthru)

;; Start of basic block ( 13 8) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  13 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 112 111 113 14 19 "" [1 uses])

(note 113 112 124 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 124 113 134 14 arch/arm/mm/iomap.c:56 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 14 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 134 124 137 NOTE_INSN_DELETED)

(note 137 134 0 NOTE_INSN_DELETED)

