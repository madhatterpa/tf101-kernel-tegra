
;; Function __iounmap (__iounmap)[0:1243]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 9(l0): point = 0
   Insn 19(l0): point = 2
   Insn 18(l0): point = 4
Compressing live ranges: from 7 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=2
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=18, live_throughout: 13, 14, dead_or_set: 0
insn=19, live_throughout: 13, 14, dead_or_set: 0
insn=9, live_throughout: 13, 14, dead_or_set: 0


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


__iounmap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 13[sp]
;;  ref usage 	r0={4d,3u} r1={2d} r2={2d} r3={2d} r12={2d} r13={1d,3u} r14={1d,1u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 132{125d,7u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 4 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 4 1 2 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 2 4 3 2 NOTE_INSN_DELETED)

(note 3 2 6 2 NOTE_INSN_FUNCTION_BEG)

(note 6 3 7 2 NOTE_INSN_DELETED)

(note 7 6 18 2 NOTE_INSN_DELETED)

(insn 18 7 19 2 arch/arm/mm/ioremap.c:318 (set (reg:SI 0 r0)
        (and:SI (reg:SI 0 r0 [ io_addr ])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 19 18 9 2 arch/arm/mm/ioremap.c:318 (set (reg:SI 0 r0)
        (and:SI (reg:SI 0 r0)
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(call_insn/j 9 19 10 2 arch/arm/mm/ioremap.c:318 (parallel [
            (call (mem:SI (symbol_ref:SI ("vunmap") [flags 0x41] <function_decl 0x10fb8c00 vunmap>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 2 -> ( 1)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 10 9 20)

(note 20 10 0 NOTE_INSN_DELETED)


;; Function __arm_ioremap_pfn_caller (__arm_ioremap_pfn_caller)[0:1239]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
rescanning insn with uid = 48.
deleting insn with uid = 48.
deleting insn with uid = 6.
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 30 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 30 (  1.9)

Pass 0 for finding allocno costs

    a3 (r160,l0) best GENERAL_REGS, cover GENERAL_REGS
    a4 (r159,l0) best GENERAL_REGS, cover GENERAL_REGS
    a5 (r157,l0) best GENERAL_REGS, cover GENERAL_REGS
    a14 (r153,l0) best GENERAL_REGS, cover GENERAL_REGS
    a13 (r152,l0) best GENERAL_REGS, cover GENERAL_REGS
    a16 (r150,l0) best GENERAL_REGS, cover GENERAL_REGS
    a17 (r149,l0) best GENERAL_REGS, cover GENERAL_REGS
    a15 (r146,l0) best GENERAL_REGS, cover GENERAL_REGS
    a12 (r145,l0) best GENERAL_REGS, cover GENERAL_REGS
    a2 (r144,l0) best GENERAL_REGS, cover GENERAL_REGS
    a9 (r143,l0) best GENERAL_REGS, cover GENERAL_REGS
    a0 (r141,l0) best GENERAL_REGS, cover GENERAL_REGS
    a6 (r140,l0) best GENERAL_REGS, cover GENERAL_REGS
    a11 (r139,l0) best GENERAL_REGS, cover GENERAL_REGS
    a8 (r137,l0) best GENERAL_REGS, cover GENERAL_REGS
    a1 (r135,l0) best GENERAL_REGS, cover GENERAL_REGS
    a10 (r134,l0) best GENERAL_REGS, cover GENERAL_REGS
    a7 (r133,l0) best GENERAL_REGS, cover GENERAL_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a10(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000


Pass 1 for finding allocno costs

    r160: preferred GENERAL_REGS, alternative NO_REGS
    r159: preferred GENERAL_REGS, alternative NO_REGS
    r157: preferred GENERAL_REGS, alternative NO_REGS
    r153: preferred GENERAL_REGS, alternative NO_REGS
    r152: preferred GENERAL_REGS, alternative NO_REGS
    r150: preferred GENERAL_REGS, alternative NO_REGS
    r149: preferred GENERAL_REGS, alternative NO_REGS
    r146: preferred GENERAL_REGS, alternative NO_REGS
    r145: preferred GENERAL_REGS, alternative NO_REGS
    r144: preferred GENERAL_REGS, alternative NO_REGS
    r143: preferred GENERAL_REGS, alternative NO_REGS
    r141: preferred GENERAL_REGS, alternative NO_REGS
    r140: preferred GENERAL_REGS, alternative NO_REGS
    r139: preferred GENERAL_REGS, alternative NO_REGS
    r137: preferred GENERAL_REGS, alternative NO_REGS
    r135: preferred GENERAL_REGS, alternative NO_REGS
    r134: preferred GENERAL_REGS, alternative NO_REGS
    r133: preferred GENERAL_REGS, alternative NO_REGS

  a0(r141,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a1(r135,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a2(r144,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:30000
  a3(r160,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a4(r159,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a5(r157,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a6(r140,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a7(r133,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a8(r137,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a9(r143,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:50000
  a10(r134,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a11(r139,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a12(r145,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a13(r152,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a14(r153,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a15(r146,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a16(r150,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000
  a17(r149,l0) costs: LO_REGS:0,0 BASE_REGS:0,0 HI_REGS:0,0 GENERAL_REGS:0,0 MEM:20000

   Insn 108(l0): point = 0
   Insn 102(l0): point = 2
   Insn 95(l0): point = 5
   Insn 137(l0): point = 8
   Insn 90(l0): point = 10
   Insn 87(l0): point = 13
   Insn 135(l0): point = 16
   Insn 82(l0): point = 18
   Insn 80(l0): point = 20
   Insn 78(l0): point = 23
   Insn 77(l0): point = 25
   Insn 75(l0): point = 27
   Insn 74(l0): point = 29
   Insn 133(l0): point = 32
   Insn 69(l0): point = 34
   Insn 68(l0): point = 36
   Insn 67(l0): point = 38
   Insn 65(l0): point = 41
   Insn 64(l0): point = 43
   Insn 62(l0): point = 45
   Insn 58(l0): point = 47
   Insn 59(l0): point = 49
   Insn 61(l0): point = 51
   Insn 60(l0): point = 53
   Insn 54(l0): point = 55
   Insn 52(l0): point = 58
   Insn 51(l0): point = 60
   Insn 49(l0): point = 62
   Insn 46(l0): point = 64
   Insn 140(l0): point = 66
   Insn 139(l0): point = 68
   Insn 43(l0): point = 70
   Insn 47(l0): point = 72
   Insn 42(l0): point = 74
   Insn 48(l0): point = 76
   Insn 41(l0): point = 78
   Insn 39(l0): point = 81
   Insn 38(l0): point = 83
   Insn 36(l0): point = 85
   Insn 35(l0): point = 87
   Insn 131(l0): point = 90
   Insn 30(l0): point = 92
   Insn 29(l0): point = 94
   Insn 28(l0): point = 96
   Insn 27(l0): point = 98
   Insn 24(l0): point = 101
   Insn 23(l0): point = 103
   Insn 21(l0): point = 105
   Insn 20(l0): point = 107
   Insn 17(l0): point = 110
   Insn 16(l0): point = 112
   Insn 15(l0): point = 114
   Insn 14(l0): point = 116
   Insn 12(l0): point = 119
   Insn 5(l0): point = 121
   Insn 4(l0): point = 123
   Insn 11(l0): point = 125
   Insn 3(l0): point = 127
   Insn 2(l0): point = 129
 a0(r141): [90..92] [32..34] [8..10] [3..5]
 a1(r135): [39..55] [11..31]
 a2(r144): [101..127] [41..89] [11..31]
 a3(r160): [19..20]
 a4(r159): [26..27]
 a5(r157): [28..29]
 a6(r140): [101..103] [35..89]
 a7(r133): [50..68]
 a8(r137): [52..83]
 a9(r143): [101..129] [54..89]
 a10(r134): [56..60]
 a11(r139): [69..70]
 a12(r145): [101..123] [71..89]
 a13(r152): [71..74]
 a14(r153): [75..78]
 a15(r146): [101..121] [88..89]
 a16(r150): [113..114]
 a17(r149): [115..116]
Compressing live ranges: from 132 to 45 - 34%
Ranges after the compression:
 a0(r141): [33..34] [12..13] [2..3] [0..1]
 a1(r135): [15..20] [4..11]
 a2(r144): [35..43] [16..32] [4..11]
 a3(r160): [5..6]
 a4(r159): [7..8]
 a5(r157): [9..10]
 a6(r140): [35..36] [14..32]
 a7(r133): [17..23]
 a8(r137): [18..30]
 a9(r143): [35..44] [19..32]
 a10(r134): [21..22]
 a11(r139): [24..25]
 a12(r145): [35..42] [26..32]
 a13(r152): [26..27]
 a14(r153): [28..29]
 a15(r146): [35..41] [31..32]
 a16(r150): [37..38]
 a17(r149): [39..40]
+++Allocating 144 bytes for conflict table (uncompressed size 144)
;; a0(r141,l0) conflicts:
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a1(r135,l0) conflicts: a2(r144,l0) a3(r160,l0) a4(r159,l0) a5(r157,l0) a6(r140,l0) a7(r133,l0) a8(r137,l0) a9(r143,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a2(r144,l0) conflicts: a1(r135,l0) a3(r160,l0) a4(r159,l0) a5(r157,l0) a6(r140,l0) a7(r133,l0) a8(r137,l0) a9(r143,l0) a10(r134,l0) a11(r139,l0) a13(r152,l0) a12(r145,l0) a14(r153,l0) a15(r146,l0) a16(r150,l0) a17(r149,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a3(r160,l0) conflicts: a1(r135,l0) a2(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a4(r159,l0) conflicts: a1(r135,l0) a2(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a5(r157,l0) conflicts: a1(r135,l0) a2(r144,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a6(r140,l0) conflicts: a1(r135,l0) a2(r144,l0) a7(r133,l0) a8(r137,l0) a9(r143,l0) a10(r134,l0) a11(r139,l0) a13(r152,l0) a12(r145,l0) a14(r153,l0) a15(r146,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a7(r133,l0) conflicts: a1(r135,l0) a2(r144,l0) a6(r140,l0) a8(r137,l0) a9(r143,l0) a10(r134,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a8(r137,l0) conflicts: a1(r135,l0) a2(r144,l0) a6(r140,l0) a7(r133,l0) a9(r143,l0) a10(r134,l0) a11(r139,l0) a13(r152,l0) a12(r145,l0) a14(r153,l0)
;;     total conflict hard regs: 0-2 14
;;     conflict hard regs: 0-2 14
;; a9(r143,l0) conflicts: a1(r135,l0) a2(r144,l0) a6(r140,l0) a7(r133,l0) a8(r137,l0) a10(r134,l0) a11(r139,l0) a13(r152,l0) a12(r145,l0) a14(r153,l0) a15(r146,l0) a16(r150,l0) a17(r149,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a10(r134,l0) conflicts: a2(r144,l0) a6(r140,l0) a7(r133,l0) a8(r137,l0) a9(r143,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a11(r139,l0) conflicts: a2(r144,l0) a6(r140,l0) a8(r137,l0) a9(r143,l0)
;;     total conflict hard regs: 1 2
;;     conflict hard regs: 1 2
;; a12(r145,l0) conflicts: a2(r144,l0) a6(r140,l0) a8(r137,l0) a9(r143,l0) a13(r152,l0) a14(r153,l0) a15(r146,l0) a16(r150,l0) a17(r149,l0)
;;     total conflict hard regs: 0-3 14
;;     conflict hard regs: 0-3 14
;; a13(r152,l0) conflicts: a2(r144,l0) a6(r140,l0) a8(r137,l0) a9(r143,l0) a12(r145,l0)
;;     total conflict hard regs: 1 2
;;     conflict hard regs: 1 2
;; a14(r153,l0) conflicts: a2(r144,l0) a6(r140,l0) a8(r137,l0) a9(r143,l0) a12(r145,l0)
;;     total conflict hard regs: 2
;;     conflict hard regs: 2
;; a15(r146,l0) conflicts: a2(r144,l0) a6(r140,l0) a9(r143,l0) a12(r145,l0) a16(r150,l0) a17(r149,l0)
;;     total conflict hard regs: 0 14
;;     conflict hard regs: 0 14
;; a16(r150,l0) conflicts: a2(r144,l0) a9(r143,l0) a12(r145,l0) a15(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14
;; a17(r149,l0) conflicts: a2(r144,l0) a9(r143,l0) a12(r145,l0) a15(r146,l0)
;;     total conflict hard regs: 14
;;     conflict hard regs: 14

  cp0:a0(r141)<->a2(r144)@125:shuffle
  cp1:a0(r141)<->a1(r135)@125:shuffle
  cp2:a0(r141)<->a6(r140)@1000:move
  cp3:a13(r152)<->a14(r153)@125:shuffle
  cp4:a11(r139)<->a13(r152)@125:shuffle
  cp5:a11(r139)<->a12(r145)@125:shuffle
  cp6:a7(r133)<->a11(r139)@125:shuffle
  cp7:a16(r150)<->a17(r149)@125:shuffle
  regions=1, blocks=16, points=45
    allocnos=18, copies=8, conflicts=0, ranges=28

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 15 14 13 12 11 10 9 8 7 6 5 4 3 2
    all: 0r141 1r135 2r144 3r160 4r159 5r157 6r140 7r133 8r137 9r143 10r134 11r139 12r145 13r152 14r153 15r146 16r150 17r149
    modified regnos: 133 134 135 137 139 140 141 143 144 145 146 149 150 152 153 157 159 160
    border:
    Pressure: GENERAL_REGS=9
    Reg 141 of GENERAL_REGS has 1 regs less
    Reg 135 of GENERAL_REGS has 5 regs less
    Reg 144 of GENERAL_REGS has 5 regs less
    Reg 160 of GENERAL_REGS has 1 regs less
    Reg 159 of GENERAL_REGS has 1 regs less
    Reg 157 of GENERAL_REGS has 1 regs less
    Reg 140 of GENERAL_REGS has 5 regs less
    Reg 133 of GENERAL_REGS has 5 regs less
    Reg 137 of GENERAL_REGS has 4 regs less
    Reg 143 of GENERAL_REGS has 5 regs less
    Reg 134 of GENERAL_REGS has 1 regs less
    Reg 139 of GENERAL_REGS has 2 regs less
    Reg 145 of GENERAL_REGS has 5 regs less
    Reg 152 of GENERAL_REGS has 2 regs less
    Reg 153 of GENERAL_REGS has 1 regs less
    Reg 146 of GENERAL_REGS has 2 regs less
    Reg 150 of GENERAL_REGS has 1 regs less
    Reg 149 of GENERAL_REGS has 1 regs less
      Pushing a17(r149,l0)
      Pushing a16(r150,l0)
      Pushing a14(r153,l0)
      Pushing a10(r134,l0)
      Pushing a5(r157,l0)
      Pushing a4(r159,l0)
      Pushing a3(r160,l0)
      Pushing a0(r141,l0)
      Pushing a15(r146,l0)
      Pushing a13(r152,l0)
      Pushing a11(r139,l0)
      Pushing a6(r140,l0)(potential spill: pri=1666, cost=20000)
      Pushing a8(r137,l0)
      Pushing a12(r145,l0)
      Pushing a2(r144,l0)
      Pushing a9(r143,l0)
      Pushing a7(r133,l0)
      Pushing a1(r135,l0)
      Popping a1(r135,l0)  -- assign reg 4
      Popping a7(r133,l0)  -- assign reg 5
      Popping a9(r143,l0)  -- assign reg 6
      Popping a2(r144,l0)  -- assign reg 7
      Popping a12(r145,l0)  -- assign reg 4
      Popping a8(r137,l0)  -- assign reg 8
      Popping a6(r140,l0)  -- assign reg 10
      Popping a11(r139,l0)  -- assign reg 5
      Popping a13(r152,l0)  -- assign reg 5
      Popping a15(r146,l0)  -- assign reg 5
      Popping a0(r141,l0)  -- assign reg 0
      Popping a3(r160,l0)  -- assign reg 3
      Popping a4(r159,l0)  -- assign reg 3
      Popping a5(r157,l0)  -- assign reg 3
      Popping a10(r134,l0)  -- assign reg 0
      Popping a14(r153,l0)  -- assign reg 5
      Popping a16(r150,l0)  -- assign reg 3
      Popping a17(r149,l0)  -- assign reg 3
Disposition:
    7:r133 l0     5   10:r134 l0     0    1:r135 l0     4    8:r137 l0     8
   11:r139 l0     5    6:r140 l0    10    0:r141 l0     0    9:r143 l0     6
    2:r144 l0     7   12:r145 l0     4   15:r146 l0     5   17:r149 l0     3
   16:r150 l0     3   13:r152 l0     5   14:r153 l0     5    5:r157 l0     3
    4:r159 l0     3    3:r160 l0     3
New iteration of spill/restore move
+++Costs: overall -4250, reg -4250, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=2, live_throughout: 1, 2, 3, 13, 14, dead_or_set: 0, 143
insn=3, live_throughout: 2, 3, 13, 14, 143, dead_or_set: 1, 144
insn=11, live_throughout: 2, 3, 13, 14, 143, 144, dead_or_set: 
insn=4, live_throughout: 3, 13, 14, 24, 143, 144, dead_or_set: 2, 145
insn=5, live_throughout: 13, 14, 24, 143, 144, 145, dead_or_set: 3, 146
insn=12, live_throughout: 13, 14, 143, 144, 145, 146, dead_or_set: 
insn=14, live_throughout: 13, 14, 143, 144, 145, 146, dead_or_set: 149
insn=15, live_throughout: 13, 14, 143, 144, 145, 146, dead_or_set: 149, 150
insn=16, live_throughout: 13, 14, 143, 144, 145, 146, dead_or_set: 150
insn=17, live_throughout: 13, 14, 143, 144, 145, 146, dead_or_set: 
insn=18, live_throughout: 13, 143, 144, 145, 146, dead_or_set: 
insn=20, live_throughout: 13, 143, 144, 145, 146, dead_or_set: 0
insn=21, live_throughout: 13, 143, 144, 145, 146, dead_or_set: 0, 14
insn=23, live_throughout: 13, 143, 144, 145, 146, dead_or_set: 0, 140
insn=24, live_throughout: 13, 140, 143, 144, 145, 146, dead_or_set: 
insn=27, live_throughout: 13, dead_or_set: 0
insn=28, live_throughout: 0, 13, dead_or_set: 1
insn=29, live_throughout: 13, dead_or_set: 0, 1, 14
insn=30, live_throughout: 13, 14, dead_or_set: 141
insn=131, live_throughout: 13, 14, 141, dead_or_set: 
insn=33, live_throughout: 13, 140, 143, 144, 145, 146, dead_or_set: 
insn=35, live_throughout: 13, 140, 143, 144, 145, dead_or_set: 0, 146
insn=36, live_throughout: 13, 140, 143, 144, 145, dead_or_set: 0, 14
insn=38, live_throughout: 13, 14, 140, 143, 144, 145, dead_or_set: 0, 137
insn=39, live_throughout: 13, 14, 137, 140, 143, 144, 145, dead_or_set: 
insn=41, live_throughout: 13, 137, 140, 143, 144, 145, dead_or_set: 153
insn=48, live_throughout: 13, 137, 140, 143, 144, 145, 153, dead_or_set: 2
insn=42, live_throughout: 2, 13, 137, 140, 143, 144, 145, dead_or_set: 152, 153
insn=47, live_throughout: 2, 13, 137, 140, 143, 144, 145, 152, dead_or_set: 1
insn=43, live_throughout: 1, 2, 13, 137, 140, 143, 144, dead_or_set: 139, 145, 152
insn=139, live_throughout: 1, 2, 13, 137, 140, 143, 144, dead_or_set: 133, 139
insn=140, live_throughout: 1, 2, 13, 137, 140, 143, 144, dead_or_set: 133
insn=46, live_throughout: 1, 2, 13, 133, 137, 140, 143, 144, dead_or_set: 0
insn=49, live_throughout: 13, 133, 137, 140, 143, 144, dead_or_set: 0, 1, 2, 14
insn=51, live_throughout: 13, 14, 133, 137, 140, 143, 144, dead_or_set: 0, 134
insn=52, live_throughout: 13, 14, 133, 134, 137, 140, 143, 144, dead_or_set: 
insn=54, live_throughout: 13, 133, 137, 140, 143, 144, dead_or_set: 134, 135
insn=60, live_throughout: 13, 133, 135, 137, 140, 144, dead_or_set: 2, 143
insn=61, live_throughout: 2, 13, 133, 135, 140, 144, dead_or_set: 3, 137
insn=59, live_throughout: 2, 3, 13, 135, 140, 144, dead_or_set: 1, 133
insn=58, live_throughout: 1, 2, 3, 13, 135, 140, 144, dead_or_set: 0
insn=62, live_throughout: 13, 135, 140, 144, dead_or_set: 0, 1, 2, 3, 14
insn=64, live_throughout: 13, 14, 135, 140, 144, dead_or_set: 0
insn=65, live_throughout: 13, 14, 135, 140, 144, dead_or_set: 
insn=67, live_throughout: 13, 140, dead_or_set: 0, 135
insn=68, live_throughout: 13, 140, dead_or_set: 0, 14
insn=69, live_throughout: 13, 14, dead_or_set: 140, 141
insn=133, live_throughout: 13, 14, 141, dead_or_set: 
insn=72, live_throughout: 13, 14, 135, 144, dead_or_set: 
insn=74, live_throughout: 13, 14, 135, 144, dead_or_set: 157
insn=75, live_throughout: 13, 14, 135, 144, dead_or_set: 157, 159
insn=77, live_throughout: 13, 14, 135, 144, dead_or_set: 159
insn=78, live_throughout: 13, 14, 135, 144, dead_or_set: 
insn=80, live_throughout: 13, 135, 144, dead_or_set: 160
insn=82, live_throughout: 13, 135, 144, dead_or_set: 14, 160
insn=135, live_throughout: 13, 14, 135, 144, dead_or_set: 
insn=85, live_throughout: 13, 14, 135, 144, dead_or_set: 
insn=87, live_throughout: 13, 14, 135, 144, dead_or_set: 
insn=88, live_throughout: 13, 14, 135, 144, dead_or_set: 
insn=90, live_throughout: 13, 14, dead_or_set: 135, 141, 144
insn=137, live_throughout: 13, 14, 141, dead_or_set: 
insn=93, live_throughout: 13, 14, dead_or_set: 
insn=95, live_throughout: 13, 14, dead_or_set: 141
insn=96, live_throughout: 13, 14, 141, dead_or_set: 
insn=102, live_throughout: 13, 14, dead_or_set: 0, 141
insn=108, live_throughout: 0, 13, 14, dead_or_set: 
init_insns for 157: (insn_list:REG_DEP_TRUE 74 (nil))
init_insns for 160: (insn_list:REG_DEP_TRUE 80 (nil))
changing reg in insn 140
changing reg in insn 139
changing reg in insn 140
changing reg in insn 59
changing reg in insn 46
changing reg in insn 51
changing reg in insn 54
changing reg in insn 54
changing reg in insn 59
changing reg in insn 67
changing reg in insn 90
changing reg in insn 58
changing reg in insn 38
changing reg in insn 61
changing reg in insn 43
changing reg in insn 139
changing reg in insn 23
changing reg in insn 69
changing reg in insn 69
changing reg in insn 95
changing reg in insn 90
changing reg in insn 30
changing reg in insn 102
changing reg in insn 2
changing reg in insn 60
changing reg in insn 11
changing reg in insn 20
changing reg in insn 14
changing reg in insn 3
changing reg in insn 90
changing reg in insn 41
changing reg in insn 42
changing reg in insn 4
changing reg in insn 43
changing reg in insn 5
changing reg in insn 35
changing reg in insn 14
changing reg in insn 15
changing reg in insn 15
changing reg in insn 16
changing reg in insn 42
changing reg in insn 43
changing reg in insn 41
changing reg in insn 42
changing reg in insn 74
changing reg in insn 75
changing reg in insn 75
changing reg in insn 77
changing reg in insn 80
changing reg in insn 82
deleting insn with uid = 102.


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
verify found no changes in insn with uid = 21.
verify found no changes in insn with uid = 29.
verify found no changes in insn with uid = 36.
verify found no changes in insn with uid = 49.
verify found no changes in insn with uid = 62.
verify found no changes in insn with uid = 68.
rescanning insn with uid = 82.
deleting insn with uid = 82.
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 30 (  1.9)
df_worklist_dataflow_doublequeue:n_basic_blocks 16 n_edges 22 count 30 (  1.9)


__arm_ioremap_pfn_caller

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={19d,17u} r1={11d,4u} r2={10d,3u} r3={14d,7u} r4={2d,5u} r5={6d,7u} r6={1d,4u} r7={1d,2u,1d} r8={1d,1u} r10={1d,1u} r12={8d} r13={1d,23u} r14={8d,1u} r15={7d} r16={7d} r17={7d} r18={7d} r19={7d} r20={7d} r21={7d} r22={7d} r23={7d} r24={14d,7u} r27={7d} r28={7d} r29={7d} r30={7d} r31={7d} r32={7d} r33={7d} r34={7d} r35={7d} r36={7d} r37={7d} r38={7d} r39={7d} r40={7d} r41={7d} r42={7d} r43={7d} r44={7d} r45={7d} r46={7d} r47={7d} r48={7d} r49={7d} r50={7d} r51={7d} r52={7d} r53={7d} r54={7d} r55={7d} r56={7d} r57={7d} r58={7d} r59={7d} r60={7d} r61={7d} r62={7d} r63={7d} r64={7d} r65={7d} r66={7d} r67={7d} r68={7d} r69={7d} r70={7d} r71={7d} r72={7d} r73={7d} r74={7d} r75={7d} r76={7d} r77={7d} r78={7d} r79={7d} r80={7d} r81={7d} r82={7d} r83={7d} r84={7d} r85={7d} r86={7d} r87={7d} r88={7d} r89={7d} r90={7d} r91={7d} r92={7d} r93={7d} r94={7d} r95={7d} r96={7d} r97={7d} r98={7d} r99={7d} r100={7d} r101={7d} r102={7d} r103={7d} r104={7d} r105={7d} r106={7d} r107={7d} r108={7d} r109={7d} r110={7d} r111={7d} r112={7d} r113={7d} r114={7d} r115={7d} r116={7d} r117={7d} r118={7d} r119={7d} r120={7d} r121={7d} r122={7d} r123={7d} r124={7d} r125={7d} r126={7d} r127={7d} 
;;    total ref usage 950{867d,82u,1e} in 58{51 regular + 7 call} insns.
(note 1 0 8 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 1 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 10 2 NOTE_INSN_FUNCTION_BEG)

(note 10 7 2 2 NOTE_INSN_DELETED)

(insn 2 10 3 2 arch/arm/mm/ioremap.c:192 (set (reg/v:SI 6 r6 [orig:143 pfn ] [143])
        (reg:SI 0 r0 [ pfn ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 11 2 arch/arm/mm/ioremap.c:192 (set (reg/v:SI 7 r7 [orig:144 offset ] [144])
        (reg:SI 1 r1 [ offset ])) 167 {*arm_movsi_insn} (nil))

(insn 11 3 4 2 arch/arm/mm/ioremap.c:201 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:143 pfn ] [143])
            (const_int 1048576 [0x100000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 4 11 5 2 arch/arm/mm/ioremap.c:192 (set (reg/v:SI 4 r4 [orig:145 size ] [145])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 5 4 12 2 arch/arm/mm/ioremap.c:192 (set (reg/v:SI 5 r5 [orig:146 mtype ] [146])
        (reg:SI 3 r3 [ mtype ])) 167 {*arm_movsi_insn} (nil))

(jump_insn 12 5 13 2 arch/arm/mm/ioremap.c:201 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2899 [0xb53])
        (nil)))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  3 [71.0%]  (fallthru)
;; Succ edge  4 [29.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [71.0%]  (fallthru)
(note 13 12 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn 14 13 15 3 arch/arm/mm/ioremap.c:201 discrim 1 (set (reg:SI 3 r3 [149])
        (ashift:SI (reg/v:SI 6 r6 [orig:143 pfn ] [143])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 15 14 16 3 arch/arm/mm/ioremap.c:201 discrim 1 (set (reg:SI 3 r3 [150])
        (and:SI (reg:SI 3 r3 [149])
            (const_int 16777215 [0xffffff]))) 67 {*arm_andsi3_insn} (nil))

(insn 16 15 17 3 arch/arm/mm/ioremap.c:201 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [150])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 17 16 18 3 arch/arm/mm/ioremap.c:201 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9000 [0x2328])
        (nil)))
;; End of basic block 3 -> ( 14 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


;; Succ edge  14 [90.0%] 
;; Succ edge  4 [10.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 10 [sl] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  2 [29.0%] 
;; Pred edge  3 [10.0%]  (fallthru)
(code_label 18 17 19 4 4 "" [1 uses])

(note 19 18 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 22 19 20 4 NOTE_INSN_DELETED)

(insn 20 22 21 4 arch/arm/mm/ioremap.c:207 (set (reg:SI 0 r0)
        (reg/v:SI 6 r6 [orig:143 pfn ] [143])) 167 {*arm_movsi_insn} (nil))

(call_insn 21 20 23 4 arch/arm/mm/ioremap.c:207 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("pfn_valid") [flags 0x41] <function_decl 0x10c01c80 pfn_valid>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 23 21 24 4 arch/arm/mm/ioremap.c:207 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg:SI 10 sl [orig:140 D.23354 ] [140])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 24 23 25 4 arch/arm/mm/ioremap.c:207 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
        (nil)))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  5 [0.0%]  (fallthru)
;; Succ edge  6 [100.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  4 [0.0%]  (fallthru)
(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn 27 25 28 5 arch/arm/mm/ioremap.c:207 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x1140be10>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x1140be10>)
        (nil)))

(insn 28 27 29 5 arch/arm/mm/ioremap.c:207 discrim 1 (set (reg:SI 1 r1)
        (const_int 207 [0xcf])) 167 {*arm_movsi_insn} (nil))

(call_insn 29 28 30 5 arch/arm/mm/ioremap.c:207 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a67280 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 30 29 131 5 arch/arm/mm/ioremap.c:208 (set (reg/f:SI 0 r0 [orig:141 D.23353 ] [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 131 30 132 5 (set (pc)
        (label_ref 96)) 242 {*arm_jump} (nil))
;; End of basic block 5 -> ( 15)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 132 131 33)

;; Start of basic block ( 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 8 [r8] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  4 [100.0%] 
(code_label 33 132 34 6 6 "" [1 uses])

(note 34 33 37 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 37 34 35 6 NOTE_INSN_DELETED)

(insn 35 37 36 6 arch/arm/mm/ioremap.c:210 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:146 mtype ] [146])) 167 {*arm_movsi_insn} (nil))

(call_insn 36 35 38 6 arch/arm/mm/ioremap.c:210 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_mem_type") [flags 0x41] <function_decl 0x113ded80 get_mem_type>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 38 36 39 6 arch/arm/mm/ioremap.c:211 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 8 r8 [orig:137 type ] [137])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 39 38 40 6 arch/arm/mm/ioremap.c:211 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7954 [0x1f12])
        (nil)))
;; End of basic block 6 -> ( 14 7)
;; lr  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  14 [79.5%] 
;; Succ edge  7 [20.5%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [20.5%]  (fallthru)
(note 40 39 44 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 44 40 50 7 NOTE_INSN_DELETED)

(note 50 44 41 7 NOTE_INSN_DELETED)

(insn 41 50 48 7 arch/arm/mm/ioremap.c:217 (set (reg:SI 5 r5 [153])
        (plus:SI (reg/v:SI 7 r7 [orig:144 offset ] [144])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(insn 48 41 42 7 arch/arm/mm/ioremap.c:219 (set (reg:SI 2 r2)
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 32 [0x20])) [0 caller+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 48 47 7 arch/arm/mm/ioremap.c:217 (set (reg:SI 5 r5 [152])
        (plus:SI (reg:SI 5 r5 [153])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 7 r7 [orig:144 offset ] [144])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 47 42 43 7 arch/arm/mm/ioremap.c:219 (set (reg:SI 1 r1)
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (nil))

(insn 43 47 139 7 arch/arm/mm/ioremap.c:217 (set (reg:SI 5 r5 [orig:139 D.23365 ] [139])
        (plus:SI (reg:SI 5 r5 [152])
            (reg/v:SI 4 r4 [orig:145 size ] [145]))) 4 {*arm_addsi3} (nil))

(insn 139 43 140 7 arch/arm/mm/ioremap.c:217 (set (reg/v:SI 5 r5 [orig:133 size.389 ] [133])
        (and:SI (reg:SI 5 r5 [orig:139 D.23365 ] [139])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn 140 139 46 7 arch/arm/mm/ioremap.c:217 (set (reg/v:SI 5 r5 [orig:133 size.389 ] [133])
        (and:SI (reg/v:SI 5 r5 [orig:133 size.389 ] [133])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 46 140 49 7 arch/arm/mm/ioremap.c:219 (set (reg:SI 0 r0)
        (reg/v:SI 5 r5 [orig:133 size.389 ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn 49 46 51 7 arch/arm/mm/ioremap.c:219 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("get_vm_area_caller") [flags 0x41] <function_decl 0x10fb8f00 get_vm_area_caller>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 51 49 52 7 arch/arm/mm/ioremap.c:220 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 0 r0 [orig:134 area ] [134])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(jump_insn 52 51 53 7 arch/arm/mm/ioremap.c:220 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 2164 [0x874])
        (nil)))
;; End of basic block 7 -> ( 14 8)
;; lr  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]


;; Succ edge  14 [21.6%] 
;; Succ edge  8 [78.4%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 5 [r5] 6 [r6] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [78.4%]  (fallthru)
(note 53 52 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 56 53 57 8 NOTE_INSN_DELETED)

(note 57 56 63 8 NOTE_INSN_DELETED)

(note 63 57 54 8 NOTE_INSN_DELETED)

(insn 54 63 60 8 arch/arm/mm/ioremap.c:222 (set (reg/v:SI 4 r4 [orig:135 addr ] [135])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:134 area ] [134])
                (const_int 4 [0x4])) [0 <variable>.addr+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 60 54 61 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 2 r2)
        (ashift:SI (reg/v:SI 6 r6 [orig:143 pfn ] [143])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn 61 60 59 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 3 r3)
        (mem/s/j:SI (reg/v/f:SI 8 r8 [orig:137 type ] [137]) [0 <variable>.prot_pte+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 59 61 58 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 1 r1)
        (plus:SI (reg/v:SI 5 r5 [orig:133 size.389 ] [133])
            (reg/v:SI 4 r4 [orig:135 addr ] [135]))) 4 {*arm_addsi3} (nil))

(insn 58 59 62 8 arch/arm/mm/ioremap.c:236 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:135 addr ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn 62 58 64 8 arch/arm/mm/ioremap.c:236 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("ioremap_page_range") [flags 0x41] <function_decl 0x10fcbc00 ioremap_page_range>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 64 62 65 8 arch/arm/mm/ioremap.c:239 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn 65 64 66 8 arch/arm/mm/ioremap.c:239 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 72)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 9566 [0x255e])
        (nil)))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 4 [r4] 7 [r7] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 7 [r7] 10 [sl] 13 [sp]


;; Succ edge  9 [4.3%]  (fallthru)
;; Succ edge  10 [95.7%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  8 [4.3%]  (fallthru)
(note 66 65 67 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn 67 66 68 9 arch/arm/mm/ioremap.c:240 (set (reg:SI 0 r0)
        (reg/v:SI 4 r4 [orig:135 addr ] [135])) 167 {*arm_movsi_insn} (nil))

(call_insn 68 67 69 9 arch/arm/mm/ioremap.c:240 (parallel [
            (call (mem:SI (symbol_ref:SI ("vunmap") [flags 0x41] <function_decl 0x10fb8c00 vunmap>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 69 68 133 9 arch/arm/mm/ioremap.c:241 (set (reg/f:SI 0 r0 [orig:141 D.23353 ] [141])
        (reg:SI 10 sl [orig:140 D.23354 ] [140])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(jump_insn 133 69 134 9 arch/arm/mm/ioremap.c:241 (set (pc)
        (label_ref 96)) 242 {*arm_jump} (nil))
;; End of basic block 9 -> ( 15)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 134 133 72)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  8 [95.7%] 
(code_label 72 134 73 10 8 "" [1 uses])

(note 73 72 76 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 76 73 74 10 NOTE_INSN_DELETED)

(insn 74 76 75 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg/f:SI 3 r3 [157])
        (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x10fc0960 cacheid>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x10fc0960 cacheid>)
        (nil)))

(insn 75 74 77 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:SI 3 r3 [orig:159 cacheid ] [159])
        (mem/c/i:SI (reg/f:SI 3 r3 [157]) [0 cacheid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x10fc0960 cacheid>) [0 cacheid+0 S4 A32])
        (nil)))

(insn 77 75 78 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:159 cacheid ] [159])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn 78 77 79 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 85)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
        (nil)))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  11 [29.0%]  (fallthru)
;; Succ edge  12 [71.0%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  10 [29.0%]  (fallthru)
(note 79 78 81 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 81 79 80 11 NOTE_INSN_DELETED)

(insn 80 81 82 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cacheflush.h:332 (set (reg/f:SI 3 r3 [160])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x10fc0f60 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x10fc0f60 cpu_cache>)
        (nil)))

(call_insn 82 80 135 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cacheflush.h:332 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [160])
                            (const_int 4 [0x4])) [0 cpu_cache.flush_kern_all+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (nil)
    (nil))

(jump_insn 135 82 136 11 (set (pc)
        (label_ref 88)) 242 {*arm_jump} (nil))
;; End of basic block 11 -> ( 13)
;; lr  out 	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%] 

(barrier 136 135 85)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  10 [71.0%] 
(code_label 85 136 86 12 9 "" [1 uses])

(note 86 85 87 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn 87 86 88 12 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cacheflush.h:338 (parallel [
            (asm_operands/v ("dsb") ("") 0 []
                 [] 5635626)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 7 [r7] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 88 87 89 13 10 "" [1 uses])

(note 89 88 90 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn 90 89 137 13 arch/arm/mm/ioremap.c:245 (set (reg/f:SI 0 r0 [orig:141 D.23353 ] [141])
        (plus:SI (reg/v:SI 7 r7 [orig:144 offset ] [144])
            (reg/v:SI 4 r4 [orig:135 addr ] [135]))) 4 {*arm_addsi3} (nil))

(jump_insn 137 90 138 13 arch/arm/mm/ioremap.c:245 (set (pc)
        (label_ref 96)) 242 {*arm_jump} (nil))
;; End of basic block 13 -> ( 15)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  15 [100.0%] 

(barrier 138 137 93)

;; Start of basic block ( 3 7 6) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [90.0%] 
;; Pred edge  7 [21.6%] 
;; Pred edge  6 [79.5%] 
(code_label 93 138 94 14 5 "" [3 uses])

(note 94 93 95 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn 95 94 96 14 arch/arm/mm/ioremap.c:202 (set (reg/f:SI 0 r0 [orig:141 D.23353 ] [141])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 14 -> ( 15)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 14 5 9 13) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  14 [100.0%]  (fallthru)
;; Pred edge  5 [100.0%] 
;; Pred edge  9 [100.0%] 
;; Pred edge  13 [100.0%] 
(code_label 96 95 97 15 7 "" [3 uses])

(note 97 96 108 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn 108 97 141 15 arch/arm/mm/ioremap.c:246 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 15 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 141 108 142 NOTE_INSN_DELETED)

(note 142 141 0 NOTE_INSN_DELETED)


;; Function __arm_ioremap_pfn (__arm_ioremap_pfn)[0:1241]

starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
Building IRA IR
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called

Pass 0 for finding allocno costs




Pass 1 for finding allocno costs



   Insn 27(l0): point = 0
   Insn 15(l0): point = 2
   Insn 10(l0): point = 4
Compressing live ranges: from 7 to 0 - 0%
Ranges after the compression:
+++Allocating 0 bytes for conflict table (uncompressed size 0)

  regions=1, blocks=3, points=0
    allocnos=0, copies=0, conflicts=0, ranges=0

**** Allocnos coloring:


  Loop 0 (parent -1, header bb0, depth 0)
    bbs: 2
    all:
    modified regnos:
    border:
    Pressure: GENERAL_REGS=5
Disposition:
New iteration of spill/restore move
+++Costs: overall 0, reg 0, mem 0, ld 0, st 0, move 0
+++       move loops 0, new jumps 0
insn=10, live_throughout: 0, 1, 2, 3, 13, dead_or_set: 14
insn=15, live_throughout: 13, dead_or_set: 0, 1, 2, 3, 14
insn=27, live_throughout: 0, 13, 14, dead_or_set: 
Spilling for insn 10.

Reloads for insn # 10
Reload 0: reload_out (SI) = (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
	NO_REGS, RELOAD_FOR_OUTPUT (opnum = 0), optional
	reload_out_reg: (mem:SI (reg/f:SI 13 sp) [0 S4 A32])


try_optimize_cfg iteration 1

starting the processing of deferred insns
ending the processing of deferred insns
starting the processing of deferred insns
ending the processing of deferred insns
df_analyze called
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 3 (    1)
df_worklist_dataflow_doublequeue:n_basic_blocks 3 n_edges 2 count 4 (  1.3)


__arm_ioremap_pfn

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 13[sp] 14[lr]
;;  ref usage 	r0={2d,3u} r1={2d,1u} r2={2d,1u} r3={2d,1u} r12={2d} r13={1d,4u} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 136{124d,12u,0e} in 3{2 regular + 1 call} insns.
(note 1 0 7 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 1 31 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 31 7 6 2 NOTE_INSN_DELETED)

(note 6 31 10 2 NOTE_INSN_FUNCTION_BEG)

(insn 10 6 15 2 arch/arm/mm/ioremap.c:279 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 14 lr)) 167 {*arm_movsi_insn} (nil))

(call_insn 15 10 27 2 arch/arm/mm/ioremap.c:279 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__arm_ioremap_pfn_caller") [flags 0x3] <function_decl 0x10fbf980 __arm_ioremap_pfn_caller>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_EH_REGION (const_int 0 [0x0])
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 27 15 32 2 arch/arm/mm/ioremap.c:281 (use (reg/i:SI 0 r0)) -1 (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%]  (fallthru)

(note 32 27 33 NOTE_INSN_DELETED)

(note 33 32 0 NOTE_INSN_DELETED)

