
;; Function dma_supported (dma_supported)[0:1293]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 2: mask+0
Variables:
  name: mask
    offset 0
      (reg:DI 2 r2 [ mask ])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])

OUT:
Stack adjustment: 0
Reg 2: mask+0
Reg 3: mask+4
Variables:
  name: mask
    offset 0
      (reg:DI 2 r2 [ mask ])
    offset 4
      (reg:SI 3 r3 [ mask+4 ])


Basic block 3:
IN:
Stack adjustment: 0
Reg 2: mask+0
Reg 3: mask+4
Variables:
  name: mask
    offset 0
      (reg:DI 2 r2 [ mask ])
    offset 4
      (reg:SI 3 r3 [ mask+4 ])

OUT:
Stack adjustment: 0
Reg 2: mask+0
Reg 3: mask+4
Variables:
  name: mask
    offset 0
      (reg:DI 2 r2 [ mask ])
    offset 4
      (reg:SI 3 r3 [ mask+4 ])


Basic block 4:
IN:
Stack adjustment: 0
Reg 2: mask+0
Reg 3: mask+4
Variables:
  name: mask
    offset 0
      (reg:DI 2 r2 [ mask ])
    offset 4
      (reg:SI 3 r3 [ mask+4 ])

OUT:
Stack adjustment: 0
Reg 2: mask+0
Reg 3: mask+4
Variables:
  name: mask
    offset 0
      (reg:DI 2 r2 [ mask ])
    offset 4
      (reg:SI 3 r3 [ mask+4 ])


5 basic blocks, 6 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

Successors:  4 [50.0%]  3 [50.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 2500, maybe hot.
Predecessors:  2 [50.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  4 [50.0%]  (fallthru) EXIT [50.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 5000, should be 2500

Basic block 4 , prev 3, next 1, loop_depth 0, count 0, freq 6250, maybe hot.
Predecessors:  2 [50.0%]  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 4, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%]  3 [50.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	

Invalid sum of incoming frequencies 7500, should be 10000



dma_supported

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,2u} r1={1d} r2={1d,1u} r3={1d,1u} r13={1d,4u} r14={1d,1u} r24={2d,2u} 
;;    total ref usage 21{10d,11u,0e} in 8{8 regular + 0 call} insns.
(note 1 0 68 NOTE_INSN_DELETED)

(note 68 1 69 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 69 68 5 2 ( mask (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [ mask ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 69 63 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 63 5 42 2 NOTE_INSN_PROLOGUE_END)

(note 42 63 4 2 NOTE_INSN_DELETED)

(note 4 42 8 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 8 4 70 2 arch/arm/mm/dma-mapping.c:682 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [ mask+4 ])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ mask+4 ])
        (nil)))

(note 70 8 7 2 ( mask (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [ mask ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 7 70 71 2 arch/arm/mm/dma-mapping.c:682 (set (reg:SI 0 r0 [136])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 71 7 9 2 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 9 71 34 2 arch/arm/mm/dma-mapping.c:682 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 18)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%] 
;; Succ edge  3 [50.0%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [50.0%]  (fallthru)
(note 34 9 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 12 34 13 3 arch/arm/mm/dma-mapping.c:682 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:137 mask ] [137])
            (const_int -2 [0xfffffffffffffffe]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:137 mask ] [137])
        (nil)))

(jump_insn:TI 13 12 18 3 arch/arm/mm/dma-mapping.c:682 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 4 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  4 [50.0%]  (fallthru)
;; Succ edge  EXIT [50.0%] 

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [50.0%] 
;; Pred edge  3 [50.0%]  (fallthru)
(code_label 18 13 37 4 3 "" [1 uses])

(note 37 18 19 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 19 37 31 4 arch/arm/mm/dma-mapping.c:682 (set (reg:SI 0 r0 [136])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 1 [0x1])
        (nil)))

(insn 31 19 65 4 arch/arm/mm/dma-mapping.c:682 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 65 31 64 4 arch/arm/mm/dma-mapping.c:682 (return) 260 {return} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 64 65 61)

(note 61 64 62 NOTE_INSN_DELETED)

(note 62 61 0 NOTE_INSN_DELETED)


;; Function dma_set_mask (dma_set_mask)[0:1294]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 2: dma_mask+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])

OUT:
Stack adjustment: 0
Reg 0: dev+0
Reg 2: dma_mask+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])


Basic block 3:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 2: dma_mask+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])

OUT:
Stack adjustment: 0
Reg 0: dev+0
Reg 2: dma_mask+0
Reg 3: dma_mask+4
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])
    offset 4
      (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])


Basic block 4:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 2: dma_mask+0
Reg 3: dma_mask+4
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])
    offset 4
      (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])

OUT:
Stack adjustment: 0
Reg 0: dev+0
Reg 2: dma_mask+0
Reg 3: dma_mask+4
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])
    offset 4
      (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])


Basic block 5:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 2: dma_mask+0
Reg 3: dma_mask+4
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])
    offset 4
      (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])

OUT:
Stack adjustment: 0
Reg 2: dma_mask+0
Reg 3: dma_mask+4
Variables:
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])
    offset 4
      (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])


Basic block 6:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 2: dma_mask+0
Reg 3: dma_mask+4
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])
    offset 4
      (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])

OUT:
Stack adjustment: 0
Reg 2: dma_mask+0
Reg 3: dma_mask+4
Variables:
  name: dma_mask
    offset 0
      (reg:DI 2 r2 [ dma_mask ])
    offset 4
      (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])


7 basic blocks, 9 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

Successors:  5 [80.9%]  3 [19.1%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 1910, maybe hot.
Predecessors:  2 [19.1%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  6 [50.0%]  4 [50.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 478, maybe hot.
Predecessors:  3 [50.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  6 [50.0%]  5 [50.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 955, should be 478

Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 9045, maybe hot.
Predecessors:  4 [50.0%]  (fallthru) 2 [80.9%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 8329, should be 9045

Basic block 6 , prev 5, next 1, loop_depth 0, count 0, freq 955, maybe hot.
Predecessors:  3 [50.0%]  4 [50.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 1194, should be 955

Basic block 1 , prev 6, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  5 [100.0%]  6 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_set_mask

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 24[cc]
;;  ref usage 	r0={3d,3u} r1={2d,3u} r2={1d,2u} r3={1d,2u} r13={1d,6u} r14={1d,1u} r24={3d,3u} 
;;    total ref usage 32{12d,20u,0e} in 14{14 regular + 0 call} insns.
(note 1 0 63 NOTE_INSN_DELETED)

(note 63 1 64 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 64 63 5 2 ( dma_mask (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [ dma_mask ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 5 64 59 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 59 5 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 59 4 2 NOTE_INSN_DELETED)

(note 4 2 7 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 7 4 8 2 arch/arm/mm/dma-mapping.c:687 (set (reg/f:SI 1 r1 [orig:134 D.24963 ] [134])
        (mem/s/f/j:SI (plus:SI (reg:SI 0 r0 [ dev ])
                (const_int 276 [0x114])) [0 <variable>.dma_mask+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dev ])
        (nil)))

(insn:TI 8 7 9 2 arch/arm/mm/dma-mapping.c:687 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 1 r1 [orig:134 D.24963 ] [134])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 9 8 10 2 arch/arm/mm/dma-mapping.c:687 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8090 [0x1f9a])
            (nil))))
;; End of basic block 2 -> ( 5 3)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  5 [80.9%] 
;; Succ edge  3 [19.1%]  (fallthru)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  2 [19.1%]  (fallthru)
(note 10 9 11 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 11 10 65 3 arch/arm/mm/dma-mapping.c:679 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(note 65 11 12 3 ( dma_mask (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [ dma_mask ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 12 65 46 3 arch/arm/mm/dma-mapping.c:679 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 3 -> ( 6 4)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  6 [50.0%] 
;; Succ edge  4 [50.0%]  (fallthru)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [50.0%]  (fallthru)
(note 46 12 15 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 46 16 4 arch/arm/mm/dma-mapping.c:679 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:139 dma_mask ] [139])
            (const_int -2 [0xfffffffffffffffe]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 16 15 22 4 arch/arm/mm/dma-mapping.c:679 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 29)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


;; Succ edge  6 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4 2) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
;; Pred edge  2 [80.9%] 
(code_label 22 16 23 5 7 "" [1 uses])

(note 23 22 24 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 24 23 66 5 arch/arm/mm/dma-mapping.c:688 (set (reg:SI 0 r0 [orig:133 D.24966 ] [133])
        (const_int -5 [0xfffffffffffffffb])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -5 [0xfffffffffffffffb])
        (nil)))

(note 66 24 43 5 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(insn 43 66 62 5 arch/arm/mm/dma-mapping.c:695 (use (reg/i:SI 0 r0)) -1 (nil))

(jump_insn 62 43 61 5 arch/arm/mm/dma-mapping.c:695 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 61 62 67)

(note 67 61 29 6 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [50.0%] 
;; Pred edge  4 [50.0%] 
(code_label 29 67 30 6 8 "" [2 uses])

(note 30 29 55 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 55 30 32 6 arch/arm/mm/dma-mapping.c:691 (set (mem:SI (plus:SI (reg/f:SI 1 r1 [orig:134 D.24963 ] [134])
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:140 dma_mask+4 ] [140])
        (nil)))

(insn 32 55 68 6 arch/arm/mm/dma-mapping.c:694 (set (reg:SI 0 r0 [orig:133 D.24966 ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 68 32 54 6 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 54 68 60 6 arch/arm/mm/dma-mapping.c:691 (set (mem:SI (reg/f:SI 1 r1 [orig:134 D.24963 ] [134]) [0 S4 A64])
        (reg:SI 2 r2 [orig:139 dma_mask ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:139 dma_mask ] [139])
        (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:134 D.24963 ] [134])
            (nil))))

(jump_insn:TI 60 54 57 6 arch/arm/mm/dma-mapping.c:694 (return) 260 {return} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 57 60 58)

(note 58 57 0 NOTE_INSN_DELETED)


;; Function dma_debug_do_init (dma_debug_do_init)[0:1295] (unlikely executed)


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 0


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 13 [sp] 14 [lr]
;; live  out 	 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, probably never executed.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_debug_do_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0]
;;  ref usage 	r0={2d,2u} r1={1d} r2={1d} r3={1d} r13={1d,2u} r14={1d,1u} 
;;    total ref usage 12{7d,5u,0e} in 3{3 regular + 0 call} insns.
(note 1 0 3 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 3 1 21 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 21 3 2 2 NOTE_INSN_PROLOGUE_END)

(note 2 21 5 2 NOTE_INSN_FUNCTION_BEG)

(note 5 2 9 2 NOTE_INSN_DELETED)

(insn:TI 9 5 15 2 arch/arm/mm/dma-mapping.c:704 (set (reg/i:SI 0 r0)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn 15 9 22 2 arch/arm/mm/dma-mapping.c:704 (use (reg/i:SI 0 r0)) -1 (nil))

(note 22 15 23 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 23 22 24 2 arch/arm/mm/dma-mapping.c:704 (return) 260 {return} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 24 23 19)

(note 19 24 20 NOTE_INSN_DELETED)

(note 20 19 0 NOTE_INSN_DELETED)


;; Function consistent_init (consistent_init)[0:1274] (unlikely executed)


Basic block 2:
IN:
Stack adjustment: 0

OUT:
Stack adjustment: 32
Reg 4: base+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])


Basic block 3:
IN:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])

OUT:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])


Basic block 4:
IN:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])

OUT:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])


Basic block 5:
IN:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])

OUT:
Stack adjustment: 32
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])


Basic block 6:
IN:
Stack adjustment: 32
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])

OUT:
Stack adjustment: 32
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])


Basic block 7:
IN:
Stack adjustment: 32
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])

OUT:
Stack adjustment: 32
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])


Basic block 8:
IN:
Stack adjustment: 32
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])

OUT:
Stack adjustment: 32
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])


Basic block 9:
IN:
Stack adjustment: 32
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])

OUT:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])


Basic block 10:
IN:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])

OUT:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])


Basic block 11:
IN:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])

OUT:
Stack adjustment: 32
Reg 0: ret+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: ret
    offset 0
      (reg/v:SI 0 r0 [orig:171 ret ] [171])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])


Basic block 12:
IN:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])

OUT:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])


Basic block 13:
IN:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])

OUT:
Stack adjustment: 32
Reg 3: pte+0
Reg 4: base+0
Reg 9: pgd+0
Variables:
  name: base
    offset 0
      (reg/v:SI 4 r4 [orig:167 base ] [167])
  name: pgd
    offset 0
      (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
  name: pte
    offset 0
      (reg/v/f:SI 3 r3 [orig:168 pte ] [168])


14 basic blocks, 19 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 1439, probably never executed.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 1439, probably never executed.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  kill	

Successors:  3 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 10000, probably never executed.
Predecessors:  2 [100.0%]  (fallthru) 12 [85.7%]  (dfs_back)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 9 [r9] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 6 [r6] 9 [r9] 24 [cc]
;; live  kill	

Successors:  4 [0.0%]  (fallthru,loop_exit) 5 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 4, probably never executed.
Predecessors:  3 [0.0%]  (fallthru,loop_exit)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  11 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 9996, probably never executed.
Predecessors:  3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  6 [0.0%]  (fallthru) 7 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 4, probably never executed.
Predecessors:  5 [0.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 1, count 0, freq 9992, probably never executed.
Predecessors:  5 [100.0%]  6 [100.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  9 [100.0%]  8 [0.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 8 , prev 7, next 9, loop_depth 1, count 0, freq 4, probably never executed.
Predecessors:  7 [0.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

Successors:  9 [50.0%]  (fallthru) 10 [50.0%]  (loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 1, count 0, freq 9990, probably never executed.
Predecessors:  7 [100.0%]  8 [50.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

Successors:  10 [0.0%]  (fallthru,loop_exit) 12 [100.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 4, probably never executed.
Predecessors:  9 [0.0%]  (fallthru,loop_exit) 8 [50.0%]  (loop_exit)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  11 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 8, probably never executed.
Predecessors:  10 [100.0%]  (fallthru) 4 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


Basic block 12 , prev 11, next 13, loop_depth 1, count 0, freq 9988, probably never executed.
Predecessors:  9 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

Successors:  3 [85.7%]  (dfs_back) 13 [14.3%]  (fallthru,loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 13 , prev 12, next 1, loop_depth 0, count 0, freq 1427, probably never executed.
Predecessors:  12 [14.3%]  (fallthru,loop_exit)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


Basic block 1 , prev 13, loop_depth 0, count 0, freq 1439, probably never executed.
Predecessors:  13 [100.0%]  11 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




consistent_init

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,6u} r1={7d,3u} r2={5d,2u} r3={11d,8u} r4={3d,7u} r5={2d,7u,2d} r6={2d,7u,2d} r7={3d,4u} r8={2d,3u} r9={2d,3u} r10={2d,3u} r12={3d} r13={2d,17u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={9d,6u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 479{397d,78u,4e} in 45{42 regular + 3 call} insns.
(note 34 0 36 NOTE_INSN_DELETED)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 36 34 35 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 35 36 145 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 145 35 146 2 arch/arm/mm/dma-mapping.c:151 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 10 sl)
        (expr_list:REG_DEAD (reg:SI 9 r9)
            (expr_list:REG_DEAD (reg:SI 8 r8)
                (expr_list:REG_DEAD (reg:SI 7 r7)
                    (expr_list:REG_DEAD (reg:SI 6 r6)
                        (expr_list:REG_DEAD (reg:SI 5 r5)
                            (expr_list:REG_DEAD (reg:SI 4 r4)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -32 [0xffffffffffffffe0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(note 146 145 41 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 41 146 105 2 arch/arm/mm/dma-mapping.c:161 (set (reg/f:SI 10 sl [195])
        (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x113e8c00 init_mm>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x113e8c00 init_mm>)
        (nil)))

(insn:TI 105 41 38 2 arch/arm/mm/dma-mapping.c:185 (set (reg/f:SI 8 r8 [198])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn 38 105 39 2 arch/arm/mm/dma-mapping.c:151 (set (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 39 38 160 2 arch/arm/mm/dma-mapping.c:158 (set (reg/v:SI 4 r4 [orig:167 base ] [167])
        (const_int -16777216 [0xffffffffff000000])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -16777216 [0xffffffffff000000])
        (nil)))
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  3 [100.0%]  (fallthru)

(note 160 39 161 3 ( base (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:167 base ] [167])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 161 160 162 3 ( pgd (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 162 161 109 3 ( pte (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:168 pte ] [168])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 12) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 10 [sl] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 9 [r9] 24 [cc]
;; live  in  	 4 [r4] 7 [r7] 8 [r8] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 5 [r5] 6 [r6] 9 [r9] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  12 [85.7%]  (dfs_back)
(code_label 109 162 40 3 21 "" [1 uses])

(note 40 109 43 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 43 40 45 3 NOTE_INSN_DELETED)

(note 45 43 44 3 NOTE_INSN_DELETED)

(insn:TI 44 45 42 3 arch/arm/mm/dma-mapping.c:161 (set (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 10 sl [195])
                (const_int 36 [0x24])) [0 init_mm.pgd+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("init_mm") [flags 0xc0] <var_decl 0x113e8c00 init_mm>)
                    (const_int 36 [0x24]))) [0 init_mm.pgd+0 S4 A32])
        (nil)))

(insn 42 44 46 3 arch/arm/mm/dma-mapping.c:161 (set (reg:SI 6 r6 [175])
        (lshiftrt:SI (reg/v:SI 4 r4 [orig:167 base ] [167])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 46 42 47 3 arch/arm/mm/dma-mapping.c:164 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (mult:SI (reg:SI 6 r6 [175])
                            (const_int 8 [0x8]))
                        (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177]))
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])
                (plus:SI (mult:SI (reg:SI 6 r6 [175])
                        (const_int 8 [0x8]))
                    (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])))
        ]) 271 {*arith_shiftsi_compare0} (nil))

(jump_insn:TI 47 46 48 3 arch/arm/mm/dma-mapping.c:164 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 57)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  4 [0.0%]  (fallthru,loop_exit)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  3 [0.0%]  (fallthru,loop_exit)
(note 48 47 51 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 51 48 158 4 arch/arm/mm/dma-mapping.c:165 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114c1c90>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC0") [flags 0x82] <string_cst 0x114c1c90>)
        (nil)))

(jump_insn 158 51 159 4 (set (pc)
        (label_ref 153)) -1 (nil))
;; End of basic block 4 -> ( 11)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [100.0%] 

(barrier 159 158 57)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 57 159 58 5 15 "" [1 uses])

(note 58 57 60 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 60 58 163 5 arch/arm/mm/dma-mapping.c:176 (set (reg:SI 3 r3 [180])
        (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])
        (nil)))

(note 163 60 61 5 ( pte (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 61 163 62 5 arch/arm/mm/dma-mapping.c:176 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [180])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [180])
        (nil)))

(jump_insn:TI 62 61 63 5 arch/arm/mm/dma-mapping.c:176 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 68)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  7 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [0.0%]  (fallthru)
(note 63 62 134 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 134 63 135 6 arch/arm/mm/dma-mapping.c:176 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (nil))

(insn 135 134 67 6 arch/arm/mm/dma-mapping.c:176 discrim 1 (set (reg:SI 1 r1)
        (const_int 176 [0xb0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 67 135 68 6 arch/arm/mm/dma-mapping.c:176 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a67280 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ( 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

;; Start of basic block ( 5 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
;; Pred edge  6 [100.0%]  (fallthru)
(code_label 68 67 69 7 17 "" [1 uses])

(note 69 68 70 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 70 69 71 7 arch/arm/mm/dma-mapping.c:178 (set (reg:SI 3 r3 [182])
        (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])
        (nil)))

(insn:TI 71 70 72 7 arch/arm/mm/dma-mapping.c:178 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [182])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [182])
        (nil)))

(jump_insn:TI 72 71 73 7 arch/arm/mm/dma-mapping.c:178 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 9 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 
;; Succ edge  8 [0.0%]  (fallthru)

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  7 [0.0%]  (fallthru)
(note 73 72 77 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 77 73 74 8 NOTE_INSN_DELETED)

(insn:TI 74 77 75 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 9 r9 [orig:170 pgd ] [170])) 167 {*arm_movsi_insn} (nil))

(insn 75 74 76 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:167 base ] [167])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 76 75 78 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__pte_alloc_kernel") [flags 0x41] <function_decl 0x10f97d80 __pte_alloc_kernel>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn:TI 78 76 79 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 79 78 80 8 arch/arm/mm/dma-mapping.c:178 discrim 2 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 93)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  9 [50.0%]  (fallthru)
;; Succ edge  10 [50.0%]  (loop_exit)

;; Start of basic block ( 7 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 2 [r2] 3 [r3] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%] 
;; Pred edge  8 [50.0%]  (fallthru)
(code_label 80 79 81 9 18 "" [1 uses])

(note 81 80 83 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 83 81 86 9 NOTE_INSN_DELETED)

(note 86 83 87 9 NOTE_INSN_DELETED)

(note 87 86 89 9 NOTE_INSN_DELETED)

(note 89 87 90 9 NOTE_INSN_DELETED)

(note 90 89 82 9 NOTE_INSN_DELETED)

(insn:TI 82 90 88 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 3 r3 [184])
        (mem:SI (plus:SI (mult:SI (reg:SI 6 r6 [175])
                    (const_int 8 [0x8]))
                (reg/f:SI 5 r5 [orig:177 init_mm.pgd ] [177])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 88 82 107 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 2 r2 [188])
        (zero_extract:SI (reg/v:SI 4 r4 [orig:167 base ] [167])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (nil))

(insn:TI 107 88 141 9 arch/arm/mm/dma-mapping.c:186 (set (reg/v:SI 4 r4 [orig:167 base ] [167])
        (plus:SI (reg/v:SI 4 r4 [orig:167 base ] [167])
            (const_int 2097152 [0x200000]))) 4 {*arm_addsi3} (nil))

(insn:TI 141 107 142 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 3 r3 [183])
        (and:SI (reg:SI 3 r3 [184])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 142 141 85 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 3 r3 [183])
        (and:SI (reg:SI 3 r3 [183])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 85 142 91 9 arch/arm/mm/dma-mapping.c:178 discrim 1 (set (reg:SI 3 r3 [186])
        (plus:SI (reg:SI 3 r3 [183])
            (const_int -1073741824 [0xffffffffc0000000]))) 4 {*arm_addsi3} (nil))

(insn:TI 91 85 164 9 arch/arm/mm/dma-mapping.c:179 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (mult:SI (reg:SI 2 r2 [188])
                            (const_int 4 [0x4]))
                        (reg:SI 3 r3 [186]))
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 3 r3 [orig:168 pte ] [168])
                (plus:SI (mult:SI (reg:SI 2 r2 [188])
                        (const_int 4 [0x4]))
                    (reg:SI 3 r3 [186])))
        ]) 271 {*arith_shiftsi_compare0} (expr_list:REG_DEAD (reg:SI 2 r2 [188])
        (nil)))

(note 164 91 92 9 ( pte (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:168 pte ] [168])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 92 164 93 9 arch/arm/mm/dma-mapping.c:179 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 103)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9998 [0x270e])
            (nil))))
;; End of basic block 9 -> ( 10 12)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  10 [0.0%]  (fallthru,loop_exit)
;; Succ edge  12 [100.0%] 

;; Start of basic block ( 9 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  9 [0.0%]  (fallthru,loop_exit)
;; Pred edge  8 [50.0%]  (loop_exit)
(code_label 93 92 94 10 19 "" [1 uses])

(note 94 93 97 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 97 94 153 10 arch/arm/mm/dma-mapping.c:180 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1152dba0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC2") [flags 0x82] <string_cst 0x1152dba0>)
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

;; Start of basic block ( 10 4) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 153 97 151 11 24 "" [1 uses])

(note 151 153 98 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 98 151 99 11 arch/arm/mm/dma-mapping.c:180 (set (reg:SI 1 r1)
        (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
        (nil)))

(call_insn:TI 99 98 165 11 arch/arm/mm/dma-mapping.c:180 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 165 99 100 11 ( pte (nil)) NOTE_INSN_VAR_LOCATION)

(insn 100 165 166 11 arch/arm/mm/dma-mapping.c:181 (set (reg/v:SI 0 r0 [orig:171 ret ] [171])
        (const_int -12 [0xfffffffffffffff4])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -12 [0xfffffffffffffff4])
        (nil)))

(note 166 100 148 11 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:171 ret ] [171])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 148 166 140 11 arch/arm/mm/dma-mapping.c:182 (return) 260 {return} (nil))
;; End of basic block 11 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 140 148 167)

(note 167 140 168 12 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(note 168 167 103 12 ( pte (expr_list:REG_DEP_TRUE (reg/v/f:SI 3 r3 [orig:168 pte ] [168])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 9) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 7 [r7] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  9 [100.0%] 
(code_label 103 168 104 12 20 "" [1 uses])

(note 104 103 110 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 110 104 106 12 arch/arm/mm/dma-mapping.c:187 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:167 base ] [167])
            (const_int -2097152 [0xffffffffffe00000]))) 219 {*arm_cmpsi_insn} (nil))

(insn 106 110 108 12 arch/arm/mm/dma-mapping.c:185 (set (mem/s/f/j:SI (plus:SI (reg/f:SI 8 r8 [198])
                (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])) [0 consistent_pte S4 A32])
        (reg/v/f:SI 3 r3 [orig:168 pte ] [168])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 3 r3 [orig:168 pte ] [168])
        (nil)))

(insn:TI 108 106 111 12 arch/arm/mm/dma-mapping.c:186 (set (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])
        (plus:SI (reg:SI 7 r7 [orig:166 ivtmp.521 ] [166])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 111 108 112 12 arch/arm/mm/dma-mapping.c:187 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 109)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8571 [0x217b])
            (nil))))
;; End of basic block 12 -> ( 3 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  3 [85.7%]  (dfs_back)
;; Succ edge  13 [14.3%]  (fallthru,loop_exit)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  12 [14.3%]  (fallthru,loop_exit)
(note 112 111 113 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 113 112 169 13 arch/arm/mm/dma-mapping.c:152 (set (reg/v:SI 0 r0 [orig:171 ret ] [171])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 169 113 126 13 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:171 ret ] [171])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 126 169 170 13 arch/arm/mm/dma-mapping.c:190 (use (reg/i:SI 0 r0)) -1 (nil))

(note 170 126 150 13 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 150 170 149 13 arch/arm/mm/dma-mapping.c:190 (return) 260 {return} (nil))
;; End of basic block 13 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 149 150 143)

(note 143 149 144 NOTE_INSN_DELETED)

(note 144 143 0 NOTE_INSN_DELETED)


;; Function ___dma_single_dev_to_cpu (___dma_single_dev_to_cpu)[0:1285]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Variables:
  name: kaddr
    offset 0
      (reg:SI 0 r0 [ kaddr ])
  name: size
    offset 0
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
      (reg:SI 0 r0 [ kaddr ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])
      (reg:SI 2 r2 [ dir ])


Basic block 3:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
      (reg:SI 0 r0 [ kaddr ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 4:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 5:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 6:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
      (reg:SI 0 r0 [ kaddr ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 7:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 8:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])

OUT:
Stack adjustment: 16
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 9:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (reg:SI 1 r1 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])

OUT:
Stack adjustment: 16
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 10:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 11:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 12:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


Basic block 13:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
      (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:139 size ] [139])
      (reg/v:SI 5 r5 [orig:139 size ] [139])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:140 dir ] [140])


14 basic blocks, 18 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

Successors:  6 [0.0%]  3 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 9996, maybe hot.
Predecessors:  2 [100.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  4 [0.0%]  (fallthru) 10 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 4.
Predecessors:  3 [0.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}

Successors:  6 [100.0%] 


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 9992, maybe hot.
Predecessors:  10 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  6 [0.0%]  (fallthru) 12 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 8.
Predecessors:  2 [0.0%]  4 [100.0%]  5 [0.0%]  (fallthru) 11 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors: 
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 8003, maybe hot.
Predecessors:  12 [80.1%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  8 [78.3%]  (fallthru) 9 [21.6%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 6270, maybe hot.
Predecessors:  7 [78.3%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 9992, maybe hot.
Predecessors:  8 [100.0%]  (fallthru) 7 [21.6%]  13 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 9992, maybe hot.
Predecessors:  3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  11 [0.0%]  (fallthru) 5 [100.0%] 
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 4.
Predecessors:  10 [0.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}

Successors:  6 [100.0%] 


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 9988, maybe hot.
Predecessors:  5 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  7 [80.1%]  13 [19.9%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 13 , prev 12, next 1, loop_depth 0, count 0, freq 1989, maybe hot.
Predecessors:  12 [19.9%]  (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}

Successors:  9 [100.0%] 


Basic block 1 , prev 13, loop_depth 0, count 0, freq 9992, maybe hot.
Predecessors:  9 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




___dma_single_dev_to_cpu

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,8u} r1={7d,5u} r2={6d,4u} r3={10d,8u} r4={2d,4u} r5={2d,4u} r6={2d,4u} r12={3d} r13={2d,17u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={9d,6u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 446{384d,62u,0e} in 37{34 regular + 3 call} insns.
(note 1 0 114 NOTE_INSN_DELETED)

(note 114 1 115 2 ( kaddr (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ kaddr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 115 114 116 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 116 115 6 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 116 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 9 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 9 5 90 2 arch/arm/mm/dma-mapping.c:462 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn/f:TI 90 9 91 2 arch/arm/mm/dma-mapping.c:461 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 91 90 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 91 3 2 arch/arm/mm/dma-mapping.c:461 (set (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
        (reg:SI 0 r0 [ kaddr ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 3 2 4 2 arch/arm/mm/dma-mapping.c:461 (set (reg/v:SI 5 r5 [orig:139 size ] [139])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 4 3 10 2 arch/arm/mm/dma-mapping.c:461 (set (reg/v:SI 6 r6 [orig:140 dir ] [140])
        (reg:SI 2 r2 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ dir ])
        (nil)))

(jump_insn:TI 10 4 117 2 arch/arm/mm/dma-mapping.c:462 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

(note 117 10 118 3 ( kaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 118 117 119 3 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:139 size ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 119 118 11 3 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:140 dir ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 119 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 12 11 13 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (reg/f:SI 3 r3 [141])
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)
        (nil)))

(insn:TI 13 12 14 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (reg:SI 2 r2 [orig:136 high_memory.383 ] [136])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [141]) [0 high_memory+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [141])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>) [0 high_memory+0 S4 A32])
            (nil))))

(insn:TI 14 13 15 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
            (reg:SI 2 r2 [orig:136 high_memory.383 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 15 14 120 3 arch/arm/mm/dma-mapping.c:462 discrim 2 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 76)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  10 [100.0%] 

(note 120 15 105 4 ( kaddr (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}

;; Pred edge  3 [0.0%]  (fallthru)
(note 105 120 106 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 106 105 107 4 (set (pc)
        (label_ref 22)) -1 (nil))
;; End of basic block 4 -> ( 6)


;; Succ edge  6 [100.0%] 

(barrier 107 106 121)

(note 121 107 80 5 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [orig:139 size ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 10) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%] 
(code_label 80 121 19 5 36 "" [1 uses])

(note 19 80 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 19 21 5 arch/arm/mm/dma-mapping.c:462 discrim 8 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:135 D.24740 ] [135])
            (reg:SI 2 r2 [orig:136 high_memory.383 ] [136]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:135 D.24740 ] [135])
        (expr_list:REG_DEAD (reg:SI 2 r2 [orig:136 high_memory.383 ] [136])
            (nil))))

(jump_insn:TI 21 20 122 5 arch/arm/mm/dma-mapping.c:462 discrim 8 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

(note 122 21 123 6 ( kaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 123 122 124 6 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:139 size ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 124 123 22 6 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:140 dir ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 4 5 11) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [0.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 22 124 23 6 28 "" [3 uses])

(note 23 22 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 23 27 6 arch/arm/mm/dma-mapping.c:462 discrim 5 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 27 26 28 6 arch/arm/mm/dma-mapping.c:462 discrim 5 (set (reg:SI 1 r1)
        (const_int 462 [0x1ce])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 462 [0x1ce])
        (nil)))

(call_insn:TI 28 27 29 6 arch/arm/mm/dma-mapping.c:462 discrim 5 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 29 28 125)

(note 125 29 126 7 ( kaddr (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 126 125 63 7 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [orig:139 size ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 12) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  12 [80.1%] 
(code_label 63 126 30 7 33 "" [1 uses])

(note 30 63 31 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 31 30 32 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [144])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(insn:TI 32 31 33 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [orig:133 D.25042 ] [133])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [144]) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
        (nil)))

(insn:TI 33 32 34 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 D.25042 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 34 33 35 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 41)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2165 [0x875])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [78.3%]  (fallthru)
;; Succ edge  9 [21.6%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  7 [78.3%]  (fallthru)
(note 35 34 37 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 37 35 36 8 NOTE_INSN_DELETED)

(insn:TI 36 37 127 8 arch/arm/mm/dma-mapping.c:467 (set (reg/v:SI 0 r0 [orig:134 paddr ] [134])
        (plus:SI (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(note 127 36 128 8 ( kaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 128 127 39 8 ( paddr (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:134 paddr ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 39 128 130 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 5 r5 [orig:139 size ] [139]))) 4 {*arm_addsi3} (nil))

(note 130 39 129 8 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:139 size ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 129 130 40 8 ( paddr (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 40 129 131 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:133 D.25042 ] [133]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:133 D.25042 ] [133])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

(note 131 40 132 9 ( kaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 132 131 41 9 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:139 size ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 7 13) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  7 [21.6%] 
;; Pred edge  13 [100.0%] 
(code_label 41 132 42 9 31 "" [2 uses])

(note 42 41 44 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 44 42 45 9 NOTE_INSN_DELETED)

(insn:TI 45 44 46 9 arch/arm/mm/dma-mapping.c:471 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:138 kaddr ] [138])) 167 {*arm_movsi_insn} (nil))

(insn 46 45 47 9 arch/arm/mm/dma-mapping.c:471 (set (reg:SI 1 r1)
        (reg/v:SI 5 r5 [orig:139 size ] [139])) 167 {*arm_movsi_insn} (nil))

(insn:TI 47 46 43 9 arch/arm/mm/dma-mapping.c:471 (set (reg:SI 2 r2)
        (reg/v:SI 6 r6 [orig:140 dir ] [140])) 167 {*arm_movsi_insn} (nil))

(insn 43 47 48 9 arch/arm/mm/dma-mapping.c:471 (set (reg/f:SI 3 r3 [146])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(call_insn:TI 48 43 92 9 arch/arm/mm/dma-mapping.c:471 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [146])
                            (const_int 32 [0x20])) [0 cpu_cache.dma_unmap_area+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [146])
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 92 48 93 9 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 93 92 94 9 arch/arm/mm/dma-mapping.c:472 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 94 93 133)

(note 133 94 134 10 ( kaddr (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 134 133 76 10 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:139 size ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 76 134 52 10 35 "" [1 uses])

(note 52 76 53 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 53 52 54 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (reg:SI 3 r3 [148])
        (plus:SI (reg:SI 1 r1 [orig:139 size ] [139])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:139 size ] [139])
        (nil)))

(insn:TI 54 53 55 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (reg:SI 3 r3 [orig:135 D.24740 ] [135])
        (plus:SI (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
            (reg:SI 3 r3 [148]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/f:SI 0 r0 [orig:138 kaddr ] [138])
        (nil)))

(insn:TI 55 54 56 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:135 D.24740 ] [135])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 56 55 135 10 arch/arm/mm/dma-mapping.c:462 discrim 6 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 80)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 10 -> ( 11 5)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

(note 135 56 108 11 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [orig:139 size ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}

;; Pred edge  10 [0.0%]  (fallthru)
(note 108 135 109 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(jump_insn 109 108 110 11 (set (pc)
        (label_ref 22)) -1 (nil))
;; End of basic block 11 -> ( 6)


;; Succ edge  6 [100.0%] 

(barrier 110 109 61)

;; Start of basic block ( 5) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
(code_label 61 110 62 12 30 "" [1 uses])

(note 62 61 64 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 64 62 65 12 arch/arm/mm/dma-mapping.c:466 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:140 dir ] [140])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 65 64 111 12 arch/arm/mm/dma-mapping.c:466 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 63)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8009 [0x1f49])
            (nil))))
;; End of basic block 12 -> ( 7 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  7 [80.1%] 
;; Succ edge  13 [19.9%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}

;; Pred edge  12 [19.9%]  (fallthru)
(note 111 65 112 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(jump_insn 112 111 113 13 (set (pc)
        (label_ref 41)) -1 (nil))
;; End of basic block 13 -> ( 9)


;; Succ edge  9 [100.0%] 

(barrier 113 112 88)

(note 88 113 0 NOTE_INSN_DELETED)


;; Function ___dma_single_cpu_to_dev (___dma_single_cpu_to_dev)[0:1284]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Variables:
  name: kaddr
    offset 0
      (reg:SI 0 r0 [ kaddr ])
  name: size
    offset 0
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
      (reg:SI 0 r0 [ kaddr ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])


Basic block 3:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
      (reg:SI 0 r0 [ kaddr ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])


Basic block 4:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])


Basic block 5:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:140 size ] [140])
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:140 size ] [140])
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])


Basic block 6:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
      (reg:SI 0 r0 [ kaddr ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])


Basic block 7:
IN:
Stack adjustment: 16
Reg 0: paddr+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])

OUT:
Stack adjustment: 16
Reg 0: paddr+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])


Basic block 8:
IN:
Stack adjustment: 16
Reg 0: paddr+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])

OUT:
Stack adjustment: 16
Reg 0: paddr+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])


Basic block 9:
IN:
Stack adjustment: 16
Reg 0: paddr+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])

OUT:
Stack adjustment: 16
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])


Basic block 10:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
      (reg:SI 1 r1 [ size ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:140 size ] [140])
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])


Basic block 11:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:140 size ] [140])
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:140 size ] [140])
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])


Basic block 12:
IN:
Stack adjustment: 16
Reg 0: kaddr+0
Reg 1: size+0
Reg 2: dir+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: kaddr
    offset 0
      (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg:SI 1 r1 [orig:140 size ] [140])
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])
      (reg:SI 2 r2 [ dir ])

OUT:
Stack adjustment: 16
Reg 0: paddr+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])


Basic block 13:
IN:
Stack adjustment: 16
Reg 0: paddr+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])

OUT:
Stack adjustment: 16
Reg 0: paddr+0
Reg 4: kaddr+0
Reg 5: size+0
Reg 6: dir+0
Variables:
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])
  name: kaddr
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:140 size ] [140])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:141 dir ] [141])


14 basic blocks, 18 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

Successors:  6 [0.0%]  3 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 9996, maybe hot.
Predecessors:  2 [100.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

Successors:  4 [0.0%]  (fallthru) 10 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 4.
Predecessors:  3 [0.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}

Successors:  6 [100.0%] 


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 9992, maybe hot.
Predecessors:  10 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  6 [0.0%]  (fallthru) 12 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 8.
Predecessors:  2 [0.0%]  4 [100.0%]  5 [0.0%]  (fallthru) 11 [100.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors: 
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 2798, maybe hot.
Predecessors:  13 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

Successors:  8 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 9992, maybe hot.
Predecessors:  12 [72.0%]  7 [100.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  9 [76.0%]  (fallthru) EXIT [24.0%] 
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 7591, maybe hot.
Predecessors:  8 [76.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 9992, maybe hot.
Predecessors:  3 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  11 [0.0%]  (fallthru) 5 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 4.
Predecessors:  10 [0.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}

Successors:  6 [100.0%] 


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 9988, maybe hot.
Predecessors:  5 [100.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

Successors:  13 [28.0%]  (fallthru) 8 [72.0%] 
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 13 , prev 12, next 1, loop_depth 0, count 0, freq 2797, maybe hot.
Predecessors:  12 [28.0%]  (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}

Successors:  7 [100.0%] 


Basic block 1 , prev 13, loop_depth 0, count 0, freq 9992, maybe hot.
Predecessors:  8 [24.0%]  9 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




___dma_single_cpu_to_dev

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,8u} r1={6d,5u} r2={4d,2u} r3={11d,10u} r4={2d,3u} r5={2d,3u} r6={2d,3u} r12={4d,2u} r13={2d,17u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={9d,7u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 444{382d,62u,0e} in 35{32 regular + 3 call} insns.
(note 1 0 149 NOTE_INSN_DELETED)

(note 149 1 150 2 ( kaddr (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ kaddr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 150 149 151 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 151 150 6 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 6 151 5 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 5 6 9 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 9 5 112 2 arch/arm/mm/dma-mapping.c:445 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(insn/f:TI 112 9 113 2 arch/arm/mm/dma-mapping.c:442 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 113 112 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 113 3 2 arch/arm/mm/dma-mapping.c:442 (set (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
        (reg:SI 0 r0 [ kaddr ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 3 2 4 2 arch/arm/mm/dma-mapping.c:442 (set (reg/v:SI 5 r5 [orig:140 size ] [140])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn 4 3 10 2 arch/arm/mm/dma-mapping.c:442 (set (reg/v:SI 6 r6 [orig:141 dir ] [141])
        (reg:SI 2 r2 [ dir ])) 167 {*arm_movsi_insn} (nil))

(jump_insn:TI 10 4 152 2 arch/arm/mm/dma-mapping.c:445 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 22)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 2 -> ( 6 3)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

(note 152 10 153 3 ( kaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 153 152 154 3 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:140 size ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 154 153 11 3 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:141 dir ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 154 12 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 12 11 13 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (reg/f:SI 3 r3 [142])
        (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>)
        (nil)))

(insn:TI 13 12 14 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (reg:SI 12 ip [orig:137 high_memory.377 ] [137])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [142]) [0 high_memory+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [142])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("high_memory") [flags 0xc0] <var_decl 0x10e733c0 high_memory>) [0 high_memory+0 S4 A32])
            (nil))))

(insn:TI 14 13 15 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
            (reg:SI 12 ip [orig:137 high_memory.377 ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 15 14 155 3 arch/arm/mm/dma-mapping.c:445 discrim 2 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 92)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 10)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru)
;; Succ edge  10 [100.0%] 

(note 155 15 139 4 ( kaddr (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}

;; Pred edge  3 [0.0%]  (fallthru)
(note 139 155 140 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(jump_insn 140 139 141 4 (set (pc)
        (label_ref 22)) -1 (nil))
;; End of basic block 4 -> ( 6)


;; Succ edge  6 [100.0%] 

(barrier 141 140 156)

(note 156 141 100 5 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [orig:140 size ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 10) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 12 [ip] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  10 [100.0%] 
(code_label 100 156 19 5 49 "" [1 uses])

(note 19 100 20 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 19 21 5 arch/arm/mm/dma-mapping.c:445 discrim 8 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:136 D.24698 ] [136])
            (reg:SI 12 ip [orig:137 high_memory.377 ] [137]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:137 high_memory.377 ] [137])
        (expr_list:REG_DEAD (reg:SI 3 r3 [orig:136 D.24698 ] [136])
            (nil))))

(jump_insn:TI 21 20 157 5 arch/arm/mm/dma-mapping.c:445 discrim 8 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 66)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 12)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru)
;; Succ edge  12 [100.0%] 

(note 157 21 158 6 ( kaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 158 157 22 6 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:140 size ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 4 5 11) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%] 
;; Pred edge  4 [100.0%] 
;; Pred edge  5 [0.0%]  (fallthru)
;; Pred edge  11 [100.0%] 
(code_label 22 158 23 6 40 "" [3 uses])

(note 23 22 26 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 23 27 6 arch/arm/mm/dma-mapping.c:445 discrim 5 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 27 26 28 6 arch/arm/mm/dma-mapping.c:445 discrim 5 (set (reg:SI 1 r1)
        (const_int 445 [0x1bd])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 445 [0x1bd])
        (nil)))

(call_insn:TI 28 27 29 6 arch/arm/mm/dma-mapping.c:445 discrim 5 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 6 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 29 28 159)

(note 159 29 146 7 ( paddr (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:135 paddr ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 13) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 3 [r3]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 3 [r3]
;; live  kill	

;; Pred edge  13 [100.0%] 
(code_label 146 159 30 7 55 "" [1 uses])

(note 30 146 32 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 30 125 7 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [orig:134 D.25045 ] [134])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [152]) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
        (nil)))
;; End of basic block 7 -> ( 8)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  8 [100.0%]  (fallthru)

;; Start of basic block ( 12 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [72.0%] 
;; Pred edge  7 [100.0%]  (fallthru)
(code_label 125 32 123 8 53 "" [1 uses])

(note 123 125 45 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 45 123 46 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 D.25048 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 46 45 47 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2403 [0x963])
            (nil))))
;; End of basic block 8 -> ( 9 1)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  9 [76.0%]  (fallthru)
;; Succ edge  EXIT [24.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  8 [76.0%]  (fallthru)
(note 47 46 48 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 48 47 50 9 NOTE_INSN_DELETED)

(insn:TI 50 48 160 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 5 r5 [orig:140 size ] [140]))) 4 {*arm_addsi3} (nil))

(note 160 50 51 9 ( paddr (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 51 160 115 9 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:133 D.25048 ] [133]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:133 D.25048 ] [133])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 115 51 99 9 (return) 260 {return} (nil))
;; End of basic block 9 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 99 115 161)

(note 161 99 162 10 ( kaddr (expr_list:REG_DEP_TRUE (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 162 161 163 10 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:140 size ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 163 162 92 10 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:141 dir ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 92 163 57 10 48 "" [1 uses])

(note 57 92 58 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 57 59 10 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (reg:SI 3 r3 [149])
        (plus:SI (reg:SI 1 r1 [orig:140 size ] [140])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(insn:TI 59 58 60 10 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (reg:SI 3 r3 [orig:136 D.24698 ] [136])
        (plus:SI (reg/f:SI 0 r0 [orig:139 kaddr ] [139])
            (reg:SI 3 r3 [149]))) 4 {*arm_addsi3} (nil))

(insn:TI 60 59 61 10 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:136 D.24698 ] [136])
            (const_int -1073741825 [0xffffffffbfffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 61 60 164 10 arch/arm/mm/dma-mapping.c:445 discrim 6 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 100)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 10 -> ( 11 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  11 [0.0%]  (fallthru)
;; Succ edge  5 [100.0%] 

(note 164 61 142 11 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [orig:140 size ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}

;; Pred edge  10 [0.0%]  (fallthru)
(note 142 164 143 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(jump_insn 143 142 144 11 (set (pc)
        (label_ref 22)) -1 (nil))
;; End of basic block 11 -> ( 6)


;; Succ edge  6 [100.0%] 

(barrier 144 143 66)

;; Start of basic block ( 5) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%] 
(code_label 66 144 67 12 42 "" [1 uses])

(note 67 66 69 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 69 67 68 12 NOTE_INSN_DELETED)

(insn:TI 68 69 73 12 arch/arm/mm/dma-mapping.c:447 (set (reg/f:SI 3 r3 [150])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(call_insn:TI 73 68 166 12 arch/arm/mm/dma-mapping.c:447 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [150])
                            (const_int 28 [0x1c])) [0 cpu_cache.dma_map_area+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [150])
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 166 73 165 12 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:140 size ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 165 166 90 12 ( kaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 90 165 76 12 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(insn:TI 76 90 74 12 arch/arm/mm/dma-mapping.c:450 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:141 dir ] [141])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(insn 74 76 167 12 arch/arm/mm/dma-mapping.c:449 (set (reg/v:SI 0 r0 [orig:135 paddr ] [135])
        (plus:SI (reg/v/f:SI 4 r4 [orig:139 kaddr ] [139])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(note 167 74 44 12 ( paddr (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:135 paddr ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 44 167 77 12 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [orig:133 D.25048 ] [133])
            (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [152])
                    (const_int 4 [0x4])) [0 outer_cache.clean_range+0 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn 77 44 145 12 arch/arm/mm/dma-mapping.c:450 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 125)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 12 -> ( 13 8)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  13 [28.0%]  (fallthru)
;; Succ edge  8 [72.0%] 

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}

;; Pred edge  12 [28.0%]  (fallthru)
(note 145 77 147 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(jump_insn 147 145 148 13 (set (pc)
        (label_ref 146)) -1 (nil))
;; End of basic block 13 -> ( 7)


;; Succ edge  7 [100.0%] 

(barrier 148 147 109)

(note 109 148 110 NOTE_INSN_DELETED)

(note 110 109 0 NOTE_INSN_DELETED)


;; Function dma_cache_maint_page (dma_cache_maint_page)[0:1286]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: page+0
Reg 1: offset+0
Reg 2: size+0
Reg 3: dir+0
Variables:
  name: page
    offset 0
      (reg:SI 0 r0 [ page ])
  name: offset
    offset 0
      (reg:SI 1 r1 [ offset ])
  name: size
    offset 0
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg:SI 3 r3 [ dir ])
  name: op
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])

OUT:
Stack adjustment: 40
Reg 0: page+0
Reg 1: offset+0
Reg 2: size+0
Reg 3: dir+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 8: dir+0
Reg 9: op+0
Variables:
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
      (reg:SI 0 r0 [ page ])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
      (reg:SI 1 r1 [ offset ])
  name: size
    offset 0
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
      (reg:SI 3 r3 [ dir ])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])


Basic block 3:
IN:
Stack adjustment: 40
Reg 0: vaddr+0 page+0
Reg 1: offset+0
Reg 2: size+0
Reg 3: dir+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
      (reg:SI 0 r0 [ page ])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
      (reg:SI 1 r1 [ offset ])
  name: size
    offset 0
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
      (reg:SI 3 r3 [ dir ])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])

OUT:
Stack adjustment: 40
Reg 0: page+0 vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
      (reg:SI 0 r0 [ page ])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


Basic block 4:
IN:
Stack adjustment: 40
Reg 0: vaddr+0 page+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
      (reg:SI 0 r0 [ page ])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])

OUT:
Stack adjustment: 40
Reg 0: page+0 vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
      (reg:SI 0 r0 [ page ])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


Basic block 5:
IN:
Stack adjustment: 40
Reg 0: vaddr+0 page+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
      (reg:SI 0 r0 [ page ])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])

OUT:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


Basic block 6:
IN:
Stack adjustment: 40
Reg 0: page+0 vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
      (reg:SI 0 r0 [ page ])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])

OUT:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


Basic block 7:
IN:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])

OUT:
Stack adjustment: 40
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


Basic block 8:
IN:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])

OUT:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


Basic block 9:
IN:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])

OUT:
Stack adjustment: 40
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


Basic block 10:
IN:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])

OUT:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


Basic block 11:
IN:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])

OUT:
Stack adjustment: 40
Reg 0: vaddr+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


Basic block 12:
IN:
Stack adjustment: 40
Reg 0: vaddr+0 page+0
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
      (reg:SI 0 r0 [ page ])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])

OUT:
Stack adjustment: 40
Reg 4: offset+0
Reg 5: page+0
Reg 6: left+0
Reg 7: len+0
Reg 8: dir+0
Reg 9: op+0
Reg 10: vaddr+0
Variables:
  name: len
    offset 0
      (reg/v:SI 7 r7 [orig:136 len ] [136])
  name: vaddr
    offset 0
      (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:139 page ] [139])
  name: offset
    offset 0
      (reg/v:SI 4 r4 [orig:140 offset ] [140])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:142 dir ] [142])
  name: op
    offset 0
      (reg/v/f:SI 9 r9 [orig:143 op ] [143])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 op+0 S4 A32])
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 op+0 S4 A32])
  name: left
    offset 0
      (reg/v:SI 6 r6 [orig:137 left ] [137])


13 basic blocks, 17 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  kill	

Successors:  3 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%]  (fallthru) 11 [100.0%]  (dfs_back)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  4 [28.0%]  (fallthru) 12 [72.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 2800, maybe hot.
Predecessors:  3 [28.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 7 [r7] 24 [cc]
;; live  kill	

Successors:  6 [50.0%]  5 [50.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 3550, maybe hot.
Predecessors:  4 [50.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

Successors:  6 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

Invalid sum of incoming frequencies 1400, should be 3550

Basic block 6 , prev 5, next 7, loop_depth 1, count 0, freq 7100, maybe hot.
Predecessors:  5 [100.0%]  (fallthru) 4 [50.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

Successors:  7 [69.8%]  (fallthru) 8 [30.2%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

Invalid sum of incoming frequencies 4950, should be 7100

Basic block 7 , prev 6, next 8, loop_depth 1, count 0, freq 4958, maybe hot.
Predecessors:  6 [69.8%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

Successors:  10 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 1, count 0, freq 2142, maybe hot.
Predecessors:  6 [30.2%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  9 [29.0%]  (fallthru) 10 [71.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 1, count 0, freq 621, maybe hot.
Predecessors:  8 [29.0%]  (fallthru)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 10 [sl]
;; live  kill	 14 [lr]

Successors:  10 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  8 [71.0%]  7 [100.0%]  9 [100.0%]  (fallthru) 12 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

Successors:  11 [86.0%]  (fallthru) EXIT [14.0%]  (loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

Invalid sum of incoming frequencies 14300, should be 10000

Basic block 11 , prev 10, next 12, loop_depth 1, count 0, freq 8600, maybe hot.
Predecessors:  10 [86.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

Successors:  3 [100.0%]  (dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 12 , prev 11, next 1, loop_depth 1, count 0, freq 7200, maybe hot.
Predecessors:  3 [72.0%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 7 [r7]
;; live  kill	 14 [lr]

Successors:  10 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 1 , prev 12, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors:  10 [14.0%]  (loop_exit)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_cache_maint_page

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={18d,15u} r1={13d,6u} r2={14d,6u} r3={17d,12u,1d} r4={5d,13u,2d} r5={4d,10u,1d} r6={3d,8u} r7={4d,7u} r8={2d,5u} r9={2d,5u} r10={2d,3u} r11={2d,3u,1d} r12={8d} r13={2d,22u,1d} r14={9d,2u} r15={8d} r16={8d} r17={8d} r18={8d} r19={8d} r20={8d} r21={8d} r22={8d} r23={8d} r24={14d,10u} r27={8d} r28={8d} r29={8d} r30={8d} r31={8d} r32={8d} r33={8d} r34={8d} r35={8d} r36={8d} r37={8d} r38={8d} r39={8d} r40={8d} r41={8d} r42={8d} r43={8d} r44={8d} r45={8d} r46={8d} r47={8d} r48={8d} r49={8d} r50={8d} r51={8d} r52={8d} r53={8d} r54={8d} r55={8d} r56={8d} r57={8d} r58={8d} r59={8d} r60={8d} r61={8d} r62={8d} r63={8d} r64={8d} r65={8d} r66={8d} r67={8d} r68={8d} r69={8d} r70={8d} r71={8d} r72={8d} r73={8d} r74={8d} r75={8d} r76={8d} r77={8d} r78={8d} r79={8d} r80={8d} r81={8d} r82={8d} r83={8d} r84={8d} r85={8d} r86={8d} r87={8d} r88={8d} r89={8d} r90={8d} r91={8d} r92={8d} r93={8d} r94={8d} r95={8d} r96={8d} r97={8d} r98={8d} r99={8d} r100={8d} r101={8d} r102={8d} r103={8d} r104={8d} r105={8d} r106={8d} r107={8d} r108={8d} r109={8d} r110={8d} r111={8d} r112={8d} r113={8d} r114={8d} r115={8d} r116={8d} r117={8d} r118={8d} r119={8d} r120={8d} r121={8d} r122={8d} r123={8d} r124={8d} r125={8d} r126={8d} r127={8d} 
;;    total ref usage 1132{999d,127u,6e} in 63{55 regular + 8 call} insns.
(note 1 0 151 NOTE_INSN_DELETED)

(note 151 1 152 2 ( page (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ page ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 152 151 153 2 ( offset (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ offset ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 153 152 154 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 154 153 155 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 155 154 8 2 ( op (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 op+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 155 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 8 7 2 NOTE_INSN_DELETED)

(note 7 4 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 7 134 2 NOTE_INSN_DELETED)

(insn/f:TI 134 16 156 2 arch/arm/mm/dma-mapping.c:478 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 3 r3)
                    ] 2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 11 fp)
            (expr_list:REG_DEAD (reg:SI 9 r9)
                (expr_list:REG_DEAD (reg:SI 8 r8)
                    (expr_list:REG_DEAD (reg:SI 6 r6)
                        (expr_list:REG_DEAD (reg:SI 5 r5)
                            (expr_list:REG_DEAD (reg:SI 4 r4)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -40 [0xffffffffffffffd8])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 3 r3))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 S4 A32])
                                                (reg:SI 11 fp))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 36 [0x24])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(note 156 134 135 2 ( dir (nil)) NOTE_INSN_VAR_LOCATION)

(note 135 156 6 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 6 135 63 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v/f:SI 9 r9 [orig:143 op ] [143])
        (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 op+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 40 [0x28])) [0 op+0 S4 A32])
        (nil)))

(insn:TI 63 6 2 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg/f:SI 11 fp [164])
        (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x11249780 cacheid>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x11249780 cacheid>)
        (nil)))

(insn 2 63 3 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v/f:SI 5 r5 [orig:139 page ] [139])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ page ])
        (nil)))

(insn:TI 3 2 5 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v:SI 4 r4 [orig:140 offset ] [140])
        (reg:SI 1 r1 [ offset ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ offset ])
        (nil)))

(insn 5 3 157 2 arch/arm/mm/dma-mapping.c:478 (set (reg/v:SI 8 r8 [orig:142 dir ] [142])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(note 157 5 10 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 157 158 2 arch/arm/mm/dma-mapping.c:485 (set (reg/v:SI 6 r6 [orig:137 left ] [137])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ size ])
        (nil)))

(note 158 10 14 2 ( left (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:137 left ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 14 158 32 2 NOTE_INSN_DELETED)

(note 32 14 159 2 NOTE_INSN_DELETED)
;; End of basic block 2 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

(note 159 32 160 3 ( len (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:136 len ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 160 159 161 3 ( vaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 161 160 162 3 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:139 page ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 162 161 163 3 ( offset (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:140 offset ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 163 162 164 3 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:142 dir ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 164 163 87 3 ( op (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:143 op ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 11) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  11 [100.0%]  (dfs_back)
(code_label 87 164 11 3 66 "" [1 uses])

(note 11 87 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 15 11 12 3 NOTE_INSN_DELETED)

(insn:TI 12 15 130 3 include/linux/mm.h:692 (set (reg:SI 3 r3 [orig:145 <variable>.flags ] [145])
        (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:139 page ] [139]) [0 <variable>.flags+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 5 r5 [orig:139 page ] [139]) [0 <variable>.flags+0 S4 A32])
        (nil)))

(insn 130 12 131 3 include/linux/mm.h:692 (set (reg:SI 1 r1)
        (const_int 768 [0x300])) 167 {*arm_movsi_insn} (nil))

(insn:TI 131 130 165 3 include/linux/mm.h:692 (set (reg:SI 2 r2)
        (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)) 167 {*arm_movsi_insn} (nil))

(note 165 131 13 3 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 13 165 17 3 include/linux/mm.h:692 (set (reg:SI 3 r3 [144])
        (lshiftrt:SI (reg:SI 3 r3 [orig:145 <variable>.flags ] [145])
            (const_int 30 [0x1e]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 17 13 18 3 include/linux/mm.h:692 (set (reg/f:SI 3 r3 [orig:134 D.25051 ] [134])
        (plus:SI (mult:SI (reg:SI 1 r1)
                (reg:SI 3 r3 [144]))
            (reg:SI 2 r2))) 40 {*mulsi3addsi_v6} (expr_list:REG_DEAD (reg:SI 2 r2)
        (nil)))

(insn:TI 18 17 19 3 include/linux/mmzone.h:741 (set (reg/f:SI 2 r2 [orig:150 <variable>.zone_pgdat ] [150])
        (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:134 D.25051 ] [134])
                (const_int 748 [0x2ec])) [0 <variable>.zone_pgdat+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (plus:SI (reg/f:SI 3 r3 [orig:134 D.25051 ] [134])
                (const_int 748 [0x2ec])) [0 <variable>.zone_pgdat+0 S4 A32])
        (nil)))

(insn:TI 19 18 20 3 include/linux/mmzone.h:741 (set (reg:SI 3 r3 [149])
        (minus:SI (reg/f:SI 3 r3 [orig:134 D.25051 ] [134])
            (reg/f:SI 2 r2 [orig:150 <variable>.zone_pgdat ] [150]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [orig:150 <variable>.zone_pgdat ] [150])
        (nil)))

(insn:TI 20 19 21 3 include/linux/mmzone.h:741 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [149])
            (reg:SI 1 r1))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [149])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil))))

(jump_insn:TI 21 20 22 3 include/linux/mmzone.h:741 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 94)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7200 [0x1c20])
            (nil))))
;; End of basic block 3 -> ( 4 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [28.0%]  (fallthru)
;; Succ edge  12 [72.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  3 [28.0%]  (fallthru)
(note 22 21 23 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 23 22 24 4 arch/arm/mm/dma-mapping.c:491 (set (reg:SI 3 r3 [151])
        (plus:SI (reg/v:SI 6 r6 [orig:137 left ] [137])
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 4 {*arm_addsi3} (nil))

(insn:TI 24 23 27 4 arch/arm/mm/dma-mapping.c:491 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [151])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [151])
        (nil)))

(insn:TI 27 24 25 4 arch/arm/mm/dma-mapping.c:487 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 7 r7 [orig:136 len ] [136])
            (reg/v:SI 6 r6 [orig:137 left ] [137]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 25 27 31 4 arch/arm/mm/dma-mapping.c:491 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 44)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 4 -> ( 6 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  6 [50.0%] 
;; Succ edge  5 [50.0%]  (fallthru)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 7 [r7] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 7 [r7] 24 [cc]
;; live  kill	

;; Pred edge  4 [50.0%]  (fallthru)
(note 31 25 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 37 31 132 5 NOTE_INSN_DELETED)

(insn:TI 132 37 33 5 arch/arm/mm/dma-mapping.c:492 (set (reg:SI 3 r3)
        (const_int 4095 [0xfff])) 167 {*arm_movsi_insn} (nil))

(insn:TI 33 132 39 5 arch/arm/mm/dma-mapping.c:492 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:140 offset ] [140])
            (reg:SI 3 r3))) 219 {*arm_cmpsi_insn} (expr_list:REG_EQUAL (compare:CC (reg/v:SI 4 r4 [orig:140 offset ] [140])
            (const_int 4095 [0xfff]))
        (nil)))

(insn:TI 39 33 36 5 arch/arm/mm/dma-mapping.c:494 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 3 r3 [155])
            (ashift:SI (reg/v:SI 4 r4 [orig:140 offset ] [140])
                (const_int 20 [0x14])))) 2320 {neon_vornv2di+53} (nil))

(insn 36 39 166 5 arch/arm/mm/dma-mapping.c:493 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg:SI 4 r4 [153])
            (lshiftrt:SI (reg/v:SI 4 r4 [orig:140 offset ] [140])
                (const_int 12 [0xc])))) 2320 {neon_vornv2di+53} (nil))

(note 166 36 38 5 ( offset (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 38 166 40 5 arch/arm/mm/dma-mapping.c:493 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 5 r5 [orig:139 page ] [139])
            (plus:SI (mult:SI (reg:SI 4 r4 [153])
                    (const_int 32 [0x20]))
                (reg/v/f:SI 5 r5 [orig:139 page ] [139])))) 2368 {neon_vornv2di+101} (nil))

(insn 40 38 167 5 arch/arm/mm/dma-mapping.c:494 (cond_exec (gtu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 4 r4 [orig:140 offset ] [140])
            (lshiftrt:SI (reg:SI 3 r3 [155])
                (const_int 20 [0x14])))) 2320 {neon_vornv2di+53} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_DEAD (reg:SI 3 r3 [155])
            (expr_list:REG_EQUAL (and:SI (reg/v:SI 4 r4 [orig:140 offset ] [140])
                    (const_int 4095 [0xfff]))
                (nil)))))

(note 167 40 43 5 ( offset (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:140 offset ] [140])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 43 167 168 5 arch/arm/mm/dma-mapping.c:496 (set (reg/v:SI 7 r7 [orig:136 len ] [136])
        (minus:SI (const_int 4096 [0x1000])
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 28 {*arm_subsi3_insn} (nil))
;; End of basic block 5 -> ( 6)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  6 [100.0%]  (fallthru)

(note 168 43 44 6 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:139 page ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%]  (fallthru)
;; Pred edge  4 [50.0%] 
(code_label 44 168 45 6 61 "" [1 uses])

(note 45 44 48 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 48 45 46 6 NOTE_INSN_DELETED)

(insn:TI 46 48 169 6 arch/arm/mm/dma-mapping.c:498 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:139 page ] [139])) 167 {*arm_movsi_insn} (nil))

(note 169 46 47 6 ( vaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 47 169 49 6 arch/arm/mm/dma-mapping.c:498 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("kmap_high_get") [flags 0x41] <function_decl 0x11268f00 kmap_high_get>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 49 47 170 6 arch/arm/mm/dma-mapping.c:499 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(note 170 49 50 6 ( vaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 50 170 51 6 arch/arm/mm/dma-mapping.c:499 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 61)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  7 [69.8%]  (fallthru)
;; Succ edge  8 [30.2%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  6 [69.8%]  (fallthru)
(note 51 50 52 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 52 51 53 7 NOTE_INSN_DELETED)

(insn:TI 53 52 171 7 arch/arm/mm/dma-mapping.c:501 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 4 {*arm_addsi3} (nil))

(note 171 53 54 7 ( vaddr (nil)) NOTE_INSN_VAR_LOCATION)

(insn 54 171 55 7 arch/arm/mm/dma-mapping.c:501 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:136 len ] [136])) 167 {*arm_movsi_insn} (nil))

(insn:TI 55 54 56 7 arch/arm/mm/dma-mapping.c:501 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:142 dir ] [142])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 56 55 57 7 arch/arm/mm/dma-mapping.c:501 (parallel [
            (call (mem:SI (reg/v/f:SI 9 r9 [orig:143 op ] [143]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 57 56 58 7 arch/arm/mm/dma-mapping.c:502 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:139 page ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 58 57 145 7 arch/arm/mm/dma-mapping.c:502 (parallel [
            (call (mem:SI (symbol_ref:SI ("kunmap_high") [flags 0x41] <function_decl 0x11268e80 kunmap_high>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(jump_insn 145 58 146 7 (set (pc)
        (label_ref 79)) -1 (nil))
;; End of basic block 7 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 146 145 172)

(note 172 146 61 8 ( vaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  6 [30.2%] 
(code_label 61 172 62 8 63 "" [1 uses])

(note 62 61 65 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 65 62 64 8 NOTE_INSN_DELETED)

(insn:TI 64 65 66 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:SI 3 r3 [orig:159 cacheid ] [159])
        (mem/c/i:SI (reg/f:SI 11 fp [164]) [0 cacheid+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (reg/f:SI 11 fp [164]) [0 cacheid+0 S4 A32])
        (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("cacheid") [flags 0xc0] <var_decl 0x11249780 cacheid>) [0 cacheid+0 S4 A32])
            (nil))))

(insn:TI 66 64 67 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 3 r3 [orig:159 cacheid ] [159])
                (const_int 1 [0x1])
                (const_int 1 [0x1]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:159 cacheid ] [159])
        (nil)))

(jump_insn:TI 67 66 68 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/cachetype.h:52 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [29.0%]  (fallthru)
;; Succ edge  10 [71.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  8 [29.0%]  (fallthru)
(note 68 67 72 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(note 72 68 69 9 NOTE_INSN_DELETED)

(insn:TI 69 72 173 9 arch/arm/mm/dma-mapping.c:505 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:139 page ] [139])) 167 {*arm_movsi_insn} (nil))

(note 173 69 70 9 ( vaddr (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 70 173 74 9 arch/arm/mm/dma-mapping.c:505 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__kmap_atomic") [flags 0x41] <function_decl 0x11273080 __kmap_atomic>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 74 70 75 9 arch/arm/mm/dma-mapping.c:506 (set (reg:SI 1 r1)
        (reg/v:SI 7 r7 [orig:136 len ] [136])) 167 {*arm_movsi_insn} (nil))

(insn:TI 75 74 71 9 arch/arm/mm/dma-mapping.c:506 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:142 dir ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 71 75 174 9 arch/arm/mm/dma-mapping.c:505 (set (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(note 174 71 73 9 ( vaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 73 174 76 9 arch/arm/mm/dma-mapping.c:506 (set (reg:SI 0 r0)
        (plus:SI (reg/f:SI 0 r0 [orig:133 vaddr.608 ] [133])
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 76 73 77 9 arch/arm/mm/dma-mapping.c:506 (parallel [
            (call (mem:SI (reg/v/f:SI 9 r9 [orig:143 op ] [143]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 77 76 78 9 arch/arm/mm/dma-mapping.c:507 discrim 1 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 78 77 175 9 arch/arm/mm/dma-mapping.c:507 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__kunmap_atomic") [flags 0x41] <function_decl 0x11273100 __kunmap_atomic>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))
;; End of basic block 9 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%]  (fallthru)

(note 175 78 79 10 ( vaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 7 9 12) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  8 [71.0%] 
;; Pred edge  7 [100.0%] 
;; Pred edge  9 [100.0%]  (fallthru)
;; Pred edge  12 [100.0%] 
(code_label 79 175 80 10 64 "" [3 uses])

(note 80 79 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 81 80 82 10 NOTE_INSN_DELETED)

(insn:TI 82 81 83 10 arch/arm/mm/dma-mapping.c:516 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (minus:SI (reg/v:SI 6 r6 [orig:137 left ] [137])
                        (reg/v:SI 7 r7 [orig:136 len ] [136]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 6 r6 [orig:137 left ] [137])
                (minus:SI (reg/v:SI 6 r6 [orig:137 left ] [137])
                    (reg/v:SI 7 r7 [orig:136 len ] [136])))
        ]) 29 {*subsi3_compare0} (nil))

(jump_insn:TI 83 82 176 10 arch/arm/mm/dma-mapping.c:516 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (return)
            (pc))) 261 {*cond_return} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 1400 [0x578])
            (nil))))
;; End of basic block 10 -> ( 11 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  11 [86.0%]  (fallthru)
;; Succ edge  EXIT [14.0%]  (loop_exit)

(note 176 83 84 11 ( vaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:135 vaddr ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  10 [86.0%]  (fallthru)
(note 84 176 85 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 85 84 118 11 arch/arm/mm/dma-mapping.c:514 (set (reg/v/f:SI 5 r5 [orig:139 page ] [139])
        (plus:SI (reg/v/f:SI 5 r5 [orig:139 page ] [139])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(insn 118 85 147 11 arch/arm/mm/dma-mapping.c:513 (set (reg/v:SI 4 r4 [orig:140 offset ] [140])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(jump_insn 147 118 148 11 (set (pc)
        (label_ref 87)) -1 (nil))
;; End of basic block 11 -> ( 3)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [100.0%]  (dfs_back)

(barrier 148 147 177)

(note 177 148 94 12 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:139 page ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  3 [72.0%] 
(code_label 94 177 95 12 59 "" [1 uses])

(note 95 94 98 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(note 98 95 99 12 NOTE_INSN_DELETED)

(note 99 98 96 12 NOTE_INSN_DELETED)

(insn:TI 96 99 178 12 arch/arm/mm/dma-mapping.c:510 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:139 page ] [139])) 167 {*arm_movsi_insn} (nil))

(note 178 96 104 12 ( vaddr (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:133 vaddr.608 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 104 178 97 12 arch/arm/mm/dma-mapping.c:487 (set (reg/v:SI 7 r7 [orig:136 len ] [136])
        (reg/v:SI 6 r6 [orig:137 left ] [137])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 97 104 101 12 arch/arm/mm/dma-mapping.c:510 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("page_address") [flags 0x41] <function_decl 0x10f7b880 page_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 101 97 102 12 arch/arm/mm/dma-mapping.c:511 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:137 left ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 102 101 100 12 arch/arm/mm/dma-mapping.c:511 (set (reg:SI 2 r2)
        (reg/v:SI 8 r8 [orig:142 dir ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 100 102 103 12 arch/arm/mm/dma-mapping.c:511 (set (reg:SI 0 r0)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 4 r4 [orig:140 offset ] [140]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 103 100 149 12 arch/arm/mm/dma-mapping.c:511 (parallel [
            (call (mem:SI (reg/v/f:SI 9 r9 [orig:143 op ] [143]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(jump_insn 149 103 150 12 (set (pc)
        (label_ref 79)) -1 (nil))
;; End of basic block 12 -> ( 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  10 [100.0%] 

(barrier 150 149 128)

(note 128 150 129 NOTE_INSN_DELETED)

(note 129 128 0 NOTE_INSN_DELETED)


;; Function ___dma_page_dev_to_cpu (___dma_page_dev_to_cpu)[0:1288]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: page+0
Reg 1: off+0
Reg 2: size+0
Reg 3: dir+0
Variables:
  name: page
    offset 0
      (reg:SI 0 r0 [ page ])
  name: off
    offset 0
      (reg:SI 1 r1 [ off ])
  name: size
    offset 0
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 32
Reg 1: off+0
Reg 2: size+0
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
      (reg:SI 1 r1 [ off ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])


Basic block 3:
IN:
Stack adjustment: 32
Reg 1: off+0
Reg 2: size+0
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
      (reg:SI 1 r1 [ off ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])

OUT:
Stack adjustment: 32
Reg 1: off+0
Reg 2: size+0
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
      (reg:SI 1 r1 [ off ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])


Basic block 4:
IN:
Stack adjustment: 32
Reg 1: off+0
Reg 2: size+0
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
      (reg:SI 1 r1 [ off ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])

OUT:
Stack adjustment: 32
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])


Basic block 5:
IN:
Stack adjustment: 32
Reg 1: off+0
Reg 2: size+0
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
      (reg:SI 1 r1 [ off ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])

OUT:
Stack adjustment: 32
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])


Basic block 6:
IN:
Stack adjustment: 32
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])

OUT:
Stack adjustment: 32
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])


Basic block 7:
IN:
Stack adjustment: 32
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])

OUT:
Stack adjustment: 32
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])


Basic block 8:
IN:
Stack adjustment: 32
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])

OUT:
Stack adjustment: 32
Reg 4: page+0
Reg 5: size+0
Reg 6: off+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 6 r6 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])


9 basic blocks, 12 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	

Successors:  3 [72.0%]  (fallthru) 5 [28.0%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 7200, maybe hot.
Predecessors:  2 [72.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  4 [69.8%]  (fallthru) 5 [30.2%] 
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 5028, maybe hot.
Predecessors:  3 [69.8%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  5 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [28.0%]  3 [30.2%]  4 [100.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

Successors:  6 [61.0%]  (fallthru) 8 [39.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 6100, maybe hot.
Predecessors:  5 [61.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  7 [39.0%]  (fallthru) 8 [61.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 2378, maybe hot.
Predecessors:  6 [39.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 8 , prev 7, next 1, loop_depth 0, count 0, freq 7622, maybe hot.
Predecessors:  6 [61.0%]  5 [39.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 1 , prev 8, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  7 [100.0%]  (ab,sibcall) 8 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




___dma_page_dev_to_cpu

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={10d,9u,1d} r1={7d,6u} r2={5d,4u} r3={10d,9u} r4={2d,5u} r5={2d,4u} r6={2d,4u} r7={2d,4u} r12={5d,2u} r13={2d,13u,1d} r14={3d,3u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={9d,5u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 459{389d,68u,2e} in 38{35 regular + 3 call} insns.
(note 1 0 80 NOTE_INSN_DELETED)

(note 80 1 81 2 ( off (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ off ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 81 80 82 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 82 81 83 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 83 82 7 2 ( page (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ page ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 83 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 73 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 73 6 86 2 arch/arm/mm/dma-mapping.c:538 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -32 [0xffffffffffffffe0])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 0 r0))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 1 r1))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 2 r2))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 24 [0x18])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 28 [0x1c])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 86 73 85 2 ( page (nil)) NOTE_INSN_VAR_LOCATION)

(note 85 86 84 2 ( off (nil)) NOTE_INSN_VAR_LOCATION)

(note 84 85 74 2 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(note 74 84 11 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 11 74 5 2 arch/arm/mm/dma-mapping.c:543 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:139 dir ] [139])
            (const_int 1 [0x1]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:139 dir ] [139])
        (nil)))

(insn:TI 5 11 68 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v:SI 7 r7 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn 68 5 87 2 arch/arm/mm/dma-mapping.c:539 (set (reg/f:SI 3 r3 [140])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(note 87 68 2 2 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:139 dir ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 2 87 88 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v/f:SI 4 r4 [orig:136 page ] [136])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ page ])
        (nil)))

(note 88 2 3 2 ( page (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ page ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 3 88 89 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v:SI 6 r6 [orig:137 off ] [137])
        (reg:SI 1 r1 [ off ])) 167 {*arm_movsi_insn} (nil))

(note 89 3 4 2 ( off (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ off ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 4 89 90 2 arch/arm/mm/dma-mapping.c:538 (set (reg/v:SI 5 r5 [orig:138 size ] [138])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (nil))

(note 90 4 10 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 90 91 2 arch/arm/mm/dma-mapping.c:539 (set (reg/f:SI 0 r0 [orig:135 mem_map.393 ] [135])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [140]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [140])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(note 91 10 12 2 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:136 page ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 12 91 92 2 arch/arm/mm/dma-mapping.c:543 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2800 [0xaf0])
            (nil))))
;; End of basic block 2 -> ( 3 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [72.0%]  (fallthru)
;; Succ edge  5 [28.0%] 

(note 92 12 93 3 ( off (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:137 off ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 93 92 13 3 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:138 size ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  2 [72.0%]  (fallthru)
(note 13 93 14 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 14 13 15 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [141])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(insn:TI 15 14 16 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg/f:SI 3 r3 [orig:133 D.25071 ] [133])
        (mem/s/f/j/c:SI (reg/f:SI 3 r3 [141]) [0 outer_cache.inv_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
        (nil)))

(insn:TI 16 15 17 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 D.25071 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 17 16 18 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 27)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [69.8%]  (fallthru)
;; Succ edge  5 [30.2%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  3 [69.8%]  (fallthru)
(note 18 17 21 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 21 18 23 4 NOTE_INSN_DELETED)

(note 23 21 19 4 NOTE_INSN_DELETED)

(insn:TI 19 23 20 4 arch/arm/mm/dma-mapping.c:539 (set (reg:SI 0 r0 [142])
        (minus:SI (reg/v/f:SI 4 r4 [orig:136 page ] [136])
            (reg/f:SI 0 r0 [orig:135 mem_map.393 ] [135]))) 28 {*arm_subsi3_insn} (nil))

(insn:TI 20 19 22 4 arch/arm/mm/dma-mapping.c:539 (set (reg:SI 0 r0 [144])
        (ashiftrt:SI (reg:SI 0 r0 [142])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 0 r0 [142])
            (const_int 32 [0x20]))
        (nil)))

(insn:TI 22 20 94 4 arch/arm/mm/dma-mapping.c:539 (set (reg/v:SI 0 r0 [orig:134 paddr ] [134])
        (plus:SI (mult:SI (reg:SI 0 r0 [144])
                (const_int 4096 [0x1000]))
            (reg:SI 1 r1 [orig:137 off ] [137]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:137 off ] [137])
        (nil)))

(note 94 22 25 4 ( paddr (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:134 paddr ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 25 94 95 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg:SI 2 r2 [orig:138 size ] [138]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:138 size ] [138])
        (nil)))

(note 95 25 26 4 ( paddr (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 26 95 96 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:46 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:133 D.25071 ] [133]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:133 D.25071 ] [133])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 4 -> ( 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

(note 96 26 97 5 ( off (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:137 off ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 97 96 27 5 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:138 size ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 3 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  2 [28.0%] 
;; Pred edge  3 [30.2%] 
;; Pred edge  4 [100.0%]  (fallthru)
(code_label 27 97 28 5 71 "" [2 uses])

(note 28 27 37 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 37 28 38 5 NOTE_INSN_DELETED)

(note 38 37 40 5 NOTE_INSN_DELETED)

(note 40 38 41 5 NOTE_INSN_DELETED)

(note 41 40 43 5 NOTE_INSN_DELETED)

(note 43 41 44 5 NOTE_INSN_DELETED)

(note 44 43 67 5 NOTE_INSN_DELETED)

(insn:TI 67 44 35 5 arch/arm/mm/dma-mapping.c:546 (set (reg/f:SI 12 ip [147])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(insn 35 67 32 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 3 r3)
        (reg/v:SI 7 r7 [orig:139 dir ] [139])) 167 {*arm_movsi_insn} (nil))

(insn:TI 32 35 33 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:136 page ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 33 32 34 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:137 off ] [137])) 167 {*arm_movsi_insn} (nil))

(insn:TI 34 33 30 5 arch/arm/mm/dma-mapping.c:546 (set (reg:SI 2 r2)
        (reg/v:SI 5 r5 [orig:138 size ] [138])) 167 {*arm_movsi_insn} (nil))

(insn:TI 30 34 31 5 arch/arm/mm/dma-mapping.c:546 (set (reg/f:SI 12 ip [orig:148 cpu_cache.dma_unmap_area ] [148])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 12 ip [147])
                (const_int 32 [0x20])) [0 cpu_cache.dma_unmap_area+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
                        (const_int 32 [0x20]))) [0 cpu_cache.dma_unmap_area+0 S4 A32])
            (nil))))

(insn:TI 31 30 36 5 arch/arm/mm/dma-mapping.c:546 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [orig:148 cpu_cache.dma_unmap_area ] [148])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [orig:148 cpu_cache.dma_unmap_area ] [148])
        (nil)))

(call_insn 36 31 70 5 arch/arm/mm/dma-mapping.c:546 (parallel [
            (call (mem:SI (symbol_ref:SI ("dma_cache_maint_page") [flags 0x3] <function_decl 0x1145ee00 dma_cache_maint_page>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 70 36 71 5 arch/arm/mm/dma-mapping.c:551 (parallel [
            (set (reg:SI 3 r3 [155])
                (ne:SI (reg/v:SI 7 r7 [orig:139 dir ] [139])
                    (const_int 1 [0x1])))
            (clobber (reg:CC 24 cc))
        ]) 278 {*compare_scc} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(insn 71 70 72 5 arch/arm/mm/dma-mapping.c:551 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:137 off ] [137])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 72 71 46 5 arch/arm/mm/dma-mapping.c:551 (set (reg:SI 3 r3 [155])
        (if_then_else:SI (eq:SI (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (reg:SI 3 r3 [155])
            (const_int 0 [0x0]))) 240 {*movsicc_insn} (expr_list:REG_DEAD (reg:CC 24 cc)
        (nil)))

(insn:TI 46 72 47 5 arch/arm/mm/dma-mapping.c:551 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [155])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [155])
        (nil)))

(jump_insn:TI 47 46 48 5 arch/arm/mm/dma-mapping.c:551 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3900 [0xf3c])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  6 [61.0%]  (fallthru)
;; Succ edge  8 [39.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [61.0%]  (fallthru)
(note 48 47 49 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 49 48 50 6 NOTE_INSN_DELETED)

(insn:TI 50 49 51 6 arch/arm/mm/dma-mapping.c:551 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:138 size ] [138])
            (const_int 4096 [0x1000]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 51 50 52 6 arch/arm/mm/dma-mapping.c:551 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 6 -> ( 7 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  7 [39.0%]  (fallthru)
;; Succ edge  8 [61.0%] 

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  6 [39.0%]  (fallthru)
(note 52 51 54 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(insn:TI 54 52 53 7 arch/arm/mm/dma-mapping.c:552 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:136 page ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 53 54 78 7 arch/arm/mm/dma-mapping.c:552 (set (reg:SI 0 r0)
        (const_int 9 [0x9])) 167 {*arm_movsi_insn} (nil))

(note 78 53 79 7 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 79 78 55 7 arch/arm/mm/dma-mapping.c:553 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 55 79 56 7 arch/arm/mm/dma-mapping.c:552 (parallel [
            (call (mem:SI (symbol_ref:SI ("_set_bit") [flags 0x41] <function_decl 0x109c0500 _set_bit>) [0 S4 A32])
                (const_int 0 [0x0]))
            (return)
            (use (const_int 0 [0x0]))
        ]) 258 {*sibcall_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 56 55 62)

;; Start of basic block ( 6 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  6 [61.0%] 
;; Pred edge  5 [39.0%] 
(code_label 62 56 65 8 73 "" [2 uses])

(note 65 62 75 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 75 65 76 8 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 76 75 77 8 arch/arm/mm/dma-mapping.c:553 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 8 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 77 76 66)

(note 66 77 69 NOTE_INSN_DELETED)

(note 69 66 0 NOTE_INSN_DELETED)


;; Function dma_sync_sg_for_cpu (dma_sync_sg_for_cpu)[0:1291]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])


Basic block 3:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])


Basic block 4:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])

OUT:
Stack adjustment: 24
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])


Basic block 5:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])

OUT:
Stack adjustment: 24
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])


Basic block 6:
IN:
Stack adjustment: 24
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])

OUT:
Stack adjustment: 24
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])


Basic block 7:
IN:
Stack adjustment: 24
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])

OUT:
Stack adjustment: 24
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])


Basic block 8:
IN:
Stack adjustment: 24
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])

OUT:
Stack adjustment: 24
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])


Basic block 9:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])


Basic block 10:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])


11 basic blocks, 12 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 308, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 308, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	

Successors:  9 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 9700, maybe hot.
Predecessors:  9 [97.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  4 [0.0%]  (fallthru,loop_exit) 5 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 4.
Predecessors:  3 [0.0%]  (fallthru,loop_exit)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  7 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 9696, maybe hot.
Predecessors:  3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

Successors:  6 [0.0%]  (fallthru,loop_exit) 8 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 4.
Predecessors:  5 [0.0%]  (fallthru,loop_exit)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 8.
Predecessors:  6 [100.0%]  (fallthru) 4 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors: 
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 1, count 0, freq 9692, maybe hot.
Predecessors:  5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

Successors:  9 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  8 [100.0%]  (fallthru,dfs_back) 2 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  3 [97.0%]  10 [3.0%]  (fallthru,loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 10 , prev 9, next 1, loop_depth 0, count 0, freq 300, maybe hot.
Predecessors:  9 [3.0%]  (fallthru,loop_exit)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 1 , prev 10, loop_depth 0, count 0, freq 300, maybe hot.
Predecessors:  10 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_sync_sg_for_cpu

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,6u} r1={7d,3u} r2={5d,2u} r3={6d,3u,1d} r4={3d,7u,1d} r5={3d,4u} r6={2d,3u} r7={2d,3u} r8={2d,3u} r12={3d} r13={2d,14u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 439{384d,53u,2e} in 31{28 regular + 3 call} insns.
(note 1 0 88 NOTE_INSN_DELETED)

(note 88 1 89 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 89 88 90 2 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 90 89 91 2 ( nents (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ nents ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 91 90 7 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 91 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 68 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 68 6 69 2 arch/arm/mm/dma-mapping.c:628 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 8 r8)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -24 [0xffffffffffffffe8])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 8 r8))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 69 68 4 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 4 69 5 2 arch/arm/mm/dma-mapping.c:628 (set (reg/v:SI 7 r7 [orig:138 nents ] [138])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ nents ])
        (nil)))

(insn:TI 5 4 9 2 arch/arm/mm/dma-mapping.c:628 (set (reg/v:SI 6 r6 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(insn 9 5 92 2 arch/arm/mm/dma-mapping.c:632 (set (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ sg ])
        (nil)))

(note 92 9 10 2 ( s (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:135 s ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 92 93 2 arch/arm/mm/dma-mapping.c:632 (set (reg/v:SI 5 r5 [orig:134 i ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 93 10 14 2 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:134 i ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 14 93 84 2 include/linux/scatterlist.h:96 (set (reg:SI 8 r8 [146])
        (const_int -2023406815 [0xffffffff87654321])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -2023406815 [0xffffffff87654321])
        (nil)))

(jump_insn 84 14 85 2 arch/arm/mm/dma-mapping.c:632 (set (pc)
        (label_ref 48)) -1 (nil))
;; End of basic block 2 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 

(barrier 85 84 94)

(note 94 85 95 3 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:138 nents ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 95 94 50 3 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:139 dir ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 9) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [97.0%] 
(code_label 50 95 13 3 80 "" [1 uses])

(note 13 50 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 13 16 3 include/linux/scatterlist.h:96 (set (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
        (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135]) [0 <variable>.sg_magic+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135]) [0 <variable>.sg_magic+0 S4 A32])
        (nil)))

(insn:TI 16 15 17 3 include/linux/scatterlist.h:96 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
            (reg:SI 8 r8 [146]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
        (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
                (const_int -2023406815 [0xffffffff87654321]))
            (nil))))

(jump_insn:TI 17 16 18 3 include/linux/scatterlist.h:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru,loop_exit)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  3 [0.0%]  (fallthru,loop_exit)
(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 18 96 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(note 96 20 21 4 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(insn 21 96 97 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 1 r1)
        (const_int 96 [0x60])) 167 {*arm_movsi_insn} (nil))

(note 97 21 86 4 ( sg (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 86 97 87 4 (set (pc)
        (label_ref 76)) -1 (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 87 86 98)

(note 98 87 99 5 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 99 98 24 5 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 24 99 25 5 78 "" [1 uses])

(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 27 25 26 5 NOTE_INSN_DELETED)

(insn:TI 26 27 100 5 include/linux/scatterlist.h:97 (set (reg:SI 0 r0 [orig:133 D.25085 ] [133])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 4 [0x4])) [0 <variable>.page_link+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 100 26 28 5 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 28 100 29 5 include/linux/scatterlist.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 0 r0 [orig:133 D.25085 ] [133])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 29 28 30 5 include/linux/scatterlist.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru,loop_exit)
;; Succ edge  8 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  5 [0.0%]  (fallthru,loop_exit)
(note 30 29 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 30 33 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 33 32 101 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 1 r1)
        (const_int 97 [0x61])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 101 33 76 7 ( sg (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 76 101 74 7 82 "" [1 uses])

(note 74 76 34 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 34 74 35 7 include/linux/scatterlist.h:97 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 35 34 102)

(note 102 35 103 8 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 103 102 36 8 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:138 nents ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%] 
(code_label 36 103 37 8 79 "" [1 uses])

(note 37 36 38 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 38 37 40 8 NOTE_INSN_DELETED)

(insn:TI 40 38 104 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 8 [0x8])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 104 40 39 8 ( sg (nil)) NOTE_INSN_VAR_LOCATION)

(insn 39 104 41 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 0 r0)
        (and:SI (reg:SI 0 r0 [orig:133 D.25085 ] [133])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 41 39 42 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 41 43 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 3 r3)
        (reg/v:SI 6 r6 [orig:139 dir ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 43 42 45 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_dev_to_cpu") [flags 0x3] <function_decl 0x11060f80 ___dma_page_dev_to_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 45 43 46 8 arch/arm/mm/dma-mapping.c:632 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 s ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (nil)))

(call_insn:TI 46 45 44 8 arch/arm/mm/dma-mapping.c:632 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 44 46 47 8 arch/arm/mm/dma-mapping.c:632 (set (reg/v:SI 5 r5 [orig:134 i ] [134])
        (plus:SI (reg/v:SI 5 r5 [orig:134 i ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 47 44 105 8 arch/arm/mm/dma-mapping.c:632 (set (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru,dfs_back)

(note 105 47 106 9 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 106 105 107 9 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 107 106 108 9 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:138 nents ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 108 107 48 9 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:139 dir ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 2) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 48 108 49 9 77 "" [1 uses])

(note 49 48 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 51 49 52 9 arch/arm/mm/dma-mapping.c:632 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:134 i ] [134])
            (reg/v:SI 7 r7 [orig:138 nents ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 52 51 72 9 arch/arm/mm/dma-mapping.c:632 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9700 [0x25e4])
            (nil))))
;; End of basic block 9 -> ( 3 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  3 [97.0%] 
;; Succ edge  10 [3.0%]  (fallthru,loop_exit)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [3.0%]  (fallthru,loop_exit)
(note 72 52 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 70 72 71 10 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 71 70 73 10 arch/arm/mm/dma-mapping.c:642 (return) 260 {return} (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 73 71 65)

(note 65 73 66 NOTE_INSN_DELETED)

(note 66 65 0 NOTE_INSN_DELETED)


;; Function dma_unmap_sg (dma_unmap_sg)[0:1290]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 7: nents+0
Reg 8: dir+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:133 i ] [133])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 s ] [134])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])


Basic block 3:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 7: nents+0
Reg 8: dir+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 s ] [134])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:133 i ] [133])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:139 dir ] [139])

OUT:
Stack adjustment: 24
Reg 4: s+0
Reg 5: i+0
Reg 7: nents+0
Reg 8: dir+0
Variables:
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 s ] [134])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:133 i ] [133])


Basic block 4:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 7: nents+0
Reg 8: dir+0
Variables:
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 s ] [134])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:133 i ] [133])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 7: nents+0
Reg 8: dir+0
Variables:
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 s ] [134])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:133 i ] [133])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])


Basic block 5:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 7: nents+0
Reg 8: dir+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 s ] [134])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:133 i ] [133])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:139 dir ] [139])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 7: nents+0
Reg 8: dir+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:133 i ] [133])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:134 s ] [134])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 8 r8 [orig:139 dir ] [139])


6 basic blocks, 6 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	

Successors:  4 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 9100, maybe hot.
Predecessors:  4 [91.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 12 [ip]
;; live  kill	 14 [lr]

Successors:  4 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  3 [100.0%]  (fallthru,dfs_back) 2 [100.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

Successors:  3 [91.0%]  5 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 5 , prev 4, next 1, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  4 [9.0%]  (fallthru,loop_exit)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 1 , prev 5, loop_depth 0, count 0, freq 900, maybe hot.
Predecessors:  5 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_unmap_sg

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,4u} r1={5d,3u} r2={4d,2u} r3={4d,2u} r4={3d,5u,1d} r5={3d,4u} r6={2d,3u,1d} r7={2d,3u} r8={2d,3u} r12={4d,3u} r13={2d,8u} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,1u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 308{263d,43u,2e} in 23{21 regular + 2 call} insns.
(note 1 0 59 NOTE_INSN_DELETED)

(note 59 1 60 2 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 60 59 61 2 ( nents (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ nents ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 61 60 62 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 62 61 7 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 62 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 49 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 49 6 50 2 arch/arm/mm/dma-mapping.c:608 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 8 r8)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -24 [0xffffffffffffffe8])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 8 r8))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 50 49 4 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 4 50 5 2 arch/arm/mm/dma-mapping.c:608 (set (reg/v:SI 7 r7 [orig:138 nents ] [138])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ nents ])
        (nil)))

(insn:TI 5 4 9 2 arch/arm/mm/dma-mapping.c:608 (set (reg/v:SI 8 r8 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(insn 9 5 63 2 arch/arm/mm/dma-mapping.c:614 (set (reg/v/f:SI 4 r4 [orig:134 s ] [134])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ sg ])
        (nil)))

(note 63 9 10 2 ( s (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:134 s ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 63 64 2 arch/arm/mm/dma-mapping.c:614 (set (reg/v:SI 5 r5 [orig:133 i ] [133])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 64 10 15 2 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:133 i ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 15 64 57 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 6 r6 [147])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(jump_insn 57 15 58 2 arch/arm/mm/dma-mapping.c:614 (set (pc)
        (label_ref 31)) -1 (nil))
;; End of basic block 2 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  4 [100.0%] 

(barrier 58 57 65)

(note 65 58 66 3 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:138 nents ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 66 65 33 3 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:139 dir ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  4 [91.0%] 
(code_label 33 66 13 3 87 "" [1 uses])

(note 13 33 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 17 13 19 3 NOTE_INSN_DELETED)

(note 19 17 21 3 NOTE_INSN_DELETED)

(note 21 19 14 3 NOTE_INSN_DELETED)

(insn:TI 14 21 18 3 arch/arm/mm/dma-mapping.c:615 (set (reg:SI 12 ip [orig:135 D.24893 ] [135])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 s ] [134])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 s ] [134])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])
        (nil)))

(insn:TI 18 14 67 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 0 r0 [orig:144 mem_map ] [144])
        (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 6 r6 [147]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(note 67 18 24 3 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 24 67 20 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:134 s ] [134])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 20 24 68 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1 [146])
        (ashift:SI (reg:SI 12 ip [orig:135 D.24893 ] [135])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(note 68 20 16 3 ( sg (nil)) NOTE_INSN_VAR_LOCATION)

(insn 16 68 23 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 12 ip [141])
        (lshiftrt:SI (reg:SI 12 ip [orig:135 D.24893 ] [135])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 23 16 22 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg:SI 1 r1 [146])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 22 23 26 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 0 r0)
        (plus:SI (mult:SI (reg:SI 12 ip [141])
                (const_int 32 [0x20]))
            (reg/f:SI 0 r0 [orig:144 mem_map ] [144]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 12 ip [141])
        (nil)))

(call_insn:TI 26 22 28 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_dev_to_cpu") [flags 0x3] <function_decl 0x11060f80 ___dma_page_dev_to_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 28 26 29 3 arch/arm/mm/dma-mapping.c:614 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:134 s ] [134])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:134 s ] [134])
        (nil)))

(call_insn:TI 29 28 30 3 arch/arm/mm/dma-mapping.c:614 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 30 29 69 3 arch/arm/mm/dma-mapping.c:614 discrim 2 (set (reg/v/f:SI 4 r4 [orig:134 s ] [134])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru,dfs_back)

(note 69 30 70 4 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 70 69 71 4 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:138 nents ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 71 70 72 4 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:139 dir ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 72 71 31 4 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 31 72 32 4 86 "" [1 uses])

(note 32 31 34 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 34 32 25 4 arch/arm/mm/dma-mapping.c:614 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:133 i ] [133])
            (reg/v:SI 7 r7 [orig:138 nents ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(insn 25 34 27 4 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 3 r3)
        (reg/v:SI 8 r8 [orig:139 dir ] [139])) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 25 35 4 arch/arm/mm/dma-mapping.c:614 discrim 2 (set (reg/v:SI 5 r5 [orig:133 i ] [133])
        (plus:SI (reg/v:SI 5 r5 [orig:133 i ] [133])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 35 27 53 4 arch/arm/mm/dma-mapping.c:614 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 33)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 4 -> ( 3 5)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  3 [91.0%] 
;; Succ edge  5 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  4 [9.0%]  (fallthru,loop_exit)
(note 53 35 51 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 51 53 52 5 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 52 51 54 5 arch/arm/mm/dma-mapping.c:616 (return) 260 {return} (nil))
;; End of basic block 5 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 54 52 47)

(note 47 54 48 NOTE_INSN_DELETED)

(note 48 47 0 NOTE_INSN_DELETED)


;; Function ___dma_page_cpu_to_dev (___dma_page_cpu_to_dev)[0:1287]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: page+0
Reg 1: off+0
Reg 2: size+0
Reg 3: dir+0
Variables:
  name: page
    offset 0
      (reg:SI 0 r0 [ page ])
  name: off
    offset 0
      (reg:SI 1 r1 [ off ])
  name: size
    offset 0
      (reg:SI 2 r2 [ size ])
  name: dir
    offset 0
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 32
Reg 0: paddr+0
Reg 4: size+0
Reg 5: off+0
Reg 6: page+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 5 r5 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])


Basic block 3:
IN:
Stack adjustment: 32
Reg 0: paddr+0
Reg 4: size+0
Reg 5: off+0
Reg 6: page+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 5 r5 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])

OUT:
Stack adjustment: 32
Reg 4: size+0
Reg 5: off+0
Reg 6: page+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 5 r5 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])


Basic block 4:
IN:
Stack adjustment: 32
Reg 0: paddr+0
Reg 4: size+0
Reg 5: off+0
Reg 6: page+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 5 r5 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])

OUT:
Stack adjustment: 32
Reg 0: paddr+0
Reg 4: size+0
Reg 5: off+0
Reg 6: page+0
Reg 7: dir+0
Variables:
  name: page
    offset 0
      (reg/v/f:SI 6 r6 [orig:136 page ] [136])
  name: off
    offset 0
      (reg/v:SI 5 r5 [orig:137 off ] [137])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size ] [138])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:139 dir ] [139])
  name: paddr
    offset 0
      (reg/v:SI 0 r0 [orig:135 paddr ] [135])


5 basic blocks, 5 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  3 [76.0%]  (fallthru) 4 [24.0%] 
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 7596, maybe hot.
Predecessors:  2 [76.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

Successors:  4 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 4 , prev 3, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  3 [100.0%]  (fallthru) 2 [24.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 1 , prev 4, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




___dma_page_cpu_to_dev

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={7d,8u,1d} r1={4d,4u} r2={4d,4u} r3={6d,8u} r4={2d,3u} r5={2d,3u} r6={2d,3u} r7={2d,3u} r12={4d,2u} r13={2d,8u,1d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={4d,3u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 315{262d,51u,2e} in 23{21 regular + 2 call} insns.
(note 1 0 81 NOTE_INSN_DELETED)

(note 81 1 82 2 ( page (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ page ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 82 81 83 2 ( off (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ off ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 83 82 84 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 84 83 7 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 84 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 21 2 NOTE_INSN_FUNCTION_BEG)

(note 21 6 64 2 NOTE_INSN_DELETED)

(insn:TI 64 21 66 2 arch/arm/mm/dma-mapping.c:524 (set (reg/f:SI 12 ip [140])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(insn/f:TI 66 64 87 2 arch/arm/mm/dma-mapping.c:521 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -32 [0xffffffffffffffe0])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 0 r0))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 1 r1))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 2 r2))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 24 [0x18])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 28 [0x1c])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 87 66 86 2 ( page (nil)) NOTE_INSN_VAR_LOCATION)

(note 86 87 85 2 ( off (nil)) NOTE_INSN_VAR_LOCATION)

(note 85 86 67 2 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(note 67 85 2 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 2 67 88 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v/f:SI 6 r6 [orig:136 page ] [136])
        (reg:SI 0 r0 [ page ])) 167 {*arm_movsi_insn} (nil))

(note 88 2 10 2 ( page (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ page ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 88 5 2 arch/arm/mm/dma-mapping.c:524 (set (reg/f:SI 12 ip [orig:141 cpu_cache.dma_map_area ] [141])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 12 ip [140])
                (const_int 28 [0x1c])) [0 cpu_cache.dma_map_area+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
                        (const_int 28 [0x1c]))) [0 cpu_cache.dma_map_area+0 S4 A32])
            (nil))))

(insn 5 10 3 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v:SI 7 r7 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 3 5 89 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v:SI 5 r5 [orig:137 off ] [137])
        (reg:SI 1 r1 [ off ])) 167 {*arm_movsi_insn} (nil))

(note 89 3 4 2 ( off (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ off ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 4 89 90 2 arch/arm/mm/dma-mapping.c:521 (set (reg/v:SI 4 r4 [orig:138 size ] [138])
        (reg:SI 2 r2 [ size ])) 167 {*arm_movsi_insn} (nil))

(note 90 4 11 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 11 90 16 2 arch/arm/mm/dma-mapping.c:524 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg/f:SI 12 ip [orig:141 cpu_cache.dma_map_area ] [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 12 ip [orig:141 cpu_cache.dma_map_area ] [141])
        (nil)))

(call_insn 16 11 94 2 arch/arm/mm/dma-mapping.c:524 (parallel [
            (call (mem:SI (symbol_ref:SI ("dma_cache_maint_page") [flags 0x3] <function_decl 0x1145ee00 dma_cache_maint_page>) [0 S4 A32])
                (const_int 8 [0x8]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 94 16 93 2 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:139 dir ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 93 94 92 2 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:138 size ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 92 93 91 2 ( off (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:137 off ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 91 92 63 2 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:136 page ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 63 91 23 2 arch/arm/mm/dma-mapping.c:526 (set (reg/f:SI 2 r2 [142])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn 23 63 58 2 arch/arm/mm/dma-mapping.c:527 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:139 dir ] [139])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 58 23 18 2 (set (reg/f:SI 3 r3 [152])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(insn:TI 18 58 27 2 arch/arm/mm/dma-mapping.c:526 (set (reg/f:SI 0 r0 [orig:144 mem_map ] [144])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [142]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 2 r2 [142])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn:TI 27 18 19 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:45 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [orig:134 D.25126 ] [134])
            (mem/s/f/j/c:SI (reg/f:SI 3 r3 [152]) [0 outer_cache.inv_range+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>) [0 outer_cache.inv_range+0 S4 A32])
        (nil)))

(insn:TI 19 27 40 2 arch/arm/mm/dma-mapping.c:526 (set (reg:SI 0 r0 [143])
        (minus:SI (reg/v/f:SI 6 r6 [orig:136 page ] [136])
            (reg/f:SI 0 r0 [orig:144 mem_map ] [144]))) 28 {*arm_subsi3_insn} (nil))

(insn 40 19 20 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 3 r3 [orig:133 D.25129 ] [133])
            (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [152])
                    (const_int 4 [0x4])) [0 outer_cache.clean_range+0 S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
                        (const_int 4 [0x4]))) [0 outer_cache.clean_range+0 S4 A32])
            (nil))))

(insn:TI 20 40 41 2 arch/arm/mm/dma-mapping.c:526 (set (reg:SI 0 r0 [146])
        (ashiftrt:SI (reg:SI 0 r0 [143])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 0 r0 [143])
            (const_int 32 [0x20]))
        (nil)))

(insn 41 20 22 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:133 D.25129 ] [133])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 22 41 95 2 arch/arm/mm/dma-mapping.c:526 (set (reg/v:SI 0 r0 [orig:135 paddr ] [135])
        (plus:SI (mult:SI (reg:SI 0 r0 [146])
                (const_int 4096 [0x1000]))
            (reg/v:SI 5 r5 [orig:137 off ] [137]))) 270 {*arith_shiftsi} (nil))

(note 95 22 42 2 ( paddr (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:135 paddr ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 42 95 43 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:50 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 53)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 2403 [0x963])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [76.0%]  (fallthru)
;; Succ edge  4 [24.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 0 [r0] 3 [r3] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [76.0%]  (fallthru)
(note 43 42 44 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 44 43 46 3 NOTE_INSN_DELETED)

(insn:TI 46 44 96 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (set (reg:SI 1 r1)
        (plus:SI (reg:SI 0 r0)
            (reg/v:SI 4 r4 [orig:138 size ] [138]))) 4 {*arm_addsi3} (nil))

(note 96 46 47 3 ( paddr (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 47 96 97 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:51 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:133 D.25129 ] [133]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:133 D.25129 ] [133])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

(note 97 47 53 4 ( paddr (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:135 paddr ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [24.0%] 
(code_label 53 97 56 4 94 "" [1 uses])

(note 56 53 68 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(note 68 56 69 4 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 69 68 70 4 arch/arm/mm/dma-mapping.c:533 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 70 69 62)

(note 62 70 65 NOTE_INSN_DELETED)

(note 65 62 0 NOTE_INSN_DELETED)


;; Function dma_sync_sg_for_device (dma_sync_sg_for_device)[0:1292]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])


Basic block 3:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])


Basic block 4:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])

OUT:
Stack adjustment: 24
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])


Basic block 5:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])

OUT:
Stack adjustment: 24
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])


Basic block 6:
IN:
Stack adjustment: 24
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])

OUT:
Stack adjustment: 24
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])


Basic block 7:
IN:
Stack adjustment: 24
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])

OUT:
Stack adjustment: 24
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])


Basic block 8:
IN:
Stack adjustment: 24
Reg 1: sg+0
Reg 2: nents+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])

OUT:
Stack adjustment: 24
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])


Basic block 9:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])


Basic block 10:
IN:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 24
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: dir+0
Reg 7: nents+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:135 s ] [135])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:134 i ] [134])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 7 r7 [orig:138 nents ] [138])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 6 r6 [orig:139 dir ] [139])
      (reg:SI 3 r3 [ dir ])


11 basic blocks, 12 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 308, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 308, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	

Successors:  9 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 9700, maybe hot.
Predecessors:  9 [97.0%] 
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  4 [0.0%]  (fallthru,loop_exit) 5 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 4.
Predecessors:  3 [0.0%]  (fallthru,loop_exit)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  7 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 9696, maybe hot.
Predecessors:  3 [100.0%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

Successors:  6 [0.0%]  (fallthru,loop_exit) 8 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 4.
Predecessors:  5 [0.0%]  (fallthru,loop_exit)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 8.
Predecessors:  6 [100.0%]  (fallthru) 4 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors: 
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 1, count 0, freq 9692, maybe hot.
Predecessors:  5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

Successors:  9 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  8 [100.0%]  (fallthru,dfs_back) 2 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  3 [97.0%]  10 [3.0%]  (fallthru,loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 10 , prev 9, next 1, loop_depth 0, count 0, freq 300, maybe hot.
Predecessors:  9 [3.0%]  (fallthru,loop_exit)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


Basic block 1 , prev 10, loop_depth 0, count 0, freq 300, maybe hot.
Predecessors:  10 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_sync_sg_for_device

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={9d,6u} r1={7d,3u} r2={5d,2u} r3={6d,3u,1d} r4={3d,7u,1d} r5={3d,4u} r6={2d,3u} r7={2d,3u} r8={2d,3u} r12={3d} r13={2d,14u} r14={4d,2u} r15={3d} r16={3d} r17={3d} r18={3d} r19={3d} r20={3d} r21={3d} r22={3d} r23={3d} r24={6d,3u} r27={3d} r28={3d} r29={3d} r30={3d} r31={3d} r32={3d} r33={3d} r34={3d} r35={3d} r36={3d} r37={3d} r38={3d} r39={3d} r40={3d} r41={3d} r42={3d} r43={3d} r44={3d} r45={3d} r46={3d} r47={3d} r48={3d} r49={3d} r50={3d} r51={3d} r52={3d} r53={3d} r54={3d} r55={3d} r56={3d} r57={3d} r58={3d} r59={3d} r60={3d} r61={3d} r62={3d} r63={3d} r64={3d} r65={3d} r66={3d} r67={3d} r68={3d} r69={3d} r70={3d} r71={3d} r72={3d} r73={3d} r74={3d} r75={3d} r76={3d} r77={3d} r78={3d} r79={3d} r80={3d} r81={3d} r82={3d} r83={3d} r84={3d} r85={3d} r86={3d} r87={3d} r88={3d} r89={3d} r90={3d} r91={3d} r92={3d} r93={3d} r94={3d} r95={3d} r96={3d} r97={3d} r98={3d} r99={3d} r100={3d} r101={3d} r102={3d} r103={3d} r104={3d} r105={3d} r106={3d} r107={3d} r108={3d} r109={3d} r110={3d} r111={3d} r112={3d} r113={3d} r114={3d} r115={3d} r116={3d} r117={3d} r118={3d} r119={3d} r120={3d} r121={3d} r122={3d} r123={3d} r124={3d} r125={3d} r126={3d} r127={3d} 
;;    total ref usage 439{384d,53u,2e} in 31{28 regular + 3 call} insns.
(note 1 0 88 NOTE_INSN_DELETED)

(note 88 1 89 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 89 88 90 2 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 90 89 91 2 ( nents (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ nents ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 91 90 7 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  in  	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 91 3 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 3 7 6 2 NOTE_INSN_DELETED)

(note 6 3 68 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 68 6 69 2 arch/arm/mm/dma-mapping.c:654 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 8 r8)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -24 [0xffffffffffffffe8])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 8 r8))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 20 [0x14])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(note 69 68 4 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 4 69 5 2 arch/arm/mm/dma-mapping.c:654 (set (reg/v:SI 7 r7 [orig:138 nents ] [138])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ nents ])
        (nil)))

(insn:TI 5 4 9 2 arch/arm/mm/dma-mapping.c:654 (set (reg/v:SI 6 r6 [orig:139 dir ] [139])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ dir ])
        (nil)))

(insn 9 5 92 2 arch/arm/mm/dma-mapping.c:658 (set (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ sg ])
        (nil)))

(note 92 9 10 2 ( s (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:135 s ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 92 93 2 arch/arm/mm/dma-mapping.c:658 (set (reg/v:SI 5 r5 [orig:134 i ] [134])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 93 10 14 2 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:134 i ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 14 93 84 2 include/linux/scatterlist.h:96 (set (reg:SI 8 r8 [146])
        (const_int -2023406815 [0xffffffff87654321])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -2023406815 [0xffffffff87654321])
        (nil)))

(jump_insn 84 14 85 2 arch/arm/mm/dma-mapping.c:658 (set (pc)
        (label_ref 48)) -1 (nil))
;; End of basic block 2 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  9 [100.0%] 

(barrier 85 84 94)

(note 94 85 95 3 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:138 nents ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 95 94 50 3 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:139 dir ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 9) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 8 [r8] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  9 [97.0%] 
(code_label 50 95 13 3 104 "" [1 uses])

(note 13 50 15 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 15 13 16 3 include/linux/scatterlist.h:96 (set (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
        (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135]) [0 <variable>.sg_magic+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135]) [0 <variable>.sg_magic+0 S4 A32])
        (nil)))

(insn:TI 16 15 17 3 include/linux/scatterlist.h:96 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
            (reg:SI 8 r8 [146]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
        (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [orig:141 <variable>.sg_magic ] [141])
                (const_int -2023406815 [0xffffffff87654321]))
            (nil))))

(jump_insn:TI 17 16 18 3 include/linux/scatterlist.h:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 3 -> ( 4 5)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  4 [0.0%]  (fallthru,loop_exit)
;; Succ edge  5 [100.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  3 [0.0%]  (fallthru,loop_exit)
(note 18 17 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 18 96 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(note 96 20 21 4 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(insn 21 96 97 4 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 1 r1)
        (const_int 96 [0x60])) 167 {*arm_movsi_insn} (nil))

(note 97 21 86 4 ( sg (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 86 97 87 4 (set (pc)
        (label_ref 76)) -1 (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 87 86 98)

(note 98 87 99 5 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 99 98 24 5 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 3) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  3 [100.0%] 
(code_label 24 99 25 5 102 "" [1 uses])

(note 25 24 27 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 27 25 26 5 NOTE_INSN_DELETED)

(insn:TI 26 27 100 5 include/linux/scatterlist.h:97 (set (reg:SI 0 r0 [orig:133 D.25143 ] [133])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 4 [0x4])) [0 <variable>.page_link+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 100 26 28 5 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 28 100 29 5 include/linux/scatterlist.h:97 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg:SI 0 r0 [orig:133 D.25143 ] [133])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 29 28 30 5 include/linux/scatterlist.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 36)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru,loop_exit)
;; Succ edge  8 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  5 [0.0%]  (fallthru,loop_exit)
(note 30 29 32 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 32 30 33 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 33 32 101 6 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 1 r1)
        (const_int 97 [0x61])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 101 33 76 7 ( sg (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 4) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
(code_label 76 101 74 7 106 "" [1 uses])

(note 74 76 34 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 34 74 35 7 include/linux/scatterlist.h:97 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 35 34 102)

(note 102 35 103 8 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 103 102 36 8 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:138 nents ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  5 [100.0%] 
(code_label 36 103 37 8 103 "" [1 uses])

(note 37 36 38 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 38 37 40 8 NOTE_INSN_DELETED)

(insn:TI 40 38 104 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 8 [0x8])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 104 40 39 8 ( sg (nil)) NOTE_INSN_VAR_LOCATION)

(insn 39 104 41 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 0 r0)
        (and:SI (reg:SI 0 r0 [orig:133 D.25143 ] [133])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 41 39 42 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:135 s ] [135])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 42 41 43 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 3 r3)
        (reg/v:SI 6 r6 [orig:139 dir ] [139])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 43 42 45 8 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_cpu_to_dev") [flags 0x3] <function_decl 0x11060e00 ___dma_page_cpu_to_dev>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 45 43 46 8 arch/arm/mm/dma-mapping.c:658 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:135 s ] [135])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (nil)))

(call_insn:TI 46 45 44 8 arch/arm/mm/dma-mapping.c:658 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 44 46 47 8 arch/arm/mm/dma-mapping.c:658 (set (reg/v:SI 5 r5 [orig:134 i ] [134])
        (plus:SI (reg/v:SI 5 r5 [orig:134 i ] [134])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 47 44 105 8 arch/arm/mm/dma-mapping.c:658 (set (reg/v/f:SI 4 r4 [orig:135 s ] [135])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru,dfs_back)

(note 105 47 106 9 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 106 105 107 9 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 107 106 108 9 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:138 nents ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 108 107 48 9 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:139 dir ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 2) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru,dfs_back)
;; Pred edge  2 [100.0%] 
(code_label 48 108 49 9 101 "" [1 uses])

(note 49 48 51 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 51 49 52 9 arch/arm/mm/dma-mapping.c:658 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:134 i ] [134])
            (reg/v:SI 7 r7 [orig:138 nents ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 52 51 72 9 arch/arm/mm/dma-mapping.c:658 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9700 [0x25e4])
            (nil))))
;; End of basic block 9 -> ( 3 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  3 [97.0%] 
;; Succ edge  10 [3.0%]  (fallthru,loop_exit)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  9 [3.0%]  (fallthru,loop_exit)
(note 72 52 70 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 70 72 71 10 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 71 70 73 10 arch/arm/mm/dma-mapping.c:668 (return) 260 {return} (nil))
;; End of basic block 10 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 73 71 65)

(note 65 73 66 NOTE_INSN_DELETED)

(note 66 65 0 NOTE_INSN_DELETED)


;; Function dma_map_sg (dma_map_sg)[0:1289]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: sg
    offset 0
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])


Basic block 3:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])


Basic block 4:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
      (reg:SI 1 r1 [ sg ])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 48
Reg 2: nents+0
Reg 3: dir+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])


Basic block 5:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 48
Reg 1: sg+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 6:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])

OUT:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 7:
IN:
Stack adjustment: 48
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 8:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])

OUT:
Stack adjustment: 48
Reg 1: sg+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 9:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])

OUT:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 10:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])

OUT:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 11:
IN:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])

OUT:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: j+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: j
    offset 0
      (reg/v:SI 6 r6 [orig:137 j ] [137])


Basic block 12:
IN:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])

OUT:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 13:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])


Basic block 14:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:139 s ] [139])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])


Basic block 15:
IN:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: j+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: j
    offset 0
      (reg/v:SI 6 r6 [orig:137 j ] [137])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])

OUT:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: j+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: j
    offset 0
      (reg/v:SI 6 r6 [orig:137 j ] [137])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 16:
IN:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: j+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: j
    offset 0
      (reg/v:SI 6 r6 [orig:137 j ] [137])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])

OUT:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: j+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: j
    offset 0
      (reg/v:SI 6 r6 [orig:137 j ] [137])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 17:
IN:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: j+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: j
    offset 0
      (reg/v:SI 6 r6 [orig:137 j ] [137])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])

OUT:
Stack adjustment: 48
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])


Basic block 18:
IN:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])

OUT:
Stack adjustment: 48
Reg 1: sg+0
Reg 2: nents+0
Reg 3: dir+0
Reg 4: s+0
Reg 5: i+0
Reg 6: nents+0
Reg 7: dir+0
Reg 11: sg+0
Variables:
  name: s
    offset 0
      (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
  name: i
    offset 0
      (reg/v:SI 5 r5 [orig:138 i ] [138])
  name: sg
    offset 0
      (reg/v/f:SI 11 fp [orig:144 sg ] [144])
      (reg/f:SI 1 r1 [orig:144 sg ] [144])
  name: nents
    offset 0
      (reg/v:SI 6 r6 [orig:145 nents ] [145])
      (reg:SI 2 r2 [ nents ])
  name: dir
    offset 0
      (reg/v:SI 7 r7 [orig:146 dir ] [146])
      (reg:SI 3 r3 [ dir ])


19 basic blocks, 23 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 453, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 453, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 6 [r6] 7 [r7] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	

Successors:  4 [0.0%]  3 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 453, maybe hot.
Predecessors:  2 [100.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 9 [r9]
;; live  in  	 1 [r1] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 9 [r9]
;; live  kill	

Successors:  13 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 0.
Predecessors:  2 [0.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  7 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 9775, maybe hot.
Predecessors:  13 [97.8%] 
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

Successors:  6 [0.0%]  (fallthru,loop_exit) 8 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 4.
Predecessors:  5 [0.0%]  (fallthru,loop_exit)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  7 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 8.
Predecessors:  6 [100.0%]  (fallthru) 4 [100.0%]  9 [100.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors: 
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 1, count 0, freq 9771, maybe hot.
Predecessors:  5 [100.0%] 
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 8 [r8] 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 8 [r8] 10 [sl] 24 [cc]
;; live  kill	

Successors:  9 [0.0%]  (fallthru,loop_exit) 10 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 4.
Predecessors:  8 [0.0%]  (fallthru,loop_exit)
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

Successors:  7 [100.0%] 
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 1, count 0, freq 9767, maybe hot.
Predecessors:  8 [100.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

Successors:  11 [2.2%]  (fallthru,loop_exit) 12 [97.8%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 220, maybe hot.
Predecessors:  10 [2.2%]  (fallthru,loop_exit)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 11 [fp] 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 8 [r8]
;; live  in  	 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 8 [r8]
;; live  kill	

Successors:  16 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 12 , prev 11, next 13, loop_depth 1, count 0, freq 9547, maybe hot.
Predecessors:  10 [97.8%] 
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

Successors:  13 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  12 [100.0%]  (fallthru,dfs_back) 3 [100.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  5 [97.8%]  14 [2.2%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 225, maybe hot.
Predecessors:  13 [2.2%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}

Successors:  18 [100.0%] 


Basic block 15 , prev 14, next 16, loop_depth 1, count 0, freq 2222, maybe hot.
Predecessors:  16 [91.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip]
;; live  kill	 14 [lr]

Successors:  16 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 16 , prev 15, next 17, loop_depth 1, count 0, freq 2442, maybe hot.
Predecessors:  15 [100.0%]  (fallthru,dfs_back) 11 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  15 [91.0%]  17 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 220, maybe hot.
Predecessors:  16 [9.0%]  (fallthru,loop_exit)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

Successors:  18 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 18 , prev 17, next 1, loop_depth 0, count 0, freq 445, maybe hot.
Predecessors:  17 [100.0%]  (fallthru) 14 [100.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 1 , prev 18, loop_depth 0, count 0, freq 445, maybe hot.
Predecessors:  18 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_map_sg

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={15d,11u} r1={12d,7u} r2={9d,5u} r3={10d,6u,1d} r4={5d,11u,2d} r5={3d,5u} r6={5d,6u} r7={2d,4u} r8={3d,4u,1d} r9={2d,3u,1d} r10={5d,9u,1d} r11={2d,3u} r12={10d,8u} r13={2d,26u} r14={6d,2u} r15={5d} r16={5d} r17={5d} r18={5d} r19={5d} r20={5d} r21={5d} r22={5d} r23={5d} r24={11d,6u} r27={5d} r28={5d} r29={5d} r30={5d} r31={5d} r32={5d} r33={5d} r34={5d} r35={5d} r36={5d} r37={5d} r38={5d} r39={5d} r40={5d} r41={5d} r42={5d} r43={5d} r44={5d} r45={5d} r46={5d} r47={5d} r48={5d} r49={5d} r50={5d} r51={5d} r52={5d} r53={5d} r54={5d} r55={5d} r56={5d} r57={5d} r58={5d} r59={5d} r60={5d} r61={5d} r62={5d} r63={5d} r64={5d} r65={5d} r66={5d} r67={5d} r68={5d} r69={5d} r70={5d} r71={5d} r72={5d} r73={5d} r74={5d} r75={5d} r76={5d} r77={5d} r78={5d} r79={5d} r80={5d} r81={5d} r82={5d} r83={5d} r84={5d} r85={5d} r86={5d} r87={5d} r88={5d} r89={5d} r90={5d} r91={5d} r92={5d} r93={5d} r94={5d} r95={5d} r96={5d} r97={5d} r98={5d} r99={5d} r100={5d} r101={5d} r102={5d} r103={5d} r104={5d} r105={5d} r106={5d} r107={5d} r108={5d} r109={5d} r110={5d} r111={5d} r112={5d} r113={5d} r114={5d} r115={5d} r116={5d} r117={5d} r118={5d} r119={5d} r120={5d} r121={5d} r122={5d} r123={5d} r124={5d} r125={5d} r126={5d} r127={5d} 
;;    total ref usage 774{652d,116u,6e} in 72{67 regular + 5 call} insns.
(note 1 0 195 NOTE_INSN_DELETED)

(note 195 1 196 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 196 195 197 2 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 197 196 198 2 ( nents (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ nents ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 198 197 7 2 ( dir (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dir ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 6 [r6] 7 [r7] 11 [fp] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 6 [r6] 7 [r7] 11 [fp] 13 [sp] 24 [cc]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 198 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 9 6 158 2 arch/arm/mm/dma-mapping.c:578 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:146 dir ] [146])
            (const_int 2 [0x2]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:146 dir ] [146])
        (nil)))

(insn/f:TI 158 9 201 2 arch/arm/mm/dma-mapping.c:574 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 11 fp)
        (expr_list:REG_DEAD (reg:SI 9 r9)
            (expr_list:REG_DEAD (reg:SI 7 r7)
                (expr_list:REG_DEAD (reg:SI 6 r6)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_DEAD (reg:SI 0 r0)
                                (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                            (set/f (reg/f:SI 13 sp)
                                                (plus:SI (reg/f:SI 13 sp)
                                                    (const_int -48 [0xffffffffffffffd0])))
                                            (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                                (reg:SI 0 r0))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 4 [0x4])) [0 S4 A32])
                                                (reg:SI 1 r1))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 8 [0x8])) [0 S4 A32])
                                                (reg:SI 2 r2))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 12 [0xc])) [0 S4 A32])
                                                (reg:SI 4 r4))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 16 [0x10])) [0 S4 A32])
                                                (reg:SI 5 r5))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 20 [0x14])) [0 S4 A32])
                                                (reg:SI 6 r6))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 24 [0x18])) [0 S4 A32])
                                                (reg:SI 7 r7))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 28 [0x1c])) [0 S4 A32])
                                                (reg:SI 8 r8))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 32 [0x20])) [0 S4 A32])
                                                (reg:SI 9 r9))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 36 [0x24])) [0 S4 A32])
                                                (reg:SI 10 sl))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 40 [0x28])) [0 S4 A32])
                                                (reg:SI 11 fp))
                                            (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                        (const_int 44 [0x2c])) [0 S4 A32])
                                                (reg:SI 14 lr))
                                        ])
                                    (nil))))))))))

(note 201 158 200 2 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(note 200 201 199 2 ( sg (nil)) NOTE_INSN_VAR_LOCATION)

(note 199 200 159 2 ( nents (nil)) NOTE_INSN_VAR_LOCATION)

(note 159 199 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 159 3 2 arch/arm/mm/dma-mapping.c:574 (set (reg/v:SI 7 r7 [orig:146 dir ] [146])
        (reg:SI 3 r3 [ dir ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 3 5 202 2 arch/arm/mm/dma-mapping.c:574 (set (reg/v/f:SI 11 fp [orig:144 sg ] [144])
        (reg:SI 1 r1 [ sg ])) 167 {*arm_movsi_insn} (nil))

(note 202 3 4 2 ( sg (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ sg ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 4 202 203 2 arch/arm/mm/dma-mapping.c:574 (set (reg/v:SI 6 r6 [orig:145 nents ] [145])
        (reg:SI 2 r2 [ nents ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ nents ])
        (nil)))

(note 203 4 10 2 ( nents (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ nents ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 10 203 204 2 arch/arm/mm/dma-mapping.c:578 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 16)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 2 -> ( 4 3)
;; lr  out 	 1 [r1] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  4 [0.0%] 
;; Succ edge  3 [100.0%]  (fallthru)

(note 204 10 205 3 ( sg (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 205 204 206 3 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:145 nents ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 206 205 11 3 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:146 dir ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 13 [sp]
;; lr  def 	 4 [r4] 5 [r5] 9 [r9]
;; live  in  	 1 [r1] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 9 [r9]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
(note 11 206 25 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 25 11 12 3 NOTE_INSN_DELETED)

(insn:TI 12 25 207 3 arch/arm/mm/dma-mapping.c:578 (set (reg/v/f:SI 4 r4 [orig:139 s ] [139])
        (reg/f:SI 1 r1 [orig:144 sg ] [144])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [orig:144 sg ] [144])
        (nil)))

(note 207 12 13 3 ( s (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:139 s ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 13 207 208 3 arch/arm/mm/dma-mapping.c:578 (set (reg/v:SI 5 r5 [orig:138 i ] [138])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 208 13 56 3 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:138 i ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 56 208 184 3 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg/f:SI 9 r9 [170])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(jump_insn 184 56 185 3 (set (pc)
        (label_ref 76)) -1 (nil))
;; End of basic block 3 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  13 [100.0%] 

(barrier 185 184 209)

(note 209 185 210 4 ( s (nil)) NOTE_INSN_VAR_LOCATION)

(note 210 209 16 4 ( i (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  2 [0.0%] 
(code_label 16 210 17 4 110 "" [1 uses])

(note 17 16 20 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 20 17 21 4 arch/arm/mm/dma-mapping.c:578 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 21 20 186 4 arch/arm/mm/dma-mapping.c:578 discrim 1 (set (reg:SI 1 r1)
        (const_int 578 [0x242])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 578 [0x242])
        (nil)))

(jump_insn 186 21 187 4 (set (pc)
        (label_ref 165)) -1 (nil))
;; End of basic block 4 -> ( 7)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 187 186 211)

(note 211 187 212 5 ( sg (expr_list:REG_DEP_TRUE (reg/f:SI 1 r1 [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 212 211 213 5 ( s (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:139 s ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 213 212 78 5 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:138 i ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 13) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  13 [97.8%] 
(code_label 78 213 24 5 116 "" [1 uses])

(note 24 78 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(insn:TI 26 24 155 5 include/linux/scatterlist.h:96 (set (reg:SI 3 r3 [orig:150 <variable>.sg_magic ] [150])
        (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139]) [0 <variable>.sg_magic+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139]) [0 <variable>.sg_magic+0 S4 A32])
        (nil)))

(insn:TI 155 26 27 5 include/linux/scatterlist.h:96 (set (reg:SI 2 r2)
        (const_int -2023406815 [0xffffffff87654321])) 167 {*arm_movsi_insn} (nil))

(insn:TI 27 155 28 5 include/linux/scatterlist.h:96 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:150 <variable>.sg_magic ] [150])
            (reg:SI 2 r2))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:150 <variable>.sg_magic ] [150])
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_EQUAL (compare:CC (reg:SI 3 r3 [orig:150 <variable>.sg_magic ] [150])
                    (const_int -2023406815 [0xffffffff87654321]))
                (nil)))))

(jump_insn:TI 28 27 29 5 include/linux/scatterlist.h:96 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 5 -> ( 6 8)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]


;; Succ edge  6 [0.0%]  (fallthru,loop_exit)
;; Succ edge  8 [100.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  5 [0.0%]  (fallthru,loop_exit)
(note 29 28 31 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 31 29 32 6 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 32 31 214 6 include/linux/scatterlist.h:96 discrim 1 (set (reg:SI 1 r1)
        (const_int 96 [0x60])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 6 -> ( 7)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


;; Succ edge  7 [100.0%]  (fallthru)

(note 214 32 215 7 ( sg (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 215 214 216 7 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:145 nents ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 216 215 165 7 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:146 dir ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 6 4 9) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  6 [100.0%]  (fallthru)
;; Pred edge  4 [100.0%] 
;; Pred edge  9 [100.0%] 
(code_label 165 216 163 7 120 "" [2 uses])

(note 163 165 33 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 33 163 34 7 include/linux/scatterlist.h:96 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 7 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 34 33 217)

(note 217 34 35 8 ( sg (expr_list:REG_DEP_TRUE (reg/f:SI 1 r1 [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 8 [r8] 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 8 [r8] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  5 [100.0%] 
(code_label 35 217 36 8 112 "" [1 uses])

(note 36 35 38 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(note 38 36 37 8 NOTE_INSN_DELETED)

(insn:TI 37 38 39 8 include/linux/scatterlist.h:97 (set (reg:SI 10 sl [orig:135 D.25174 ] [135])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                (const_int 4 [0x4])) [0 <variable>.page_link+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 39 37 40 8 include/linux/scatterlist.h:97 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (and:SI (reg:SI 10 sl [orig:135 D.25174 ] [135])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg:SI 8 r8 [152])
                (and:SI (reg:SI 10 sl [orig:135 D.25174 ] [135])
                    (const_int 1 [0x1])))
        ]) 69 {*andsi3_compare0} (nil))

(jump_insn:TI 40 39 41 8 include/linux/scatterlist.h:97 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 47)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 8 -> ( 9 10)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [0.0%]  (fallthru,loop_exit)
;; Succ edge  10 [100.0%] 

;; Start of basic block ( 8) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	

;; Pred edge  8 [0.0%]  (fallthru,loop_exit)
(note 41 40 43 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 43 41 44 9 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC3") [flags 0x82] <string_cst 0x114dd9c0>)
        (nil)))

(insn 44 43 218 9 include/linux/scatterlist.h:97 discrim 1 (set (reg:SI 1 r1)
        (const_int 97 [0x61])) 167 {*arm_movsi_insn} (nil))

(note 218 44 188 9 ( sg (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 188 218 189 9 (set (pc)
        (label_ref 165)) -1 (nil))
;; End of basic block 9 -> ( 7)
;; lr  out 	 0 [r0] 1 [r1] 13 [sp]
;; live  out 	 0 [r0] 1 [r1] 13 [sp]


;; Succ edge  7 [100.0%] 

(barrier 189 188 219)

(note 219 189 47 10 ( sg (expr_list:REG_DEP_TRUE (reg/f:SI 1 r1 [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  8 [100.0%] 
(code_label 47 219 48 10 113 "" [1 uses])

(note 48 47 60 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(note 60 48 50 10 NOTE_INSN_DELETED)

(insn:TI 50 60 49 10 arch/arm/mm/dma-mapping.c:581 (set (reg:SI 12 ip [orig:141 D.24869 ] [141])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                (const_int 8 [0x8])) [0 <variable>.offset+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 49 50 51 10 include/linux/scatterlist.h:99 (set (reg/f:SI 10 sl [orig:136 D.25168 ] [136])
        (and:SI (reg:SI 10 sl [orig:135 D.25174 ] [135])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 51 49 53 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 0 r0)
        (reg/f:SI 10 sl [orig:136 D.25168 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 53 51 52 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 52 53 220 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 1 r1)
        (reg:SI 12 ip [orig:141 D.24869 ] [141])) 167 {*arm_movsi_insn} (nil))

(note 220 52 54 10 ( sg (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 54 220 153 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (reg:SI 3 r3)
        (reg/v:SI 7 r7 [orig:146 dir ] [146])) 167 {*arm_movsi_insn} (nil))

(insn:TI 153 54 55 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip)
        (nil)))

(call_insn 55 153 57 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:105 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_cpu_to_dev") [flags 0x3] <function_decl 0x11060e00 ___dma_page_cpu_to_dev>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 57 55 154 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg/f:SI 3 r3 [orig:156 mem_map ] [156])
        (mem/f/c/i:SI (reg/f:SI 9 r9 [170]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 9 r9 [170]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn:TI 154 57 58 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 58 154 59 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 10 sl [155])
        (minus:SI (reg/f:SI 10 sl [orig:136 D.25168 ] [136])
            (reg/f:SI 3 r3 [orig:156 mem_map ] [156]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:156 mem_map ] [156])
        (nil)))

(insn:TI 59 58 61 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 10 sl [158])
        (ashiftrt:SI (reg:SI 10 sl [155])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 10 sl [155])
            (const_int 32 [0x20]))
        (nil)))

(insn:TI 61 59 62 10 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:282 (set (reg:SI 12 ip [orig:134 D.25188 ] [134])
        (plus:SI (mult:SI (reg:SI 10 sl [158])
                (const_int 4096 [0x1000]))
            (reg:SI 12 ip [orig:141 D.24869 ] [141]))) 270 {*arith_shiftsi} (nil))

(insn 62 61 63 10 arch/arm/mm/dma-mapping.c:581 (set (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:139 s ] [139])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])
        (reg:SI 12 ip [orig:134 D.25188 ] [134])) 167 {*arm_movsi_insn} (nil))

(insn:TI 63 62 64 10 arch/arm/mm/dma-mapping.c:583 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 12 ip [orig:134 D.25188 ] [134])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [orig:134 D.25188 ] [134])
        (nil)))

(jump_insn:TI 64 63 65 10 arch/arm/mm/dma-mapping.c:583 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 70)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
            (nil))))
;; End of basic block 10 -> ( 11 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  11 [2.2%]  (fallthru,loop_exit)
;; Succ edge  12 [97.8%] 

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 8 [r8] 11 [fp] 13 [sp]
;; lr  def 	 4 [r4] 6 [r6] 8 [r8]
;; live  in  	 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 4 [r4] 6 [r6] 8 [r8]
;; live  kill	

;; Pred edge  10 [2.2%]  (fallthru,loop_exit)
(note 65 64 67 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 67 65 221 11 arch/arm/mm/dma-mapping.c:583 (set (reg/v:SI 6 r6 [orig:137 j ] [137])
        (reg:SI 8 r8 [152])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 8 r8 [152])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(note 221 67 222 11 ( nents (nil)) NOTE_INSN_VAR_LOCATION)

(note 222 221 66 11 ( j (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:137 j ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 66 222 223 11 arch/arm/mm/dma-mapping.c:583 (set (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
        (reg/v/f:SI 11 fp [orig:144 sg ] [144])) 167 {*arm_movsi_insn} (nil))

(note 223 66 86 11 ( s (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 86 223 190 11 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 8 r8 [168])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(jump_insn 190 86 191 11 (set (pc)
        (label_ref 102)) -1 (nil))
;; End of basic block 11 -> ( 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  16 [100.0%] 

(barrier 191 190 224)

(note 224 191 225 12 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:145 nents ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 225 224 70 12 ( j (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 10) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  10 [97.8%] 
(code_label 70 225 71 12 114 "" [1 uses])

(note 71 70 73 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 73 71 72 12 arch/arm/mm/dma-mapping.c:580 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:139 s ] [139])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:139 s ] [139])
        (nil)))

(insn 72 73 226 12 arch/arm/mm/dma-mapping.c:580 (set (reg/v:SI 5 r5 [orig:138 i ] [138])
        (plus:SI (reg/v:SI 5 r5 [orig:138 i ] [138])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(note 226 72 74 12 ( i (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:138 i ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 74 226 75 12 arch/arm/mm/dma-mapping.c:580 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 75 74 227 12 arch/arm/mm/dma-mapping.c:580 (set (reg/v/f:SI 4 r4 [orig:139 s ] [139])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 12 -> ( 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru,dfs_back)

(note 227 75 228 13 ( s (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:139 s ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 228 227 229 13 ( sg (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 229 228 230 13 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:145 nents ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 230 229 76 13 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:146 dir ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 12 3) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru,dfs_back)
;; Pred edge  3 [100.0%] 
(code_label 76 230 77 13 111 "" [1 uses])

(note 77 76 79 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(insn:TI 79 77 80 13 arch/arm/mm/dma-mapping.c:580 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 5 r5 [orig:138 i ] [138])
            (reg/v:SI 6 r6 [orig:145 nents ] [145]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 80 79 231 13 arch/arm/mm/dma-mapping.c:580 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 78)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9775 [0x262f])
            (nil))))
;; End of basic block 13 -> ( 5 14)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  5 [97.8%] 
;; Succ edge  14 [2.2%]  (fallthru)

(note 231 80 192 14 ( sg (expr_list:REG_DEP_TRUE (reg/f:SI 1 r1 [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}

;; Pred edge  13 [2.2%]  (fallthru)
(note 192 231 193 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(jump_insn 193 192 194 14 (set (pc)
        (label_ref 109)) -1 (nil))
;; End of basic block 14 -> ( 18)


;; Succ edge  18 [100.0%] 

(barrier 194 193 232)

(note 232 194 233 15 ( sg (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 233 232 234 15 ( nents (nil)) NOTE_INSN_VAR_LOCATION)

(note 234 233 235 15 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:146 dir ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 235 234 104 15 ( j (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:137 j ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 16) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  16 [91.0%] 
(code_label 104 235 84 15 118 "" [1 uses])

(note 84 104 88 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 88 84 90 15 NOTE_INSN_DELETED)

(note 90 88 92 15 NOTE_INSN_DELETED)

(note 92 90 85 15 NOTE_INSN_DELETED)

(insn:TI 85 92 96 15 arch/arm/mm/dma-mapping.c:591 (set (reg:SI 12 ip [orig:140 D.24872 ] [140])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
                (const_int 16 [0x10])) [0 <variable>.dma_address+0 S4 A32])
        (nil)))

(insn 96 85 89 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 3 r3)
        (reg/v:SI 7 r7 [orig:146 dir ] [146])) 167 {*arm_movsi_insn} (nil))

(insn:TI 89 96 98 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg/f:SI 0 r0 [orig:164 mem_map ] [164])
        (mem/f/c/i:SI (reg/f:SI 8 r8 [168]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 8 r8 [168]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 98 89 236 15 arch/arm/mm/dma-mapping.c:590 discrim 2 (set (reg/v:SI 6 r6 [orig:137 j ] [137])
        (plus:SI (reg/v:SI 6 r6 [orig:137 j ] [137])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(note 236 98 95 15 ( j (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:137 j ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 95 236 91 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 2 r2)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
                (const_int 12 [0xc])) [0 <variable>.length+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 91 95 87 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1 [166])
        (ashift:SI (reg:SI 12 ip [orig:140 D.24872 ] [140])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 87 91 94 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 12 ip [161])
        (lshiftrt:SI (reg:SI 12 ip [orig:140 D.24872 ] [140])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 94 87 93 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 1 r1)
        (lshiftrt:SI (reg:SI 1 r1 [166])
            (const_int 20 [0x14]))) 117 {*arm_shiftsi3} (nil))

(insn 93 94 97 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (set (reg:SI 0 r0)
        (plus:SI (mult:SI (reg:SI 12 ip [161])
                (const_int 32 [0x20]))
            (reg/f:SI 0 r0 [orig:164 mem_map ] [164]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 12 ip [161])
        (nil)))

(call_insn:TI 97 93 99 15 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/dma-mapping.h:115 (parallel [
            (call (mem:SI (symbol_ref:SI ("___dma_page_dev_to_cpu") [flags 0x3] <function_decl 0x11060f80 ___dma_page_dev_to_cpu>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_DEAD (reg:SI 0 r0)
                    (expr_list:REG_EH_REGION (const_int 0 [0x0])
                        (nil))))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn 99 97 100 15 arch/arm/mm/dma-mapping.c:590 discrim 2 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
        (nil)))

(call_insn:TI 100 99 101 15 arch/arm/mm/dma-mapping.c:590 discrim 2 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("sg_next") [flags 0x41] <function_decl 0x1103bb00 sg_next>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn:TI 101 100 237 15 arch/arm/mm/dma-mapping.c:590 discrim 2 (set (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))
;; End of basic block 15 -> ( 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru,dfs_back)

(note 237 101 102 16 ( s (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:133 s.771 ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 15 11) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru,dfs_back)
;; Pred edge  11 [100.0%] 
(code_label 102 237 103 16 115 "" [1 uses])

(note 103 102 105 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 105 103 106 16 arch/arm/mm/dma-mapping.c:590 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 6 r6 [orig:137 j ] [137])
            (reg/v:SI 5 r5 [orig:138 i ] [138]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 106 105 107 16 arch/arm/mm/dma-mapping.c:590 discrim 1 (set (pc)
        (if_then_else (lt (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 104)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 16 -> ( 15 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 [91.0%] 
;; Succ edge  17 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 6 [r6]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 6 [r6]
;; live  kill	

;; Pred edge  16 [9.0%]  (fallthru,loop_exit)
(note 107 106 108 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 108 107 238 17 arch/arm/mm/dma-mapping.c:592 (set (reg/v:SI 6 r6 [orig:145 nents ] [145])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 17 -> ( 18)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  18 [100.0%]  (fallthru)

(note 238 108 239 18 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:145 nents ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 239 238 240 18 ( j (nil)) NOTE_INSN_VAR_LOCATION)

(note 240 239 241 18 ( sg (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:144 sg ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 241 240 242 18 ( nents (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:145 nents ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 242 241 109 18 ( dir (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:146 dir ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 17 14) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  17 [100.0%]  (fallthru)
;; Pred edge  14 [100.0%] 
(code_label 109 242 110 18 117 "" [1 uses])

(note 110 109 115 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 115 110 121 18 arch/arm/mm/dma-mapping.c:593 (set (reg/i:SI 0 r0)
        (reg/v:SI 6 r6 [orig:145 nents ] [145])) 167 {*arm_movsi_insn} (nil))

(insn 121 115 160 18 arch/arm/mm/dma-mapping.c:593 (use (reg/i:SI 0 r0)) -1 (nil))

(note 160 121 161 18 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 161 160 162 18 arch/arm/mm/dma-mapping.c:593 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 18 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 162 161 137)

(note 137 162 152 NOTE_INSN_DELETED)

(note 152 137 0 NOTE_INSN_DELETED)


;; Function dma_free_coherent (dma_free_coherent)[0:1283]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: size+0
Reg 2: cpu_addr+0
Reg 3: handle+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg:SI 1 r1 [ size ])
  name: cpu_addr
    offset 0
      (reg:SI 2 r2 [ cpu_addr ])
  name: handle
    offset 0
      (reg:SI 3 r3 [ handle ])

OUT:
Stack adjustment: 48
Reg 0: dev+0
Reg 1: size+0
Reg 2: cpu_addr+0
Reg 3: _flags+0
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
      (reg:SI 1 r1 [ size ])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
      (reg:SI 2 r2 [ cpu_addr ])
  name: _flags
    offset 0
      (reg/v:SI 3 r3 [orig:148 _flags ] [148])


Basic block 3:
IN:
Stack adjustment: 48
Reg 0: dev+0
Reg 1: size+0
Reg 2: cpu_addr+0
Reg 3: _flags+0
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
      (reg:SI 1 r1 [ size ])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
      (reg:SI 2 r2 [ cpu_addr ])
  name: _flags
    offset 0
      (reg/v:SI 3 r3 [orig:148 _flags ] [148])
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
      (reg:SI 0 r0 [ dev ])

OUT:
Stack adjustment: 48
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])


Basic block 4:
IN:
Stack adjustment: 48
Reg 0: dev+0
Reg 1: size+0
Reg 2: cpu_addr+0
Reg 3: _flags+0
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
      (reg:SI 1 r1 [ size ])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
      (reg:SI 2 r2 [ cpu_addr ])
  name: _flags
    offset 0
      (reg/v:SI 3 r3 [orig:148 _flags ] [148])
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
      (reg:SI 0 r0 [ dev ])

OUT:
Stack adjustment: 48
Reg 0: dev+0
Reg 1: order+0
Reg 2: cpu_addr+0
Reg 3: size+0
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
      (reg:SI 2 r2 [ cpu_addr ])
  name: size
    offset 0
      (reg/v:SI 3 r3 [orig:147 size ] [147])
  name: order
    offset 0
      (reg/v:SI 1 r1 [orig:146 order ] [146])
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
      (reg:SI 0 r0 [ dev ])


Basic block 5:
IN:
Stack adjustment: 48
Reg 0: dev+0
Reg 1: order+0
Reg 2: cpu_addr+0
Reg 3: size+0
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
      (reg:SI 2 r2 [ cpu_addr ])
  name: size
    offset 0
      (reg/v:SI 3 r3 [orig:147 size ] [147])
  name: order
    offset 0
      (reg/v:SI 1 r1 [orig:146 order ] [146])

OUT:
Stack adjustment: 48
Reg 0: dev+0
Reg 1: order+0
Reg 2: cpu_addr+0
Reg 3: size+0
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
      (reg:SI 2 r2 [ cpu_addr ])
  name: size
    offset 0
      (reg/v:SI 3 r3 [orig:147 size ] [147])
  name: order
    offset 0
      (reg/v:SI 1 r1 [orig:146 order ] [146])


Basic block 6:
IN:
Stack adjustment: 48
Reg 0: dev+0
Reg 1: order+0
Reg 2: cpu_addr+0
Reg 3: size+0
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
      (reg:SI 2 r2 [ cpu_addr ])
  name: size
    offset 0
      (reg/v:SI 3 r3 [orig:147 size ] [147])
  name: order
    offset 0
      (reg/v:SI 1 r1 [orig:146 order ] [146])

OUT:
Stack adjustment: 48
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])


Basic block 7:
IN:
Stack adjustment: 48
Reg 4: dev+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])


Basic block 8:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])


Basic block 9:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: cpu_addr+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: cpu_addr+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])


Basic block 10:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: cpu_addr+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 6: cpu_addr+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])


Basic block 11:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: cpu_addr+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 10: size+0
Variables:
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])


Basic block 12:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])


Basic block 13:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])


Basic block 14:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])


Basic block 15:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])


Basic block 16:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])

OUT:
Stack adjustment: 48
Reg 4: c+0
Reg 6: ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])


Basic block 17:
IN:
Stack adjustment: 48
Reg 4: c+0
Reg 5: size+0
Reg 6: cpu_addr+0 ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
  name: c
    offset 0
      (reg/v/f:SI 4 r4 [orig:141 c ] [141])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])

OUT:
Stack adjustment: 48
Reg 4: page+0
Reg 5: e+0
Reg 6: ptep+0 cpu_addr+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
  name: e
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 e ] [137])
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 page ] [138])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])


Basic block 18:
IN:
Stack adjustment: 48
Reg 4: page+0
Reg 5: e+0
Reg 6: cpu_addr+0 ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
  name: e
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 e ] [137])
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 page ] [138])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])

OUT:
Stack adjustment: 48
Reg 4: page+0
Reg 5: e+0
Reg 6: ptep+0 cpu_addr+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
  name: e
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 e ] [137])
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 page ] [138])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])


Basic block 19:
IN:
Stack adjustment: 48
Reg 4: page+0
Reg 5: e+0
Reg 6: cpu_addr+0 ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
  name: e
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 e ] [137])
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 page ] [138])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])

OUT:
Stack adjustment: 48
Reg 4: page+0
Reg 5: e+0
Reg 6: ptep+0 cpu_addr+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
  name: e
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 e ] [137])
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 page ] [138])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])


Basic block 20:
IN:
Stack adjustment: 48
Reg 4: dev+0 page+0
Reg 5: size+0 e+0
Reg 6: cpu_addr+0 ptep+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
  name: e
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 e ] [137])
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 page ] [138])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])

OUT:
Stack adjustment: 48
Reg 4: page+0 dev+0
Reg 5: e+0 size+0
Reg 6: ptep+0 cpu_addr+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: pte+0
Reg 10: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 10 sl [orig:135 size.827 ] [135])
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: cpu_addr
    offset 0
      (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
  name: e
    offset 0
      (reg/v/f:SI 5 r5 [orig:137 e ] [137])
  name: page
    offset 0
      (reg/v/f:SI 4 r4 [orig:138 page ] [138])
  name: ptep
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v:SI 9 r9 [orig:145 pte ] [145])
  name: dev
    offset 0
      (reg/v/f:SI 4 r4 [orig:151 dev ] [151])


21 basic blocks, 29 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

Successors:  3 [0.0%]  (fallthru) 4 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 1.
Predecessors:  2 [0.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  4 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors:  2 [100.0%]  3 [100.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

Successors:  5 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%]  (fallthru) 5 [86.0%]  (dfs_back)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

Successors:  5 [86.0%]  (dfs_back) 6 [14.0%]  (fallthru,loop_exit)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors:  5 [14.0%]  (fallthru,loop_exit)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

Successors:  20 [61.0%]  7 [39.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 546, maybe hot.
Predecessors:  6 [39.0%]  (fallthru)
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

Successors:  8 [0.0%]  (fallthru) 9 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 0.
Predecessors:  7 [0.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

Successors:  17 [100.0%] 
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 546, maybe hot.
Predecessors:  7 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  kill	

Successors:  11 [100.0%]  10 [0.0%]  (fallthru)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 10 [sl] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 0.
Predecessors:  9 [0.0%]  (fallthru)
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 10 [sl]
;; live  kill	 14 [lr]

Successors:  11 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]


Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 546, maybe hot.
Predecessors:  10 [100.0%]  (fallthru) 9 [100.0%] 
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 11 [fp]
;; live  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 11 [fp]
;; live  kill	

Successors:  12 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


Basic block 12 , prev 11, next 13, loop_depth 1, count 0, freq 3896, maybe hot.
Predecessors:  11 [100.0%]  (fallthru) 15 [86.0%]  (dfs_back)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

Successors:  14 [0.0%]  13 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 13 , prev 12, next 14, loop_depth 1, count 0, freq 3895, maybe hot.
Predecessors:  12 [100.0%]  (fallthru)
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  14 [0.0%]  (fallthru) 15 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 14 , prev 13, next 15, loop_depth 1, count 0, freq 3.
Predecessors:  12 [0.0%]  13 [0.0%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  15 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 15 , prev 14, next 16, loop_depth 1, count 0, freq 3896, maybe hot.
Predecessors:  13 [100.0%]  14 [100.0%]  (fallthru)
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 10 [sl] 24 [cc]
;; live  kill	

Successors:  12 [86.0%]  (dfs_back) 16 [14.0%]  (fallthru,loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 16 , prev 15, next 17, loop_depth 0, count 0, freq 546, maybe hot.
Predecessors:  15 [14.0%]  (fallthru,loop_exit)
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  17 [100.0%]  (fallthru)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 546, maybe hot.
Predecessors:  16 [100.0%]  (fallthru) 8 [100.0%] 
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

Successors:  19 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 18 , prev 17, next 19, loop_depth 1, count 0, freq 5518, maybe hot.
Predecessors:  19 [91.0%] 
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

Successors:  19 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 19 , prev 18, next 20, loop_depth 1, count 0, freq 6064, maybe hot.
Predecessors:  18 [100.0%]  (fallthru,dfs_back) 17 [100.0%] 
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

Successors:  18 [91.0%]  20 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 20 , prev 19, next 1, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors:  19 [9.0%]  (fallthru,loop_exit) 6 [61.0%] 
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 1 , prev 20, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors:  20 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_free_coherent

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={23d,15u} r1={24d,14u} r2={18d,8u} r3={24d,13u} r4={6d,16u,5d} r5={7d,12u,1d} r6={6d,10u} r7={4d,7u} r8={5d,9u,2d} r9={2d,4u} r10={5d,6u} r11={2d,3u} r12={12d} r13={2d,35u} r14={13d,2u} r15={12d} r16={12d} r17={12d} r18={12d} r19={12d} r20={12d} r21={12d} r22={12d} r23={12d} r24={23d,13u} r27={12d} r28={12d} r29={12d} r30={12d} r31={12d} r32={12d} r33={12d} r34={12d} r35={12d} r36={12d} r37={12d} r38={12d} r39={12d} r40={12d} r41={12d} r42={12d} r43={12d} r44={12d} r45={12d} r46={12d} r47={12d} r48={12d} r49={12d} r50={12d} r51={12d} r52={12d} r53={12d} r54={12d} r55={12d} r56={12d} r57={12d} r58={12d} r59={12d} r60={12d} r61={12d} r62={12d} r63={12d} r64={12d} r65={12d} r66={12d} r67={12d} r68={12d} r69={12d} r70={12d} r71={12d} r72={12d} r73={12d} r74={12d} r75={12d} r76={12d} r77={12d} r78={12d} r79={12d} r80={12d} r81={12d} r82={12d} r83={12d} r84={12d} r85={12d} r86={12d} r87={12d} r88={12d} r89={12d} r90={12d} r91={12d} r92={12d} r93={12d} r94={12d} r95={12d} r96={12d} r97={12d} r98={12d} r99={12d} r100={12d} r101={12d} r102={12d} r103={12d} r104={12d} r105={12d} r106={12d} r107={12d} r108={12d} r109={12d} r110={12d} r111={12d} r112={12d} r113={12d} r114={12d} r115={12d} r116={12d} r117={12d} r118={12d} r119={12d} r120={12d} r121={12d} r122={12d} r123={12d} r124={12d} r125={12d} r126={12d} r127={12d} 
;;    total ref usage 1671{1496d,167u,8e} in 99{87 regular + 12 call} insns.
(note 3 0 216 NOTE_INSN_DELETED)

(note 216 3 217 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 217 216 218 2 ( cpu_addr (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ cpu_addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 218 217 219 2 ( handle (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ handle ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 219 218 9 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 24 [cc]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 219 8 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 8 9 12 2 NOTE_INSN_FUNCTION_BEG)

(note 12 8 203 2 NOTE_INSN_DELETED)

(insn/f:TI 203 12 222 2 arch/arm/mm/dma-mapping.c:419 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 4 r4))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -48 [0xffffffffffffffd0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 0 r0))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 1 r1))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 2 r2))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 16 [0x10])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 20 [0x14])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 24 [0x18])) [0 S4 A32])
                                    (reg:SI 7 r7))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 28 [0x1c])) [0 S4 A32])
                                    (reg:SI 8 r8))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 32 [0x20])) [0 S4 A32])
                                    (reg:SI 9 r9))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 36 [0x24])) [0 S4 A32])
                                    (reg:SI 10 sl))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 40 [0x28])) [0 S4 A32])
                                    (reg:SI 11 fp))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 44 [0x2c])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 222 203 221 2 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(note 221 222 220 2 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(note 220 221 204 2 ( cpu_addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 204 220 4 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 4 204 223 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
        (reg:SI 0 r0 [ dev ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0 [ dev ])
        (nil)))

(note 223 4 5 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 5 223 224 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v:SI 5 r5 [orig:152 size ] [152])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ size ])
        (nil)))

(note 224 5 6 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 6 224 225 2 arch/arm/mm/dma-mapping.c:419 (set (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
        (reg:SI 2 r2 [ cpu_addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ cpu_addr ])
        (nil)))

(note 225 6 7 2 ( cpu_addr (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ cpu_addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 7 225 11 2 arch/arm/mm/dma-mapping.c:419 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])
        (reg:SI 3 r3 [ handle ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ handle ])
        (nil)))

(insn:TI 11 7 226 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:131 (parallel [
            (set (reg/v:SI 3 r3 [orig:148 _flags ] [148])
                (asm_operands/v:SI ("	mrs	%0, cpsr	@ local_save_flags") ("=r") 0 []
                     [] 1118080))
            (clobber (reg:QI 24 cc))
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (expr_list:REG_UNUSED (reg:QI 24 cc)
        (nil)))

(note 226 11 227 2 ( handle (nil)) NOTE_INSN_VAR_LOCATION)

(note 227 226 13 2 ( _flags (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:148 _flags ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 13 227 14 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 3 r3 [orig:148 _flags ] [148])
                (const_int 1 [0x1])
                (const_int 7 [0x7]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (expr_list:REG_DEAD (reg/v:SI 3 r3 [orig:148 _flags ] [148])
        (nil)))

(jump_insn:TI 14 13 228 2 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/irqflags.h:151 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 20)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [0.0%]  (fallthru)
;; Succ edge  4 [100.0%] 

(note 228 14 229 3 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:152 size ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 229 228 230 3 ( cpu_addr (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 230 229 15 3 ( dev (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  2 [0.0%]  (fallthru)
(note 15 230 17 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 17 15 18 3 arch/arm/mm/dma-mapping.c:420 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 18 17 19 3 arch/arm/mm/dma-mapping.c:420 discrim 1 (set (reg:SI 1 r1)
        (const_int 420 [0x1a4])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 19 18 231 3 arch/arm/mm/dma-mapping.c:420 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("warn_slowpath_null") [flags 0x41] <function_decl 0x10a67280 warn_slowpath_null>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 231 19 232 3 ( _flags (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 3 -> ( 4)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

(note 232 231 233 4 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:152 size ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 233 232 234 4 ( cpu_addr (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 234 233 235 4 ( _flags (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:148 _flags ] [148])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 235 234 20 4 ( dev (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3]
;; live  kill	

;; Pred edge  2 [100.0%] 
;; Pred edge  3 [100.0%]  (fallthru)
(code_label 20 235 21 4 124 "" [1 uses])

(note 21 20 22 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 22 21 236 4 include/asm-generic/getorder.h:13 (set (reg:SI 3 r3 [157])
        (plus:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
            (const_int -1 [0xffffffffffffffff]))) 4 {*arm_addsi3} (nil))

(note 236 22 24 4 ( _flags (nil)) NOTE_INSN_VAR_LOCATION)

(insn 24 236 237 4 include/asm-generic/getorder.h:14 (set (reg/v:SI 1 r1 [orig:146 order ] [146])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(note 237 24 23 4 ( order (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:146 order ] [146])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 23 237 238 4 include/asm-generic/getorder.h:13 (set (reg/v:SI 3 r3 [orig:147 size ] [147])
        (lshiftrt:SI (reg:SI 3 r3 [157])
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (nil))
;; End of basic block 4 -> ( 5)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  5 [100.0%]  (fallthru)

(note 238 23 28 5 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:147 size ] [147])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4 5) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 3 [r3] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 24 [cc]
;; live  in  	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  4 [100.0%]  (fallthru)
;; Pred edge  5 [86.0%]  (dfs_back)
(code_label 28 238 25 5 125 "" [1 uses])

(note 25 28 26 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 26 25 29 5 NOTE_INSN_DELETED)

(insn:TI 29 26 27 5 include/asm-generic/getorder.h:18 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 size ] [147])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 3 r3 [orig:147 size ] [147])
                (lshiftrt:SI (reg/v:SI 3 r3 [orig:147 size ] [147])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(insn 27 29 30 5 include/asm-generic/getorder.h:17 (set (reg/v:SI 1 r1 [orig:146 order ] [146])
        (plus:SI (reg/v:SI 1 r1 [orig:146 order ] [146])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 30 27 31 5 include/asm-generic/getorder.h:18 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 28)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 5 -> ( 5 6)
;; lr  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 1 [r1] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  5 [86.0%]  (dfs_back)
;; Succ edge  6 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 1 [r1] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 2 [r2] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  5 [14.0%]  (fallthru,loop_exit)
(note 31 30 36 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(note 36 31 32 6 NOTE_INSN_DELETED)

(insn:TI 32 36 34 6 arch/arm/mm/dma-mapping.c:422 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:151 dev ] [151])) 167 {*arm_movsi_insn} (nil))

(insn 34 32 35 6 arch/arm/mm/dma-mapping.c:422 (set (reg:SI 2 r2)
        (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 35 34 240 6 arch/arm/mm/dma-mapping.c:422 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_release_from_coherent") [flags 0x41] <function_decl 0x11060400 dma_release_from_coherent>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 240 35 239 6 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(note 239 240 37 6 ( order (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 37 239 38 6 arch/arm/mm/dma-mapping.c:422 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(jump_insn:TI 38 37 39 6 arch/arm/mm/dma-mapping.c:422 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 175)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 6 -> ( 20 7)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  20 [61.0%] 
;; Succ edge  7 [39.0%]  (fallthru)

;; Start of basic block ( 6) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  6 [39.0%]  (fallthru)
(note 39 38 42 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 42 39 48 7 NOTE_INSN_DELETED)

(note 48 42 45 7 NOTE_INSN_DELETED)

(insn:TI 45 48 46 7 arch/arm/mm/dma-mapping.c:259 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn 46 45 47 7 arch/arm/mm/dma-mapping.c:259 (set (reg:SI 1 r1)
        (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 47 46 40 7 arch/arm/mm/dma-mapping.c:259 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arm_vmregion_find_remove") [flags 0x41] <function_decl 0x11440d00 arm_vmregion_find_remove>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 40 47 241 7 arch/arm/mm/dma-mapping.c:425 (set (reg:SI 5 r5 [158])
        (plus:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (nil))

(note 241 40 41 7 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 41 241 197 7 arch/arm/mm/dma-mapping.c:425 (set (reg:SI 5 r5 [orig:149 D.24661 ] [149])
        (plus:SI (reg:SI 5 r5 [158])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
            (const_int 4095 [0xfff]))
        (nil)))

(insn:TI 197 41 242 7 arch/arm/mm/dma-mapping.c:425 (set (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
        (and:SI (reg:SI 5 r5 [orig:149 D.24661 ] [149])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(note 242 197 198 7 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 198 242 49 7 arch/arm/mm/dma-mapping.c:425 (set (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
        (and:SI (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 49 198 243 7 arch/arm/mm/dma-mapping.c:260 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 243 49 244 7 ( c (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:141 c ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 244 243 50 7 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 50 244 51 7 arch/arm/mm/dma-mapping.c:260 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 7 -> ( 8 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [0.0%]  (fallthru)
;; Succ edge  9 [100.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2]
;; live  kill	 14 [lr]

;; Pred edge  7 [0.0%]  (fallthru)
(note 51 50 57 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 57 51 56 8 arch/arm/mm/dma-mapping.c:261 (set (reg:SI 2 r2)
        (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])) 167 {*arm_movsi_insn} (nil))

(insn 56 57 55 8 arch/arm/mm/dma-mapping.c:261 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn:TI 55 56 58 8 arch/arm/mm/dma-mapping.c:261 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114ecc80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC4") [flags 0x82] <string_cst 0x114ecc80>)
        (nil)))

(call_insn:TI 58 55 59 8 arch/arm/mm/dma-mapping.c:261 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_UNUSED (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(call_insn:TI 59 58 212 8 arch/arm/mm/dma-mapping.c:263 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 212 59 213 8 (set (pc)
        (label_ref 148)) -1 (nil))
;; End of basic block 8 -> ( 17)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  17 [100.0%] 

(barrier 213 212 62)

;; Start of basic block ( 7) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  def 	 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  gen 	 2 [r2] 3 [r3] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  7 [100.0%] 
(code_label 62 213 63 9 127 "" [1 uses])

(note 63 62 64 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 64 63 65 9 arch/arm/mm/dma-mapping.c:267 (set (reg:SI 2 r2 [orig:164 <variable>.vm_end ] [164])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])
        (nil)))

(insn:TI 65 64 66 9 arch/arm/mm/dma-mapping.c:267 (set (reg:SI 3 r3 [orig:165 <variable>.vm_start ] [165])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn:TI 66 65 67 9 arch/arm/mm/dma-mapping.c:267 (set (reg:SI 2 r2 [orig:139 D.25252 ] [139])
        (minus:SI (reg:SI 2 r2 [orig:164 <variable>.vm_end ] [164])
            (reg:SI 3 r3 [orig:165 <variable>.vm_start ] [165]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:165 <variable>.vm_start ] [165])
        (nil)))

(insn:TI 67 66 70 9 arch/arm/mm/dma-mapping.c:267 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:139 D.25252 ] [139])
            (reg/v:SI 5 r5 [orig:136 size.823 ] [136]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 70 67 68 9 arch/arm/mm/dma-mapping.c:267 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 10 sl [orig:135 size.827 ] [135])
            (reg/v:SI 5 r5 [orig:136 size.823 ] [136]))) 2345 {neon_vornv2di+78} (nil))

(jump_insn:TI 68 70 245 9 arch/arm/mm/dma-mapping.c:267 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 87)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 9 -> ( 11 10)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 10 [sl] 13 [sp]


;; Succ edge  11 [100.0%] 
;; Succ edge  10 [0.0%]  (fallthru)

(note 245 68 74 10 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:135 size.827 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 9) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  use 	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  9 [0.0%]  (fallthru)
(note 74 245 81 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 81 74 79 10 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 3 r3)
        (reg/v:SI 5 r5 [orig:136 size.823 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 79 81 78 10 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))
        (nil)))

(insn:TI 78 79 82 10 arch/arm/mm/dma-mapping.c:268 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114ecd20>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC5") [flags 0x82] <string_cst 0x114ecd20>)
        (nil)))

(call_insn:TI 82 78 83 10 arch/arm/mm/dma-mapping.c:268 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_UNUSED (reg:SI 0 r0)
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(call_insn:TI 83 82 84 10 arch/arm/mm/dma-mapping.c:270 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(insn 84 83 246 10 arch/arm/mm/dma-mapping.c:271 (set (reg:SI 10 sl [orig:169 <variable>.vm_end ] [169])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])
        (nil)))

(note 246 84 85 10 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 85 246 86 10 arch/arm/mm/dma-mapping.c:271 (set (reg:SI 3 r3 [orig:170 <variable>.vm_start ] [170])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn:TI 86 85 247 10 arch/arm/mm/dma-mapping.c:271 (set (reg/v:SI 10 sl [orig:135 size.827 ] [135])
        (minus:SI (reg:SI 10 sl [orig:169 <variable>.vm_end ] [169])
            (reg:SI 3 r3 [orig:170 <variable>.vm_start ] [170]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:170 <variable>.vm_start ] [170])
        (nil)))
;; End of basic block 10 -> ( 11)
;; lr  out 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 10 [sl] 13 [sp]


;; Succ edge  11 [100.0%]  (fallthru)

(note 247 86 248 11 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:135 size.827 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 248 247 87 11 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:135 size.827 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 10 9) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 11 [fp]
;; live  in  	 4 [r4] 5 [r5] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 11 [fp]
;; live  kill	

;; Pred edge  10 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
(code_label 87 248 88 11 130 "" [1 uses])

(note 88 87 92 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(note 92 88 93 11 NOTE_INSN_DELETED)

(note 93 92 96 11 NOTE_INSN_DELETED)

(note 96 93 89 11 NOTE_INSN_DELETED)

(insn:TI 89 96 95 11 arch/arm/mm/dma-mapping.c:274 (set (reg:SI 8 r8 [orig:171 <variable>.vm_start ] [171])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn:TI 95 89 90 11 arch/arm/mm/dma-mapping.c:276 (set (reg/f:SI 3 r3 [174])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 90 95 94 11 arch/arm/mm/dma-mapping.c:274 (set (reg:SI 8 r8 [orig:140 D.25251 ] [140])
        (plus:SI (reg:SI 8 r8 [orig:171 <variable>.vm_start ] [171])
            (const_int 16777216 [0x1000000]))) 4 {*arm_addsi3} (nil))

(insn:TI 94 90 249 11 arch/arm/mm/dma-mapping.c:275 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (zero_extract:SI (reg:SI 8 r8 [orig:140 D.25251 ] [140])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (nil))

(note 249 94 115 11 ( off (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:144 off ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 115 249 91 11 arch/arm/mm/dma-mapping.c:286 (set (reg/f:SI 11 fp [191])
        (reg/f:SI 3 r3 [174])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 91 115 250 11 arch/arm/mm/dma-mapping.c:274 (set (reg/v:SI 8 r8 [orig:143 idx ] [143])
        (lshiftrt:SI (reg:SI 8 r8 [orig:140 D.25251 ] [140])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(note 250 91 97 11 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:143 idx ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 97 250 251 11 arch/arm/mm/dma-mapping.c:276 (set (reg/f:SI 6 r6 [176])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 3 r3 [174])) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [174])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
            (nil))))

(note 251 97 98 11 ( cpu_addr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 98 251 252 11 arch/arm/mm/dma-mapping.c:276 (set (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
        (plus:SI (mult:SI (reg/v:SI 7 r7 [orig:144 off ] [144])
                (const_int 4 [0x4]))
            (reg/f:SI 6 r6 [176]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 11 -> ( 12)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  12 [100.0%]  (fallthru)

(note 252 98 253 12 ( ptep (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 253 252 137 12 ( pte (expr_list:REG_DEP_TRUE (reg/v:SI 9 r9 [orig:145 pte ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 11 15) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 7 [r7] 8 [r8] 11 [fp] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 9 [r9] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  11 [100.0%]  (fallthru)
;; Pred edge  15 [86.0%]  (dfs_back)
(code_label 137 253 99 12 135 "" [1 uses])

(note 99 137 184 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 184 99 105 12 include/asm-generic/pgtable.h:77 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 105 184 101 12 arch/arm/mm/dma-mapping.c:283 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (plus:SI (reg/v:SI 7 r7 [orig:144 off ] [144])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(insn:TI 101 105 103 12 include/asm-generic/pgtable.h:77 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])) 167 {*arm_movsi_insn} (nil))

(insn 103 101 100 12 include/asm-generic/pgtable.h:77 (set (reg:SI 2 r2)
        (reg:SI 1 r1)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 100 103 104 12 include/asm-generic/pgtable.h:76 (set (reg/v:SI 9 r9 [orig:145 pte ] [145])
        (mem:SI (reg/v/f:SI 6 r6 [orig:142 ptep ] [142]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 104 100 106 12 include/asm-generic/pgtable.h:77 (parallel [
            (call (mem:SI (symbol_ref:SI ("cpu_v7_set_pte_ext") [flags 0x41] <function_decl 0x10e63d00 cpu_v7_set_pte_ext>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn:TI 106 104 109 12 arch/arm/mm/dma-mapping.c:284 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:144 off ] [144])
            (const_int 512 [0x200]))) 219 {*arm_cmpsi_insn} (nil))

(insn 109 106 114 12 arch/arm/mm/dma-mapping.c:281 (set (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
        (plus:SI (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn:TI 114 109 186 12 arch/arm/mm/dma-mapping.c:286 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 8 r8 [orig:143 idx ] [143])
            (plus:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (nil))

(insn 186 114 116 12 arch/arm/mm/dma-mapping.c:285 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 7 r7 [orig:144 off ] [144])
            (plus:SI (reg/v:SI 7 r7 [orig:144 off ] [144])
                (const_int -512 [0xfffffffffffffe00])))) 2268 {neon_vornv2di+1} (nil))

(insn:TI 116 186 120 12 arch/arm/mm/dma-mapping.c:286 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 6 r6 [orig:142 ptep ] [142])
            (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                        (const_int 4 [0x4]))
                    (reg/f:SI 11 fp [191])) [0 consistent_pte S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
            (nil))))

(insn 120 116 121 12 arch/arm/mm/dma-mapping.c:289 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 9 r9 [orig:145 pte ] [145])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 121 120 122 12 arch/arm/mm/dma-mapping.c:289 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 126)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 4 [0x4])
            (nil))))
;; End of basic block 12 -> ( 14 13)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [0.0%] 
;; Succ edge  13 [100.0%]  (fallthru)

;; Start of basic block ( 12) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 9 [r9] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  12 [100.0%]  (fallthru)
(note 122 121 123 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 123 122 124 13 NOTE_INSN_DELETED)

(insn:TI 124 123 125 13 arch/arm/mm/dma-mapping.c:289 discrim 1 (set (reg:CC_NOOV 24 cc)
        (compare:CC_NOOV (zero_extract:SI (reg/v:SI 9 r9 [orig:145 pte ] [145])
                (const_int 1 [0x1])
                (const_int 0 [0x0]))
            (const_int 0 [0x0]))) 71 {*zeroextractsi_compare0_scratch} (nil))

(jump_insn:TI 125 124 126 13 arch/arm/mm/dma-mapping.c:289 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 134)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 13 -> ( 14 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  14 [0.0%]  (fallthru)
;; Succ edge  15 [100.0%] 

;; Start of basic block ( 12 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  12 [0.0%] 
;; Pred edge  13 [0.0%]  (fallthru)
(code_label 126 125 127 14 133 "" [1 uses])

(note 127 126 187 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(insn:TI 187 127 188 14 arch/arm/mm/dma-mapping.c:290 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC6") [flags 0x82] <string_cst 0x114f1ac0>)) 167 {*arm_movsi_insn} (nil))

(insn:TI 188 187 133 14 arch/arm/mm/dma-mapping.c:290 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 16 [0x10])))) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 133 188 134 14 arch/arm/mm/dma-mapping.c:290 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 14 -> ( 15)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 [100.0%]  (fallthru)

;; Start of basic block ( 13 14) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  13 [100.0%] 
;; Pred edge  14 [100.0%]  (fallthru)
(code_label 134 133 135 15 134 "" [1 uses])

(note 135 134 136 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(note 136 135 138 15 NOTE_INSN_DELETED)

(insn:TI 138 136 139 15 arch/arm/mm/dma-mapping.c:292 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (reg/v:SI 10 sl [orig:135 size.827 ] [135])
                        (const_int -4096 [0xfffffffffffff000]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 10 sl [orig:135 size.827 ] [135])
                (plus:SI (reg/v:SI 10 sl [orig:135 size.827 ] [135])
                    (const_int -4096 [0xfffffffffffff000])))
        ]) 6 {*addsi3_compare0} (nil))

(jump_insn:TI 139 138 140 15 arch/arm/mm/dma-mapping.c:292 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 137)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 15 -> ( 12 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  12 [86.0%]  (dfs_back)
;; Succ edge  16 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 15) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  15 [14.0%]  (fallthru,loop_exit)
(note 140 139 141 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 141 140 142 16 arch/arm/mm/dma-mapping.c:294 (set (reg:SI 0 r0)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 142 141 143 16 arch/arm/mm/dma-mapping.c:294 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:141 c ] [141])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 143 142 146 16 arch/arm/mm/dma-mapping.c:294 (parallel [
            (call (mem:SI (symbol_ref:SI ("flush_tlb_kernel_range") [flags 0x41] <function_decl 0x11440480 flush_tlb_kernel_range>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 146 143 145 16 arch/arm/mm/dma-mapping.c:296 (set (reg:SI 1 r1)
        (reg/v/f:SI 4 r4 [orig:141 c ] [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 4 r4 [orig:141 c ] [141])
        (nil)))

(insn:TI 145 146 147 16 arch/arm/mm/dma-mapping.c:296 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(call_insn:TI 147 145 254 16 arch/arm/mm/dma-mapping.c:296 (parallel [
            (call (mem:SI (symbol_ref:SI ("arm_vmregion_free") [flags 0x41] <function_decl 0x11440d80 arm_vmregion_free>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 16 -> ( 17)
;; lr  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  17 [100.0%]  (fallthru)

(note 254 147 255 17 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:135 size.827 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 255 254 148 17 ( cpu_addr (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:153 cpu_addr ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 16 8) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 4 [r4] 5 [r5]
;; live  in  	 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 4 [r4] 5 [r5]
;; live  kill	

;; Pred edge  16 [100.0%]  (fallthru)
;; Pred edge  8 [100.0%] 
(code_label 148 255 149 17 128 "" [1 uses])

(note 149 148 152 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(note 152 149 155 17 NOTE_INSN_DELETED)

(note 155 152 156 17 NOTE_INSN_DELETED)

(note 156 155 202 17 NOTE_INSN_DELETED)

(insn:TI 202 156 151 17 arch/arm/mm/dma-mapping.c:430 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 4 [0x4])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 151 202 256 17 arch/arm/mm/dma-mapping.c:430 (set (reg:SI 4 r4 [184])
        (lshiftrt:SI (reg:SI 3 r3)
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(note 256 151 200 17 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(insn 200 256 153 17 arch/arm/mm/dma-mapping.c:430 (set (reg/f:SI 3 r3 [183])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn:TI 153 200 154 17 arch/arm/mm/dma-mapping.c:430 (set (reg/f:SI 3 r3 [orig:186 mem_map ] [186])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [183]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn:TI 154 153 257 17 arch/arm/mm/dma-mapping.c:430 (set (reg/v/f:SI 4 r4 [orig:138 page ] [138])
        (plus:SI (mult:SI (reg:SI 4 r4 [184])
                (const_int 32 [0x20]))
            (reg/f:SI 3 r3 [orig:186 mem_map ] [186]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:186 mem_map ] [186])
        (nil)))

(note 257 154 157 17 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:138 page ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 157 257 258 17 arch/arm/mm/dma-mapping.c:111 (set (reg/v/f:SI 5 r5 [orig:137 e ] [137])
        (plus:SI (lshiftrt:SI (reg/v:SI 5 r5 [orig:136 size.823 ] [136])
                (const_int 7 [0x7]))
            (reg/v/f:SI 4 r4 [orig:138 page ] [138]))) 270 {*arith_shiftsi} (nil))

(note 258 157 214 17 ( e (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:137 e ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 214 258 215 17 (set (pc)
        (label_ref 165)) -1 (nil))
;; End of basic block 17 -> ( 19)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  19 [100.0%] 

(barrier 215 214 167)

;; Start of basic block ( 19) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 1 [r1] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	 14 [lr]

;; Pred edge  19 [91.0%] 
(code_label 167 215 160 18 137 "" [1 uses])

(note 160 167 163 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(call_insn:TI 163 160 165 18 arch/arm/mm/dma-mapping.c:114 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10cd6800 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 18 -> ( 19)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru,dfs_back)

;; Start of basic block ( 18 17) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 4 [r4] 24 [cc]
;; live  kill	

;; Pred edge  18 [100.0%]  (fallthru,dfs_back)
;; Pred edge  17 [100.0%] 
(code_label 165 163 166 19 136 "" [1 uses])

(note 166 165 168 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(insn:TI 168 166 161 19 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 4 r4 [orig:138 page ] [138])
            (reg/v/f:SI 5 r5 [orig:137 e ] [137]))) 219 {*arm_cmpsi_insn} (nil))

(insn 161 168 183 19 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:138 page ] [138])) 167 {*arm_movsi_insn} (nil))

(insn:TI 183 161 164 19 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(insn 164 183 169 19 arch/arm/mm/dma-mapping.c:115 (set (reg/v/f:SI 4 r4 [orig:138 page ] [138])
        (plus:SI (reg/v/f:SI 4 r4 [orig:138 page ] [138])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(jump_insn:TI 169 164 259 19 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 167)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 19 -> ( 18 20)
;; lr  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  18 [91.0%] 
;; Succ edge  20 [9.0%]  (fallthru,loop_exit)

(note 259 169 260 20 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 10 sl [orig:135 size.827 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 260 259 175 20 ( dev (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:151 dev ] [151])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 19 6) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  19 [9.0%]  (fallthru,loop_exit)
;; Pred edge  6 [61.0%] 
(code_label 175 260 178 20 138 "" [1 uses])

(note 178 175 205 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 205 178 206 20 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 206 205 207 20 arch/arm/mm/dma-mapping.c:431 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 20 -> ( 1)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 207 206 199)

(note 199 207 201 NOTE_INSN_DELETED)

(note 201 199 0 NOTE_INSN_DELETED)


;; Function dma_mmap (dma_mmap)[0:1280]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: vma+0
Reg 2: cpu_addr+0
Reg 3: dma_addr+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: vma
    offset 0
      (reg:SI 1 r1 [ vma ])
  name: cpu_addr
    offset 0
      (reg:SI 2 r2 [ cpu_addr ])
  name: dma_addr
    offset 0
      (reg:SI 3 r3 [ dma_addr ])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])

OUT:
Stack adjustment: 16
Reg 2: c+0
Reg 4: vma+0
Variables:
  name: vma
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
  name: c
    offset 0
      (reg/v/f:SI 2 r2 [orig:134 c ] [134])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])


Basic block 3:
IN:
Stack adjustment: 16
Reg 2: c+0
Reg 4: vma+0
Variables:
  name: vma
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
  name: c
    offset 0
      (reg/v/f:SI 2 r2 [orig:134 c ] [134])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])

OUT:
Stack adjustment: 16
Reg 1: kern_size+0
Reg 2: c+0
Reg 4: vma+0
Reg 12: off+0
Variables:
  name: off
    offset 0
      (reg/v:SI 12 ip [orig:133 off ] [133])
  name: vma
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
  name: kern_size
    offset 0
      (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
  name: c
    offset 0
      (reg/v/f:SI 2 r2 [orig:134 c ] [134])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])


Basic block 4:
IN:
Stack adjustment: 16
Reg 1: kern_size+0
Reg 2: c+0
Reg 4: vma+0
Reg 12: off+0
Variables:
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])
  name: vma
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
  name: kern_size
    offset 0
      (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
  name: c
    offset 0
      (reg/v/f:SI 2 r2 [orig:134 c ] [134])
  name: off
    offset 0
      (reg/v:SI 12 ip [orig:133 off ] [133])

OUT:
Stack adjustment: 16
Reg 2: c+0
Reg 3: user_size+0
Reg 4: vma+0
Reg 12: off+0
Variables:
  name: user_size
    offset 0
      (reg/v:SI 3 r3 [orig:136 user_size ] [136])
  name: c
    offset 0
      (reg/v/f:SI 2 r2 [orig:134 c ] [134])
  name: off
    offset 0
      (reg/v:SI 12 ip [orig:133 off ] [133])
  name: vma
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])


Basic block 5:
IN:
Stack adjustment: 16
Reg 2: c+0
Reg 3: user_size+0
Reg 4: vma+0
Reg 12: off+0
Variables:
  name: vma
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
  name: user_size
    offset 0
      (reg/v:SI 3 r3 [orig:136 user_size ] [136])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])
  name: c
    offset 0
      (reg/v/f:SI 2 r2 [orig:134 c ] [134])
  name: off
    offset 0
      (reg/v:SI 12 ip [orig:133 off ] [133])

OUT:
Stack adjustment: 16
Variables:
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])


Basic block 6:
IN:
Stack adjustment: 16
Reg 1: kern_size+0
Reg 2: c+0
Reg 3: user_size+0
Reg 4: vma+0
Reg 12: off+0
Variables:
  name: user_size
    offset 0
      (reg/v:SI 3 r3 [orig:136 user_size ] [136])
  name: kern_size
    offset 0
      (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
  name: c
    offset 0
      (reg/v/f:SI 2 r2 [orig:134 c ] [134])
  name: off
    offset 0
      (reg/v:SI 12 ip [orig:133 off ] [133])
  name: vma
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])

OUT:
Stack adjustment: 16
Reg 1: kern_size+0
Reg 2: c+0
Reg 3: user_size+0
Reg 4: vma+0
Reg 12: off+0
Variables:
  name: vma
    offset 0
      (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])
  name: user_size
    offset 0
      (reg/v:SI 3 r3 [orig:136 user_size ] [136])
  name: kern_size
    offset 0
      (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
  name: c
    offset 0
      (reg/v/f:SI 2 r2 [orig:134 c ] [134])
  name: off
    offset 0
      (reg/v:SI 12 ip [orig:133 off ] [133])


7 basic blocks, 9 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  3 [19.1%]  (fallthru) 6 [80.9%] 
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 1910, maybe hot.
Predecessors:  2 [19.1%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

Successors:  4 [4.0%]  (fallthru) 6 [96.0%] 
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 76, maybe hot.
Predecessors:  3 [4.0%]  (fallthru)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

Successors:  5 [39.0%]  (fallthru) 6 [61.0%] 
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 30, maybe hot.
Predecessors:  4 [39.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 6 , prev 5, next 1, loop_depth 0, count 0, freq 9970, maybe hot.
Predecessors:  2 [80.9%]  3 [96.0%]  4 [61.0%] 
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


Basic block 1 , prev 6, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  5 [100.0%]  (ab,sibcall) 6 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_mmap

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={6d,6u} r1={10d,9u} r2={8d,8u,2d} r3={6d,4u} r4={2d,8u} r5={4d,5u} r6={2d,3u} r12={3d,3u} r13={2d,10u} r14={2d,3u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={5d,3u} r26={1d} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 335{270d,62u,3e} in 36{34 regular + 2 call} insns.
(note 1 0 78 NOTE_INSN_DELETED)

(note 78 1 79 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 79 78 80 2 ( vma (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ vma ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 80 79 81 2 ( cpu_addr (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ cpu_addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 81 80 82 2 ( dma_addr (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dma_addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 82 81 8 2 ( size (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 size+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 82 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 8 7 2 NOTE_INSN_DELETED)

(note 7 4 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 7 71 2 NOTE_INSN_DELETED)

(insn/f:TI 71 16 72 2 arch/arm/mm/dma-mapping.c:371 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 6 r6)
            (expr_list:REG_DEAD (reg:SI 5 r5)
                (expr_list:REG_DEAD (reg:SI 4 r4)
                    (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                (set/f (reg/f:SI 13 sp)
                                    (plus:SI (reg/f:SI 13 sp)
                                        (const_int -16 [0xfffffffffffffff0])))
                                (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                    (reg:SI 4 r4))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 4 [0x4])) [0 S4 A32])
                                    (reg:SI 5 r5))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 8 [0x8])) [0 S4 A32])
                                    (reg:SI 6 r6))
                                (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                            (const_int 12 [0xc])) [0 S4 A32])
                                    (reg:SI 14 lr))
                            ])
                        (nil)))))))

(note 72 71 3 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 3 72 13 2 arch/arm/mm/dma-mapping.c:371 (set (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
        (reg:SI 1 r1 [ vma ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [ vma ])
        (nil)))

(insn:TI 13 3 83 2 arch/arm/mm/dma-mapping.c:379 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(note 83 13 14 2 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(insn 14 83 84 2 arch/arm/mm/dma-mapping.c:379 (set (reg:SI 1 r1)
        (reg:SI 2 r2 [ cpu_addr ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [ cpu_addr ])
        (nil)))

(note 84 14 10 2 ( vma (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 10 84 11 2 arch/arm/mm/dma-mapping.c:377 (set (reg:SI 6 r6 [orig:139 D.24577 ] [139])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
                (const_int 8 [0x8])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 11 10 15 2 arch/arm/mm/dma-mapping.c:377 (set (reg:SI 5 r5 [orig:138 D.24578 ] [138])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(call_insn 15 11 86 2 arch/arm/mm/dma-mapping.c:379 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arm_vmregion_find") [flags 0x41] <function_decl 0x11440c80 arm_vmregion_find>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 86 15 85 2 ( dma_addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 85 86 17 2 ( cpu_addr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 17 85 87 2 arch/arm/mm/dma-mapping.c:380 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 87 17 18 2 ( c (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:134 c ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 18 87 19 2 arch/arm/mm/dma-mapping.c:380 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 8090 [0x1f9a])
            (nil))))
;; End of basic block 2 -> ( 3 6)
;; lr  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  3 [19.1%]  (fallthru)
;; Succ edge  6 [80.9%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 4 [r4] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  in  	 2 [r2] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 12 [ip] 24 [cc]
;; live  kill	

;; Pred edge  2 [19.1%]  (fallthru)
(note 19 18 21 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 21 19 22 3 arch/arm/mm/dma-mapping.c:383 (set (reg:SI 1 r1 [orig:148 <variable>.vm_end ] [148])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 12 [0xc])) [0 <variable>.vm_end+0 S4 A32])
        (nil)))

(insn:TI 22 21 20 3 arch/arm/mm/dma-mapping.c:383 (set (reg:SI 3 r3 [orig:149 <variable>.vm_start ] [149])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn:TI 20 22 88 3 arch/arm/mm/dma-mapping.c:381 (set (reg/v:SI 12 ip [orig:133 off ] [133])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
                (const_int 72 [0x48])) [0 <variable>.vm_pgoff+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 88 20 23 3 ( off (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:133 off ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 23 88 24 3 arch/arm/mm/dma-mapping.c:383 (set (reg:SI 1 r1 [147])
        (minus:SI (reg:SI 1 r1 [orig:148 <variable>.vm_end ] [148])
            (reg:SI 3 r3 [orig:149 <variable>.vm_start ] [149]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:149 <variable>.vm_start ] [149])
        (nil)))

(insn:TI 24 23 89 3 arch/arm/mm/dma-mapping.c:383 (set (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
        (lshiftrt:SI (reg:SI 1 r1 [147])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(note 89 24 25 3 ( kern_size (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 25 89 26 3 arch/arm/mm/dma-mapping.c:385 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 12 ip [orig:133 off ] [133])
            (reg/v:SI 1 r1 [orig:135 kern_size ] [135]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 26 25 27 3 arch/arm/mm/dma-mapping.c:385 (set (pc)
        (if_then_else (geu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9600 [0x2580])
            (nil))))
;; End of basic block 3 -> ( 4 6)
;; lr  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  4 [4.0%]  (fallthru)
;; Succ edge  6 [96.0%] 

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  in  	 1 [r1] 2 [r2] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  3 [4.0%]  (fallthru)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 27 30 4 arch/arm/mm/dma-mapping.c:377 (set (reg:SI 5 r5 [150])
        (minus:SI (reg:SI 6 r6 [orig:139 D.24577 ] [139])
            (reg:SI 5 r5 [orig:138 D.24578 ] [138]))) 28 {*arm_subsi3_insn} (nil))

(insn 30 28 90 4 arch/arm/mm/dma-mapping.c:386 (set (reg:SI 1 r1 [151])
        (minus:SI (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
            (reg/v:SI 12 ip [orig:133 off ] [133]))) 28 {*arm_subsi3_insn} (nil))

(note 90 30 29 4 ( kern_size (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 29 90 91 4 arch/arm/mm/dma-mapping.c:377 (set (reg/v:SI 3 r3 [orig:136 user_size ] [136])
        (lshiftrt:SI (reg:SI 5 r5 [150])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(note 91 29 31 4 ( user_size (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:136 user_size ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 31 91 32 4 arch/arm/mm/dma-mapping.c:386 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 3 r3 [orig:136 user_size ] [136])
            (reg:SI 1 r1 [151]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [151])
        (nil)))

(jump_insn:TI 32 31 33 4 arch/arm/mm/dma-mapping.c:386 (set (pc)
        (if_then_else (gtu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 50)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 4 -> ( 5 6)
;; lr  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 12 [ip] 13 [sp]


;; Succ edge  5 [39.0%]  (fallthru)
;; Succ edge  6 [61.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp] 14 [lr]
;; lr  use 	 2 [r2] 3 [r3] 4 [r4] 12 [ip] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 2 [r2] 3 [r3] 4 [r4] 6 [r6] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  4 [39.0%]  (fallthru)
(note 33 32 38 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 38 33 39 5 NOTE_INSN_DELETED)

(note 39 38 40 5 NOTE_INSN_DELETED)

(note 40 39 35 5 NOTE_INSN_DELETED)

(insn:TI 35 40 43 5 arch/arm/mm/dma-mapping.c:387 (set (reg/f:SI 5 r5 [orig:154 <variable>.vm_pages ] [154])
        (mem/s/f/j:SI (plus:SI (reg/v/f:SI 2 r2 [orig:134 c ] [134])
                (const_int 16 [0x10])) [0 <variable>.vm_pages+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 2 r2 [orig:134 c ] [134])
        (nil)))

(insn 43 35 69 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 0 r0)
        (reg/v/f:SI 4 r4 [orig:142 vma ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 69 43 92 5 arch/arm/mm/dma-mapping.c:387 (set (reg/f:SI 2 r2 [152])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(note 92 69 46 5 ( c (nil)) NOTE_INSN_VAR_LOCATION)

(insn 46 92 93 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 3 r3)
        (ashift:SI (reg/v:SI 3 r3 [orig:136 user_size ] [136])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(note 93 46 41 5 ( user_size (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 41 93 36 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 1 r1 [orig:160 <variable>.vm_page_prot ] [160])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem:SI (plus:SI (reg/f:SI 26 afp)
                (const_int 4 [0x4])) [0 S4 A32])
        (nil)))

(insn:TI 36 41 42 5 arch/arm/mm/dma-mapping.c:387 (set (reg/f:SI 2 r2 [orig:155 mem_map ] [155])
        (mem/f/c/i:SI (reg/f:SI 2 r2 [152]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn:TI 42 36 37 5 arch/arm/mm/dma-mapping.c:387 (set (mem:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 S4 A32])
        (reg:SI 1 r1 [orig:160 <variable>.vm_page_prot ] [160])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1 [orig:160 <variable>.vm_page_prot ] [160])
        (nil)))

(insn:TI 37 42 44 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 2 r2 [153])
        (minus:SI (reg/f:SI 5 r5 [orig:154 <variable>.vm_pages ] [154])
            (reg/f:SI 2 r2 [orig:155 mem_map ] [155]))) 28 {*arm_subsi3_insn} (nil))

(insn 44 37 94 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 1 r1)
        (mem/s/j:SI (plus:SI (reg:SI 4 r4 [0])
                (const_int 4 [0x4])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 94 44 45 5 ( vma (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 45 94 76 5 arch/arm/mm/dma-mapping.c:387 (set (reg:SI 2 r2)
        (plus:SI (ashiftrt:SI (reg:SI 2 r2 [153])
                (const_int 5 [0x5]))
            (reg/v:SI 12 ip [orig:133 off ] [133]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg/v:SI 12 ip [orig:133 off ] [133])
        (nil)))

(note 76 45 77 5 NOTE_INSN_EPILOGUE_BEG)

(insn 77 76 47 5 arch/arm/mm/dma-mapping.c:396 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn/j:TI 47 77 95 5 arch/arm/mm/dma-mapping.c:387 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("remap_pfn_range") [flags 0x41] <function_decl 0x10fb1200 remap_pfn_range>) [0 S4 A32])
                    (const_int 4 [0x4])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 95 47 48 5 ( off (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 5 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 48 95 96)

(note 96 48 97 6 ( user_size (expr_list:REG_DEP_TRUE (reg/v:SI 3 r3 [orig:136 user_size ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 97 96 98 6 ( kern_size (expr_list:REG_DEP_TRUE (reg/v:SI 1 r1 [orig:135 kern_size ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 98 97 99 6 ( c (expr_list:REG_DEP_TRUE (reg/v/f:SI 2 r2 [orig:134 c ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 99 98 100 6 ( off (expr_list:REG_DEP_TRUE (reg/v:SI 12 ip [orig:133 off ] [133])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 100 99 50 6 ( vma (expr_list:REG_DEP_TRUE (reg/v/f:SI 4 r4 [orig:142 vma ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 2 3 4) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  2 [80.9%] 
;; Pred edge  3 [96.0%] 
;; Pred edge  4 [61.0%] 
(code_label 50 100 51 6 144 "" [3 uses])

(note 51 50 58 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 58 51 64 6 arch/arm/mm/dma-mapping.c:396 (set (reg/i:SI 0 r0)
        (const_int -6 [0xfffffffffffffffa])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -6 [0xfffffffffffffffa])
        (nil)))

(insn 64 58 73 6 arch/arm/mm/dma-mapping.c:396 (use (reg/i:SI 0 r0)) -1 (nil))

(note 73 64 74 6 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 74 73 75 6 arch/arm/mm/dma-mapping.c:396 (return) 260 {return} (nil))
;; End of basic block 6 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 75 74 68)

(note 68 75 70 NOTE_INSN_DELETED)

(note 70 68 0 NOTE_INSN_DELETED)


;; Function dma_mmap_writecombine (dma_mmap_writecombine)[0:1282]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: vma+0
Reg 2: cpu_addr+0
Reg 3: dma_addr+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: vma
    offset 0
      (reg:SI 1 r1 [ vma ])
  name: cpu_addr
    offset 0
      (reg:SI 2 r2 [ cpu_addr ])
  name: dma_addr
    offset 0
      (reg:SI 3 r3 [ dma_addr ])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])

OUT:
Stack adjustment: 12
Reg 5: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 size+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%]  (ab,sibcall)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_mmap_writecombine

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={2d,2u} r1={2d,3u} r2={2d,1u} r3={2d,1u} r4={4d,5u} r5={2d,2u} r12={1d} r13={2d,5u,1d} r14={1d,3u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 152{129d,22u,1e} in 8{7 regular + 1 call} insns.
(note 1 0 39 NOTE_INSN_DELETED)

(note 39 1 40 2 ( dma_addr (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dma_addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 40 39 41 2 ( size (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 size+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 41 40 42 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 42 41 43 2 ( vma (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ vma ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 43 42 8 2 ( cpu_addr (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ cpu_addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 43 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 35 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 35 7 36 2 arch/arm/mm/dma-mapping.c:408 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -12 [0xfffffffffffffff4])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 36 35 10 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 10 36 33 2 arch/arm/mm/dma-mapping.c:409 (set (reg:SI 4 r4 [orig:141 <variable>.vm_page_prot ] [141])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 33 10 11 2 arch/arm/mm/dma-mapping.c:410 (set (reg/v:SI 5 r5 [orig:139 size ] [139])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 size+0 S4 A32])
        (nil)))

(insn:TI 11 33 12 2 arch/arm/mm/dma-mapping.c:409 (set (reg:SI 4 r4 [140])
        (and:SI (reg:SI 4 r4 [orig:141 <variable>.vm_page_prot ] [141])
            (const_int -61 [0xffffffffffffffc3]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 12 11 13 2 arch/arm/mm/dma-mapping.c:409 (set (reg:SI 4 r4 [142])
        (ior:SI (reg:SI 4 r4 [140])
            (const_int 4 [0x4]))) 89 {*arm_iorsi3} (nil))

(insn 13 12 37 2 arch/arm/mm/dma-mapping.c:409 (set (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
        (reg:SI 4 r4 [142])) 167 {*arm_movsi_insn} (nil))

(note 37 13 38 2 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 38 37 19 2 arch/arm/mm/dma-mapping.c:411 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 19 38 47 2 arch/arm/mm/dma-mapping.c:410 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_mmap") [flags 0x3] <function_decl 0x1145e500 dma_mmap>) [0 S4 A32])
                    (const_int 4 [0x4])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 47 19 46 2 ( cpu_addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 46 47 45 2 ( vma (nil)) NOTE_INSN_VAR_LOCATION)

(note 45 46 44 2 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(note 44 45 20 2 ( dma_addr (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 20 44 34)

(note 34 20 0 NOTE_INSN_DELETED)


;; Function dma_mmap_coherent (dma_mmap_coherent)[0:1281]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: vma+0
Reg 2: cpu_addr+0
Reg 3: dma_addr+0
Variables:
  name: vma
    offset 0
      (reg:SI 1 r1 [ vma ])
  name: cpu_addr
    offset 0
      (reg:SI 2 r2 [ cpu_addr ])
  name: dma_addr
    offset 0
      (reg:SI 3 r3 [ dma_addr ])
  name: size
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])

OUT:
Stack adjustment: 12
Reg 5: size+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:139 size ] [139])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 size+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 size+0 S4 A32])


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

Successors:  EXIT [100.0%]  (ab,sibcall)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%]  (ab,sibcall)
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_mmap_coherent

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={2d,2u} r1={2d,3u} r2={2d,1u} r3={2d,1u} r4={4d,5u} r5={2d,2u} r12={1d} r13={2d,5u,1d} r14={1d,3u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 152{129d,22u,1e} in 8{7 regular + 1 call} insns.
(note 1 0 39 NOTE_INSN_DELETED)

(note 39 1 40 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 40 39 41 2 ( vma (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ vma ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 41 40 42 2 ( cpu_addr (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ cpu_addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 42 41 43 2 ( dma_addr (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ dma_addr ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 43 42 8 2 ( size (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 size+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 12 [ip] 13 [sp] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 4 [r4] 5 [r5] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 8 43 7 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 7 8 35 2 NOTE_INSN_FUNCTION_BEG)

(insn/f:TI 35 7 36 2 arch/arm/mm/dma-mapping.c:400 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 5 r5)
        (expr_list:REG_DEAD (reg:SI 4 r4)
            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                        (set/f (reg/f:SI 13 sp)
                            (plus:SI (reg/f:SI 13 sp)
                                (const_int -12 [0xfffffffffffffff4])))
                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                            (reg:SI 4 r4))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 4 [0x4])) [0 S4 A32])
                            (reg:SI 5 r5))
                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                    (const_int 8 [0x8])) [0 S4 A32])
                            (reg:SI 14 lr))
                    ])
                (nil)))))

(note 36 35 10 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 10 36 33 2 arch/arm/mm/dma-mapping.c:401 (set (reg:SI 4 r4 [orig:141 <variable>.vm_page_prot ] [141])
        (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 33 10 11 2 arch/arm/mm/dma-mapping.c:402 (set (reg/v:SI 5 r5 [orig:139 size ] [139])
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 size+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 size+0 S4 A32])
        (nil)))

(insn:TI 11 33 12 2 arch/arm/mm/dma-mapping.c:401 (set (reg:SI 4 r4 [140])
        (and:SI (reg:SI 4 r4 [orig:141 <variable>.vm_page_prot ] [141])
            (const_int -573 [0xfffffffffffffdc3]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 12 11 13 2 arch/arm/mm/dma-mapping.c:401 (set (reg:SI 4 r4 [142])
        (ior:SI (reg:SI 4 r4 [140])
            (const_int 516 [0x204]))) 89 {*arm_iorsi3} (nil))

(insn 13 12 37 2 arch/arm/mm/dma-mapping.c:401 (set (mem/s/j:SI (plus:SI (reg/f:SI 1 r1 [orig:136 vma ] [136])
                (const_int 20 [0x14])) [0 <variable>.vm_page_prot+0 S4 A32])
        (reg:SI 4 r4 [142])) 167 {*arm_movsi_insn} (nil))

(note 37 13 38 2 NOTE_INSN_EPILOGUE_BEG)

(insn:TI 38 37 19 2 arch/arm/mm/dma-mapping.c:403 (parallel [
            (unspec:SI [
                    (reg:SI 14 lr)
                ] 6)
            (unspec_volatile [
                    (return)
                ] 1)
        ]) 322 {sibcall_epilogue} (nil))

(call_insn/j:TI 19 38 47 2 arch/arm/mm/dma-mapping.c:402 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_mmap") [flags 0x3] <function_decl 0x1145e500 dma_mmap>) [0 S4 A32])
                    (const_int 4 [0x4])))
            (return)
            (use (const_int 0 [0x0]))
        ]) 259 {*sibcall_value_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 47 19 46 2 ( dma_addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 46 47 45 2 ( cpu_addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 45 46 44 2 ( vma (nil)) NOTE_INSN_VAR_LOCATION)

(note 44 45 20 2 ( dev (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%]  (ab,sibcall)

(barrier 20 44 34)

(note 34 20 0 NOTE_INSN_DELETED)


;; Function __dma_alloc (__dma_alloc)[0:1277]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: size+0
Reg 2: handle+0
Reg 3: gfp+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg:SI 1 r1 [ size ])
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg:SI 3 r3 [ gfp ])

OUT:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: handle+0
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 3:
IN:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: handle+0
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: handle+0
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 4:
IN:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: handle+0
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: handle+0
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 5:
IN:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: handle+0
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 6:
IN:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 7:
IN:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 8:
IN:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: size+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 9:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])


Basic block 10:
IN:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 11:
IN:
Stack adjustment: 64
Reg 0: dev+0
Reg 2: mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 0: gfp+0
Reg 2: mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 12:
IN:
Stack adjustment: 64
Reg 0: gfp+0 dev+0
Reg 2: mask+0 handle+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
      (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 0: gfp+0
Reg 2: handle+0 mask+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 13:
IN:
Stack adjustment: 64
Reg 0: gfp+0
Reg 2: mask+0 handle+0
Reg 3: mask+4
Reg 4: size+0
Reg 5: size+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: mask
    offset 0
      (reg:SI 2 r2 [orig:225 mask ] [225])
    offset 4
      (reg:SI 3 r3 [orig:226 mask+4 ] [226])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 14:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: order+0
Reg 7: gfp+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: e+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: e
    offset 0
      (reg/v/f:SI 6 r6 [orig:149 e ] [149])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 15:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: e+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: e
    offset 0
      (reg/v/f:SI 6 r6 [orig:149 e ] [149])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: e+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: e
    offset 0
      (reg/v/f:SI 6 r6 [orig:149 e ] [149])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 16:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: e+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: e
    offset 0
      (reg/v/f:SI 6 r6 [orig:149 e ] [149])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: e+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: e
    offset 0
      (reg/v/f:SI 6 r6 [orig:149 e ] [149])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 17:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: e+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: e
    offset 0
      (reg/v/f:SI 6 r6 [orig:149 e ] [149])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: ptr+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: ptr
    offset 0
      (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 18:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: ptr+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: ptr
    offset 0
      (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: ptr+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: ptr
    offset 0
      (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 19:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: ptr+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: ptr
    offset 0
      (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: ptr+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: ptr
    offset 0
      (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 20:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: ptr+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: ptr
    offset 0
      (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: ptr+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: ptr
    offset 0
      (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 21:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])


Basic block 22:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 7: gfp+0
Reg 10: c+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 23:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 7: gfp+0
Reg 10: c+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: page+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: page
    offset 0
      (reg/v/f:SI 10 sl [orig:157 page ] [157])
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])


Basic block 24:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: page+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 10 sl [orig:157 page ] [157])
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: page+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 10 sl [orig:157 page ] [157])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])


Basic block 25:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: page+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 10 sl [orig:157 page ] [157])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: page+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 10 sl [orig:157 page ] [157])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])


Basic block 26:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: page+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 10 sl [orig:157 page ] [157])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: page+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 10 sl [orig:157 page ] [157])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])


Basic block 27:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: page+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 10 sl [orig:157 page ] [157])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])


Basic block 28:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: page+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 10 sl [orig:157 page ] [157])
  name: c
    offset 0
      (reg/v/f:SI 9 r9 [orig:141 c ] [141])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 5: page+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: c+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: c
    offset 0
      (reg/f:SI 9 r9 [orig:141 c ] [141])
      (reg/v/f:SI 10 sl [orig:141 c ] [141])


Basic block 29:
IN:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 5: page+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: c+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: c
    offset 0
      (reg/f:SI 9 r9 [orig:141 c ] [141])
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 6: pte+0
Reg 7: off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: c+0
Reg 11: page+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: c
    offset 0
      (reg/f:SI 9 r9 [orig:141 c ] [141])
      (reg/v/f:SI 10 sl [orig:141 c ] [141])


Basic block 30:
IN:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 5: page+0
Reg 6: pte+0
Reg 7: off+0 gfp+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: p+0 c+0
Reg 11: page+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
      (reg/f:SI 9 r9 [orig:141 c ] [141])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: pte+0
Reg 7: gfp+0 off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: c+0 p+0
Variables:
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
      (reg/f:SI 9 r9 [orig:141 c ] [141])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])


Basic block 31:
IN:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 5: page+0
Reg 6: pte+0
Reg 7: off+0 gfp+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: p+0 c+0
Reg 11: page+0
Variables:
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
      (reg/f:SI 9 r9 [orig:141 c ] [141])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])

OUT:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 5: page+0
Reg 6: pte+0
Reg 7: gfp+0 off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: c+0 p+0
Reg 11: page+0
Variables:
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
      (reg/f:SI 9 r9 [orig:141 c ] [141])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])


Basic block 32:
IN:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 5: page+0
Reg 6: pte+0 order+0
Reg 7: off+0 gfp+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: p+0 c+0
Reg 11: page+0
Variables:
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
      (reg/f:SI 9 r9 [orig:141 c ] [141])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])

OUT:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 5: page+0
Reg 6: order+0 pte+0
Reg 7: gfp+0 off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: c+0 p+0
Reg 11: page+0
Variables:
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
      (reg/f:SI 9 r9 [orig:141 c ] [141])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])


Basic block 33:
IN:
Stack adjustment: 64
Reg 0: addr+0
Reg 4: size+0
Reg 5: size+0 page+0
Reg 6: pte+0 order+0
Reg 7: off+0 gfp+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: p+0 c+0
Reg 11: page+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: addr
    offset 0
      (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
      (reg/f:SI 9 r9 [orig:141 c ] [141])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0 size+0
Reg 6: order+0 pte+0
Reg 7: gfp+0 off+0
Reg 8: idx+0
Reg 9: c+0
Reg 10: c+0 p+0
Reg 11: page+0
Variables:
  name: size
    offset 0
      (reg/v:SI 5 r5 [orig:152 size ] [152])
  name: order
    offset 0
      (reg/v:SI 6 r6 [orig:153 order ] [153])
  name: idx
    offset 0
      (reg/v:SI 8 r8 [orig:143 idx ] [143])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: c
    offset 0
      (reg/v/f:SI 10 sl [orig:141 c ] [141])
      (reg/f:SI 9 r9 [orig:141 c ] [141])
  name: pte
    offset 0
      (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
  name: off
    offset 0
      (reg/v:SI 7 r7 [orig:144 off ] [144])


Basic block 34:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 6: ptr+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: ptr
    offset 0
      (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])


Basic block 35:
IN:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])

OUT:
Stack adjustment: 64
Reg 4: size+0
Reg 5: page+0
Reg 7: gfp+0
Reg 10: p+0
Variables:
  name: prot
    offset 0
      (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int 4 [0x4])) [0 prot+0 S4 A32])
  name: page
    offset 0
      (reg/v/f:SI 5 r5 [orig:157 page ] [157])
  name: size
    offset 0
      (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
  name: p
    offset 0
      (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
  name: gfp
    offset 0
      (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])


36 basic blocks, 50 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(8){ }d-1(9){ }d-1(10){ }d-1(11){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  kill	

Successors:  3 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 1, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%]  (fallthru) 3 [86.0%]  (dfs_back)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

Successors:  3 [86.0%]  (dfs_back) 4 [14.0%]  (fallthru,loop_exit)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 4 , prev 3, next 5, loop_depth 0, count 0, freq 1400, maybe hot.
Predecessors:  3 [14.0%]  (fallthru,loop_exit)
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  5 [85.0%]  (fallthru) 12 [15.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 5 , prev 4, next 6, loop_depth 0, count 0, freq 1190, maybe hot.
Predecessors:  4 [85.0%]  (fallthru)
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 1 [r1]

Successors:  6 [29.0%]  (fallthru) 7 [71.0%] 
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 6 , prev 5, next 7, loop_depth 0, count 0, freq 345, maybe hot.
Predecessors:  5 [29.0%]  (fallthru)
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  9 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 7 , prev 6, next 8, loop_depth 0, count 0, freq 845, maybe hot.
Predecessors:  5 [71.0%] 
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  8 [29.0%]  (fallthru) 10 [71.0%] 
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 8 , prev 7, next 9, loop_depth 0, count 0, freq 245, maybe hot.
Predecessors:  7 [29.0%]  (fallthru)
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6] 7 [r7]
;; live  kill	 14 [lr]

Successors:  9 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 9 , prev 8, next 10, loop_depth 0, count 0, freq 590, maybe hot.
Predecessors:  8 [100.0%]  (fallthru) 6 [100.0%] 
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  33 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 10 , prev 9, next 11, loop_depth 0, count 0, freq 0.
Predecessors:  7 [71.0%] 
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  12 [50.0%]  11 [50.0%]  (fallthru)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

Invalid sum of incoming frequencies 600, should be 0

Basic block 11 , prev 10, next 12, loop_depth 0, count 0, freq 0.
Predecessors:  10 [50.0%]  (fallthru)
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

Successors:  13 [50.0%]  12 [50.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 12 , prev 11, next 13, loop_depth 0, count 0, freq 350, maybe hot.
Predecessors:  4 [15.0%]  10 [50.0%]  11 [50.0%]  (fallthru)
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  13 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

Invalid sum of incoming frequencies 210, should be 350

Basic block 13 , prev 12, next 14, loop_depth 0, count 0, freq 700, maybe hot.
Predecessors:  12 [100.0%]  (fallthru) 11 [50.0%] 
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

Successors:  32 [30.2%]  14 [69.8%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

Invalid sum of incoming frequencies 350, should be 700

Basic block 14 , prev 13, next 15, loop_depth 0, count 0, freq 489, maybe hot.
Predecessors:  13 [69.8%]  (fallthru)
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 6 [r6] 10 [sl]
;; live  kill	 14 [lr]

Successors:  16 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 15 , prev 14, next 16, loop_depth 1, count 0, freq 4942, maybe hot.
Predecessors:  16 [91.0%] 
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 10 [sl]
;; live  kill	 14 [lr]

Successors:  16 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 16 , prev 15, next 17, loop_depth 1, count 0, freq 5431, maybe hot.
Predecessors:  15 [100.0%]  (fallthru,dfs_back) 14 [100.0%] 
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

Successors:  15 [91.0%]  17 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 17 , prev 16, next 18, loop_depth 0, count 0, freq 489, maybe hot.
Predecessors:  16 [9.0%]  (fallthru,loop_exit)
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

Successors:  18 [29.0%]  (fallthru) 19 [71.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 18 , prev 17, next 19, loop_depth 0, count 0, freq 142, maybe hot.
Predecessors:  17 [29.0%]  (fallthru)
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

Successors:  19 [100.0%]  (fallthru)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 19 , prev 18, next 20, loop_depth 0, count 0, freq 489, maybe hot.
Predecessors:  17 [71.0%]  18 [100.0%]  (fallthru)
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

Successors:  20 [69.8%]  (fallthru) 34 [30.2%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 20 , prev 19, next 21, loop_depth 0, count 0, freq 341, maybe hot.
Predecessors:  19 [69.8%]  (fallthru)
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  34 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 21 , prev 20, next 22, loop_depth 0, count 0, freq 1.
Predecessors:  35 [100.0%] 
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors:  31 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 22 , prev 21, next 23, loop_depth 0, count 0, freq 1258, maybe hot.
Predecessors:  34 [100.0%] 
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 10 [sl] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

Successors:  23 [85.0%]  (fallthru) 31 [15.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]

Invalid sum of incoming frequencies 489, should be 1258

Basic block 23 , prev 22, next 24, loop_depth 0, count 0, freq 1069, maybe hot.
Predecessors:  22 [85.0%]  (fallthru)
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  kill	

Successors:  24 [100.0%]  (fallthru)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


Basic block 24 , prev 23, next 25, loop_depth 1, count 0, freq 7616, maybe hot.
Predecessors:  23 [100.0%]  (fallthru) 27 [100.0%]  (dfs_back)
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

Successors:  25 [0.0%]  (fallthru,loop_exit) 26 [100.0%] 
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


Basic block 25 , prev 24, next 26, loop_depth 0, count 0, freq 3.
Predecessors:  24 [0.0%]  (fallthru,loop_exit)
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

Successors: 
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]


Basic block 26 , prev 25, next 27, loop_depth 1, count 0, freq 7613, maybe hot.
Predecessors:  24 [100.0%] 
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 11 [fp] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

Successors:  27 [86.0%]  (fallthru) 28 [14.0%]  (loop_exit)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


Basic block 27 , prev 26, next 28, loop_depth 1, count 0, freq 6547, maybe hot.
Predecessors:  26 [86.0%]  (fallthru)
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 11 [fp]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 11 [fp]
;; live  kill	

Successors:  24 [100.0%]  (dfs_back)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


Basic block 28 , prev 27, next 29, loop_depth 0, count 0, freq 1066, maybe hot.
Predecessors:  26 [14.0%]  (loop_exit)
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 10 [sl] 24 [cc]
;; live  kill	

Successors:  29 [92.3%]  (fallthru) 31 [7.7%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 29 , prev 28, next 30, loop_depth 0, count 0, freq 984, maybe hot.
Predecessors:  28 [92.3%]  (fallthru)
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 5 [r5]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 5 [r5]
;; live  kill	

Successors:  33 [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 30 , prev 29, next 31, loop_depth 1, count 0, freq 2745, maybe hot.
Predecessors:  31 [91.0%] 
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5]
;; live  kill	 14 [lr]

Successors:  31 [100.0%]  (fallthru,dfs_back)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 31 , prev 30, next 32, loop_depth 1, count 0, freq 3016, maybe hot.
Predecessors:  22 [15.0%]  28 [7.7%]  30 [100.0%]  (fallthru,dfs_back) 21 [100.0%] 
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

Successors:  30 [91.0%]  32 [9.0%]  (fallthru,loop_exit)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


Basic block 32 , prev 31, next 33, loop_depth 0, count 0, freq 0.
Predecessors:  13 [30.2%]  31 [9.0%]  (fallthru,loop_exit)
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

Successors:  33 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 482, should be 0

Basic block 33 , prev 32, next 34, loop_depth 0, count 0, freq 1397, maybe hot.
Predecessors:  32 [100.0%]  (fallthru) 9 [100.0%]  29 [100.0%] 
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]

Invalid sum of incoming frequencies 1574, should be 1397

Basic block 34 , prev 33, next 35, loop_depth 0, count 0, freq 489, maybe hot.
Predecessors:  19 [30.2%]  20 [100.0%] 
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 24 [cc]
;; live  kill	

Successors:  35 [0.0%]  (fallthru) 22 [100.0%] 
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


Basic block 35 , prev 34, next 1, loop_depth 0, count 0, freq 0.
Predecessors:  34 [0.0%]  (fallthru)
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}

Successors:  21 [100.0%] 


Basic block 1 , prev 35, loop_depth 0, count 0, freq 1397, maybe hot.
Predecessors:  33 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(8){ }u-1(9){ }u-1(10){ }u-1(11){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




__dma_alloc

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 8[r8] 9[r9] 10[sl] 11[fp] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={30d,26u} r1={38d,22u,1d} r2={20d,9u} r3={32d,21u,1d} r4={6d,14u} r5={10d,21u,1d} r6={11d,20u,1d} r7={6d,10u} r8={9d,14u,2d} r9={2d,4u} r10={6d,9u,1d} r11={3d,4u} r12={18d,5u} r13={3d,64u,1d} r14={17d,3u} r15={15d} r16={15d} r17={15d} r18={15d} r19={15d} r20={15d} r21={15d} r22={15d} r23={15d} r24={33d,20u} r27={15d} r28={15d} r29={15d} r30={15d} r31={15d} r32={15d} r33={15d} r34={15d} r35={15d} r36={15d} r37={15d} r38={15d} r39={15d} r40={15d} r41={15d} r42={15d} r43={15d} r44={15d} r45={15d} r46={15d} r47={15d} r48={15d} r49={15d} r50={15d} r51={15d} r52={15d} r53={15d} r54={15d} r55={15d} r56={15d} r57={15d} r58={15d} r59={15d} r60={15d} r61={15d} r62={15d} r63={15d} r64={15d} r65={15d} r66={15d} r67={15d} r68={15d} r69={15d} r70={15d} r71={15d} r72={15d} r73={15d} r74={15d} r75={15d} r76={15d} r77={15d} r78={15d} r79={15d} r80={15d} r81={15d} r82={15d} r83={15d} r84={15d} r85={15d} r86={15d} r87={15d} r88={15d} r89={15d} r90={15d} r91={15d} r92={15d} r93={15d} r94={15d} r95={15d} r96={15d} r97={15d} r98={15d} r99={15d} r100={15d} r101={15d} r102={15d} r103={15d} r104={15d} r105={15d} r106={15d} r107={15d} r108={15d} r109={15d} r110={15d} r111={15d} r112={15d} r113={15d} r114={15d} r115={15d} r116={15d} r117={15d} r118={15d} r119={15d} r120={15d} r121={15d} r122={15d} r123={15d} r124={15d} r125={15d} r126={15d} r127={15d} r161={1d} 
;;    total ref usage 2169{1894d,266u,9e} in 169{154 regular + 15 call} insns.
(note 2 0 432 NOTE_INSN_DELETED)

(note 432 2 433 2 ( handle (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ handle ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 433 432 434 2 ( gfp (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ gfp ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 434 433 435 2 ( prot (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 prot+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 435 434 436 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 436 435 9 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  def 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 13 [sp]
;; live  kill	

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 9 436 4 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 4 9 6 2 NOTE_INSN_DELETED)

(note 6 4 8 2 NOTE_INSN_DELETED)

(note 8 6 16 2 NOTE_INSN_FUNCTION_BEG)

(note 16 8 7 2 NOTE_INSN_DELETED)

(note 7 16 385 2 NOTE_INSN_DELETED)

(insn/f:TI 385 7 14 2 arch/arm/mm/dma-mapping.c:309 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 8 r8))
            (use (reg:SI 9 r9))
            (use (reg:SI 10 sl))
            (use (reg:SI 11 fp))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 8 r8)
            (expr_list:REG_DEAD (reg:SI 7 r7)
                (expr_list:REG_DEAD (reg:SI 6 r6)
                    (expr_list:REG_DEAD (reg:SI 5 r5)
                        (expr_list:REG_DEAD (reg:SI 4 r4)
                            (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                        (set/f (reg/f:SI 13 sp)
                                            (plus:SI (reg/f:SI 13 sp)
                                                (const_int -36 [0xffffffffffffffdc])))
                                        (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                            (reg:SI 4 r4))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 4 [0x4])) [0 S4 A32])
                                            (reg:SI 5 r5))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 8 [0x8])) [0 S4 A32])
                                            (reg:SI 6 r6))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 12 [0xc])) [0 S4 A32])
                                            (reg:SI 7 r7))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 16 [0x10])) [0 S4 A32])
                                            (reg:SI 8 r8))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 20 [0x14])) [0 S4 A32])
                                            (reg:SI 9 r9))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 24 [0x18])) [0 S4 A32])
                                            (reg:SI 10 sl))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 28 [0x1c])) [0 S4 A32])
                                            (reg:SI 11 fp))
                                        (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                    (const_int 32 [0x20])) [0 S4 A32])
                                            (reg:SI 14 lr))
                                    ])
                                (nil)))))))))

(insn:TI 14 385 15 2 arch/arm/mm/dma-mapping.c:321 (set (reg:SI 4 r4 [166])
        (plus:SI (reg:SI 1 r1 [ size ])
            (const_int 4080 [0xff0]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg:SI 1 r1 [ size ])
        (nil)))

(insn:TI 15 14 12 2 arch/arm/mm/dma-mapping.c:321 (set (reg:SI 4 r4 [orig:158 D.24512 ] [158])
        (plus:SI (reg:SI 4 r4 [166])
            (const_int 15 [0xf]))) 4 {*arm_addsi3} (expr_list:REG_EQUAL (plus:SI (reg/v:SI 161 [ size ])
            (const_int 4095 [0xfff]))
        (nil)))

(insn 12 15 319 2 arch/arm/mm/dma-mapping.c:320 (set (reg:SI 12 ip [165])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int -1 [0xffffffffffffffff])
        (nil)))

(insn:TI 319 12 437 2 arch/arm/mm/dma-mapping.c:321 (set (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
        (and:SI (reg:SI 4 r4 [orig:158 D.24512 ] [158])
            (const_int -4081 [0xfffffffffffff00f]))) 67 {*arm_andsi3_insn} (nil))

(note 437 319 386 2 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn/f 386 437 387 2 arch/arm/mm/dma-mapping.c:309 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -28 [0xffffffffffffffe4]))) 4 {*arm_addsi3} (nil))

(note 387 386 320 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 320 387 11 2 arch/arm/mm/dma-mapping.c:321 (set (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
        (and:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (const_int -16 [0xfffffffffffffff0]))) 67 {*arm_andsi3_insn} (nil))

(insn 11 320 438 2 arch/arm/mm/dma-mapping.c:318 (set (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
        (and:SI (reg:SI 3 r3 [ gfp ])
            (const_int -16385 [0xffffffffffffbfff]))) 67 {*arm_andsi3_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ gfp ])
        (nil)))

(note 438 11 18 2 ( gfp (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 18 438 20 2 include/asm-generic/getorder.h:13 (set (reg:SI 8 r8 [orig:154 D.25334 ] [154])
        (plus:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (reg:SI 12 ip))) 4 {*arm_addsi3} (nil))

(insn 20 18 439 2 include/asm-generic/getorder.h:14 (set (reg/v:SI 6 r6 [orig:153 order ] [153])
        (reg:SI 12 ip [165])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
        (nil)))

(note 439 20 5 2 ( order (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:153 order ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 5 439 19 2 arch/arm/mm/dma-mapping.c:309 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-4 S4 A32])
        (reg:SI 2 r2 [ handle ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 19 5 440 2 include/asm-generic/getorder.h:13 (set (reg/v:SI 5 r5 [orig:152 size ] [152])
        (lshiftrt:SI (reg:SI 8 r8 [orig:154 D.25334 ] [154])
            (const_int 11 [0xb]))) 117 {*arm_shiftsi3} (nil))

(note 440 19 13 2 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:152 size ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 13 440 24 2 arch/arm/mm/dma-mapping.c:320 (set (mem:SI (reg:SI 2 r2 [ handle ]) [0 S4 A32])
        (reg:SI 12 ip [165])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [165])
        (expr_list:REG_DEAD (reg:SI 2 r2 [ handle ])
            (expr_list:REG_EQUAL (const_int -1 [0xffffffffffffffff])
                (nil)))))
;; End of basic block 2 -> ( 3)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [100.0%]  (fallthru)

;; Start of basic block ( 2 3) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 6 [r6] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 5 [r5] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  2 [100.0%]  (fallthru)
;; Pred edge  3 [86.0%]  (dfs_back)
(code_label 24 13 21 3 153 "" [1 uses])

(note 21 24 22 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(note 22 21 25 3 NOTE_INSN_DELETED)

(insn:TI 25 22 441 3 include/asm-generic/getorder.h:18 discrim 1 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (lshiftrt:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
                        (const_int 1 [0x1]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 5 r5 [orig:152 size ] [152])
                (lshiftrt:SI (reg/v:SI 5 r5 [orig:152 size ] [152])
                    (const_int 1 [0x1])))
        ]) 118 {*shiftsi3_compare0} (nil))

(note 441 25 23 3 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:152 size ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn 23 441 442 3 include/asm-generic/getorder.h:17 (set (reg/v:SI 6 r6 [orig:153 order ] [153])
        (plus:SI (reg/v:SI 6 r6 [orig:153 order ] [153])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(note 442 23 26 3 ( order (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:153 order ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 26 442 27 3 include/asm-generic/getorder.h:18 discrim 1 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 24)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 8600 [0x2198])
            (nil))))
;; End of basic block 3 -> ( 3 4)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  3 [86.0%]  (dfs_back)
;; Succ edge  4 [14.0%]  (fallthru,loop_exit)

;; Start of basic block ( 3) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  3 [14.0%]  (fallthru,loop_exit)
(note 27 26 28 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn:TI 28 27 29 4 arch/arm/mm/dma-mapping.c:34 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:160 dev ] [160])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 29 28 30 4 arch/arm/mm/dma-mapping.c:34 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 4 -> ( 5 12)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  5 [85.0%]  (fallthru)
;; Succ edge  12 [15.0%] 

;; Start of basic block ( 4) -> 5
;; bb 5 artificial_defs: { }
;; bb 5 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 2 [r2] 3 [r3] 24 [cc]
;; live  kill	 1 [r1]

;; Pred edge  4 [85.0%]  (fallthru)
(note 30 29 33 5 [bb 5] NOTE_INSN_BASIC_BLOCK)

(note 33 30 34 5 NOTE_INSN_DELETED)

(note 34 33 31 5 NOTE_INSN_DELETED)

(insn:TI 31 34 323 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 3 r3 [168])
        (const_int 280 [0x118])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 280 [0x118])
        (nil)))

(insn:TI 323 31 324 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 1 r1 [228])
        (plus:SI (reg/v/f:SI 0 r0 [orig:160 dev ] [160])
            (reg:SI 3 r3 [168]))) 4 {*arm_addsi3} (nil))

(insn:TI 324 323 321 5 arch/arm/mm/dma-mapping.c:35 (set (reg/f:SI 1 r1 [229])
        (plus:SI (reg:SI 1 r1 [228])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(insn 321 324 443 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 2 r2 [orig:225 mask ] [225])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 0 r0 [orig:160 dev ] [160])
                (reg:SI 3 r3 [168])) [0 <variable>.coherent_dma_mask+0 S4 A64])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [168])
        (nil)))

(note 443 321 444 5 ( handle (nil)) NOTE_INSN_VAR_LOCATION)

(note 444 443 325 5 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 325 444 445 5 arch/arm/mm/dma-mapping.c:35 (set (reg:SI 3 r3 [orig:226 mask+4 ] [226])
        (mem/s/j:SI (reg/f:SI 1 r1 [229]) [0 <variable>.coherent_dma_mask+4 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/f:SI 1 r1 [229])
        (nil)))

(note 445 325 35 5 ( mask (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:225 mask ] [225])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 35 445 36 5 arch/arm/mm/dma-mapping.c:41 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (ior:SI (reg:SI 2 r2 [orig:225 mask ] [225])
                        (reg:SI 3 r3 [orig:226 mask+4 ] [226]))
                    (const_int 0 [0x0])))
            (clobber (reg:SI 1 r1))
        ]) 92 {*iorsi3_compare0_scratch} (expr_list:REG_UNUSED (reg:SI 1 r1)
        (nil)))

(jump_insn:TI 36 35 37 5 arch/arm/mm/dma-mapping.c:41 (set (pc)
        (if_then_else (ne (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 45)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 5 -> ( 6 7)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  6 [29.0%]  (fallthru)
;; Succ edge  7 [71.0%] 

;; Start of basic block ( 5) -> 6
;; bb 6 artificial_defs: { }
;; bb 6 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  5 [29.0%]  (fallthru)
(note 37 36 40 6 [bb 6] NOTE_INSN_BASIC_BLOCK)

(insn:TI 40 37 41 6 arch/arm/mm/dma-mapping.c:42 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x115c6b80>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC7") [flags 0x82] <string_cst 0x115c6b80>)
        (nil)))

(call_insn:TI 41 40 447 6 arch/arm/mm/dma-mapping.c:42 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dev_warn") [flags 0x41] <function_decl 0x11022280 dev_warn>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(note 447 41 446 6 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(note 446 447 414 6 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn 414 446 415 6 (set (pc)
        (label_ref 393)) -1 (nil))
;; End of basic block 6 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%] 

(barrier 415 414 448)

(note 448 415 449 7 ( mask (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:225 mask ] [225])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 449 448 45 7 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 5) -> 7
;; bb 7 artificial_defs: { }
;; bb 7 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 2 [r2] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  5 [71.0%] 
(code_label 45 449 46 7 155 "" [1 uses])

(note 46 45 47 7 [bb 7] NOTE_INSN_BASIC_BLOCK)

(note 47 46 48 7 NOTE_INSN_DELETED)

(note 48 47 49 7 NOTE_INSN_DELETED)

(insn:TI 49 48 50 7 arch/arm/mm/dma-mapping.c:46 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:225 mask ] [225])
            (const_int -1 [0xffffffffffffffff]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 50 49 51 7 arch/arm/mm/dma-mapping.c:46 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 62)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 7 -> ( 8 10)
;; lr  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  8 [29.0%]  (fallthru)
;; Succ edge  10 [71.0%] 

;; Start of basic block ( 7) -> 8
;; bb 8 artificial_defs: { }
;; bb 8 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 3 [r3] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 6 [r6] 7 [r7]
;; live  kill	 14 [lr]

;; Pred edge  7 [29.0%]  (fallthru)
(note 51 50 56 8 [bb 8] NOTE_INSN_BASIC_BLOCK)

(insn:TI 56 51 383 8 arch/arm/mm/dma-mapping.c:47 (set (reg:SI 1 r1)
        (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x111f0060>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC8") [flags 0x82] <string_cst 0x111f0060>)
        (nil)))

(insn 383 56 450 8 arch/arm/mm/dma-mapping.c:47 (set (reg:SI 6 r6 [174])
        (const_int -1 [0xffffffffffffffff])) 167 {*arm_movsi_insn} (nil))

(note 450 383 384 8 ( order (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 384 450 451 8 arch/arm/mm/dma-mapping.c:47 (set (reg:SI 7 r7 [+4 ])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 451 384 54 8 ( gfp (nil)) NOTE_INSN_VAR_LOCATION)

(insn 54 451 58 8 arch/arm/mm/dma-mapping.c:47 (set (mem:DI (reg/f:SI 13 sp) [0 S8 A64])
        (reg:DI 6 r6 [174])) 163 {*arm_movdi} (expr_list:REG_EQUAL (const_int 4294967295 [0xffffffff])
        (nil)))

(call_insn:TI 58 54 453 8 arch/arm/mm/dma-mapping.c:47 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dev_warn") [flags 0x41] <function_decl 0x11022280 dev_warn>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:DI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(note 453 58 452 8 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(note 452 453 454 8 ( mask (nil)) NOTE_INSN_VAR_LOCATION)
;; End of basic block 8 -> ( 9)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  9 [100.0%]  (fallthru)

(note 454 452 455 9 ( gfp (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 455 454 393 9 ( order (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:153 order ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 8 6) -> 9
;; bb 9 artificial_defs: { }
;; bb 9 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  8 [100.0%]  (fallthru)
;; Pred edge  6 [100.0%] 
(code_label 393 455 391 9 180 "" [1 uses])

(note 391 393 59 9 [bb 9] NOTE_INSN_BASIC_BLOCK)

(insn:TI 59 391 456 9 arch/arm/mm/dma-mapping.c:325 (set (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
        (reg/v:SI 5 r5 [orig:152 size ] [152])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(note 456 59 416 9 ( addr (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 416 456 417 9 (set (pc)
        (label_ref 257)) -1 (nil))
;; End of basic block 9 -> ( 33)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  33 [100.0%] 

(barrier 417 416 457)

(note 457 417 458 10 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 458 457 459 10 ( mask (expr_list:REG_DEP_TRUE (reg:DI 2 r2 [orig:225 mask ] [225])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 459 458 62 10 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 7) -> 10
;; bb 10 artificial_defs: { }
;; bb 10 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  7 [71.0%] 
(code_label 62 459 63 10 157 "" [1 uses])

(note 63 62 64 10 [bb 10] NOTE_INSN_BASIC_BLOCK)

(insn:TI 64 63 65 10 arch/arm/mm/dma-mapping.c:80 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 3 r3 [orig:226 mask+4 ] [226])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [orig:226 mask+4 ] [226])
        (nil)))

(jump_insn:TI 65 64 283 10 arch/arm/mm/dma-mapping.c:80 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 79)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 10 -> ( 12 11)
;; lr  out 	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  12 [50.0%] 
;; Succ edge  11 [50.0%]  (fallthru)

;; Start of basic block ( 10) -> 11
;; bb 11 artificial_defs: { }
;; bb 11 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 2 [r2] 7 [r7] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 0 [r0] 2 [r2] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 24 [cc]
;; live  kill	

;; Pred edge  10 [50.0%]  (fallthru)
(note 283 65 68 11 [bb 11] NOTE_INSN_BASIC_BLOCK)

(insn:TI 68 283 76 11 arch/arm/mm/dma-mapping.c:80 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 2 r2 [orig:225 mask ] [225])
            (const_int -2 [0xfffffffffffffffe]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 2 r2 [orig:225 mask ] [225])
        (nil)))

(insn:TI 76 68 460 11 arch/arm/mm/dma-mapping.c:81 (cond_exec (leu (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
            (ior:SI (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
                (const_int 1 [0x1])))) 2310 {neon_vornv2di+43} (nil))

(note 460 76 461 11 ( gfp (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 461 460 69 11 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 69 461 462 11 arch/arm/mm/dma-mapping.c:80 (set (pc)
        (if_then_else (leu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 82)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 5000 [0x1388])
            (nil))))
;; End of basic block 11 -> ( 13 12)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [50.0%] 
;; Succ edge  12 [50.0%]  (fallthru)

(note 462 69 463 12 ( handle (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ handle ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 463 462 464 12 ( gfp (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 464 463 79 12 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 4 10 11) -> 12
;; bb 12 artificial_defs: { }
;; bb 12 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 7 [r7] 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  4 [15.0%] 
;; Pred edge  10 [50.0%] 
;; Pred edge  11 [50.0%]  (fallthru)
(code_label 79 464 80 12 154 "" [2 uses])

(note 80 79 81 12 [bb 12] NOTE_INSN_BASIC_BLOCK)

(insn:TI 81 80 465 12 arch/arm/mm/dma-mapping.c:81 (set (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
        (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 12 -> ( 13)
;; lr  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  13 [100.0%]  (fallthru)

(note 465 81 466 13 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(note 466 465 82 13 ( gfp (expr_list:REG_DEP_TRUE (reg/v:SI 0 r0 [orig:137 gfp.960 ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 12 11) -> 13
;; bb 13 artificial_defs: { }
;; bb 13 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  12 [100.0%]  (fallthru)
;; Pred edge  11 [50.0%] 
(code_label 82 466 83 13 159 "" [1 uses])

(note 83 82 91 13 [bb 13] NOTE_INSN_BASIC_BLOCK)

(note 91 83 87 13 NOTE_INSN_DELETED)

(insn:TI 87 91 88 13 include/linux/gfp.h:300 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:153 order ] [153])) 167 {*arm_movsi_insn} (nil))

(insn 88 87 467 13 include/linux/gfp.h:300 (set (reg:SI 2 r2)
        (const:SI (plus:SI (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)
                (const_int 2304 [0x900])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("contig_page_data") [flags 0xc0] <var_decl 0x10c5b780 contig_page_data>)
                (const_int 2304 [0x900])))
        (nil)))

(note 467 88 468 13 ( handle (nil)) NOTE_INSN_VAR_LOCATION)

(note 468 467 89 13 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 89 468 469 13 include/linux/gfp.h:300 (set (reg:SI 3 r3)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(note 469 89 90 13 ( mask (nil)) NOTE_INSN_VAR_LOCATION)

(call_insn:TI 90 469 470 13 include/linux/gfp.h:300 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__alloc_pages_nodemask") [flags 0x41] <function_decl 0x10cd6180 __alloc_pages_nodemask>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 470 90 92 13 ( gfp (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 92 470 471 13 arch/arm/mm/dma-mapping.c:84 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 5 r5 [orig:157 page ] [157])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (nil))

(note 471 92 472 13 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(note 472 471 93 13 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:157 page ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 93 472 94 13 arch/arm/mm/dma-mapping.c:84 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 254)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 13 -> ( 32 14)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  32 [30.2%] 
;; Succ edge  14 [69.8%]  (fallthru)

;; Start of basic block ( 13) -> 14
;; bb 14 artificial_defs: { }
;; bb 14 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1] 3 [r3] 6 [r6] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  13 [69.8%]  (fallthru)
(note 94 93 99 14 [bb 14] NOTE_INSN_BASIC_BLOCK)

(note 99 94 102 14 NOTE_INSN_DELETED)

(note 102 99 96 14 NOTE_INSN_DELETED)

(insn:TI 96 102 97 14 arch/arm/mm/dma-mapping.c:90 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:153 order ] [153])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 97 96 98 14 arch/arm/mm/dma-mapping.c:90 (parallel [
            (call (mem:SI (symbol_ref:SI ("split_page") [flags 0x41] <function_decl 0x10f23500 split_page>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 98 97 100 14 arch/arm/mm/dma-mapping.c:91 (set (reg:SI 3 r3 [176])
        (lshiftrt:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (nil))

(insn:TI 100 98 379 14 arch/arm/mm/dma-mapping.c:91 (set (reg:SI 3 r3)
        (plus:SI (mult:SI (reg:SI 3 r3 [176])
                (const_int 32 [0x20]))
            (reg/v/f:SI 5 r5 [orig:157 page ] [157]))) 270 {*arith_shiftsi} (nil))

(insn 379 100 330 14 arch/arm/mm/dma-mapping.c:91 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-8 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn:TI 330 379 104 14 arch/arm/mm/dma-mapping.c:91 (set (reg:SI 3 r3 [179])
        (const_int 32 [0x20])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 32 [0x20])
        (nil)))

(insn 104 330 473 14 arch/arm/mm/dma-mapping.c:91 (set (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-8 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 473 104 103 14 ( p (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 103 473 474 14 arch/arm/mm/dma-mapping.c:91 (set (reg/v/f:SI 6 r6 [orig:149 e ] [149])
        (plus:SI (ashift:SI (reg:SI 3 r3 [179])
                (reg/v:SI 6 r6 [orig:153 order ] [153]))
            (reg/v/f:SI 5 r5 [orig:157 page ] [157]))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 3 r3 [179])
        (nil)))

(note 474 103 475 14 ( order (nil)) NOTE_INSN_VAR_LOCATION)

(note 475 474 418 14 ( e (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:149 e ] [149])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 418 475 419 14 (set (pc)
        (label_ref 112)) -1 (nil))
;; End of basic block 14 -> ( 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  16 [100.0%] 

(barrier 419 418 114)

;; Start of basic block ( 16) -> 15
;; bb 15 artificial_defs: { }
;; bb 15 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 10 [sl]
;; live  kill	 14 [lr]

;; Pred edge  16 [91.0%] 
(code_label 114 419 107 15 162 "" [1 uses])

(note 107 114 108 15 [bb 15] NOTE_INSN_BASIC_BLOCK)

(insn:TI 108 107 297 15 arch/arm/mm/dma-mapping.c:92 (set (reg:SI 0 r0)
        (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])) 167 {*arm_movsi_insn} (nil))

(insn 297 108 110 15 arch/arm/mm/dma-mapping.c:92 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 110 297 111 15 arch/arm/mm/dma-mapping.c:92 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10cd6800 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 111 110 476 15 arch/arm/mm/dma-mapping.c:91 discrim 2 (set (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
        (plus:SI (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))
;; End of basic block 15 -> ( 16)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  16 [100.0%]  (fallthru,dfs_back)

(note 476 111 112 16 ( p (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 15 14) -> 16
;; bb 16 artificial_defs: { }
;; bb 16 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 24 [cc]
;; live  kill	

;; Pred edge  15 [100.0%]  (fallthru,dfs_back)
;; Pred edge  14 [100.0%] 
(code_label 112 476 113 16 161 "" [1 uses])

(note 113 112 115 16 [bb 16] NOTE_INSN_BASIC_BLOCK)

(insn:TI 115 113 116 16 arch/arm/mm/dma-mapping.c:91 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
            (reg/v/f:SI 6 r6 [orig:149 e ] [149]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 116 115 117 16 arch/arm/mm/dma-mapping.c:91 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 114)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 16 -> ( 15 17)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  15 [91.0%] 
;; Succ edge  17 [9.0%]  (fallthru,loop_exit)

;; Start of basic block ( 16) -> 17
;; bb 17 artificial_defs: { }
;; bb 17 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 6 [r6] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 6 [r6] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  16 [9.0%]  (fallthru,loop_exit)
(note 117 116 118 17 [bb 17] NOTE_INSN_BASIC_BLOCK)

(insn:TI 118 117 119 17 arch/arm/mm/dma-mapping.c:98 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 119 118 121 17 arch/arm/mm/dma-mapping.c:98 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("page_address") [flags 0x41] <function_decl 0x10f7b880 page_address>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (nil)
    (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
        (nil)))

(insn 121 119 120 17 arch/arm/mm/dma-mapping.c:99 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 120 121 477 17 arch/arm/mm/dma-mapping.c:98 (set (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
        (reg:SI 0 r0)) 167 {*arm_movsi_insn} (nil))

(note 477 120 478 17 ( e (nil)) NOTE_INSN_VAR_LOCATION)

(note 478 477 122 17 ( ptr (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 122 478 123 17 arch/arm/mm/dma-mapping.c:99 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 127)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 7100 [0x1bbc])
            (nil))))
;; End of basic block 17 -> ( 18 19)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  18 [29.0%]  (fallthru)
;; Succ edge  19 [71.0%] 

;; Start of basic block ( 17) -> 18
;; bb 18 artificial_defs: { }
;; bb 18 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 0 [r0] 4 [r4] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  17 [29.0%]  (fallthru)
(note 123 122 125 18 [bb 18] NOTE_INSN_BASIC_BLOCK)

(insn:TI 125 123 126 18 arch/arm/mm/dma-mapping.c:99 discrim 1 (set (reg:SI 1 r1)
        (reg/v:SI 4 r4 [orig:138 size.959 ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 126 125 127 18 arch/arm/mm/dma-mapping.c:99 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__memzero") [flags 0x41] <function_decl 0x10bb1200 __memzero>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 18 -> ( 19)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  19 [100.0%]  (fallthru)

;; Start of basic block ( 17 18) -> 19
;; bb 19 artificial_defs: { }
;; bb 19 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 3 [r3] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  17 [71.0%] 
;; Pred edge  18 [100.0%]  (fallthru)
(code_label 127 126 128 19 163 "" [1 uses])

(note 128 127 130 19 [bb 19] NOTE_INSN_BASIC_BLOCK)

(note 130 128 131 19 NOTE_INSN_DELETED)

(note 131 130 329 19 NOTE_INSN_DELETED)

(insn:TI 329 131 132 19 arch/arm/mm/dma-mapping.c:100 (set (reg/f:SI 3 r3 [180])
        (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("cpu_cache") [flags 0xc0] <var_decl 0x112494e0 cpu_cache>)
        (nil)))

(insn 132 329 133 19 arch/arm/mm/dma-mapping.c:100 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])) 167 {*arm_movsi_insn} (nil))

(insn:TI 133 132 134 19 arch/arm/mm/dma-mapping.c:100 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
            (reg/v:SI 4 r4 [orig:138 size.959 ] [138]))) 4 {*arm_addsi3} (nil))

(call_insn:TI 134 133 135 19 arch/arm/mm/dma-mapping.c:100 (parallel [
            (call (mem:SI (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [180])
                            (const_int 36 [0x24])) [0 cpu_cache.dma_flush_range+0 S4 A32]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 246 {*call_mem} (expr_list:REG_DEAD (reg/f:SI 3 r3 [180])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 135 134 136 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (reg/f:SI 3 r3 [183])
        (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
        (nil)))

(insn:TI 136 135 137 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (reg/f:SI 3 r3 [orig:155 D.25331 ] [155])
        (mem/s/f/j/c:SI (plus:SI (reg/f:SI 3 r3 [183])
                (const_int 8 [0x8])) [0 outer_cache.flush_range+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j/c:SI (const:SI (plus:SI (symbol_ref:SI ("outer_cache") [flags 0xc0] <var_decl 0x512cf6c0 outer_cache>)
                    (const_int 8 [0x8]))) [0 outer_cache.flush_range+0 S4 A32])
        (nil)))

(insn:TI 137 136 138 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:155 D.25331 ] [155])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 138 137 139 19 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:55 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 262)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 3017 [0xbc9])
            (nil))))
;; End of basic block 19 -> ( 20 34)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  20 [69.8%]  (fallthru)
;; Succ edge  34 [30.2%] 

;; Start of basic block ( 19) -> 20
;; bb 20 artificial_defs: { }
;; bb 20 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 6 [r6] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  19 [69.8%]  (fallthru)
(note 139 138 141 20 [bb 20] NOTE_INSN_BASIC_BLOCK)

(note 141 139 143 20 NOTE_INSN_DELETED)

(note 143 141 142 20 NOTE_INSN_DELETED)

(insn:TI 142 143 144 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (set (reg:SI 1 r1 [185])
        (plus:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn 144 142 145 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (set (reg:SI 0 r0)
        (plus:SI (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
            (const_int 1073741824 [0x40000000]))) 4 {*arm_addsi3} (nil))

(insn:TI 145 144 146 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (set (reg:SI 1 r1)
        (plus:SI (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
            (reg:SI 1 r1 [185]))) 4 {*arm_addsi3} (expr_list:REG_DEAD (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
        (nil)))

(call_insn:TI 146 145 420 20 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/outercache.h:56 (parallel [
            (call (mem:SI (reg/f:SI 3 r3 [orig:155 D.25331 ] [155]) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 244 {*call_reg_armv5} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:155 D.25331 ] [155])
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(jump_insn 420 146 421 20 (set (pc)
        (label_ref 262)) -1 (nil))
;; End of basic block 20 -> ( 34)
;; lr  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  34 [100.0%] 

(barrier 421 420 479)

(note 479 421 429 21 ( ptr (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 35) -> 21
;; bb 21 artificial_defs: { }
;; bb 21 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  35 [100.0%] 
(code_label 429 479 149 21 182 "" [1 uses])

(note 149 429 154 21 [bb 21] NOTE_INSN_BASIC_BLOCK)

(insn:TI 154 149 153 21 arch/arm/mm/dma-mapping.c:202 (set (reg:SI 1 r1)
        (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 36 [0x24])))) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const:SI (plus:SI (symbol_ref:SI ("*.LANCHOR0") [flags 0x182])
                (const_int 36 [0x24])))
        (nil)))

(insn:TI 153 154 155 21 arch/arm/mm/dma-mapping.c:202 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x1150bec0>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC9") [flags 0x82] <string_cst 0x1150bec0>)
        (nil)))

(call_insn:TI 155 153 156 21 arch/arm/mm/dma-mapping.c:202 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("printk") [flags 0x41] <function_decl 0x10a57b00 printk>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_UNUSED (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(call_insn:TI 156 155 422 21 arch/arm/mm/dma-mapping.c:203 (parallel [
            (call (mem:SI (symbol_ref:SI ("dump_stack") [flags 0x41] <function_decl 0x10a57d80 dump_stack>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (nil)
    (nil))

(jump_insn 422 156 423 21 (set (pc)
        (label_ref 298)) -1 (nil))
;; End of basic block 21 -> ( 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  31 [100.0%] 

(barrier 423 422 315)

;; Start of basic block ( 34) -> 22
;; bb 22 artificial_defs: { }
;; bb 22 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; lr  use 	 4 [r4] 7 [r7] 8 [r8] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 10 [sl] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 8 [r8] 10 [sl] 24 [cc]
;; live  kill	 14 [lr] 24 [cc]

;; Pred edge  34 [100.0%] 
(code_label 315 423 159 22 177 "" [1 uses])

(note 159 315 165 22 [bb 22] NOTE_INSN_BASIC_BLOCK)

(note 165 159 172 22 NOTE_INSN_DELETED)

(note 172 165 160 22 NOTE_INSN_DELETED)

(insn:TI 160 172 480 22 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:268 (set (reg/v:SI 8 r8 [orig:145 ret ] [145])
        (asm_operands:SI ("clz	%0, %1") ("=r") 0 [
                (reg:SI 8 r8 [orig:154 D.25334 ] [154])
            ]
             [
                (asm_input:SI ("r") 0)
            ] 1265521)) -1 (nil))

(note 480 160 328 22 ( ret (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:145 ret ] [145])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 328 480 161 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 1 r1 [193])
        (const_int 1 [0x1])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (const_int 1 [0x1])
        (nil)))

(insn 161 328 481 22 /Volumes/Jenkins/tf101-kernel-tegra/arch/arm/include/asm/bitops.h:269 (set (reg/v:SI 8 r8 [orig:135 bit.962 ] [135])
        (minus:SI (const_int 32 [0x20])
            (reg/v:SI 8 r8 [orig:145 ret ] [145]))) 28 {*arm_subsi3_insn} (nil))

(note 481 161 482 22 ( bit (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:135 bit.962 ] [135])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 482 481 163 22 ( ret (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 163 482 483 22 arch/arm/mm/dma-mapping.c:221 (parallel [
            (set (reg:SI 8 r8 [191])
                (smin:SI (reg/v:SI 8 r8 [orig:135 bit.962 ] [135])
                    (const_int 20 [0x14])))
            (clobber (reg:CC 24 cc))
        ]) 105 {*arm_smin_insn} (expr_list:REG_UNUSED (reg:CC 24 cc)
        (nil)))

(note 483 163 166 22 ( bit (nil)) NOTE_INSN_VAR_LOCATION)

(insn 166 483 168 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 3 r3 [194])
        (and:SI (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
            (const_int -4 [0xfffffffffffffffc]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 168 166 167 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 1 r1)
        (ashift:SI (reg:SI 1 r1 [193])
            (reg:SI 8 r8 [191]))) 117 {*arm_shiftsi3} (nil))

(insn 167 168 169 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 0 r0)
        (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref:SI ("*.LANCHOR2") [flags 0x182])
        (nil)))

(insn:TI 169 167 171 22 arch/arm/mm/dma-mapping.c:221 (set (reg:SI 2 r2)
        (reg/v:SI 4 r4 [orig:138 size.959 ] [138])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 171 169 173 22 arch/arm/mm/dma-mapping.c:221 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("arm_vmregion_alloc") [flags 0x41] <function_decl 0x11440c00 arm_vmregion_alloc>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(insn:TI 173 171 484 22 arch/arm/mm/dma-mapping.c:223 (parallel [
            (set (reg:CC 24 cc)
                (compare:CC (reg:SI 0 r0)
                    (const_int 0 [0x0])))
            (set (reg/v/f:SI 10 sl [orig:141 c ] [141])
                (reg:SI 0 r0))
        ]) 174 {*movsi_compare0} (expr_list:REG_DEAD (reg:SI 0 r0)
        (nil)))

(note 484 173 485 22 ( p (nil)) NOTE_INSN_VAR_LOCATION)

(note 485 484 174 22 ( c (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:141 c ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 174 485 175 22 arch/arm/mm/dma-mapping.c:223 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 298)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 1500 [0x5dc])
            (nil))))
;; End of basic block 22 -> ( 23 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  23 [85.0%]  (fallthru)
;; Succ edge  31 [15.0%] 

;; Start of basic block ( 22) -> 23
;; bb 23 artificial_defs: { }
;; bb 23 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  use 	 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 10 [sl] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip]
;; live  kill	

;; Pred edge  22 [85.0%]  (fallthru)
(note 175 174 179 23 [bb 23] NOTE_INSN_BASIC_BLOCK)

(note 179 175 180 23 NOTE_INSN_DELETED)

(note 180 179 183 23 NOTE_INSN_DELETED)

(note 183 180 176 23 NOTE_INSN_DELETED)

(insn:TI 176 183 216 23 arch/arm/mm/dma-mapping.c:225 (set (reg:SI 8 r8 [orig:195 <variable>.vm_start ] [195])
        (mem/s/j:SI (plus:SI (reg/v/f:SI 10 sl [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/j:SI (plus:SI (reg/v/f:SI 10 sl [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])
        (nil)))

(insn 216 176 200 23 arch/arm/mm/dma-mapping.c:240 (set (reg/f:SI 12 ip [222])
        (reg/f:SI 6 r6 [218])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(insn:TI 200 216 357 23 arch/arm/mm/dma-mapping.c:234 (set (reg/f:SI 3 r3 [221])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn 357 200 177 23 arch/arm/mm/dma-mapping.c:228 (set (reg/v/f:SI 9 r9 [orig:141 c ] [141])
        (reg/v/f:SI 10 sl [orig:141 c ] [141])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 10 sl [orig:141 c ] [141])
        (nil)))

(insn:TI 177 357 187 23 arch/arm/mm/dma-mapping.c:225 (set (reg:SI 8 r8 [orig:140 D.25379 ] [140])
        (plus:SI (reg:SI 8 r8 [orig:195 <variable>.vm_start ] [195])
            (const_int 16777216 [0x1000000]))) 4 {*arm_addsi3} (nil))

(insn 187 177 181 23 arch/arm/mm/dma-mapping.c:229 (set (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))

(insn:TI 181 187 486 23 arch/arm/mm/dma-mapping.c:226 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (zero_extract:SI (reg:SI 8 r8 [orig:140 D.25379 ] [140])
            (const_int 9 [0x9])
            (const_int 12 [0xc]))) 124 {extzv_t2} (nil))

(note 486 181 487 23 ( gfp (nil)) NOTE_INSN_VAR_LOCATION)

(note 487 486 178 23 ( off (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:144 off ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 178 487 488 23 arch/arm/mm/dma-mapping.c:225 (set (reg/v:SI 8 r8 [orig:143 idx ] [143])
        (lshiftrt:SI (reg:SI 8 r8 [orig:140 D.25379 ] [140])
            (const_int 21 [0x15]))) 117 {*arm_shiftsi3} (nil))

(note 488 178 184 23 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:143 idx ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 184 488 186 23 arch/arm/mm/dma-mapping.c:228 (set (reg/f:SI 6 r6 [200])
        (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (reg/f:SI 6 r6 [218])) [0 consistent_pte S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                    (const_int 4 [0x4]))
                (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
        (nil)))

(insn:TI 186 184 361 23 arch/arm/mm/dma-mapping.c:229 (set (mem/s/f/j:SI (plus:SI (reg/v/f:SI 10 sl [orig:141 c ] [141])
                (const_int 16 [0x10])) [0 <variable>.vm_pages+0 S4 A32])
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))

(insn 361 186 489 23 arch/arm/mm/dma-mapping.c:228 (set (reg/v/f:SI 10 sl [orig:157 page ] [157])
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 5 r5 [orig:157 page ] [157])
        (nil)))

(note 489 361 185 23 ( c (expr_list:REG_DEP_TRUE (reg/v/f:SI 9 r9 [orig:141 c ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 185 489 490 23 arch/arm/mm/dma-mapping.c:228 (set (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
        (plus:SI (mult:SI (reg/v:SI 7 r7 [orig:144 off ] [144])
                (const_int 4 [0x4]))
            (reg/f:SI 6 r6 [200]))) 270 {*arith_shiftsi} (nil))
;; End of basic block 23 -> ( 24)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  24 [100.0%]  (fallthru)

(note 490 185 491 24 ( pte (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 491 490 492 24 ( prot (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 prot+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 492 491 226 24 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 23 27) -> 24
;; bb 24 artificial_defs: { }
;; bb 24 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 6 [r6] 13 [sp]
;; lr  def 	 5 [r5] 24 [cc]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 5 [r5] 24 [cc]
;; live  kill	

;; Pred edge  23 [100.0%]  (fallthru)
;; Pred edge  27 [100.0%]  (dfs_back)
(code_label 226 492 188 24 169 "" [1 uses])

(note 188 226 189 24 [bb 24] NOTE_INSN_BASIC_BLOCK)

(insn:TI 189 188 190 24 arch/arm/mm/dma-mapping.c:232 (set (reg:SI 5 r5 [201])
        (mem:SI (reg/v/f:SI 6 r6 [orig:142 pte ] [142]) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 190 189 191 24 arch/arm/mm/dma-mapping.c:232 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 5 r5 [201])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 191 190 192 24 arch/arm/mm/dma-mapping.c:232 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 198)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 24 -> ( 25 26)
;; lr  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  25 [0.0%]  (fallthru,loop_exit)
;; Succ edge  26 [100.0%] 

;; Start of basic block ( 24) -> 25
;; bb 25 artificial_defs: { }
;; bb 25 artificial_uses: { u-1(13){ }}
;; lr  in  	 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 13 [sp]
;; live  gen 	 0 [r0] 1 [r1]
;; live  kill	 14 [lr]

;; Pred edge  24 [0.0%]  (fallthru,loop_exit)
(note 192 191 194 25 [bb 25] NOTE_INSN_BASIC_BLOCK)

(insn:TI 194 192 195 25 arch/arm/mm/dma-mapping.c:232 discrim 1 (set (reg:SI 0 r0)
        (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (symbol_ref/v/f:SI ("*.LC1") [flags 0x82] <string_cst 0x1152a880>)
        (nil)))

(insn 195 194 196 25 arch/arm/mm/dma-mapping.c:232 discrim 1 (set (reg:SI 1 r1)
        (const_int 232 [0xe8])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 196 195 197 25 arch/arm/mm/dma-mapping.c:232 discrim 1 (parallel [
            (call (mem:SI (symbol_ref:SI ("__bug") [flags 0x41] <function_decl 0x10a67100 __bug>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (expr_list:REG_NORETURN (const_int 0 [0x0])
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))
;; End of basic block 25 -> ()
;; lr  out 	 13 [sp]
;; live  out 	 13 [sp]



(barrier 197 196 198)

;; Start of basic block ( 24) -> 26
;; bb 26 artificial_defs: { }
;; bb 26 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 11 [fp] 12 [ip] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 12 [ip] 14 [lr] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  24 [100.0%] 
(code_label 198 197 199 26 166 "" [1 uses])

(note 199 198 204 26 [bb 26] NOTE_INSN_BASIC_BLOCK)

(note 204 199 205 26 NOTE_INSN_DELETED)

(note 205 204 221 26 NOTE_INSN_DELETED)

(note 221 205 201 26 NOTE_INSN_DELETED)

(insn:TI 201 221 211 26 arch/arm/mm/dma-mapping.c:234 (set (reg/f:SI 1 r1 [orig:205 mem_map ] [205])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [221]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/f/c/i:SI (reg/f:SI 3 r3 [221]) [0 mem_map+0 S4 A32])
        (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
            (nil))))

(insn 211 201 493 26 arch/arm/mm/dma-mapping.c:237 (set (reg/v:SI 7 r7 [orig:144 off ] [144])
        (plus:SI (reg/v:SI 7 r7 [orig:144 off ] [144])
            (const_int 1 [0x1]))) 4 {*arm_addsi3} (nil))

(note 493 211 380 26 ( off (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:144 off ] [144])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 380 493 206 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 14 lr)
        (mem/c/i:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 64 [0x40])) [0 prot+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 206 380 202 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 0 r0)
        (reg/v/f:SI 6 r6 [orig:142 pte ] [142])) 167 {*arm_movsi_insn} (nil))

(insn:TI 202 206 208 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 1 r1 [204])
        (minus:SI (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
            (reg/f:SI 1 r1 [orig:205 mem_map ] [205]))) 28 {*arm_subsi3_insn} (nil))

(insn 208 202 374 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 2 r2)
        (reg:SI 5 r5 [201])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (const_int 0 [0x0])
        (nil)))

(insn:TI 374 208 210 26 arch/arm/mm/dma-mapping.c:234 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])
        (reg:SI 3 r3)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(insn 210 374 494 26 arch/arm/mm/dma-mapping.c:236 (set (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
        (plus:SI (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
            (const_int 4 [0x4]))) 4 {*arm_addsi3} (nil))

(note 494 210 203 26 ( pte (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 203 494 375 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 1 r1 [207])
        (ashiftrt:SI (reg:SI 1 r1 [204])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 1 r1 [204])
            (const_int 32 [0x20]))
        (nil)))

(insn 375 203 207 26 arch/arm/mm/dma-mapping.c:234 (set (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])
        (reg:SI 12 ip)) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip)
        (nil)))

(insn:TI 207 375 209 26 arch/arm/mm/dma-mapping.c:234 (set (reg:SI 1 r1)
        (ior:SI (ashift:SI (reg:SI 1 r1 [207])
                (const_int 12 [0xc]))
            (reg:SI 14 lr))) 270 {*arith_shiftsi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (nil)))

(call_insn:TI 209 207 212 26 arch/arm/mm/dma-mapping.c:234 (parallel [
            (call (mem:SI (symbol_ref:SI ("cpu_v7_set_pte_ext") [flags 0x41] <function_decl 0x10e63d00 cpu_v7_set_pte_ext>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 2 r2)
        (expr_list:REG_DEAD (reg:SI 1 r1)
            (expr_list:REG_DEAD (reg:SI 0 r0)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
        (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
            (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                (nil)))))

(insn 212 209 377 26 arch/arm/mm/dma-mapping.c:238 (set (reg:CC 24 cc)
        (compare:CC (reg/v:SI 7 r7 [orig:144 off ] [144])
            (const_int 512 [0x200]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 377 212 215 26 arch/arm/mm/dma-mapping.c:238 (set (reg:SI 12 ip)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 8 [0x8])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn 215 377 495 26 arch/arm/mm/dma-mapping.c:240 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 8 r8 [orig:143 idx ] [143])
            (plus:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                (const_int 1 [0x1])))) 2268 {neon_vornv2di+1} (nil))

(note 495 215 296 26 ( idx (expr_list:REG_DEP_TRUE (reg/v:SI 8 r8 [orig:143 idx ] [143])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 296 495 376 26 arch/arm/mm/dma-mapping.c:239 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v:SI 7 r7 [orig:144 off ] [144])
            (reg:SI 5 r5 [201]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:SI 5 r5 [201])
        (expr_list:REG_EQUAL (const_int 0 [0x0])
            (nil))))

(insn 376 296 217 26 arch/arm/mm/dma-mapping.c:238 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 12 [0xc])) [0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 217 376 222 26 arch/arm/mm/dma-mapping.c:240 (cond_exec (eq (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/v/f:SI 6 r6 [orig:142 pte ] [142])
            (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                        (const_int 4 [0x4]))
                    (reg/f:SI 12 ip [222])) [0 consistent_pte S4 A32]))) 2345 {neon_vornv2di+78} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_EQUAL (mem/s/f/j:SI (plus:SI (mult:SI (reg/v:SI 8 r8 [orig:143 idx ] [143])
                        (const_int 4 [0x4]))
                    (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) [0 consistent_pte S4 A32])
            (nil))))

(insn 222 217 496 26 arch/arm/mm/dma-mapping.c:242 (parallel [
            (set (reg:CC_NOOV 24 cc)
                (compare:CC_NOOV (plus:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
                        (const_int -4096 [0xfffffffffffff000]))
                    (const_int 0 [0x0])))
            (set (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
                (plus:SI (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
                    (const_int -4096 [0xfffffffffffff000])))
        ]) 6 {*addsi3_compare0} (nil))

(note 496 222 223 26 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:138 size.959 ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn:TI 223 496 497 26 arch/arm/mm/dma-mapping.c:242 (set (pc)
        (if_then_else (eq (reg:CC_NOOV 24 cc)
                (const_int 0 [0x0]))
            (label_ref 229)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC_NOOV 24 cc)
        (expr_list:REG_BR_PROB (const_int 1400 [0x578])
            (nil))))
;; End of basic block 26 -> ( 27 28)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp] 14 [lr]


;; Succ edge  27 [86.0%]  (fallthru)
;; Succ edge  28 [14.0%]  (loop_exit)

(note 497 223 224 27 ( prot (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -4 [0xfffffffffffffffc])) [0 prot+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 26) -> 27
;; bb 27 artificial_defs: { }
;; bb 27 artificial_uses: { u-1(13){ }}
;; lr  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; lr  use 	 11 [fp] 13 [sp]
;; lr  def 	 11 [fp]
;; live  in  	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  gen 	 11 [fp]
;; live  kill	

;; Pred edge  26 [86.0%]  (fallthru)
(note 224 497 225 27 [bb 27] NOTE_INSN_BASIC_BLOCK)

(insn:TI 225 224 424 27 arch/arm/mm/dma-mapping.c:235 (set (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
        (plus:SI (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))

(jump_insn 424 225 425 27 (set (pc)
        (label_ref 226)) -1 (nil))
;; End of basic block 27 -> ( 24)
;; lr  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]
;; live  out 	 3 [r3] 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 12 [ip] 13 [sp]


;; Succ edge  24 [100.0%]  (dfs_back)

(barrier 425 424 498)

(note 498 425 229 28 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 26) -> 28
;; bb 28 artificial_defs: { }
;; bb 28 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 9 [r9] 10 [sl] 13 [sp]
;; lr  def 	 0 [r0] 5 [r5] 10 [sl] 24 [cc]
;; live  in  	 4 [r4] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 5 [r5] 10 [sl] 24 [cc]
;; live  kill	

;; Pred edge  26 [14.0%]  (loop_exit)
(code_label 229 498 230 28 168 "" [1 uses])

(note 230 229 362 28 [bb 28] NOTE_INSN_BASIC_BLOCK)

(insn:TI 362 230 363 28 (set (reg/v/f:SI 5 r5 [orig:157 page ] [157])
        (reg/v/f:SI 10 sl [orig:157 page ] [157])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg/v/f:SI 10 sl [orig:157 page ] [157])
        (nil)))

(insn 363 362 231 28 (set (reg/v/f:SI 10 sl [orig:141 c ] [141])
        (reg/v/f:SI 9 r9 [orig:141 c ] [141])) 167 {*arm_movsi_insn} (nil))

(insn:TI 231 363 232 28 arch/arm/mm/dma-mapping.c:244 (parallel [
            (asm_operands/v ("dsb") ("") 0 []
                 [] 8158962)
            (clobber (mem:BLK (scratch) [0 A8]))
        ]) -1 (nil))

(insn:TI 232 231 499 28 arch/arm/mm/dma-mapping.c:246 (set (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
        (mem/s/j:SI (plus:SI (reg/f:SI 9 r9 [orig:141 c ] [141])
                (const_int 8 [0x8])) [0 <variable>.vm_start+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(note 499 232 233 28 ( addr (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 233 499 234 28 arch/arm/mm/dma-mapping.c:332 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(jump_insn:TI 234 233 500 28 arch/arm/mm/dma-mapping.c:332 (set (pc)
        (if_then_else (eq (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 298)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 767 [0x2ff])
            (nil))))
;; End of basic block 28 -> ( 29 31)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  29 [92.3%]  (fallthru)
;; Succ edge  31 [7.7%] 

(note 500 234 235 29 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:157 page ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 28) -> 29
;; bb 29 artificial_defs: { }
;; bb 29 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 1 [r1] 3 [r3] 5 [r5]
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 1 [r1] 3 [r3] 5 [r5]
;; live  kill	

;; Pred edge  28 [92.3%]  (fallthru)
(note 235 500 236 29 [bb 29] NOTE_INSN_BASIC_BLOCK)

(insn:TI 236 235 381 29 arch/arm/mm/dma-mapping.c:333 (set (reg/f:SI 3 r3 [211])
        (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>)
        (nil)))

(insn:TI 381 236 237 29 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 1 r1)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 20 [0x14])) [0 %sfp+-4 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 237 381 238 29 arch/arm/mm/dma-mapping.c:333 (set (reg/f:SI 3 r3 [orig:213 mem_map ] [213])
        (mem/f/c/i:SI (reg/f:SI 3 r3 [211]) [0 mem_map+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/f/c/i:SI (symbol_ref:SI ("mem_map") [flags 0xc0] <var_decl 0x10c2a9c0 mem_map>) [0 mem_map+0 S4 A32])
        (nil)))

(insn:TI 238 237 501 29 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 5 r5 [212])
        (minus:SI (reg/v/f:SI 5 r5 [orig:157 page ] [157])
            (reg/f:SI 3 r3 [orig:213 mem_map ] [213]))) 28 {*arm_subsi3_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:213 mem_map ] [213])
        (nil)))

(note 501 238 239 29 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 239 501 240 29 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 5 r5 [215])
        (ashiftrt:SI (reg:SI 5 r5 [212])
            (const_int 5 [0x5]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUAL (div:SI (reg:SI 5 r5 [212])
            (const_int 32 [0x20]))
        (nil)))

(insn:TI 240 239 241 29 arch/arm/mm/dma-mapping.c:333 (set (reg:SI 5 r5 [216])
        (ashift:SI (reg:SI 5 r5 [215])
            (const_int 12 [0xc]))) 117 {*arm_shiftsi3} (expr_list:REG_EQUIV (mem:SI (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 20 [0x14])) [0 %sfp+-4 S4 A32]) [0 S4 A32])
        (nil)))

(insn 241 240 426 29 arch/arm/mm/dma-mapping.c:333 (set (mem:SI (reg:SI 1 r1) [0 S4 A32])
        (reg:SI 5 r5 [216])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 1 r1)
        (nil)))

(jump_insn 426 241 427 29 (set (pc)
        (label_ref 257)) -1 (nil))
;; End of basic block 29 -> ( 33)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  33 [100.0%] 

(barrier 427 426 502)

(note 502 427 503 30 ( gfp (expr_list:REG_DEP_TRUE (reg/v:SI 7 r7 [orig:139 gfp.958 ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 503 502 504 30 ( prot (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 prot+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 504 503 505 30 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:157 page ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 505 504 506 30 ( p (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:136 p.961 ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 506 505 251 30 ( c (expr_list:REG_DEP_TRUE (reg/v/f:SI 10 sl [orig:141 c ] [141])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 31) -> 30
;; bb 30 artificial_defs: { }
;; bb 30 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 5 [r5] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 5 [r5]
;; live  kill	 14 [lr]

;; Pred edge  31 [91.0%] 
(code_label 251 506 244 30 170 "" [1 uses])

(note 244 251 245 30 [bb 30] NOTE_INSN_BASIC_BLOCK)

(insn:TI 245 244 507 30 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 0 r0)
        (reg/v/f:SI 5 r5 [orig:157 page ] [157])) 167 {*arm_movsi_insn} (nil))

(note 507 245 293 30 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(insn 293 507 247 30 arch/arm/mm/dma-mapping.c:114 (set (reg:SI 1 r1)
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))

(call_insn:TI 247 293 248 30 arch/arm/mm/dma-mapping.c:114 (parallel [
            (call (mem:SI (symbol_ref:SI ("__free_pages") [flags 0x41] <function_decl 0x10cd6800 __free_pages>) [0 S4 A32])
                (const_int 0 [0x0]))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 254 {*call_symbol} (expr_list:REG_DEAD (reg:SI 1 r1)
        (expr_list:REG_DEAD (reg:SI 0 r0)
            (nil)))
    (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
        (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
            (nil))))

(insn 248 247 508 30 arch/arm/mm/dma-mapping.c:115 (set (reg/v/f:SI 5 r5 [orig:157 page ] [157])
        (plus:SI (reg/v/f:SI 5 r5 [orig:157 page ] [157])
            (const_int 32 [0x20]))) 4 {*arm_addsi3} (nil))
;; End of basic block 30 -> ( 31)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  31 [100.0%]  (fallthru,dfs_back)

(note 508 248 509 31 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:157 page ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 509 508 510 31 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:157 page ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 510 509 298 31 ( addr (expr_list:REG_DEP_TRUE (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 22 28 30 21) -> 31
;; bb 31 artificial_defs: { }
;; bb 31 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 5 [r5] 13 [sp]
;; lr  def 	 3 [r3] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 3 [r3] 24 [cc]
;; live  kill	

;; Pred edge  22 [15.0%] 
;; Pred edge  28 [7.7%] 
;; Pred edge  30 [100.0%]  (fallthru,dfs_back)
;; Pred edge  21 [100.0%] 
(code_label 298 510 290 31 176 "" [3 uses])

(note 290 298 382 31 [bb 31] NOTE_INSN_BASIC_BLOCK)

(insn:TI 382 290 252 31 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (reg:SI 3 r3)
        (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                (const_int 16 [0x10])) [0 %sfp+-8 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 252 382 253 31 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (reg:CC 24 cc)
        (compare:CC (reg/v/f:SI 5 r5 [orig:157 page ] [157])
            (reg:SI 3 r3))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3)
        (nil)))

(jump_insn:TI 253 252 511 31 arch/arm/mm/dma-mapping.c:113 discrim 1 (set (pc)
        (if_then_else (ltu (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref 251)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9100 [0x238c])
            (nil))))
;; End of basic block 31 -> ( 30 32)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  30 [91.0%] 
;; Succ edge  32 [9.0%]  (fallthru,loop_exit)

(note 511 253 254 32 ( order (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:153 order ] [153])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 13 31) -> 32
;; bb 32 artificial_defs: { }
;; bb 32 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 13 [sp]
;; lr  def 	 0 [r0]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0]
;; live  kill	

;; Pred edge  13 [30.2%] 
;; Pred edge  31 [9.0%]  (fallthru,loop_exit)
(code_label 254 511 255 32 160 "" [1 uses])

(note 255 254 256 32 [bb 32] NOTE_INSN_BASIC_BLOCK)

(insn:TI 256 255 512 32 arch/arm/mm/dma-mapping.c:325 (set (reg/v/f:SI 0 r0 [orig:156 addr ] [156])
        (const_int 0 [0x0])) 167 {*arm_movsi_insn} (nil))
;; End of basic block 32 -> ( 33)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  33 [100.0%]  (fallthru)

(note 512 256 513 33 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 5 r5 [orig:152 size ] [152])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 513 512 257 33 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 11 fp [orig:134 page.963 ] [134])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 32 9 29) -> 33
;; bb 33 artificial_defs: { }
;; bb 33 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  gen 	
;; live  kill	

;; Pred edge  32 [100.0%]  (fallthru)
;; Pred edge  9 [100.0%] 
;; Pred edge  29 [100.0%] 
(code_label 257 513 258 33 156 "" [2 uses])

(note 258 257 280 33 [bb 33] NOTE_INSN_BASIC_BLOCK)

(insn 280 258 514 33 arch/arm/mm/dma-mapping.c:338 (use (reg/i:SI 0 r0)) -1 (nil))

(note 514 280 388 33 ( addr (nil)) NOTE_INSN_VAR_LOCATION)

(note 388 514 389 33 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 389 388 390 33 arch/arm/mm/dma-mapping.c:338 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 33 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp] 14 [lr]


;; Succ edge  EXIT [100.0%] 

(barrier 390 389 515)

(note 515 390 516 34 ( pte (nil)) NOTE_INSN_VAR_LOCATION)

(note 516 515 517 34 ( prot (expr_list:REG_DEP_TRUE (mem/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int 4 [0x4])) [0 prot+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 517 516 518 34 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(note 518 517 519 34 ( order (nil)) NOTE_INSN_VAR_LOCATION)

(note 519 518 520 34 ( idx (nil)) NOTE_INSN_VAR_LOCATION)

(note 520 519 521 34 ( off (nil)) NOTE_INSN_VAR_LOCATION)

(note 521 520 522 34 ( page (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:157 page ] [157])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 522 521 523 34 ( ptr (expr_list:REG_DEP_TRUE (reg/v/f:SI 6 r6 [orig:150 ptr ] [150])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 523 522 262 34 ( c (nil)) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 19 20) -> 34
;; bb 34 artificial_defs: { }
;; bb 34 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; lr  use 	 13 [sp]
;; lr  def 	 3 [r3] 6 [r6] 24 [cc]
;; live  in  	 4 [r4] 5 [r5] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  gen 	 3 [r3] 6 [r6] 24 [cc]
;; live  kill	

;; Pred edge  19 [30.2%] 
;; Pred edge  20 [100.0%] 
(code_label 262 523 263 34 164 "" [2 uses])

(note 263 262 265 34 [bb 34] NOTE_INSN_BASIC_BLOCK)

(insn:TI 265 263 524 34 arch/arm/mm/dma-mapping.c:201 (set (reg/f:SI 6 r6 [218])
        (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("*.LANCHOR1") [flags 0x182])
        (nil)))

(note 524 265 266 34 ( ptr (nil)) NOTE_INSN_VAR_LOCATION)

(insn:TI 266 524 267 34 arch/arm/mm/dma-mapping.c:201 (set (reg/f:SI 3 r3 [orig:219 consistent_pte ] [219])
        (mem/s/f/j:SI (reg/f:SI 6 r6 [218]) [0 consistent_pte+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (mem/s/f/j:SI (reg/f:SI 6 r6 [218]) [0 consistent_pte+0 S4 A32])
        (expr_list:REG_EQUAL (mem/s/f/j:SI (symbol_ref:SI ("*.LANCHOR1") [flags 0x182]) [0 consistent_pte+0 S4 A32])
            (nil))))

(insn:TI 267 266 268 34 arch/arm/mm/dma-mapping.c:201 (set (reg:CC 24 cc)
        (compare:CC (reg/f:SI 3 r3 [orig:219 consistent_pte ] [219])
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (expr_list:REG_DEAD (reg/f:SI 3 r3 [orig:219 consistent_pte ] [219])
        (nil)))

(jump_insn:TI 268 267 428 34 arch/arm/mm/dma-mapping.c:201 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 315)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 9996 [0x270c])
            (nil))))
;; End of basic block 34 -> ( 35 22)
;; lr  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]
;; live  out 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 8 [r8] 9 [r9] 10 [sl] 11 [fp] 13 [sp]


;; Succ edge  35 [0.0%]  (fallthru)
;; Succ edge  22 [100.0%] 

;; Start of basic block ( 34) -> 35
;; bb 35 artificial_defs: { }
;; bb 35 artificial_uses: { u-1(13){ }}

;; Pred edge  34 [0.0%]  (fallthru)
(note 428 268 430 35 [bb 35] NOTE_INSN_BASIC_BLOCK)

(jump_insn 430 428 431 35 (set (pc)
        (label_ref 429)) -1 (nil))
;; End of basic block 35 -> ( 21)


;; Succ edge  21 [100.0%] 

(barrier 431 430 373)

(note 373 431 0 NOTE_INSN_DELETED)


;; Function dma_alloc_writecombine (dma_alloc_writecombine)[0:1279]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: size+0
Reg 2: handle+0
Reg 3: gfp+0
Variables:
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg:SI 1 r1 [ size ])
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])
  name: gfp
    offset 0
      (reg:SI 3 r3 [ gfp ])

OUT:
Stack adjustment: 16


3 basic blocks, 2 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


Basic block 1 , prev 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  2 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_alloc_writecombine

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 12[ip] 13[sp] 14[lr]
;;  ref usage 	r0={2d,4u} r1={2d,2u} r2={2d,2u} r3={2d,1u} r12={5d,4u} r13={2d,5u,1d} r14={2d,2u} r15={1d} r16={1d} r17={1d} r18={1d} r19={1d} r20={1d} r21={1d} r22={1d} r23={1d} r24={1d} r27={1d} r28={1d} r29={1d} r30={1d} r31={1d} r32={1d} r33={1d} r34={1d} r35={1d} r36={1d} r37={1d} r38={1d} r39={1d} r40={1d} r41={1d} r42={1d} r43={1d} r44={1d} r45={1d} r46={1d} r47={1d} r48={1d} r49={1d} r50={1d} r51={1d} r52={1d} r53={1d} r54={1d} r55={1d} r56={1d} r57={1d} r58={1d} r59={1d} r60={1d} r61={1d} r62={1d} r63={1d} r64={1d} r65={1d} r66={1d} r67={1d} r68={1d} r69={1d} r70={1d} r71={1d} r72={1d} r73={1d} r74={1d} r75={1d} r76={1d} r77={1d} r78={1d} r79={1d} r80={1d} r81={1d} r82={1d} r83={1d} r84={1d} r85={1d} r86={1d} r87={1d} r88={1d} r89={1d} r90={1d} r91={1d} r92={1d} r93={1d} r94={1d} r95={1d} r96={1d} r97={1d} r98={1d} r99={1d} r100={1d} r101={1d} r102={1d} r103={1d} r104={1d} r105={1d} r106={1d} r107={1d} r108={1d} r109={1d} r110={1d} r111={1d} r112={1d} r113={1d} r114={1d} r115={1d} r116={1d} r117={1d} r118={1d} r119={1d} r120={1d} r121={1d} r122={1d} r123={1d} r124={1d} r125={1d} r126={1d} r127={1d} 
;;    total ref usage 149{128d,20u,1e} in 9{8 regular + 1 call} insns.
(note 1 0 41 NOTE_INSN_DELETED)

(note 41 1 42 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 42 41 43 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 43 42 44 2 ( handle (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ handle ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 44 43 7 2 ( gfp (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ gfp ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 12 [ip] 13 [sp]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 44 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(insn:TI 9 6 36 2 arch/arm/mm/dma-mapping.c:364 (set (reg/f:SI 12 ip [139])
        (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)
        (nil)))

(insn/f:TI 36 9 47 2 arch/arm/mm/dma-mapping.c:363 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 0 r0)
                    ] 2))
            (use (reg:SI 1 r1))
            (use (reg:SI 2 r2))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                    (set/f (reg/f:SI 13 sp)
                        (plus:SI (reg/f:SI 13 sp)
                            (const_int -16 [0xfffffffffffffff0])))
                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                        (reg:SI 0 r0))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 4 [0x4])) [0 S4 A32])
                        (reg:SI 1 r1))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 8 [0x8])) [0 S4 A32])
                        (reg:SI 2 r2))
                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                (const_int 12 [0xc])) [0 S4 A32])
                        (reg:SI 14 lr))
                ])
            (nil))))

(note 47 36 46 2 ( dev (nil)) NOTE_INSN_VAR_LOCATION)

(note 46 47 45 2 ( size (nil)) NOTE_INSN_VAR_LOCATION)

(note 45 46 37 2 ( handle (nil)) NOTE_INSN_VAR_LOCATION)

(note 37 45 10 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 10 37 11 2 arch/arm/mm/dma-mapping.c:364 (set (reg:SI 12 ip [orig:141 pgprot_kernel ] [141])
        (mem/c/i:SI (reg/f:SI 12 ip [139]) [0 pgprot_kernel+0 S4 A32])) 167 {*arm_movsi_insn} (nil))

(insn:TI 11 10 12 2 arch/arm/mm/dma-mapping.c:364 (set (reg:SI 12 ip [140])
        (and:SI (reg:SI 12 ip [orig:141 pgprot_kernel ] [141])
            (const_int -61 [0xffffffffffffffc3]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 12 11 13 2 arch/arm/mm/dma-mapping.c:364 (set (reg:SI 12 ip [142])
        (ior:SI (reg:SI 12 ip [140])
            (const_int 4 [0x4]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (nil)))

(insn 13 12 18 2 arch/arm/mm/dma-mapping.c:364 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [142])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [142])
        (nil)))

(call_insn:TI 18 13 48 2 arch/arm/mm/dma-mapping.c:364 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__dma_alloc") [flags 0x3] <function_decl 0x1145e100 __dma_alloc>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 48 18 30 2 ( gfp (nil)) NOTE_INSN_VAR_LOCATION)

(insn 30 48 38 2 arch/arm/mm/dma-mapping.c:366 (use (reg/i:SI 0 r0)) -1 (nil))

(note 38 30 39 2 NOTE_INSN_EPILOGUE_BEG)

(jump_insn 39 38 40 2 arch/arm/mm/dma-mapping.c:366 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 2 -> ( 1)
;; lr  out 	 0 [r0] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 40 39 34)

(note 34 40 35 NOTE_INSN_DELETED)

(note 35 34 0 NOTE_INSN_DELETED)


;; Function dma_alloc_coherent (dma_alloc_coherent)[0:1278]


Basic block 2:
IN:
Stack adjustment: 0
Reg 0: dev+0
Reg 1: size+0
Reg 2: handle+0
Reg 3: gfp+0
Variables:
  name: gfp
    offset 0
      (reg:SI 3 r3 [ gfp ])
  name: dev
    offset 0
      (reg:SI 0 r0 [ dev ])
  name: size
    offset 0
      (reg:SI 1 r1 [ size ])
  name: handle
    offset 0
      (reg:SI 2 r2 [ handle ])

OUT:
Stack adjustment: 40
Reg 4: gfp+0
Reg 5: handle+0
Reg 6: size+0
Reg 7: dev+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 4 r4 [orig:139 gfp ] [139])
  name: memory
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -32 [0xffffffffffffffe0])) [0 memory+0 S4 A32])
  name: dev
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 dev ] [136])
  name: size
    offset 0
      (reg/v:SI 6 r6 [orig:137 size ] [137])
  name: handle
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 handle ] [138])


Basic block 3:
IN:
Stack adjustment: 40
Reg 4: gfp+0
Reg 5: handle+0
Reg 6: size+0
Reg 7: dev+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 4 r4 [orig:139 gfp ] [139])
  name: memory
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -32 [0xffffffffffffffe0])) [0 memory+0 S4 A32])
  name: dev
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 dev ] [136])
  name: size
    offset 0
      (reg/v:SI 6 r6 [orig:137 size ] [137])
  name: handle
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 handle ] [138])

OUT:
Stack adjustment: 40
Reg 4: gfp+0
Reg 5: handle+0
Reg 6: size+0
Reg 7: dev+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 4 r4 [orig:139 gfp ] [139])
  name: memory
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -32 [0xffffffffffffffe0])) [0 memory+0 S4 A32])
  name: dev
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 dev ] [136])
  name: size
    offset 0
      (reg/v:SI 6 r6 [orig:137 size ] [137])
  name: handle
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 handle ] [138])


Basic block 4:
IN:
Stack adjustment: 40
Reg 4: gfp+0
Reg 5: handle+0
Reg 6: size+0
Reg 7: dev+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 4 r4 [orig:139 gfp ] [139])
  name: memory
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -32 [0xffffffffffffffe0])) [0 memory+0 S4 A32])
  name: dev
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 dev ] [136])
  name: size
    offset 0
      (reg/v:SI 6 r6 [orig:137 size ] [137])
  name: handle
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 handle ] [138])

OUT:
Stack adjustment: 40
Reg 4: gfp+0
Reg 5: handle+0
Reg 6: size+0
Reg 7: dev+0
Variables:
  name: gfp
    offset 0
      (reg/v:SI 4 r4 [orig:139 gfp ] [139])
  name: memory
    offset 0
      (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
        (const_int -32 [0xffffffffffffffe0])) [0 memory+0 S4 A32])
  name: dev
    offset 0
      (reg/v/f:SI 7 r7 [orig:136 dev ] [136])
  name: size
    offset 0
      (reg/v:SI 6 r6 [orig:137 size ] [137])
  name: handle
    offset 0
      (reg/v/f:SI 5 r5 [orig:138 handle ] [138])


5 basic blocks, 5 edges.

Basic block 0 , next 2, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors: 
;; bb 0 artificial_defs: { d-1(0){ }d-1(1){ }d-1(2){ }d-1(3){ }d-1(4){ }d-1(5){ }d-1(6){ }d-1(7){ }d-1(13){ }d-1(14){ }}
;; bb 0 artificial_uses: { }
;; lr  in  	
;; lr  use 	
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  in  	
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  kill	

Successors:  2 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]


Basic block 2 , prev 0, next 3, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  ENTRY [100.0%]  (fallthru)
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

Successors:  3 [39.0%]  (fallthru) 4 [61.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 3 , prev 2, next 4, loop_depth 0, count 0, freq 3898, maybe hot.
Predecessors:  2 [39.0%]  (fallthru)
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	 14 [lr]

Successors:  4 [100.0%]  (fallthru)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 4 , prev 3, next 1, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  3 [100.0%]  (fallthru) 2 [61.0%] 
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

Successors:  EXIT [100.0%] 
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


Basic block 1 , prev 4, loop_depth 0, count 0, freq 10000, maybe hot.
Predecessors:  4 [100.0%] 
;; bb 1 artificial_defs: { }
;; bb 1 artificial_uses: { u-1(0){ }u-1(4){ }u-1(5){ }u-1(6){ }u-1(7){ }u-1(13){ }u-1(14){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

Successors: 
;; lr  out 	
;; live  out 	




dma_alloc_coherent

Dataflow summary:
;;  invalidated by call 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;;  hardware regs used 	 13 [sp]
;;  regular block artificial uses 	 13 [sp]
;;  eh block artificial uses 	 13 [sp] 26 [afp]
;;  entry block defs 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  exit block uses 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;;  regs ever live 	 0[r0] 1[r1] 2[r2] 3[r3] 4[r4] 5[r5] 6[r6] 7[r7] 12[ip] 13[sp] 14[lr] 24[cc]
;;  ref usage 	r0={5d,7u} r1={4d,3u} r2={4d,3u} r3={5d,3u} r4={2d,3u} r5={2d,3u} r6={2d,3u} r7={2d,3u} r12={6d,4u} r13={3d,12u,1d} r14={3d,2u} r15={2d} r16={2d} r17={2d} r18={2d} r19={2d} r20={2d} r21={2d} r22={2d} r23={2d} r24={3d,2u} r27={2d} r28={2d} r29={2d} r30={2d} r31={2d} r32={2d} r33={2d} r34={2d} r35={2d} r36={2d} r37={2d} r38={2d} r39={2d} r40={2d} r41={2d} r42={2d} r43={2d} r44={2d} r45={2d} r46={2d} r47={2d} r48={2d} r49={2d} r50={2d} r51={2d} r52={2d} r53={2d} r54={2d} r55={2d} r56={2d} r57={2d} r58={2d} r59={2d} r60={2d} r61={2d} r62={2d} r63={2d} r64={2d} r65={2d} r66={2d} r67={2d} r68={2d} r69={2d} r70={2d} r71={2d} r72={2d} r73={2d} r74={2d} r75={2d} r76={2d} r77={2d} r78={2d} r79={2d} r80={2d} r81={2d} r82={2d} r83={2d} r84={2d} r85={2d} r86={2d} r87={2d} r88={2d} r89={2d} r90={2d} r91={2d} r92={2d} r93={2d} r94={2d} r95={2d} r96={2d} r97={2d} r98={2d} r99={2d} r100={2d} r101={2d} r102={2d} r103={2d} r104={2d} r105={2d} r106={2d} r107={2d} r108={2d} r109={2d} r110={2d} r111={2d} r112={2d} r113={2d} r114={2d} r115={2d} r116={2d} r117={2d} r118={2d} r119={2d} r120={2d} r121={2d} r122={2d} r123={2d} r124={2d} r125={2d} r126={2d} r127={2d} 
;;    total ref usage 310{261d,48u,1e} in 23{21 regular + 2 call} insns.
(note 1 0 62 NOTE_INSN_DELETED)

(note 62 1 63 2 ( dev (expr_list:REG_DEP_TRUE (reg:SI 0 r0 [ dev ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 63 62 64 2 ( size (expr_list:REG_DEP_TRUE (reg:SI 1 r1 [ size ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 64 63 65 2 ( handle (expr_list:REG_DEP_TRUE (reg:SI 2 r2 [ handle ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 65 64 7 2 ( gfp (expr_list:REG_DEP_TRUE (reg:SI 3 r3 [ gfp ])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

;; Start of basic block ( 0) -> 2
;; bb 2 artificial_defs: { }
;; bb 2 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 12 [ip] 13 [sp] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  gen 	 0 [r0] 3 [r3] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 24 [cc]
;; live  kill	 14 [lr]

;; Pred edge  ENTRY [100.0%]  (fallthru)
(note 7 65 6 2 [bb 2] NOTE_INSN_BASIC_BLOCK)

(note 6 7 9 2 NOTE_INSN_FUNCTION_BEG)

(note 9 6 15 2 NOTE_INSN_DELETED)

(note 15 9 56 2 NOTE_INSN_DELETED)

(insn/f:TI 56 15 57 2 arch/arm/mm/dma-mapping.c:346 (parallel [
            (set (mem/c:BLK (pre_dec:BLK (reg/f:SI 13 sp)) [0 A8])
                (unspec:BLK [
                        (reg:SI 4 r4)
                    ] 2))
            (use (reg:SI 5 r5))
            (use (reg:SI 6 r6))
            (use (reg:SI 7 r7))
            (use (reg:SI 14 lr))
        ]) 327 {*push_multi} (expr_list:REG_DEAD (reg:SI 14 lr)
        (expr_list:REG_DEAD (reg:SI 7 r7)
            (expr_list:REG_DEAD (reg:SI 6 r6)
                (expr_list:REG_DEAD (reg:SI 5 r5)
                    (expr_list:REG_DEAD (reg:SI 4 r4)
                        (expr_list:REG_FRAME_RELATED_EXPR (sequence [
                                    (set/f (reg/f:SI 13 sp)
                                        (plus:SI (reg/f:SI 13 sp)
                                            (const_int -20 [0xffffffffffffffec])))
                                    (set/f (mem/c:SI (reg/f:SI 13 sp) [0 S4 A32])
                                        (reg:SI 4 r4))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 4 [0x4])) [0 S4 A32])
                                        (reg:SI 5 r5))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 8 [0x8])) [0 S4 A32])
                                        (reg:SI 6 r6))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 12 [0xc])) [0 S4 A32])
                                        (reg:SI 7 r7))
                                    (set/f (mem/c:SI (plus:SI (reg/f:SI 13 sp)
                                                (const_int 16 [0x10])) [0 S4 A32])
                                        (reg:SI 14 lr))
                                ])
                            (nil))))))))

(insn/f:TI 57 56 58 2 arch/arm/mm/dma-mapping.c:346 (set (reg/f:SI 13 sp)
        (plus:SI (reg/f:SI 13 sp)
            (const_int -20 [0xffffffffffffffec]))) 4 {*arm_addsi3} (nil))

(note 58 57 5 2 NOTE_INSN_PROLOGUE_END)

(insn:TI 5 58 13 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v:SI 4 r4 [orig:139 gfp ] [139])
        (reg:SI 3 r3 [ gfp ])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 3 r3 [ gfp ])
        (nil)))

(insn 13 5 66 2 arch/arm/mm/dma-mapping.c:349 (set (reg:SI 3 r3)
        (plus:SI (reg/f:SI 13 sp)
            (const_int 12 [0xc]))) 4 {*arm_addsi3} (nil))

(note 66 13 2 2 ( gfp (expr_list:REG_DEP_TRUE (reg/v:SI 4 r4 [orig:139 gfp ] [139])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 2 66 3 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v/f:SI 7 r7 [orig:136 dev ] [136])
        (reg:SI 0 r0 [ dev ])) 167 {*arm_movsi_insn} (nil))

(insn 3 2 4 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v:SI 6 r6 [orig:137 size ] [137])
        (reg:SI 1 r1 [ size ])) 167 {*arm_movsi_insn} (nil))

(insn:TI 4 3 14 2 arch/arm/mm/dma-mapping.c:346 (set (reg/v/f:SI 5 r5 [orig:138 handle ] [138])
        (reg:SI 2 r2 [ handle ])) 167 {*arm_movsi_insn} (nil))

(call_insn 14 4 69 2 arch/arm/mm/dma-mapping.c:349 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("dma_alloc_from_coherent") [flags 0x41] <function_decl 0x11060380 dma_alloc_from_coherent>) [0 S4 A32])
                    (const_int 0 [0x0])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (nil))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))

(note 69 14 68 2 ( handle (expr_list:REG_DEP_TRUE (reg/v/f:SI 5 r5 [orig:138 handle ] [138])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 68 69 67 2 ( size (expr_list:REG_DEP_TRUE (reg/v:SI 6 r6 [orig:137 size ] [137])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(note 67 68 16 2 ( dev (expr_list:REG_DEP_TRUE (reg/v/f:SI 7 r7 [orig:136 dev ] [136])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(insn:TI 16 67 19 2 arch/arm/mm/dma-mapping.c:349 (set (reg:CC 24 cc)
        (compare:CC (reg:SI 0 r0)
            (const_int 0 [0x0]))) 219 {*arm_cmpsi_insn} (nil))

(insn:TI 19 16 70 2 arch/arm/mm/dma-mapping.c:350 (cond_exec (ne (reg:CC 24 cc)
            (const_int 0 [0x0]))
        (set (reg/f:SI 0 r0 [orig:133 D.24543 ] [133])
            (mem/f/c/i:SI (plus:SI (reg/f:SI 13 sp)
                    (const_int 12 [0xc])) [0 memory+0 S4 A32]))) 2345 {neon_vornv2di+78} (nil))

(note 70 19 17 2 ( memory (expr_list:REG_DEP_TRUE (mem/f/c/i:SI (plus:SI (reg/f:SI 26 afp)
            (const_int -32 [0xffffffffffffffe0])) [0 memory+0 S4 A32])
    (const_int 0 [0x0]))) NOTE_INSN_VAR_LOCATION)

(jump_insn 17 70 23 2 arch/arm/mm/dma-mapping.c:349 (set (pc)
        (if_then_else (ne (reg:CC 24 cc)
                (const_int 0 [0x0]))
            (label_ref:SI 35)
            (pc))) 229 {*arm_cond_branch} (expr_list:REG_DEAD (reg:CC 24 cc)
        (expr_list:REG_BR_PROB (const_int 6102 [0x17d6])
            (nil))))
;; End of basic block 2 -> ( 3 4)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  3 [39.0%]  (fallthru)
;; Succ edge  4 [61.0%] 

;; Start of basic block ( 2) -> 3
;; bb 3 artificial_defs: { }
;; bb 3 artificial_uses: { u-1(13){ }}
;; lr  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  use 	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; lr  def 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip] 14 [lr] 15 [pc] 16 [f0] 17 [f1] 18 [f2] 19 [f3] 20 [f4] 21 [f5] 22 [f6] 23 [f7] 24 [cc] 27 [mv0] 28 [mv1] 29 [mv2] 30 [mv3] 31 [mv4] 32 [mv5] 33 [mv6] 34 [mv7] 35 [mv8] 36 [mv9] 37 [mv10] 38 [mv11] 39 [mv12] 40 [mv13] 41 [mv14] 42 [mv15] 43 [wcgr0] 44 [wcgr1] 45 [wcgr2] 46 [wcgr3] 47 [wr0] 48 [wr1] 49 [wr2] 50 [wr3] 51 [wr4] 52 [wr5] 53 [wr6] 54 [wr7] 55 [wr8] 56 [wr9] 57 [wr10] 58 [wr11] 59 [wr12] 60 [wr13] 61 [wr14] 62 [wr15] 63 [s0] 64 [s1] 65 [s2] 66 [s3] 67 [s4] 68 [s5] 69 [s6] 70 [s7] 71 [s8] 72 [s9] 73 [s10] 74 [s11] 75 [s12] 76 [s13] 77 [s14] 78 [s15] 79 [s16] 80 [s17] 81 [s18] 82 [s19] 83 [s20] 84 [s21] 85 [s22] 86 [s23] 87 [s24] 88 [s25] 89 [s26] 90 [s27] 91 [s28] 92 [s29] 93 [s30] 94 [s31] 95 [d16] 96 [?16] 97 [d17] 98 [?17] 99 [d18] 100 [?18] 101 [d19] 102 [?19] 103 [d20] 104 [?20] 105 [d21] 106 [?21] 107 [d22] 108 [?22] 109 [d23] 110 [?23] 111 [d24] 112 [?24] 113 [d25] 114 [?25] 115 [d26] 116 [?26] 117 [d27] 118 [?27] 119 [d28] 120 [?28] 121 [d29] 122 [?29] 123 [d30] 124 [?30] 125 [d31] 126 [?31] 127 [vfpcc]
;; live  in  	 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	 0 [r0] 1 [r1] 2 [r2] 3 [r3] 12 [ip]
;; live  kill	 14 [lr]

;; Pred edge  2 [39.0%]  (fallthru)
(note 23 17 54 3 [bb 3] NOTE_INSN_BASIC_BLOCK)

(insn:TI 54 23 29 3 arch/arm/mm/dma-mapping.c:352 (set (reg/f:SI 12 ip [141])
        (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)) 167 {*arm_movsi_insn} (expr_list:REG_EQUIV (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>)
        (nil)))

(insn 29 54 30 3 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 0 r0)
        (reg/v/f:SI 7 r7 [orig:136 dev ] [136])) 167 {*arm_movsi_insn} (nil))

(insn:TI 30 29 31 3 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 1 r1)
        (reg/v:SI 6 r6 [orig:137 size ] [137])) 167 {*arm_movsi_insn} (nil))

(insn 31 30 32 3 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 2 r2)
        (reg/v/f:SI 5 r5 [orig:138 handle ] [138])) 167 {*arm_movsi_insn} (nil))

(insn:TI 32 31 25 3 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 3 r3)
        (reg/v:SI 4 r4 [orig:139 gfp ] [139])) 167 {*arm_movsi_insn} (nil))

(insn:TI 25 32 26 3 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 12 ip [orig:143 pgprot_kernel ] [143])
        (mem/c/i:SI (reg/f:SI 12 ip [141]) [0 pgprot_kernel+0 S4 A32])) 167 {*arm_movsi_insn} (expr_list:REG_EQUAL (mem/c/i:SI (symbol_ref:SI ("pgprot_kernel") [flags 0xc0] <var_decl 0x10e730c0 pgprot_kernel>) [0 pgprot_kernel+0 S4 A32])
        (nil)))

(insn:TI 26 25 27 3 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 12 ip [142])
        (and:SI (reg:SI 12 ip [orig:143 pgprot_kernel ] [143])
            (const_int -573 [0xfffffffffffffdc3]))) 67 {*arm_andsi3_insn} (nil))

(insn:TI 27 26 28 3 arch/arm/mm/dma-mapping.c:352 (set (reg:SI 12 ip [144])
        (ior:SI (reg:SI 12 ip [142])
            (const_int 516 [0x204]))) 89 {*arm_iorsi3} (expr_list:REG_EQUIV (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (nil)))

(insn 28 27 33 3 arch/arm/mm/dma-mapping.c:352 (set (mem:SI (reg/f:SI 13 sp) [0 S4 A32])
        (reg:SI 12 ip [144])) 167 {*arm_movsi_insn} (expr_list:REG_DEAD (reg:SI 12 ip [144])
        (nil)))

(call_insn:TI 33 28 35 3 arch/arm/mm/dma-mapping.c:352 (parallel [
            (set (reg:SI 0 r0)
                (call (mem:SI (symbol_ref:SI ("__dma_alloc") [flags 0x3] <function_decl 0x1145e100 __dma_alloc>) [0 S4 A32])
                    (const_int 8 [0x8])))
            (use (const_int 0 [0x0]))
            (clobber (reg:SI 14 lr))
        ]) 255 {*call_value_symbol} (expr_list:REG_DEAD (reg:SI 3 r3)
        (expr_list:REG_DEAD (reg:SI 2 r2)
            (expr_list:REG_DEAD (reg:SI 1 r1)
                (expr_list:REG_EH_REGION (const_int 0 [0x0])
                    (nil)))))
    (expr_list:REG_DEP_TRUE (use (reg:SI 3 r3))
        (expr_list:REG_DEP_TRUE (use (reg:SI 2 r2))
            (expr_list:REG_DEP_TRUE (use (reg:SI 1 r1))
                (expr_list:REG_DEP_TRUE (use (reg:SI 0 r0))
                    (nil))))))
;; End of basic block 3 -> ( 4)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  4 [100.0%]  (fallthru)

;; Start of basic block ( 3 2) -> 4
;; bb 4 artificial_defs: { }
;; bb 4 artificial_uses: { u-1(13){ }}
;; lr  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; lr  use 	 0 [r0] 13 [sp]
;; lr  def 	
;; live  in  	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]
;; live  gen 	
;; live  kill	

;; Pred edge  3 [100.0%]  (fallthru)
;; Pred edge  2 [61.0%] 
(code_label 35 33 36 4 191 "" [1 uses])

(note 36 35 47 4 [bb 4] NOTE_INSN_BASIC_BLOCK)

(insn 47 36 59 4 arch/arm/mm/dma-mapping.c:354 (use (reg/i:SI 0 r0)) -1 (nil))

(note 59 47 60 4 NOTE_INSN_EPILOGUE_BEG)

(jump_insn:TI 60 59 61 4 arch/arm/mm/dma-mapping.c:354 (unspec_volatile [
            (return)
        ] 1) 323 {*epilogue_insns} (nil))
;; End of basic block 4 -> ( 1)
;; lr  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp] 14 [lr]
;; live  out 	 0 [r0] 4 [r4] 5 [r5] 6 [r6] 7 [r7] 13 [sp]


;; Succ edge  EXIT [100.0%] 

(barrier 61 60 53)

(note 53 61 55 NOTE_INSN_DELETED)

(note 55 53 0 NOTE_INSN_DELETED)

